
Number_2ENatural_2Enatural : sttfa.type.


def type_0 : sttfa.type := Number_2ENatural_2Enatural.


def type_1 : sttfa.type := sttfa.arrow type_0 sttfa.bool.


Data_2EBool_2E_21 : sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p x)).


def term_0 :
  sttfa.etap (sttfa.p (sttfa.arrow type_1 sttfa.bool))
  :=
  Data_2EBool_2E_21 (sttfa.arrow type_1 sttfa.bool).


def type_2 : sttfa.type := sttfa.arrow type_0 (sttfa.arrow type_0 type_0).


natural_2Dadd_2Dsub_2Ddef_2D1_2E11 :
  sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p x)).


def Number_2ENatural_2E_2D :
  sttfa.etap (sttfa.p type_2)
  :=
  natural_2Dadd_2Dsub_2Ddef_2D1_2E11 type_2.


Number_2ENatural_2E_2B :
  sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p x)).


def term_1 :
  sttfa.etap (sttfa.p (sttfa.arrow type_0 type_0))
  :=
  m_1:(sttfa.etap (sttfa.p type_0)) => m_1.


def term_2 :
  sttfa.etap (sttfa.p (sttfa.arrow type_0 type_0))
  :=
  n_1:(sttfa.etap (sttfa.p type_0)) => n_1.


def term_3 :
  sttfa.etap (sttfa.p sttfa.bool)
  :=
  term_0 (m_1:(sttfa.etap (sttfa.p type_0)) =>
          term_0 (n_2:(sttfa.etap (sttfa.p type_0)) =>
                  leibniz.eq type_0 (Number_2ENatural_2E_2D (Number_2ENatural_2E_2B type_2 (
                                                               term_1 m_1) (
                                                               term_2 n_2)) (
                                       term_2 n_2)) (term_1 m_1))).


thm_0 : sttfa.eps term_3.



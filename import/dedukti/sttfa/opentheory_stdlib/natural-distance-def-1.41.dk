
Number_2ENatural_2Enatural : sttfa.type.


def type_0 : sttfa.type := Number_2ENatural_2Enatural.


def type_1 : sttfa.type := sttfa.bool.


def type_2 : sttfa.type := sttfa.arrow type_0 type_1.


Data_2EBool_2E_21 : sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p x)).


def term_0 :
  sttfa.etap (sttfa.p (sttfa.arrow type_2 type_1))
  :=
  Data_2EBool_2E_21 (sttfa.arrow type_2 type_1).


def type_3 : sttfa.type := sttfa.arrow type_0 type_2.


def type_4 : sttfa.type := sttfa.arrow type_0 (sttfa.arrow type_0 type_0).


natural_2Ddistance_2Ddef_2D1_2E41 :
  sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p x)).


def Number_2ENatural_2Edistance :
  sttfa.etap (sttfa.p type_4)
  :=
  natural_2Ddistance_2Ddef_2D1_2E41 type_4.


def term_1 :
  sttfa.etap (sttfa.p (sttfa.arrow type_0 type_0))
  :=
  m_1:(sttfa.etap (sttfa.p type_0)) => m_1.


def term_2 :
  sttfa.etap (sttfa.p (sttfa.arrow type_0 type_0))
  :=
  n_1:(sttfa.etap (sttfa.p type_0)) => n_1.


Data_2EBool_2Econd : sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p x)).


Number_2ENatural_2E_3C_3D :
  sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p x)).


Number_2ENatural_2E_2D :
  sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p x)).


def term_3 : sttfa.etap (sttfa.p type_4) := Number_2ENatural_2E_2D type_4.


def term_4 :
  sttfa.etap (sttfa.p type_1)
  :=
  term_0 (m_1:(sttfa.etap (sttfa.p type_0)) =>
          term_0 (n_2:(sttfa.etap (sttfa.p type_0)) =>
                  leibniz.eq type_0 (Number_2ENatural_2Edistance (term_1 m_1) (
                                       term_2 n_2)) (Data_2EBool_2Econd (
                                                       sttfa.arrow type_1 type_4) (
                                                       Number_2ENatural_2E_3C_3D type_3 (
                                                         term_1 m_1) (
                                                         term_2 n_2)) (
                                                       term_3 (term_2 n_2) (
                                                         term_1 m_1)) (
                                                       term_3 (term_1 m_1) (
                                                         term_2 n_2))))).


thm_0 : sttfa.eps term_4.



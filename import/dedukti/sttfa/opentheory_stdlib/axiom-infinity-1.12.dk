
def type_0 : sttfa.type := sttfa_hol_axioms.ind.


def type_1 : sttfa.type := sttfa.arrow type_0 type_0.


def type_2 : sttfa.type := sttfa.bool.


def type_3 : sttfa.type := sttfa.arrow type_1 type_2.


Data_2EBool_2E_3F : sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p x)).


def type_4 : sttfa.type := sttfa.arrow type_2 type_2.


Data_2EBool_2E_2F_5C :
  sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p x)).


Function_2Einjective :
  sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p x)).


def term_0 :
  sttfa.etap (sttfa.p (sttfa.arrow type_1 type_1))
  :=
  f_1:(sttfa.etap (sttfa.p type_1)) => f_1.


Data_2EBool_2E_7E : sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p x)).


Function_2Esurjective :
  sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p x)).


def term_1 :
  sttfa.etap (sttfa.p type_2)
  :=
  Data_2EBool_2E_3F (sttfa.arrow type_3 type_2) (f_1:
                                                 (sttfa.etap (sttfa.p type_1)) =>
                                                 Data_2EBool_2E_2F_5C (
                                                   sttfa.arrow type_2 type_4) (
                                                   Function_2Einjective type_3 (
                                                     term_0 f_1)) (Data_2EBool_2E_7E type_4 (
                                                                    Function_2Esurjective type_3 (
                                                                    term_0 f_1)))).


thm_0 : sttfa.eps term_1.



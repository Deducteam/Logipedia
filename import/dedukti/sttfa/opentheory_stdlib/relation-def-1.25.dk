
def type_0 : sttfa.type -> sttfa.type := A:sttfa.type => A.


def type_1 : sttfa.type -> sttfa.type := B:sttfa.type => B.


def type_2 : sttfa.type := sttfa.bool.


def type_3 :
  sttfa.type -> sttfa.type
  :=
  B:sttfa.type => sttfa.arrow (type_1 B) type_2.


def type_4 :
  sttfa.type -> sttfa.type -> sttfa.type
  :=
  B:sttfa.type => A:sttfa.type => sttfa.arrow (type_0 A) (type_3 B).


def type_5 :
  sttfa.type -> sttfa.type -> sttfa.type
  :=
  B:sttfa.type => A:sttfa.type => sttfa.arrow (type_4 B A) type_2.


def type_6 :
  sttfa.type -> sttfa.type -> sttfa.type
  :=
  B:sttfa.type => A:sttfa.type => sttfa.arrow (type_4 B A) (type_5 B A).


def term_0 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.p (type_6 x x0))))
  :=
  B:sttfa.type => A:sttfa.type => leibniz.eq (type_4 B A).


relation_2Ddef_2D1_2E25 :
  sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p (type_0 x))).


def term_1 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.p (type_4 x x0))))
  :=
  B:sttfa.type => A:sttfa.type => relation_2Ddef_2D1_2E25 (type_4 B A).


def Relation_2Eempty :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.p (type_4 x x0))))
  :=
  B:sttfa.type => A:sttfa.type => term_1 B A.


Data_2EPair_2E_2A : sttfa.type -> sttfa.type -> sttfa.type.


def type_7 :
  sttfa.type -> sttfa.type -> sttfa.type
  :=
  B:sttfa.type => A:sttfa.type => Data_2EPair_2E_2A (type_0 A) (type_1 B).


Set_2Eset : sttfa.type -> sttfa.type.


def type_8 :
  sttfa.type -> sttfa.type -> sttfa.type
  :=
  B:sttfa.type => A:sttfa.type => Set_2Eset (type_7 B A).


def type_9 :
  sttfa.type -> sttfa.type -> sttfa.type
  :=
  B:sttfa.type => A:sttfa.type => sttfa.arrow (type_8 B A) (type_4 B A).


def Relation_2EfromSet :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.p (type_9 x x0))))
  :=
  B:sttfa.type => A:sttfa.type => relation_2Ddef_2D1_2E25 (type_9 B A).


def term_2 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.p (type_9 x x0))))
  :=
  B:sttfa.type => A:sttfa.type => Relation_2EfromSet (type_1 B) (type_0 A).


Set_2E_7B_7D :
  sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p (type_0 x))).


def term_3 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type => sttfa.p type_2)))
  :=
  B:sttfa.type =>
  A:sttfa.type =>
  term_0 B A (Relation_2Eempty (type_1 B) (type_0 A)) (term_2 B A (Set_2E_7B_7D (
                                                                    type_8 B A))).


thm_0 :
  sttfa.eps (sttfa.forallP (x:sttfa.type =>
                            sttfa.forallP (x0:sttfa.type => term_3 x x0))).


def Relation_2Euniverse :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.p (type_4 x x0))))
  :=
  B:sttfa.type => A:sttfa.type => term_1 B A.


Set_2Euniverse :
  sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p (type_0 x))).


def term_4 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type => sttfa.p type_2)))
  :=
  B:sttfa.type =>
  A:sttfa.type =>
  term_0 B A (Relation_2Euniverse (type_1 B) (type_0 A)) (term_2 B A (
                                                            Set_2Euniverse (
                                                              type_8 B A))).


thm_1 :
  sttfa.eps (sttfa.forallP (x:sttfa.type =>
                            sttfa.forallP (x0:sttfa.type => term_4 x x0))).


def type_10 :
  sttfa.type -> sttfa.type
  :=
  A:sttfa.type => sttfa.arrow (type_0 A) type_2.


def type_11 :
  sttfa.type -> sttfa.type
  :=
  A:sttfa.type => sttfa.arrow (type_0 A) (type_10 A).


def type_12 :
  sttfa.type -> sttfa.type
  :=
  A:sttfa.type => sttfa.arrow (type_11 A) type_2.


def type_13 :
  sttfa.type -> sttfa.type
  :=
  A:sttfa.type => sttfa.arrow (type_12 A) type_2.


Data_2EBool_2E_21 :
  sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p (type_0 x))).


def term_5 :
  sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p (type_13 x)))
  :=
  A:sttfa.type => Data_2EBool_2E_21 (type_13 A).


def type_14 : sttfa.type := sttfa.arrow type_2 type_2.


def type_15 : sttfa.type := sttfa.arrow type_2 type_14.


def term_6 : sttfa.etap (sttfa.p type_15) := leibniz.eq type_2.


def term_7 :
  sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p (type_12 x)))
  :=
  A:sttfa.type => relation_2Ddef_2D1_2E25 (type_12 A).


def Relation_2Ereflexive :
  sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p (type_12 x)))
  :=
  A:sttfa.type => term_7 A.


def term_8 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.p (sttfa.arrow (type_11 x) (type_11 x))))
  :=
  A:sttfa.type => r_1:(sttfa.etap (sttfa.p (type_11 A))) => r_1.


def type_16 :
  sttfa.type -> sttfa.type
  :=
  A:sttfa.type => sttfa.arrow (type_10 A) type_2.


def term_9 :
  sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p (type_16 x)))
  :=
  A:sttfa.type => Data_2EBool_2E_21 (type_16 A).


def term_10 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.p (sttfa.arrow (type_0 x) (type_0 x))))
  :=
  A:sttfa.type => x_1:(sttfa.etap (sttfa.p (type_0 A))) => x_1.


def term_11 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.p (sttfa.arrow (type_0 x) (sttfa.arrow (
                                                                type_11 x) (
                                                                type_10 x)))))
  :=
  A:sttfa.type =>
  x_1:(sttfa.etap (sttfa.p (type_0 A))) =>
  r_2:(sttfa.etap (sttfa.p (type_11 A))) => term_8 A r_2 (term_10 A x_1).


def term_12 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.p (sttfa.arrow (type_0 x) (sttfa.arrow (
                                                                type_11 x) type_2))))
  :=
  A:sttfa.type =>
  x_1:(sttfa.etap (sttfa.p (type_0 A))) =>
  r_2:(sttfa.etap (sttfa.p (type_11 A))) => term_11 A x_1 r_2 (term_10 A x_1).


def term_13 :
  sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p type_2))
  :=
  A:sttfa.type =>
  term_5 A (r_1:(sttfa.etap (sttfa.p (type_11 A))) =>
            term_6 (Relation_2Ereflexive (type_0 A) (term_8 A r_1)) (
              term_9 A (x_2:(sttfa.etap (sttfa.p (type_0 A))) =>
                        term_12 A x_2 r_1))).


thm_2 : sttfa.eps (sttfa.forallP (x:sttfa.type => term_13 x)).


def type_17 :
  sttfa.type -> sttfa.type -> sttfa.type
  :=
  B:sttfa.type => A:sttfa.type => Set_2Eset (type_4 B A).


def term_14 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.p (sttfa.arrow (sttfa.arrow (
                                                                    type_17 x x0) type_2) type_2))))
  :=
  B:sttfa.type =>
  A:sttfa.type =>
  Data_2EBool_2E_21 (sttfa.arrow (sttfa.arrow (type_17 B A) type_2) type_2).


def type_18 :
  sttfa.type -> sttfa.type -> sttfa.type
  :=
  B:sttfa.type => A:sttfa.type => sttfa.arrow (type_17 B A) (type_4 B A).


def term_15 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.p (type_18 x x0))))
  :=
  B:sttfa.type => A:sttfa.type => relation_2Ddef_2D1_2E25 (type_18 B A).


def Relation_2EbigIntersect :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.p (type_18 x x0))))
  :=
  B:sttfa.type => A:sttfa.type => term_15 B A.


def term_16 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.p (sttfa.arrow (type_17 x x0) (
                                                       type_17 x x0)))))
  :=
  B:sttfa.type =>
  A:sttfa.type => s_1:(sttfa.etap (sttfa.p (type_17 B A))) => s_1.


def type_19 :
  sttfa.type -> sttfa.type -> sttfa.type
  :=
  B:sttfa.type => A:sttfa.type => Set_2Eset (type_8 B A).


def type_20 :
  sttfa.type -> sttfa.type -> sttfa.type
  :=
  B:sttfa.type => A:sttfa.type => sttfa.arrow (type_19 B A) (type_8 B A).


Set_2EbigIntersect :
  sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p (type_0 x))).


def type_21 :
  sttfa.type -> sttfa.type -> sttfa.type
  :=
  B:sttfa.type => A:sttfa.type => sttfa.arrow (type_4 B A) (type_8 B A).


Set_2Eimage :
  sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p (type_0 x))).


def Relation_2EtoSet :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.p (type_21 x x0))))
  :=
  B:sttfa.type => A:sttfa.type => relation_2Ddef_2D1_2E25 (type_21 B A).


def term_17 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.p (type_21 x x0))))
  :=
  B:sttfa.type => A:sttfa.type => Relation_2EtoSet (type_1 B) (type_0 A).


def term_18 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.p (sttfa.arrow (type_17 x x0) (
                                                       type_19 x x0)))))
  :=
  B:sttfa.type =>
  A:sttfa.type =>
  s_1:(sttfa.etap (sttfa.p (type_17 B A))) =>
  Set_2Eimage (sttfa.arrow (type_21 B A) (sttfa.arrow (type_17 B A) (
                                            type_19 B A))) (term_17 B A) (
    term_16 B A s_1).


def term_19 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type => sttfa.p type_2)))
  :=
  B:sttfa.type =>
  A:sttfa.type =>
  term_14 B A (s_1:(sttfa.etap (sttfa.p (type_17 B A))) =>
               term_0 B A (Relation_2EbigIntersect (type_1 B) (type_0 A) (
                             term_16 B A s_1)) (term_2 B A (Set_2EbigIntersect (
                                                              type_20 B A) (
                                                              term_18 B A s_1)))).


thm_3 :
  sttfa.eps (sttfa.forallP (x:sttfa.type =>
                            sttfa.forallP (x0:sttfa.type => term_19 x x0))).


def Relation_2EbigUnion :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.p (type_18 x x0))))
  :=
  B:sttfa.type => A:sttfa.type => term_15 B A.


Set_2EbigUnion :
  sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p (type_0 x))).


def term_20 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type => sttfa.p type_2)))
  :=
  B:sttfa.type =>
  A:sttfa.type =>
  term_14 B A (s_1:(sttfa.etap (sttfa.p (type_17 B A))) =>
               term_0 B A (Relation_2EbigUnion (type_1 B) (type_0 A) (
                             term_16 B A s_1)) (term_2 B A (Set_2EbigUnion (
                                                              type_20 B A) (
                                                              term_18 B A s_1)))).


thm_4 :
  sttfa.eps (sttfa.forallP (x:sttfa.type =>
                            sttfa.forallP (x0:sttfa.type => term_20 x x0))).


def Relation_2Eirreflexive :
  sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p (type_12 x)))
  :=
  A:sttfa.type => term_7 A.


Data_2EBool_2E_7E :
  sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p (type_0 x))).


def term_21 :
  sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p type_2))
  :=
  A:sttfa.type =>
  term_5 A (r_1:(sttfa.etap (sttfa.p (type_11 A))) =>
            term_6 (Relation_2Eirreflexive (type_0 A) (term_8 A r_1)) (
              term_9 A (x_2:(sttfa.etap (sttfa.p (type_0 A))) =>
                        Data_2EBool_2E_7E type_14 (term_12 A x_2 r_1)))).


thm_5 : sttfa.eps (sttfa.forallP (x:sttfa.type => term_21 x)).


def term_22 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.p (sttfa.arrow (type_5 x x0) type_2))))
  :=
  B:sttfa.type =>
  A:sttfa.type => Data_2EBool_2E_21 (sttfa.arrow (type_5 B A) type_2).


def Relation_2Esubrelation :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.p (type_6 x x0))))
  :=
  B:sttfa.type => A:sttfa.type => relation_2Ddef_2D1_2E25 (type_6 B A).


def term_23 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.p (sttfa.arrow (type_4 x x0) (
                                                       type_4 x x0)))))
  :=
  B:sttfa.type =>
  A:sttfa.type => r_1:(sttfa.etap (sttfa.p (type_4 B A))) => r_1.


def term_24 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.p (sttfa.arrow (type_4 x x0) (
                                                       type_4 x x0)))))
  :=
  B:sttfa.type =>
  A:sttfa.type => s_1:(sttfa.etap (sttfa.p (type_4 B A))) => s_1.


def type_22 :
  sttfa.type -> sttfa.type -> sttfa.type
  :=
  B:sttfa.type => A:sttfa.type => sttfa.arrow (type_8 B A) type_2.


def type_23 :
  sttfa.type -> sttfa.type -> sttfa.type
  :=
  B:sttfa.type => A:sttfa.type => sttfa.arrow (type_8 B A) (type_22 B A).


Set_2Esubset :
  sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p (type_0 x))).


def term_25 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.p (sttfa.arrow (type_4 x x0) (
                                                       type_8 x x0)))))
  :=
  B:sttfa.type =>
  A:sttfa.type =>
  r_1:(sttfa.etap (sttfa.p (type_4 B A))) => term_17 B A (term_23 B A r_1).


def term_26 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.p (sttfa.arrow (type_4 x x0) (
                                                       type_8 x x0)))))
  :=
  B:sttfa.type =>
  A:sttfa.type =>
  s_1:(sttfa.etap (sttfa.p (type_4 B A))) => term_17 B A (term_24 B A s_1).


def term_27 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type => sttfa.p type_2)))
  :=
  B:sttfa.type =>
  A:sttfa.type =>
  term_22 B A (r_1:(sttfa.etap (sttfa.p (type_4 B A))) =>
               term_22 B A (s_2:(sttfa.etap (sttfa.p (type_4 B A))) =>
                            term_6 (Relation_2Esubrelation (type_1 B) (
                                      type_0 A) (term_23 B A r_1) (term_24 B A s_2)) (
                              Set_2Esubset (type_23 B A) (term_25 B A r_1) (
                                term_26 B A s_2)))).


thm_6 :
  sttfa.eps (sttfa.forallP (x:sttfa.type =>
                            sttfa.forallP (x0:sttfa.type => term_27 x x0))).


def type_24 :
  sttfa.type -> sttfa.type -> sttfa.type
  :=
  B:sttfa.type =>
  A:sttfa.type =>
  sttfa.arrow (type_4 B A) (sttfa.arrow (type_4 B A) (type_4 B A)).


def term_28 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.p (type_24 x x0))))
  :=
  B:sttfa.type => A:sttfa.type => relation_2Ddef_2D1_2E25 (type_24 B A).


def Relation_2Eintersect :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.p (type_24 x x0))))
  :=
  B:sttfa.type => A:sttfa.type => term_28 B A.


def type_25 :
  sttfa.type -> sttfa.type -> sttfa.type
  :=
  B:sttfa.type =>
  A:sttfa.type =>
  sttfa.arrow (type_8 B A) (sttfa.arrow (type_8 B A) (type_8 B A)).


Set_2Eintersect :
  sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p (type_0 x))).


def term_29 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type => sttfa.p type_2)))
  :=
  B:sttfa.type =>
  A:sttfa.type =>
  term_22 B A (r_1:(sttfa.etap (sttfa.p (type_4 B A))) =>
               term_22 B A (s_2:(sttfa.etap (sttfa.p (type_4 B A))) =>
                            term_0 B A (Relation_2Eintersect (type_1 B) (
                                          type_0 A) (term_23 B A r_1) (
                                          term_24 B A s_2)) (term_2 B A (
                                                               Set_2Eintersect (
                                                                 type_25 B A) (
                                                                 term_25 B A r_1) (
                                                                 term_26 B A s_2))))).


thm_7 :
  sttfa.eps (sttfa.forallP (x:sttfa.type =>
                            sttfa.forallP (x0:sttfa.type => term_29 x x0))).


def Relation_2Eunion :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.p (type_24 x x0))))
  :=
  B:sttfa.type => A:sttfa.type => term_28 B A.


Set_2Eunion :
  sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p (type_0 x))).


def term_30 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type => sttfa.p type_2)))
  :=
  B:sttfa.type =>
  A:sttfa.type =>
  term_22 B A (r_1:(sttfa.etap (sttfa.p (type_4 B A))) =>
               term_22 B A (s_2:(sttfa.etap (sttfa.p (type_4 B A))) =>
                            term_0 B A (Relation_2Eunion (type_1 B) (
                                          type_0 A) (term_23 B A r_1) (
                                          term_24 B A s_2)) (term_2 B A (
                                                               Set_2Eunion (
                                                                 type_25 B A) (
                                                                 term_25 B A r_1) (
                                                                 term_26 B A s_2))))).


thm_8 :
  sttfa.eps (sttfa.forallP (x:sttfa.type =>
                            sttfa.forallP (x0:sttfa.type => term_30 x x0))).


def type_26 :
  sttfa.type -> sttfa.type
  :=
  B:sttfa.type => sttfa.arrow (type_3 B) type_2.


def term_31 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.p (sttfa.arrow (type_8 x x0) (
                                                       type_8 x x0)))))
  :=
  B:sttfa.type =>
  A:sttfa.type => s_1:(sttfa.etap (sttfa.p (type_8 B A))) => s_1.


def term_32 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.p (sttfa.arrow (type_1 x) (type_1 x))))
  :=
  B:sttfa.type => y_1:(sttfa.etap (sttfa.p (type_1 B))) => y_1.


Set_2Emember :
  sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p (type_0 x))).


Data_2EPair_2E_2C :
  sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p (type_0 x))).


def term_33 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.p (sttfa.arrow (type_1 x) (
                                                       sttfa.arrow (type_0 x0) (
                                                         type_7 x x0))))))
  :=
  B:sttfa.type =>
  A:sttfa.type =>
  y_1:(sttfa.etap (sttfa.p (type_1 B))) =>
  x_2:(sttfa.etap (sttfa.p (type_0 A))) =>
  Data_2EPair_2E_2C (sttfa.arrow (type_0 A) (sttfa.arrow (type_1 B) (
                                               type_7 B A))) (term_10 A x_2) (
    term_32 B y_1).


def term_34 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type => sttfa.p type_2)))
  :=
  B:sttfa.type =>
  A:sttfa.type =>
  Data_2EBool_2E_21 (sttfa.arrow (type_22 B A) type_2) (s_1:
                                                        (sttfa.etap (
                                                           sttfa.p (type_8 B A))) =>
                                                        term_9 A (x_2:
                                                                  (sttfa.etap (
                                                                    sttfa.p (
                                                                    type_0 A))) =>
                                                                  Data_2EBool_2E_21 (
                                                                    type_26 B) (
                                                                    y_3:
                                                                    (
                                                                    sttfa.etap (
                                                                    sttfa.p (
                                                                    type_1 B))) =>
                                                                    term_6 (
                                                                    term_2 B A (
                                                                    term_31 B A s_1) (
                                                                    term_10 A x_2) (
                                                                    term_32 B y_3)) (
                                                                    Set_2Emember (
                                                                    sttfa.arrow (
                                                                    type_7 B A) (
                                                                    type_22 B A)) (
                                                                    term_33 B A y_3 x_2) (
                                                                    term_31 B A s_1))))).


thm_9 :
  sttfa.eps (sttfa.forallP (x:sttfa.type =>
                            sttfa.forallP (x0:sttfa.type => term_34 x x0))).


def type_27 :
  sttfa.type -> sttfa.type -> sttfa.type
  :=
  B:sttfa.type => A:sttfa.type => sttfa.arrow (type_7 B A) type_2.


Set_2EfromPredicate :
  sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p (type_0 x))).


Data_2EBool_2E_3F :
  sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p (type_0 x))).


Data_2EBool_2E_2F_5C :
  sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p (type_0 x))).


def term_35 : sttfa.etap (sttfa.p type_15) := Data_2EBool_2E_2F_5C type_15.


def term_36 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type => sttfa.p type_2)))
  :=
  B:sttfa.type =>
  A:sttfa.type =>
  term_22 B A (r_1:(sttfa.etap (sttfa.p (type_4 B A))) =>
               leibniz.eq (type_8 B A) (term_25 B A r_1) (Set_2EfromPredicate (
                                                            sttfa.arrow (
                                                              type_27 B A) (
                                                              type_8 B A)) (
                                                            v_2:
                                                            (sttfa.etap (
                                                               sttfa.p (
                                                                 type_7 B A))) =>
                                                            Data_2EBool_2E_3F (
                                                              type_16 A) (
                                                              x_3:
                                                              (sttfa.etap (
                                                                 sttfa.p (
                                                                   type_0 A))) =>
                                                              Data_2EBool_2E_3F (
                                                                type_26 B) (
                                                                y_4:
                                                                (sttfa.etap (
                                                                   sttfa.p (
                                                                    type_1 B))) =>
                                                                term_35 (
                                                                  leibniz.eq (
                                                                    type_7 B A) v_2 (
                                                                    term_33 B A y_4 x_3)) (
                                                                  term_23 B A r_1 (
                                                                    term_10 A x_3) (
                                                                    term_32 B y_4))))))).


thm_10 :
  sttfa.eps (sttfa.forallP (x:sttfa.type =>
                            sttfa.forallP (x0:sttfa.type => term_36 x x0))).


def type_28 :
  sttfa.type -> sttfa.type
  :=
  A:sttfa.type => sttfa.arrow (type_11 A) (type_12 A).


def term_37 :
  sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p (type_28 x)))
  :=
  A:sttfa.type => leibniz.eq (type_11 A).


def type_29 :
  sttfa.type -> sttfa.type
  :=
  A:sttfa.type => sttfa.arrow (type_11 A) (type_11 A).


def Relation_2EtransitiveClosure :
  sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p (type_29 x)))
  :=
  A:sttfa.type => relation_2Ddef_2D1_2E25 (type_29 A).


def type_30 :
  sttfa.type -> sttfa.type
  :=
  A:sttfa.type => Set_2Eset (type_11 A).


def term_38 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.p (sttfa.arrow (type_11 x) (type_11 x))))
  :=
  A:sttfa.type => s_1:(sttfa.etap (sttfa.p (type_11 A))) => s_1.


def Relation_2Etransitive :
  sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p (type_12 x)))
  :=
  A:sttfa.type => term_7 A.


def term_39 :
  sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p (type_12 x)))
  :=
  A:sttfa.type => Relation_2Etransitive (type_0 A).


def term_40 :
  sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p type_2))
  :=
  A:sttfa.type =>
  term_5 A (r_1:(sttfa.etap (sttfa.p (type_11 A))) =>
            term_37 A (Relation_2EtransitiveClosure (type_0 A) (term_8 A r_1)) (
              Relation_2EbigIntersect (type_0 A) (type_0 A) (Set_2EfromPredicate (
                                                               sttfa.arrow (
                                                                 type_12 A) (
                                                                 type_30 A)) (
                                                               v_2:
                                                               (sttfa.etap (
                                                                  sttfa.p (
                                                                    type_11 A))) =>
                                                               Data_2EBool_2E_3F (
                                                                 type_13 A) (
                                                                 s_3:
                                                                 (sttfa.etap (
                                                                    sttfa.p (
                                                                    type_11 A))) =>
                                                                 term_35 (
                                                                   term_37 A v_2 (
                                                                    term_38 A s_3)) (
                                                                   term_35 (
                                                                    Relation_2Esubrelation (
                                                                    type_0 A) (
                                                                    type_0 A) (
                                                                    term_8 A r_1) (
                                                                    term_38 A s_3)) (
                                                                    term_39 A (
                                                                    term_38 A s_3)))))))).


thm_11 : sttfa.eps (sttfa.forallP (x:sttfa.type => term_40 x)).


Data_2EBool_2E_3D_3D_3E :
  sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p (type_0 x))).


def term_41 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.p (sttfa.arrow (type_0 x) (type_0 x))))
  :=
  A:sttfa.type => y_1:(sttfa.etap (sttfa.p (type_0 A))) => y_1.


def term_42 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.p (sttfa.arrow (type_0 x) (type_0 x))))
  :=
  A:sttfa.type => z_1:(sttfa.etap (sttfa.p (type_0 A))) => z_1.


def term_43 :
  sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p type_2))
  :=
  A:sttfa.type =>
  term_5 A (r_1:(sttfa.etap (sttfa.p (type_11 A))) =>
            term_6 (term_39 A (term_8 A r_1)) (term_9 A (x_2:
                                                         (sttfa.etap (
                                                            sttfa.p (
                                                              type_0 A))) =>
                                                         term_9 A (y_3:
                                                                   (sttfa.etap (
                                                                    sttfa.p (
                                                                    type_0 A))) =>
                                                                   term_9 A (
                                                                    z_4:
                                                                    (
                                                                    sttfa.etap (
                                                                    sttfa.p (
                                                                    type_0 A))) =>
                                                                    Data_2EBool_2E_3D_3D_3E type_15 (
                                                                    term_35 (
                                                                    term_11 A x_2 r_1 (
                                                                    term_41 A y_3)) (
                                                                    term_8 A r_1 (
                                                                    term_41 A y_3) (
                                                                    term_42 A z_4))) (
                                                                    term_11 A x_2 r_1 (
                                                                    term_42 A z_4))))))).


thm_12 : sttfa.eps (sttfa.forallP (x:sttfa.type => term_43 x)).



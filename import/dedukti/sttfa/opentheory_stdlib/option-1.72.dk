
def type_0 : sttfa.type := sttfa.bool.


def type_1 : sttfa.type := sttfa.arrow type_0 type_0.


def type_2 : sttfa.type -> sttfa.type := A:sttfa.type => A.


def type_3 :
  sttfa.type -> sttfa.type
  :=
  A:sttfa.type => sttfa.arrow (type_2 A) (type_2 A).


def type_4 : sttfa.type := sttfa.arrow type_0 type_1.


def term_0 : sttfa.etap (sttfa.p type_4) := leibniz.eq type_0.


option_2D1_2E72 :
  sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p (type_2 x))).


def term_1 : sttfa.etap (sttfa.p type_0) := option_2D1_2E72 type_0.


def term_2 :
  sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p type_1))
  :=
  A:sttfa.type => term_0 term_1.


thm thm_0 :
  sttfa.eps (sttfa.forallP (x:sttfa.type =>
                            leibniz.eq type_1 (term_2 x) (term_2 x)))
  :=
  A:sttfa.type => leibniz.refl type_1 (term_2 A).


thm thm_1 : sttfa.eps (term_0 term_1 term_1) := leibniz.refl type_0 term_1.


Data_2EOption_2Eoption : sttfa.type -> sttfa.type.


__ :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.p (sttfa.arrow type_0 (Data_2EOption_2Eoption (
                                                            type_2 x))))).


___ :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.p (sttfa.arrow (Data_2EOption_2Eoption (
                                                     type_2 x)) type_0))).

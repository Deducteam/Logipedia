
def type_0 : sttfa.type -> sttfa.type := B:sttfa.type => B.


def type_1 :
  sttfa.type -> sttfa.type -> sttfa.type
  :=
  C:sttfa.type => B:sttfa.type => sttfa.arrow (type_0 B) C.


def type_2 : sttfa.type -> sttfa.type := A:sttfa.type => A.


def type_3 :
  sttfa.type -> sttfa.type -> sttfa.type
  :=
  B:sttfa.type => A:sttfa.type => sttfa.arrow (type_2 A) (type_0 B).


def term_0 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.p (sttfa.arrow (type_2 x) (type_2 x))))
  :=
  A:sttfa.type => x_1:(sttfa.etap (sttfa.p (type_2 A))) => x_1.


def term_1 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.p (sttfa.arrow (type_2 x0) (
                                                       sttfa.arrow (type_3 x x0) (
                                                         type_0 x))))))
  :=
  B:sttfa.type =>
  A:sttfa.type =>
  x_1:(sttfa.etap (sttfa.p (type_2 A))) =>
  g_2:(sttfa.etap (sttfa.p (type_3 B A))) => g_2 (term_0 A x_1).


def term_2 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.forallK (x1:sttfa.type =>
                                                           sttfa.p (sttfa.arrow (
                                                                    type_1 x0 x1) (
                                                                    sttfa.arrow (
                                                                    type_3 x1 x) (
                                                                    sttfa.arrow (
                                                                    type_2 x) x0)))))))
  :=
  A:sttfa.type =>
  C:sttfa.type =>
  B:sttfa.type =>
  f_1:(sttfa.etap (sttfa.p (type_1 C B))) =>
  g_2:(sttfa.etap (sttfa.p (type_3 B A))) =>
  x_3:(sttfa.etap (sttfa.p (type_2 A))) => f_1 (term_1 B A x_3 g_2).


def Function_2Eo :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.forallK (x1:sttfa.type =>
                                                           sttfa.p (sttfa.arrow (
                                                                    type_1 x0 x1) (
                                                                    sttfa.arrow (
                                                                    type_3 x1 x) (
                                                                    sttfa.arrow (
                                                                    type_2 x) x0)))))))
  :=
  A:sttfa.type => C:sttfa.type => B:sttfa.type => term_2 A C B.


thm thm_0 :
  sttfa.eps (sttfa.forallP (x:sttfa.type =>
                            sttfa.forallP (x0:sttfa.type =>
                                           sttfa.forallP (x1:sttfa.type =>
                                                          leibniz.eq (
                                                            sttfa.arrow (
                                                              type_1 x0 x1) (
                                                              sttfa.arrow (
                                                                type_3 x1 x) (
                                                                sttfa.arrow (
                                                                  type_2 x) x0))) (
                                                            Function_2Eo (
                                                              type_2 x) x0 (
                                                              type_0 x1)) (
                                                            term_2 x x0 x1)))))
  :=
  A:sttfa.type =>
  C:sttfa.type =>
  B:sttfa.type =>
  leibniz.refl (sttfa.arrow (type_1 C B) (sttfa.arrow (type_3 B A) (sttfa.arrow (
                                                                    type_2 A) C))) (
    Function_2Eo (type_2 A) C (type_0 B)).


def type_4 :
  sttfa.type -> sttfa.type -> sttfa.type -> sttfa.type
  :=
  A:sttfa.type =>
  C:sttfa.type =>
  B:sttfa.type =>
  sttfa.arrow (type_1 C B) (sttfa.arrow (type_3 B A) (sttfa.arrow (type_2 A) C)).


def type_5 : sttfa.type := sttfa.bool.


def term_3 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.p (sttfa.arrow (type_2 x) (type_2 x))))
  :=
  A:sttfa.type => x_1:(sttfa.etap (sttfa.p (type_2 A))) => term_0 A x_1.


def Function_2Eid :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.p (sttfa.arrow (type_2 x) (type_2 x))))
  :=
  A:sttfa.type => term_3 A.


thm thm_1 :
  sttfa.eps (sttfa.forallP (x:sttfa.type =>
                            leibniz.eq (sttfa.arrow (type_2 x) (type_2 x)) (
                              Function_2Eid (type_2 x)) (term_3 x)))
  :=
  A:sttfa.type =>
  leibniz.refl (sttfa.arrow (type_2 A) (type_2 A)) (Function_2Eid (type_2 A)).


def type_6 :
  sttfa.type -> sttfa.type
  :=
  A:sttfa.type => sttfa.arrow (type_2 A) (type_2 A).


def term_4 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.p (sttfa.arrow (type_2 x0) (
                                                       sttfa.arrow (type_0 x) (
                                                         type_2 x0))))))
  :=
  B:sttfa.type =>
  A:sttfa.type =>
  x_1:(sttfa.etap (sttfa.p (type_2 A))) =>
  y_2:(sttfa.etap (sttfa.p (type_0 B))) => term_0 A x_1.


def Function_2Econst :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.p (sttfa.arrow (type_2 x0) (
                                                       sttfa.arrow (type_0 x) (
                                                         type_2 x0))))))
  :=
  B:sttfa.type => A:sttfa.type => term_4 B A.


thm thm_2 :
  sttfa.eps (sttfa.forallP (x:sttfa.type =>
                            sttfa.forallP (x0:sttfa.type =>
                                           leibniz.eq (sttfa.arrow (type_2 x0) (
                                                         sttfa.arrow (
                                                           type_0 x) (
                                                           type_2 x0))) (
                                             Function_2Econst (type_0 x) (
                                               type_2 x0)) (term_4 x x0))))
  :=
  B:sttfa.type =>
  A:sttfa.type =>
  leibniz.refl (sttfa.arrow (type_2 A) (sttfa.arrow (type_0 B) (type_2 A))) (
    Function_2Econst (type_0 B) (type_2 A)).


def type_7 :
  sttfa.type -> sttfa.type -> sttfa.type
  :=
  B:sttfa.type =>
  A:sttfa.type => sttfa.arrow (type_2 A) (sttfa.arrow (type_0 B) (type_2 A)).


def type_8 :
  sttfa.type -> sttfa.type -> sttfa.type -> sttfa.type
  :=
  C:sttfa.type =>
  B:sttfa.type => A:sttfa.type => sttfa.arrow (type_2 A) (type_1 C B).


def term_5 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.forallK (x1:sttfa.type =>
                                                           sttfa.p (sttfa.arrow (
                                                                    type_8 x x0 x1) (
                                                                    type_8 x x0 x1))))))
  :=
  C:sttfa.type =>
  B:sttfa.type =>
  A:sttfa.type => f_1:(sttfa.etap (sttfa.p (type_8 C B A))) => f_1.


def term_6 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.forallK (x1:sttfa.type =>
                                                           sttfa.p (sttfa.arrow (
                                                                    type_8 x x0 x1) (
                                                                    sttfa.arrow (
                                                                    type_3 x0 x1) (
                                                                    sttfa.arrow (
                                                                    type_2 x1) x)))))))
  :=
  C:sttfa.type =>
  B:sttfa.type =>
  A:sttfa.type =>
  f_1:(sttfa.etap (sttfa.p (type_8 C B A))) =>
  g_2:(sttfa.etap (sttfa.p (type_3 B A))) =>
  x_3:(sttfa.etap (sttfa.p (type_2 A))) =>
  term_5 C B A f_1 (term_0 A x_3) (term_1 B A x_3 g_2).


def Function_2ECombinator_2Es :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.forallK (x1:sttfa.type =>
                                                           sttfa.p (sttfa.arrow (
                                                                    type_8 x x0 x1) (
                                                                    sttfa.arrow (
                                                                    type_3 x0 x1) (
                                                                    sttfa.arrow (
                                                                    type_2 x1) x)))))))
  :=
  C:sttfa.type => B:sttfa.type => A:sttfa.type => term_6 C B A.


thm thm_3 :
  sttfa.eps (sttfa.forallP (x:sttfa.type =>
                            sttfa.forallP (x0:sttfa.type =>
                                           sttfa.forallP (x1:sttfa.type =>
                                                          leibniz.eq (
                                                            sttfa.arrow (
                                                              type_8 x x0 x1) (
                                                              sttfa.arrow (
                                                                type_3 x0 x1) (
                                                                sttfa.arrow (
                                                                  type_2 x1) x))) (
                                                            Function_2ECombinator_2Es x (
                                                              type_0 x0) (
                                                              type_2 x1)) (
                                                            term_6 x x0 x1)))))
  :=
  C:sttfa.type =>
  B:sttfa.type =>
  A:sttfa.type =>
  leibniz.refl (sttfa.arrow (type_8 C B A) (sttfa.arrow (type_3 B A) (
                                              sttfa.arrow (type_2 A) C))) (
    Function_2ECombinator_2Es C (type_0 B) (type_2 A)).


def type_9 :
  sttfa.type -> sttfa.type -> sttfa.type -> sttfa.type
  :=
  C:sttfa.type =>
  B:sttfa.type =>
  A:sttfa.type =>
  sttfa.arrow (type_8 C B A) (sttfa.arrow (type_3 B A) (sttfa.arrow (
                                                          type_2 A) C)).


def term_7 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.forallK (x1:sttfa.type =>
                                                           sttfa.p (sttfa.arrow (
                                                                    type_8 x x0 x1) (
                                                                    sttfa.arrow (
                                                                    type_0 x0) (
                                                                    sttfa.arrow (
                                                                    type_2 x1) x)))))))
  :=
  C:sttfa.type =>
  B:sttfa.type =>
  A:sttfa.type =>
  f_1:(sttfa.etap (sttfa.p (type_8 C B A))) =>
  x_2:(sttfa.etap (sttfa.p (type_0 B))) =>
  y_3:(sttfa.etap (sttfa.p (type_2 A))) => term_5 C B A f_1 y_3 x_2.


def Function_2Eflip :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.forallK (x1:sttfa.type =>
                                                           sttfa.p (sttfa.arrow (
                                                                    type_8 x x0 x1) (
                                                                    sttfa.arrow (
                                                                    type_0 x0) (
                                                                    sttfa.arrow (
                                                                    type_2 x1) x)))))))
  :=
  C:sttfa.type => B:sttfa.type => A:sttfa.type => term_7 C B A.


thm thm_4 :
  sttfa.eps (sttfa.forallP (x:sttfa.type =>
                            sttfa.forallP (x0:sttfa.type =>
                                           sttfa.forallP (x1:sttfa.type =>
                                                          leibniz.eq (
                                                            sttfa.arrow (
                                                              type_8 x x0 x1) (
                                                              sttfa.arrow (
                                                                type_0 x0) (
                                                                sttfa.arrow (
                                                                  type_2 x1) x))) (
                                                            Function_2Eflip x (
                                                              type_0 x0) (
                                                              type_2 x1)) (
                                                            term_7 x x0 x1)))))
  :=
  C:sttfa.type =>
  B:sttfa.type =>
  A:sttfa.type =>
  leibniz.refl (sttfa.arrow (type_8 C B A) (sttfa.arrow (type_0 B) (sttfa.arrow (
                                                                    type_2 A) C))) (
    Function_2Eflip C (type_0 B) (type_2 A)).


def type_10 :
  sttfa.type -> sttfa.type -> sttfa.type -> sttfa.type
  :=
  C:sttfa.type =>
  B:sttfa.type =>
  A:sttfa.type =>
  sttfa.arrow (type_8 C B A) (sttfa.arrow (type_0 B) (sttfa.arrow (type_2 A) C)).


def type_11 :
  sttfa.type -> sttfa.type -> sttfa.type
  :=
  B:sttfa.type => A:sttfa.type => sttfa.arrow (type_2 A) (type_3 B A).


def term_8 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.p (sttfa.arrow (type_11 x x0) (
                                                       type_3 x x0)))))
  :=
  B:sttfa.type =>
  A:sttfa.type =>
  f_1:(sttfa.etap (sttfa.p (type_11 B A))) =>
  x_2:(sttfa.etap (sttfa.p (type_2 A))) => f_1 (term_0 A x_2) (term_0 A x_2).


def Function_2ECombinator_2Ew :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.p (sttfa.arrow (type_11 x x0) (
                                                       type_3 x x0)))))
  :=
  B:sttfa.type => A:sttfa.type => term_8 B A.


thm thm_5 :
  sttfa.eps (sttfa.forallP (x:sttfa.type =>
                            sttfa.forallP (x0:sttfa.type =>
                                           leibniz.eq (sttfa.arrow (type_11 x x0) (
                                                         type_3 x x0)) (
                                             Function_2ECombinator_2Ew (
                                               type_0 x) (type_2 x0)) (
                                             term_8 x x0))))
  :=
  B:sttfa.type =>
  A:sttfa.type =>
  leibniz.refl (sttfa.arrow (type_11 B A) (type_3 B A)) (Function_2ECombinator_2Ew (
                                                           type_0 B) (
                                                           type_2 A)).


def type_12 :
  sttfa.type -> sttfa.type -> sttfa.type
  :=
  B:sttfa.type => A:sttfa.type => sttfa.arrow (type_11 B A) (type_3 B A).


def type_13 :
  sttfa.type -> sttfa.type -> sttfa.type
  :=
  B:sttfa.type => A:sttfa.type => sttfa.arrow (type_3 B A) type_5.


def type_14 : sttfa.type := sttfa.arrow type_5 (sttfa.arrow type_5 type_5).


def term_9 : sttfa.etap (sttfa.p type_14) := leibniz.eq type_5.


def type_15 :
  sttfa.type -> sttfa.type
  :=
  A:sttfa.type => sttfa.arrow (type_2 A) type_5.


def type_16 :
  sttfa.type -> sttfa.type
  :=
  A:sttfa.type => sttfa.arrow (type_15 A) type_5.


Data_2EBool_2E_21 :
  sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p (type_2 x))).


def term_10 :
  sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p (type_16 x)))
  :=
  A:sttfa.type => Data_2EBool_2E_21 (type_16 A).


Data_2EBool_2E_3D_3D_3E :
  sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p (type_2 x))).


def term_11 :
  sttfa.etap (sttfa.p type_14)
  :=
  Data_2EBool_2E_3D_3D_3E type_14.


def type_17 :
  sttfa.type -> sttfa.type
  :=
  B:sttfa.type => sttfa.arrow (type_0 B) type_5.


def term_12 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.p (sttfa.arrow (type_0 x) (type_17 x))))
  :=
  B:sttfa.type => leibniz.eq (type_0 B).


def term_13 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.p (sttfa.arrow (type_3 x x0) (
                                                       type_3 x x0)))))
  :=
  B:sttfa.type =>
  A:sttfa.type => __1861_1:(sttfa.etap (sttfa.p (type_3 B A))) => __1861_1.


def term_14 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.p (sttfa.arrow (type_2 x) (type_2 x))))
  :=
  A:sttfa.type => x1_1:(sttfa.etap (sttfa.p (type_2 A))) => x1_1.


def term_15 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.p (sttfa.arrow (type_2 x) (type_2 x))))
  :=
  A:sttfa.type => x2_1:(sttfa.etap (sttfa.p (type_2 A))) => x2_1.


def term_16 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.p (sttfa.arrow (type_2 x) (sttfa.arrow (
                                                                type_2 x) type_5))))
  :=
  A:sttfa.type =>
  x2_1:(sttfa.etap (sttfa.p (type_2 A))) =>
  x1_2:(sttfa.etap (sttfa.p (type_2 A))) =>
  leibniz.eq (type_2 A) (term_14 A x1_2) (term_15 A x2_1).


def term_17 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.p (sttfa.arrow (type_3 x x0) type_5))))
  :=
  B:sttfa.type =>
  A:sttfa.type =>
  __1861_1:(sttfa.etap (sttfa.p (type_3 B A))) =>
  term_10 A (x1_2:(sttfa.etap (sttfa.p (type_2 A))) =>
             term_10 A (x2_3:(sttfa.etap (sttfa.p (type_2 A))) =>
                        term_11 (term_12 B (term_13 B A __1861_1 (term_14 A x1_2)) (
                                   term_13 B A __1861_1 (term_15 A x2_3))) (
                          term_16 A x2_3 x1_2))).


def term_18 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.p (type_13 x x0))))
  :=
  B:sttfa.type =>
  A:sttfa.type =>
  __1861_1:(sttfa.etap (sttfa.p (type_3 B A))) => term_17 B A __1861_1.


def Function_2Einjective :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.p (type_13 x x0))))
  :=
  B:sttfa.type => A:sttfa.type => term_18 B A.


thm thm_6 :
  sttfa.eps (sttfa.forallP (x:sttfa.type =>
                            sttfa.forallP (x0:sttfa.type =>
                                           leibniz.eq (type_13 x x0) (
                                             Function_2Einjective (type_0 x) (
                                               type_2 x0)) (term_18 x x0))))
  :=
  B:sttfa.type =>
  A:sttfa.type =>
  leibniz.refl (type_13 B A) (Function_2Einjective (type_0 B) (type_2 A)).


def term_19 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.p (type_13 x x0))))
  :=
  B:sttfa.type => A:sttfa.type => Function_2Einjective (type_0 B) (type_2 A).


def term_20 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.p (sttfa.arrow (type_3 x x0) (
                                                       type_3 x x0)))))
  :=
  B:sttfa.type =>
  A:sttfa.type => f_1:(sttfa.etap (sttfa.p (type_3 B A))) => f_1.


def term_21 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.p (type_13 x x0))))
  :=
  B:sttfa.type =>
  A:sttfa.type =>
  f_1:(sttfa.etap (sttfa.p (type_3 B A))) =>
  term_9 (term_19 B A (term_20 B A f_1)) (term_10 A (x1_2:
                                                     (sttfa.etap (sttfa.p (
                                                                    type_2 A))) =>
                                                     term_10 A (x2_3:
                                                                (sttfa.etap (
                                                                   sttfa.p (
                                                                    type_2 A))) =>
                                                                term_11 (
                                                                  term_12 B (
                                                                    term_20 B A f_1 (
                                                                    term_14 A x1_2)) (
                                                                    term_20 B A f_1 (
                                                                    term_15 A x2_3))) (
                                                                  term_16 A x2_3 x1_2)))).


def term_22 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.p (sttfa.arrow (type_15 x) (type_15 x))))
  :=
  A:sttfa.type => P_1:(sttfa.etap (sttfa.p (type_15 A))) => P_1.


Data_2EBool_2ET :
  sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p (type_2 x))).


def term_23 : sttfa.etap (sttfa.p type_5) := Data_2EBool_2ET type_5.


def term_24 :
  sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p (type_16 x)))
  :=
  A:sttfa.type =>
  p_1:(sttfa.etap (sttfa.p (type_15 A))) =>
  leibniz.eq (type_15 A) p_1 (x_2:(sttfa.etap (sttfa.p (type_2 A))) =>
                              term_23).


thm_7 :
  sttfa.eps (sttfa.forallP (x:sttfa.type =>
                            leibniz.eq (type_16 x) (term_10 x) (term_24 x))).


thm thm_8 :
  sttfa.eps (sttfa.forallP (x:sttfa.type =>
                            sttfa.forall (type_15 x) (x0:
                                                      (sttfa.etap (sttfa.p (
                                                                    type_15 x))) =>
                                                      term_9 (leibniz.eq (
                                                                type_15 x) (
                                                                term_22 x x0) (
                                                                x_2:
                                                                (sttfa.etap (
                                                                   sttfa.p (
                                                                    type_2 x))) =>
                                                                term_23)) (
                                                        term_10 x (term_22 x x0)))))
  :=
  A:sttfa.type =>
  P_1:(sttfa.etap (sttfa.p (type_15 A))) =>
  sttfa_hol_axioms.EQ_MP (leibniz.eq type_5 (term_10 A (term_22 A P_1)) (
                            term_10 A (term_22 A P_1))) (leibniz.eq type_5 (
                                                           leibniz.eq (
                                                             type_15 A) (
                                                             term_22 A P_1) (
                                                             x_2:
                                                             (sttfa.etap (
                                                                sttfa.p (
                                                                  type_2 A))) =>
                                                             term_23)) (
                                                           term_10 A (
                                                             term_22 A P_1))) (
    leibniz.trans sttfa.bool (leibniz.eq type_5 (term_10 A (term_22 A P_1)) (
                                term_10 A (term_22 A P_1))) (leibniz.eq type_5 (
                                                               term_10 A (
                                                                 term_22 A P_1)) (
                                                               term_10 A (
                                                                 term_22 A P_1))) (
      leibniz.eq type_5 (leibniz.eq (type_15 A) (term_22 A P_1) (x_2:
                                                                 (sttfa.etap (
                                                                    sttfa.p (
                                                                    type_2 A))) =>
                                                                 term_23)) (
        term_10 A (term_22 A P_1))) (P:
                                     (sttfa.etap (sttfa.p (sttfa.arrow sttfa.bool sttfa.bool))) =>
                                     leibniz.refl type_5 (term_10 A (
                                                            term_22 A P_1)) (
                                       z:(sttfa.etap (sttfa.p type_5)) =>
                                       P (leibniz.eq type_5 (term_10 A (
                                                               term_22 A P_1)) z))) (
      P:(sttfa.etap (sttfa.p (sttfa.arrow sttfa.bool sttfa.bool))) =>
      leibniz.trans (sttfa.arrow type_5 sttfa.bool) (leibniz.eq type_5 (
                                                       term_10 A (term_22 A P_1))) (
        leibniz.eq type_5 (leibniz.eq (type_15 A) (term_22 A P_1) (x_2:
                                                                   (sttfa.etap (
                                                                    sttfa.p (
                                                                    type_2 A))) =>
                                                                   term_23))) (
        leibniz.eq type_5 (leibniz.eq (type_15 A) (term_22 A P_1) (x_2:
                                                                   (sttfa.etap (
                                                                    sttfa.p (
                                                                    type_2 A))) =>
                                                                   term_23))) (
        P0:
        (sttfa.etap (sttfa.p (sttfa.arrow (sttfa.arrow type_5 sttfa.bool) sttfa.bool))) =>
        sttfa_hol_axioms.EQ_MP (term_9 (term_10 A (term_22 A P_1)) (term_24 A (
                                                                    term_22 A P_1))) (
          term_9 (term_10 A (term_22 A P_1)) (leibniz.eq (type_15 A) (
                                                term_22 A P_1) (x_2:
                                                                (sttfa.etap (
                                                                   sttfa.p (
                                                                    type_2 A))) =>
                                                                term_23))) (
          leibniz.trans type_5 (term_9 (term_10 A (term_22 A P_1)) (term_24 A (
                                                                    term_22 A P_1))) (
            term_9 (term_10 A (term_22 A P_1)) (leibniz.eq (type_15 A) (
                                                  term_22 A P_1) (x_2:
                                                                  (sttfa.etap (
                                                                    sttfa.p (
                                                                    type_2 A))) =>
                                                                  term_23))) (
            term_9 (term_10 A (term_22 A P_1)) (leibniz.eq (type_15 A) (
                                                  term_22 A P_1) (x_2:
                                                                  (sttfa.etap (
                                                                    sttfa.p (
                                                                    type_2 A))) =>
                                                                  term_23))) (
            P1:(sttfa.etap (sttfa.p (sttfa.arrow type_5 sttfa.bool))) =>
            leibniz.refl type_5 (leibniz.eq (type_15 A) (term_22 A P_1) (
                                   x_3:(sttfa.etap (sttfa.p (type_2 A))) =>
                                   term_23)) (z:
                                              (sttfa.etap (sttfa.p type_5)) =>
                                              P1 (term_9 (term_10 A (
                                                            term_22 A P_1)) z))) (
            P1:(sttfa.etap (sttfa.p (sttfa.arrow type_5 sttfa.bool))) =>
            leibniz.refl (sttfa.arrow type_5 type_5) (term_9 (term_10 A (
                                                                term_22 A P_1))) (
              h:(sttfa.etap (sttfa.p (sttfa.arrow type_5 type_5))) =>
              P1 (h (leibniz.eq (type_15 A) (term_22 A P_1) (x_2:
                                                             (sttfa.etap (
                                                                sttfa.p (
                                                                  type_2 A))) =>
                                                             term_23)))))) (
          leibniz.trans type_5 (term_10 A (term_22 A P_1)) (term_10 A (
                                                              term_22 A P_1)) (
            term_24 A (term_22 A P_1)) (P1:
                                        (sttfa.etap (sttfa.p (sttfa.arrow type_5 sttfa.bool))) =>
                                        leibniz.refl (type_15 A) (term_22 A P_1) (
                                          z:
                                          (sttfa.etap (sttfa.p (type_15 A))) =>
                                          P1 (term_10 A z))) (P1:
                                                              (sttfa.etap (
                                                                 sttfa.p (
                                                                   sttfa.arrow type_5 sttfa.bool))) =>
                                                              thm_7 A (
                                                                h:
                                                                (sttfa.etap (
                                                                   sttfa.p (
                                                                    sttfa.arrow (
                                                                    type_15 A) type_5))) =>
                                                                P1 (h (
                                                                    term_22 A P_1))))) (
          z:(sttfa.etap (sttfa.p type_5)) => P0 (leibniz.eq type_5 z))) (
        P0:
        (sttfa.etap (sttfa.p (sttfa.arrow (sttfa.arrow type_5 sttfa.bool) sttfa.bool))) =>
        leibniz.refl (sttfa.arrow type_5 (sttfa.arrow type_5 sttfa.bool)) (
          leibniz.eq type_5) (h:
                              (sttfa.etap (sttfa.p (sttfa.arrow type_5 (
                                                      sttfa.arrow type_5 sttfa.bool)))) =>
                              P0 (h (leibniz.eq (type_15 A) (term_22 A P_1) (
                                       x_2:
                                       (sttfa.etap (sttfa.p (type_2 A))) =>
                                       term_23))))) (h:
                                                     (sttfa.etap (sttfa.p (
                                                                    sttfa.arrow type_5 sttfa.bool))) =>
                                                     P (h (term_10 A (
                                                             term_22 A P_1)))))) (
    leibniz.refl type_5 (term_10 A (term_22 A P_1))).


thm thm_9 :
  sttfa.eps (sttfa.forallP (x:sttfa.type =>
                            sttfa.forallP (x0:sttfa.type =>
                                           sttfa.forall (type_13 x x0) (
                                             x1:
                                             (sttfa.etap (sttfa.p (type_13 x x0))) =>
                                             term_9 (leibniz.eq (type_13 x x0) x1 (
                                                       x_2:
                                                       (sttfa.etap (sttfa.p (
                                                                    type_3 x x0))) =>
                                                       term_23)) (Data_2EBool_2E_21 (
                                                                    sttfa.arrow (
                                                                    type_13 x x0) type_5) x1)))))
  :=
  B:sttfa.type =>
  A:sttfa.type =>
  P_1:(sttfa.etap (sttfa.p (type_13 B A))) => thm_8 (type_3 B A) P_1.


def term_25 :
  sttfa.etap (sttfa.p (sttfa.arrow type_5 type_5))
  :=
  t_1:(sttfa.etap (sttfa.p type_5)) => t_1.


thm thm_10 :
  sttfa.eps (sttfa.forall type_5 (x:(sttfa.etap (sttfa.p type_5)) =>
                                  sttfa.impl (term_9 (term_25 x) term_23) (
                                    term_9 term_23 (term_25 x))))
  :=
  t_1:(sttfa.etap (sttfa.p type_5)) =>
  hyp_1:(sttfa.eps (term_9 (term_25 t_1) term_23)) =>
  sttfa_hol_axioms.EQ_MP (leibniz.eq type_5 (term_25 t_1) (term_25 t_1)) (
    leibniz.eq type_5 term_23 (term_25 t_1)) (leibniz.trans sttfa.bool (
                                                leibniz.eq type_5 (term_25 t_1) (
                                                  term_25 t_1)) (leibniz.eq type_5 (
                                                                   term_25 t_1) (
                                                                   term_25 t_1)) (
                                                leibniz.eq type_5 term_23 (
                                                  term_25 t_1)) (P:
                                                                 (sttfa.etap (
                                                                    sttfa.p (
                                                                    sttfa.arrow sttfa.bool sttfa.bool))) =>
                                                                 leibniz.refl type_5 (
                                                                   term_25 t_1) (
                                                                   z:
                                                                   (sttfa.etap (
                                                                    sttfa.p type_5)) =>
                                                                   P (
                                                                    leibniz.eq type_5 (
                                                                    term_25 t_1) z))) (
                                                P:
                                                (sttfa.etap (sttfa.p (
                                                               sttfa.arrow sttfa.bool sttfa.bool))) =>
                                                leibniz.trans (sttfa.arrow type_5 sttfa.bool) (
                                                  leibniz.eq type_5 (
                                                    term_25 t_1)) (leibniz.eq type_5 term_23) (
                                                  leibniz.eq type_5 term_23) (
                                                  P0:
                                                  (sttfa.etap (sttfa.p (
                                                                 sttfa.arrow (
                                                                   sttfa.arrow type_5 sttfa.bool) sttfa.bool))) =>
                                                  hyp_1 (z:
                                                         (sttfa.etap (
                                                            sttfa.p type_5)) =>
                                                         P0 (leibniz.eq type_5 z))) (
                                                  P0:
                                                  (sttfa.etap (sttfa.p (
                                                                 sttfa.arrow (
                                                                   sttfa.arrow type_5 sttfa.bool) sttfa.bool))) =>
                                                  leibniz.refl (sttfa.arrow type_5 (
                                                                  sttfa.arrow type_5 sttfa.bool)) (
                                                    leibniz.eq type_5) (
                                                    h:
                                                    (sttfa.etap (sttfa.p (
                                                                   sttfa.arrow type_5 (
                                                                    sttfa.arrow type_5 sttfa.bool)))) =>
                                                    P0 (h term_23))) (
                                                  h:
                                                  (sttfa.etap (sttfa.p (
                                                                 sttfa.arrow type_5 sttfa.bool))) =>
                                                  P (h (term_25 t_1))))) (
    leibniz.refl type_5 (term_25 t_1)).


thm_11 : sttfa.eps term_23.


thm thm_12 :
  sttfa.eps (sttfa.forall type_5 (x:(sttfa.etap (sttfa.p type_5)) =>
                                  term_9 (term_25 x) (term_9 (term_25 x) term_23)))
  :=
  t_1:(sttfa.etap (sttfa.p type_5)) =>
  sttfa_hol_axioms.PROP_EXT (term_25 t_1) (term_9 (term_25 t_1) term_23) (
    hyp_1:(sttfa.eps (term_9 (term_25 t_1) term_23)) =>
    sttfa_hol_axioms.EQ_MP term_23 (term_25 t_1) (thm_10 t_1 hyp_1) thm_11) (
    hyp_1:(sttfa.eps (term_25 t_1)) =>
    sttfa_hol_axioms.PROP_EXT (term_25 t_1) term_23 (hyp_2:
                                                     (sttfa.eps term_23) =>
                                                     hyp_1) (hyp_2:
                                                             (sttfa.eps (
                                                                term_25 t_1)) =>
                                                             thm_11)).


thm thm_13 :
  sttfa.eps (sttfa.forallP (x:sttfa.type =>
                            sttfa.forallP (x0:sttfa.type =>
                                           sttfa.forall (type_3 x x0) (
                                             x1:
                                             (sttfa.etap (sttfa.p (type_3 x x0))) =>
                                             term_9 (term_19 x x0 (term_13 x x0 x1)) (
                                               term_17 x x0 x1)))))
  :=
  B:sttfa.type =>
  A:sttfa.type =>
  __1861_1:(sttfa.etap (sttfa.p (type_3 B A))) =>
  sttfa_hol_axioms.EQ_MP (leibniz.eq type_5 (term_18 B A (term_13 B A __1861_1)) (
                            term_17 B A __1861_1)) (leibniz.eq type_5 (
                                                      term_19 B A (term_13 B A __1861_1)) (
                                                      term_17 B A __1861_1)) (
    leibniz.trans sttfa.bool (leibniz.eq type_5 (term_18 B A (term_13 B A __1861_1)) (
                                term_17 B A __1861_1)) (leibniz.eq type_5 (
                                                          term_18 B A (
                                                            term_13 B A __1861_1)) (
                                                          term_17 B A __1861_1)) (
      leibniz.eq type_5 (term_19 B A (term_13 B A __1861_1)) (term_17 B A __1861_1)) (
      P:(sttfa.etap (sttfa.p (sttfa.arrow sttfa.bool sttfa.bool))) =>
      leibniz.refl type_5 (term_17 B A __1861_1) (z:
                                                  (sttfa.etap (sttfa.p type_5)) =>
                                                  P (leibniz.eq type_5 (
                                                       term_18 B A (term_13 B A __1861_1)) z))) (
      P:(sttfa.etap (sttfa.p (sttfa.arrow sttfa.bool sttfa.bool))) =>
      leibniz.trans (sttfa.arrow type_5 sttfa.bool) (leibniz.eq type_5 (
                                                       term_18 B A (term_13 B A __1861_1))) (
        leibniz.eq type_5 (term_19 B A (term_13 B A __1861_1))) (leibniz.eq type_5 (
                                                                   term_19 B A (
                                                                    term_13 B A __1861_1))) (
        P0:
        (sttfa.etap (sttfa.p (sttfa.arrow (sttfa.arrow type_5 sttfa.bool) sttfa.bool))) =>
        sttfa_hol_axioms.EQ_MP (leibniz.eq type_5 (term_19 B A (term_13 B A __1861_1)) (
                                  term_19 B A (term_13 B A __1861_1))) (
          leibniz.eq type_5 (term_18 B A (term_13 B A __1861_1)) (term_19 B A (
                                                                    term_13 B A __1861_1))) (
          leibniz.trans sttfa.bool (leibniz.eq type_5 (term_19 B A (term_13 B A __1861_1)) (
                                      term_19 B A (term_13 B A __1861_1))) (
            leibniz.eq type_5 (term_19 B A (term_13 B A __1861_1)) (term_19 B A (
                                                                    term_13 B A __1861_1))) (
            leibniz.eq type_5 (term_18 B A (term_13 B A __1861_1)) (term_19 B A (
                                                                    term_13 B A __1861_1))) (
            P1:(sttfa.etap (sttfa.p (sttfa.arrow sttfa.bool sttfa.bool))) =>
            leibniz.refl type_5 (term_19 B A (term_13 B A __1861_1)) (
              z:(sttfa.etap (sttfa.p type_5)) =>
              P1 (leibniz.eq type_5 (term_19 B A (term_13 B A __1861_1)) z))) (
            P1:(sttfa.etap (sttfa.p (sttfa.arrow sttfa.bool sttfa.bool))) =>
            leibniz.trans (sttfa.arrow type_5 sttfa.bool) (leibniz.eq type_5 (
                                                             term_19 B A (
                                                               term_13 B A __1861_1))) (
              leibniz.eq type_5 (term_18 B A (term_13 B A __1861_1))) (
              leibniz.eq type_5 (term_18 B A (term_13 B A __1861_1))) (
              P2:
              (sttfa.etap (sttfa.p (sttfa.arrow (sttfa.arrow type_5 sttfa.bool) sttfa.bool))) =>
              leibniz.trans type_5 (term_19 B A (term_13 B A __1861_1)) (
                term_19 B A (term_13 B A __1861_1)) (term_18 B A (term_13 B A __1861_1)) (
                P3:(sttfa.etap (sttfa.p (sttfa.arrow type_5 sttfa.bool))) =>
                leibniz.refl (type_3 B A) (term_13 B A __1861_1) (z:
                                                                  (sttfa.etap (
                                                                    sttfa.p (
                                                                    type_3 B A))) =>
                                                                  P3 (
                                                                    term_19 B A z))) (
                P3:(sttfa.etap (sttfa.p (sttfa.arrow type_5 sttfa.bool))) =>
                thm_6 B A (h:
                           (sttfa.etap (sttfa.p (sttfa.arrow (type_3 B A) type_5))) =>
                           P3 (h (term_13 B A __1861_1)))) (z:
                                                            (sttfa.etap (
                                                               sttfa.p type_5)) =>
                                                            P2 (leibniz.eq type_5 z))) (
              P2:
              (sttfa.etap (sttfa.p (sttfa.arrow (sttfa.arrow type_5 sttfa.bool) sttfa.bool))) =>
              leibniz.refl (sttfa.arrow type_5 (sttfa.arrow type_5 sttfa.bool)) (
                leibniz.eq type_5) (h:
                                    (sttfa.etap (sttfa.p (sttfa.arrow type_5 (
                                                            sttfa.arrow type_5 sttfa.bool)))) =>
                                    P2 (h (term_18 B A (term_13 B A __1861_1))))) (
              h:(sttfa.etap (sttfa.p (sttfa.arrow type_5 sttfa.bool))) =>
              P1 (h (term_19 B A (term_13 B A __1861_1)))))) (leibniz.refl type_5 (
                                                                term_19 B A (
                                                                  term_13 B A __1861_1))) (
          z:(sttfa.etap (sttfa.p type_5)) => P0 (leibniz.eq type_5 z))) (
        P0:
        (sttfa.etap (sttfa.p (sttfa.arrow (sttfa.arrow type_5 sttfa.bool) sttfa.bool))) =>
        leibniz.refl (sttfa.arrow type_5 (sttfa.arrow type_5 sttfa.bool)) (
          leibniz.eq type_5) (h:
                              (sttfa.etap (sttfa.p (sttfa.arrow type_5 (
                                                      sttfa.arrow type_5 sttfa.bool)))) =>
                              P0 (h (term_19 B A (term_13 B A __1861_1))))) (
        h:(sttfa.etap (sttfa.p (sttfa.arrow type_5 sttfa.bool))) =>
        P (h (term_17 B A __1861_1))))) (leibniz.refl type_5 (term_17 B A (
                                                                term_13 B A __1861_1))).


def term_26 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.p (sttfa.arrow (type_13 x x0) type_5))))
  :=
  B:sttfa.type =>
  A:sttfa.type => Data_2EBool_2E_21 (sttfa.arrow (type_13 B A) type_5).


thm thm_14 :
  sttfa.eps (sttfa.forallP (x:sttfa.type =>
                            sttfa.forallP (x0:sttfa.type =>
                                           term_26 x x0 (term_21 x x0))))
  :=
  B:sttfa.type =>
  A:sttfa.type =>
  sttfa_hol_axioms.EQ_MP (leibniz.eq (type_13 B A) (__1861_1:
                                                    (sttfa.etap (sttfa.p (
                                                                   type_3 B A))) =>
                                                    term_9 (term_19 B A (
                                                              term_13 B A __1861_1)) (
                                                      term_17 B A __1861_1)) (
                            __1861_1:(sttfa.etap (sttfa.p (type_3 B A))) =>
                            term_23)) (term_26 B A (term_21 B A)) (thm_9 (
                                                                    type_0 B) (
                                                                    type_2 A) (
                                                                    term_21 B A)) (
    sttfa_hol_axioms.ABS_THM (type_3 B A) type_5 (__1861_1:
                                                  (sttfa.etap (sttfa.p (
                                                                 type_3 B A))) =>
                                                  term_9 (term_19 B A (
                                                            term_13 B A __1861_1)) (
                                                    term_17 B A __1861_1)) (
      __1861_1:(sttfa.etap (sttfa.p (type_3 B A))) => term_23) (__1861_1:
                                                                (sttfa.etap (
                                                                   sttfa.p (
                                                                    type_3 B A))) =>
                                                                sttfa_hol_axioms.EQ_MP (
                                                                  term_9 (
                                                                    term_19 B A (
                                                                    term_13 B A __1861_1)) (
                                                                    term_17 B A __1861_1)) (
                                                                  term_9 (
                                                                    term_9 (
                                                                    term_19 B A (
                                                                    term_13 B A __1861_1)) (
                                                                    term_17 B A __1861_1)) term_23) (
                                                                  thm_12 (
                                                                    term_9 (
                                                                    term_19 B A (
                                                                    term_13 B A __1861_1)) (
                                                                    term_17 B A __1861_1))) (
                                                                  thm_13 B A __1861_1))).


def term_27 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.p (sttfa.arrow (type_17 x) type_5)))
  :=
  B:sttfa.type => Data_2EBool_2E_21 (sttfa.arrow (type_17 B) type_5).


Data_2EBool_2E_3F :
  sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p (type_2 x))).


def term_28 :
  sttfa.etap (sttfa.forallK (x:sttfa.type => sttfa.p (type_16 x)))
  :=
  A:sttfa.type => Data_2EBool_2E_3F (type_16 A).


def term_29 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.p (sttfa.arrow (type_0 x) (type_17 x))))
  :=
  B:sttfa.type => y_1:(sttfa.etap (sttfa.p (type_0 B))) => term_12 B y_1.


def term_30 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.p (sttfa.arrow (type_3 x x0) (
                                                       type_3 x x0)))))
  :=
  B:sttfa.type =>
  A:sttfa.type => __1866_1:(sttfa.etap (sttfa.p (type_3 B A))) => __1866_1.


def term_31 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.p (sttfa.arrow (type_3 x0 x) type_5))))
  :=
  A:sttfa.type =>
  B:sttfa.type =>
  __1866_1:(sttfa.etap (sttfa.p (type_3 B A))) =>
  term_27 B (y_2:(sttfa.etap (sttfa.p (type_0 B))) =>
             term_28 A (x_3:(sttfa.etap (sttfa.p (type_2 A))) =>
                        term_29 B y_2 (term_30 B A __1866_1 (term_0 A x_3)))).


def term_32 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.p (type_13 x x0))))
  :=
  B:sttfa.type =>
  A:sttfa.type =>
  __1866_1:(sttfa.etap (sttfa.p (type_3 B A))) => term_31 A B __1866_1.


def Function_2Esurjective :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.p (type_13 x x0))))
  :=
  B:sttfa.type => A:sttfa.type => term_32 B A.


thm thm_15 :
  sttfa.eps (sttfa.forallP (x:sttfa.type =>
                            sttfa.forallP (x0:sttfa.type =>
                                           leibniz.eq (type_13 x x0) (
                                             Function_2Esurjective (type_0 x) (
                                               type_2 x0)) (term_32 x x0))))
  :=
  B:sttfa.type =>
  A:sttfa.type =>
  leibniz.refl (type_13 B A) (Function_2Esurjective (type_0 B) (type_2 A)).


def term_33 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.p (type_13 x x0))))
  :=
  B:sttfa.type => A:sttfa.type => Function_2Esurjective (type_0 B) (type_2 A).


def term_34 :
  sttfa.etap (sttfa.forallK (x:sttfa.type =>
                             sttfa.forallK (x0:sttfa.type =>
                                            sttfa.p (type_13 x x0))))
  :=
  B:sttfa.type =>
  A:sttfa.type =>
  f_1:(sttfa.etap (sttfa.p (type_3 B A))) =>
  term_9 (term_33 B A (term_20 B A f_1)) (term_27 B (y_2:
                                                     (sttfa.etap (sttfa.p (
                                                                    type_0 B))) =>
                                                     term_28 A (x_3:
                                                                (sttfa.etap (
                                                                   sttfa.p (
                                                                    type_2 A))) =>
                                                                term_29 B y_2 (
                                                                  term_20 B A f_1 (
                                                                    term_0 A x_3))))).


thm thm_16 :
  sttfa.eps (sttfa.forallP (x:sttfa.type =>
                            sttfa.forallP (x0:sttfa.type =>
                                           sttfa.forall (type_3 x x0) (
                                             x1:
                                             (sttfa.etap (sttfa.p (type_3 x x0))) =>
                                             term_9 (term_33 x x0 (term_30 x x0 x1)) (
                                               term_31 x0 x x1)))))
  :=
  B:sttfa.type =>
  A:sttfa.type =>
  __1866_1:(sttfa.etap (sttfa.p (type_3 B A))) =>
  sttfa_hol_axioms.EQ_MP (leibniz.eq type_5 (term_32 B A (term_30 B A __1866_1)) (
                            term_31 A B __1866_1)) (leibniz.eq type_5 (
                                                      term_33 B A (term_30 B A __1866_1)) (
                                                      term_31 A B __1866_1)) (
    leibniz.trans sttfa.bool (leibniz.eq type_5 (term_32 B A (term_30 B A __1866_1)) (
                                term_31 A B __1866_1)) (leibniz.eq type_5 (
                                                          term_32 B A (
                                                            term_30 B A __1866_1)) (
                                                          term_31 A B __1866_1)) (
      leibniz.eq type_5 (term_33 B A (term_30 B A __1866_1)) (term_31 A B __1866_1)) (
      P:(sttfa.etap (sttfa.p (sttfa.arrow sttfa.bool sttfa.bool))) =>
      leibniz.refl type_5 (term_31 A B __1866_1) (z:
                                                  (sttfa.etap (sttfa.p type_5)) =>
                                                  P (leibniz.eq type_5 (
                                                       term_32 B A (term_30 B A __1866_1)) z))) (
      P:(sttfa.etap (sttfa.p (sttfa.arrow sttfa.bool sttfa.bool))) =>
      leibniz.trans (sttfa.arrow type_5 sttfa.bool) (leibniz.eq type_5 (
                                                       term_32 B A (term_30 B A __1866_1))) (
        leibniz.eq type_5 (term_33 B A (term_30 B A __1866_1))) (leibniz.eq type_5 (
                                                                   term_33 B A (
                                                                    term_30 B A __1866_1))) (
        P0:
        (sttfa.etap (sttfa.p (sttfa.arrow (sttfa.arrow type_5 sttfa.bool) sttfa.bool))) =>
        sttfa_hol_axioms.EQ_MP (leibniz.eq type_5 (term_33 B A (term_30 B A __1866_1)) (
                                  term_33 B A (term_30 B A __1866_1))) (
          leibniz.eq type_5 (term_32 B A (term_30 B A __1866_1)) (term_33 B A (
                                                                    term_30 B A __1866_1))) (
          leibniz.trans sttfa.bool (leibniz.eq type_5 (term_33 B A (term_30 B A __1866_1)) (
                                      term_33 B A (term_30 B A __1866_1))) (
            leibniz.eq type_5 (term_33 B A (term_30 B A __1866_1)) (term_33 B A (
                                                                    term_30 B A __1866_1))) (
            leibniz.eq type_5 (term_32 B A (term_30 B A __1866_1)) (term_33 B A (
                                                                    term_30 B A __1866_1))) (
            P1:(sttfa.etap (sttfa.p (sttfa.arrow sttfa.bool sttfa.bool))) =>
            leibniz.refl type_5 (term_33 B A (term_30 B A __1866_1)) (
              z:(sttfa.etap (sttfa.p type_5)) =>
              P1 (leibniz.eq type_5 (term_33 B A (term_30 B A __1866_1)) z))) (
            P1:(sttfa.etap (sttfa.p (sttfa.arrow sttfa.bool sttfa.bool))) =>
            leibniz.trans (sttfa.arrow type_5 sttfa.bool) (leibniz.eq type_5 (
                                                             term_33 B A (
                                                               term_30 B A __1866_1))) (
              leibniz.eq type_5 (term_32 B A (term_30 B A __1866_1))) (
              leibniz.eq type_5 (term_32 B A (term_30 B A __1866_1))) (
              P2:
              (sttfa.etap (sttfa.p (sttfa.arrow (sttfa.arrow type_5 sttfa.bool) sttfa.bool))) =>
              leibniz.trans type_5 (term_33 B A (term_30 B A __1866_1)) (
                term_33 B A (term_30 B A __1866_1)) (term_32 B A (term_30 B A __1866_1)) (
                P3:(sttfa.etap (sttfa.p (sttfa.arrow type_5 sttfa.bool))) =>
                leibniz.refl (type_3 B A) (term_30 B A __1866_1) (z:
                                                                  (sttfa.etap (
                                                                    sttfa.p (
                                                                    type_3 B A))) =>
                                                                  P3 (
                                                                    term_33 B A z))) (
                P3:(sttfa.etap (sttfa.p (sttfa.arrow type_5 sttfa.bool))) =>
                thm_15 B A (h:
                            (sttfa.etap (sttfa.p (sttfa.arrow (type_3 B A) type_5))) =>
                            P3 (h (term_30 B A __1866_1)))) (z:
                                                             (sttfa.etap (
                                                                sttfa.p type_5)) =>
                                                             P2 (leibniz.eq type_5 z))) (
              P2:
              (sttfa.etap (sttfa.p (sttfa.arrow (sttfa.arrow type_5 sttfa.bool) sttfa.bool))) =>
              leibniz.refl (sttfa.arrow type_5 (sttfa.arrow type_5 sttfa.bool)) (
                leibniz.eq type_5) (h:
                                    (sttfa.etap (sttfa.p (sttfa.arrow type_5 (
                                                            sttfa.arrow type_5 sttfa.bool)))) =>
                                    P2 (h (term_32 B A (term_30 B A __1866_1))))) (
              h:(sttfa.etap (sttfa.p (sttfa.arrow type_5 sttfa.bool))) =>
              P1 (h (term_33 B A (term_30 B A __1866_1)))))) (leibniz.refl type_5 (
                                                                term_33 B A (
                                                                  term_30 B A __1866_1))) (
          z:(sttfa.etap (sttfa.p type_5)) => P0 (leibniz.eq type_5 z))) (
        P0:
        (sttfa.etap (sttfa.p (sttfa.arrow (sttfa.arrow type_5 sttfa.bool) sttfa.bool))) =>
        leibniz.refl (sttfa.arrow type_5 (sttfa.arrow type_5 sttfa.bool)) (
          leibniz.eq type_5) (h:
                              (sttfa.etap (sttfa.p (sttfa.arrow type_5 (
                                                      sttfa.arrow type_5 sttfa.bool)))) =>
                              P0 (h (term_33 B A (term_30 B A __1866_1))))) (
        h:(sttfa.etap (sttfa.p (sttfa.arrow type_5 sttfa.bool))) =>
        P (h (term_31 A B __1866_1))))) (leibniz.refl type_5 (term_31 A B (
                                                                term_30 B A __1866_1))).


thm thm_17 :
  sttfa.eps (sttfa.forallP (x:sttfa.type =>
                            sttfa.forallP (x0:sttfa.type =>
                                           term_26 x x0 (term_34 x x0))))
  :=
  B:sttfa.type =>
  A:sttfa.type =>
  sttfa_hol_axioms.EQ_MP (leibniz.eq (type_13 B A) (__1866_1:
                                                    (sttfa.etap (sttfa.p (
                                                                   type_3 B A))) =>
                                                    term_9 (term_33 B A (
                                                              term_30 B A __1866_1)) (
                                                      term_31 A B __1866_1)) (
                            __1866_1:(sttfa.etap (sttfa.p (type_3 B A))) =>
                            term_23)) (term_26 B A (term_34 B A)) (thm_9 (
                                                                    type_0 B) (
                                                                    type_2 A) (
                                                                    term_34 B A)) (
    sttfa_hol_axioms.ABS_THM (type_3 B A) type_5 (__1866_1:
                                                  (sttfa.etap (sttfa.p (
                                                                 type_3 B A))) =>
                                                  term_9 (term_33 B A (
                                                            term_30 B A __1866_1)) (
                                                    term_31 A B __1866_1)) (
      __1866_1:(sttfa.etap (sttfa.p (type_3 B A))) => term_23) (__1866_1:
                                                                (sttfa.etap (
                                                                   sttfa.p (
                                                                    type_3 B A))) =>
                                                                sttfa_hol_axioms.EQ_MP (
                                                                  term_9 (
                                                                    term_33 B A (
                                                                    term_30 B A __1866_1)) (
                                                                    term_31 A B __1866_1)) (
                                                                  term_9 (
                                                                    term_9 (
                                                                    term_33 B A (
                                                                    term_30 B A __1866_1)) (
                                                                    term_31 A B __1866_1)) term_23) (
                                                                  thm_12 (
                                                                    term_9 (
                                                                    term_33 B A (
                                                                    term_30 B A __1866_1)) (
                                                                    term_31 A B __1866_1))) (
                                                                  thm_16 B A __1866_1))).



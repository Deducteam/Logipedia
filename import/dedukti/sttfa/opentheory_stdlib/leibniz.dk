def eq : sttfa.etap (sttfa.forallK (A : sttfa.type => sttfa.p (sttfa.arrow A (sttfa.arrow A sttfa.bool)))) :=
    A : sttfa.type =>
    x : sttfa.etap (sttfa.p A) =>
    y : sttfa.etap (sttfa.p A) =>
    sttfa.forall (sttfa.arrow A sttfa.bool) (P : sttfa.etap (sttfa.p (sttfa.arrow A sttfa.bool)) =>
    sttfa.impl (P x) (P y)).


def refl : sttfa.eps (
    sttfa.forallP  (A : sttfa.type =>
    sttfa.forall A (x : sttfa.eta A => (eq A x x)))) :=
A : sttfa.type =>
x : sttfa.eta A =>
P : sttfa.eta (sttfa.arrow A sttfa.bool) =>
H : sttfa.eps (P x) => H.

def trans : sttfa.eps (
    sttfa.forallP (A  : sttfa.type =>
    sttfa.forall A (x : sttfa.eta A =>
    sttfa.forall A (y : sttfa.eta A =>
    sttfa.forall A (z : sttfa.eta A =>
    sttfa.impl (eq A x y) (sttfa.impl (eq A y z) (eq A x z))))))) :=
A  : sttfa.type   =>
x  : sttfa.eta  A =>
y  : sttfa.eta  A =>
z  : sttfa.eta  A =>
L  : sttfa.eps (eq A x y) =>
R  : sttfa.eps (eq A y z) =>
P  : sttfa.eta (sttfa.arrow A sttfa.bool) =>
PX : sttfa.eps (P x) => R P (L P PX).

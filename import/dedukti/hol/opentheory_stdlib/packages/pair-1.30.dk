
(; This file was generated by Holide. ;)

#NAME pair_2D1_2E30.

def type_0 : hol.type :=
  hol.bool.

def type_1 : hol.type :=
  hol.arr type_0 type_0.

def type_2 : hol.type -> hol.type :=
  B : hol.type => B.

def type_3 : hol.type -> hol.type :=
  A : hol.type => A.

def type_4 : hol.type -> hol.type -> hol.type :=
  A : hol.type => B : hol.type => hol.arr (type_2 B) (type_3 A).

def type_5 : hol.type :=
  hol.arr type_0 type_1.

def term_0 : hol.term type_5 :=
  hol.eq type_0.

(; Constant pair-1.30 ;)

pair_2D1_2E30 : A : hol.type -> hol.term (type_3 A).

def term_1 : hol.term type_0 :=
  pair_2D1_2E30 type_0.

def term_2 : A : hol.type -> B : hol.type -> hol.term type_1 :=
  A : hol.type => B : hol.type => (y_1 : hol.term (hol.arr (type_4 A B) (type_4 A B)) => term_0 term_1) (x_1 : hol.term (type_4 A B) => x_1).

(; dict ;)

thm thm_0 : A : hol.type -> B : hol.type -> hol.proof (hol.eq type_1 (term_2 A B) (term_2 A B)) :=
  A : hol.type => B : hol.type => hol.REFL type_1 (term_2 A B).

(; dict ;)

thm thm_1 : hol.proof (term_0 term_1 term_1) :=
  hol.REFL type_0 term_1.

Data_2EPair_2E_2A : hol.type -> hol.type -> hol.type.

(; Constant _ ;)

__ : B : hol.type -> A : hol.type -> hol.term (hol.arr type_0 (Data_2EPair_2E_2A (type_3 A) (type_2 B))).

(; Constant _ ;)

__ : B : hol.type -> A : hol.type -> hol.term (hol.arr (Data_2EPair_2E_2A (type_3 A) (type_2 B)) type_0).

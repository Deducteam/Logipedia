
(; This file was generated by Holide. ;)

#NAME list_2Dreplicate_2Ddef_2D1_2E53.

def type_0 : hol.type -> hol.type :=
  A : hol.type => A.

(; Constant Data.Bool.! ;)

Data_2EBool_2E_21 : A : hol.type -> hol.term (type_0 A).

def term_0 : A : hol.type -> hol.term (hol.arr (hol.arr (type_0 A) hol.bool) hol.bool) :=
  A : hol.type => Data_2EBool_2E_21 (hol.arr (hol.arr (type_0 A) hol.bool) hol.bool).

Data_2EList_2Elist : hol.type -> hol.type.

def type_1 : hol.type -> hol.type :=
  A : hol.type => Data_2EList_2Elist (type_0 A).

def term_1 : A : hol.type -> hol.term (hol.arr (type_1 A) (hol.arr (type_1 A) hol.bool)) :=
  A : hol.type => hol.eq (type_1 A).

Number_2ENatural_2Enatural : hol.type.

def type_2 : hol.type :=
  Number_2ENatural_2Enatural.

def type_3 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_0 A) (hol.arr type_2 (type_1 A)).

(; Constant list-replicate-def-1.53 ;)

list_2Dreplicate_2Ddef_2D1_2E53 : A : hol.type -> hol.term (type_0 A).

(; Constant Data.List.replicate ;)

def Data_2EList_2Ereplicate : A : hol.type -> hol.term (type_3 A) :=
  A : hol.type => list_2Dreplicate_2Ddef_2D1_2E53 (type_3 A).

def term_2 : A : hol.type -> x_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => x_1 : hol.term (type_0 A) => x_1.

def term_3 : A : hol.type -> x_1 : hol.term (type_0 A) -> hol.term (hol.arr type_2 (type_1 A)) :=
  A : hol.type => x_1 : hol.term (type_0 A) => Data_2EList_2Ereplicate (type_0 A) (term_2 A x_1).

(; Constant Number.Natural.zero ;)

Number_2ENatural_2Ezero : A : hol.type -> hol.term (type_0 A).

(; Constant Data.List.[] ;)

Data_2EList_2E_5B_5D : A : hol.type -> hol.term (type_0 A).

def term_4 : A : hol.type -> hol.term hol.bool :=
  A : hol.type => term_0 A (x_1 : hol.term (type_0 A) => term_1 A (term_3 A x_1 (Number_2ENatural_2Ezero type_2)) (Data_2EList_2E_5B_5D (type_1 A))).

(; axiom ;)

thm_0 : A : hol.type -> hol.proof (term_4 A).

(; Theorem: |- (Data.Bool.! \lambda x. ((= ((Data.List.replicate x) Number.Natural.zero)) Data.List.[])) ;)

(; Constant Number.Natural.suc ;)

Number_2ENatural_2Esuc : A : hol.type -> hol.term (type_0 A).

def term_5 : n_1 : hol.term type_2 -> hol.term type_2 :=
  n_1 : hol.term type_2 => n_1.

(; Constant Data.List.:: ;)

Data_2EList_2E_3A_3A : A : hol.type -> hol.term (type_0 A).

def term_6 : A : hol.type -> hol.term hol.bool :=
  A : hol.type => term_0 A (x_1 : hol.term (type_0 A) => Data_2EBool_2E_21 (hol.arr (hol.arr type_2 hol.bool) hol.bool) (n_2 : hol.term type_2 => term_1 A (term_3 A x_1 (Number_2ENatural_2Esuc (hol.arr type_2 type_2) (term_5 n_2))) (Data_2EList_2E_3A_3A (hol.arr (type_0 A) (hol.arr (type_1 A) (type_1 A))) (term_2 A x_1) (term_3 A x_1 (term_5 n_2))))).

(; axiom ;)

thm_1 : A : hol.type -> hol.proof (term_6 A).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda n. ((= ((Data.List.replicate x) (Number.Natural.suc n))) ((Data.List.:: x) ((Data.List.replicate x) n))))) ;)


(; This file was generated by Holide. ;)

#NAME list_2Dnub_2Ddef_2D1_2E54.

def type_0 : hol.type -> hol.type :=
  A : hol.type => A.

Data_2EList_2Elist : hol.type -> hol.type.

def type_1 : hol.type -> hol.type :=
  A : hol.type => Data_2EList_2Elist (type_0 A).

def type_2 : hol.type :=
  hol.bool.

def type_3 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_1 A) type_2.

def term_0 : A : hol.type -> hol.term (hol.arr (type_1 A) (type_3 A)) :=
  A : hol.type => hol.eq (type_1 A).

def type_4 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_1 A) (type_1 A).

(; Constant list-nub-def-1.54 ;)

list_2Dnub_2Ddef_2D1_2E54 : A : hol.type -> hol.term (type_0 A).

def term_1 : A : hol.type -> hol.term (type_4 A) :=
  A : hol.type => list_2Dnub_2Ddef_2D1_2E54 (type_4 A).

(; Constant Data.List.nubReverse ;)

def Data_2EList_2EnubReverse : A : hol.type -> hol.term (type_4 A) :=
  A : hol.type => term_1 A.

def term_2 : A : hol.type -> hol.term (type_4 A) :=
  A : hol.type => Data_2EList_2EnubReverse (type_0 A).

(; Constant Data.List.[] ;)

Data_2EList_2E_5B_5D : A : hol.type -> hol.term (type_0 A).

def term_3 : A : hol.type -> hol.term (type_1 A) :=
  A : hol.type => Data_2EList_2E_5B_5D (type_1 A).

def term_4 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_0 A (term_2 A (term_3 A)) (term_3 A).

(; axiom ;)

thm_0 : A : hol.type -> hol.proof (term_4 A).

(; Theorem: |- ((= (Data.List.nubReverse Data.List.[])) Data.List.[]) ;)

(; Constant Data.Bool.! ;)

Data_2EBool_2E_21 : A : hol.type -> hol.term (type_0 A).

def term_5 : A : hol.type -> hol.term (hol.arr (type_3 A) type_2) :=
  A : hol.type => Data_2EBool_2E_21 (hol.arr (type_3 A) type_2).

(; Constant Data.List.nub ;)

def Data_2EList_2Enub : A : hol.type -> hol.term (type_4 A) :=
  A : hol.type => term_1 A.

def term_6 : A : hol.type -> l_1 : hol.term (type_1 A) -> hol.term (type_1 A) :=
  A : hol.type => l_1 : hol.term (type_1 A) => l_1.

(; Constant Data.List.reverse ;)

Data_2EList_2Ereverse : A : hol.type -> hol.term (type_0 A).

def term_7 : A : hol.type -> hol.term (type_4 A) :=
  A : hol.type => Data_2EList_2Ereverse (type_4 A).

def term_8 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_5 A (l_1 : hol.term (type_1 A) => term_0 A (Data_2EList_2Enub (type_0 A) (term_6 A l_1)) (term_7 A (term_2 A (term_7 A (term_6 A l_1))))).

(; axiom ;)

thm_1 : A : hol.type -> hol.proof (term_8 A).

(; Theorem: |- (Data.Bool.! \lambda l. ((= (Data.List.nub l)) (Data.List.reverse (Data.List.nubReverse (Data.List.reverse l))))) ;)

(; Constant Data.List.:: ;)

Data_2EList_2E_3A_3A : A : hol.type -> hol.term (type_0 A).

def term_9 : A : hol.type -> h_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => h_1 : hol.term (type_0 A) => h_1.

def term_10 : A : hol.type -> h_1 : hol.term (type_0 A) -> hol.term (type_4 A) :=
  A : hol.type => h_1 : hol.term (type_0 A) => Data_2EList_2E_3A_3A (hol.arr (type_0 A) (type_4 A)) (term_9 A h_1).

def term_11 : A : hol.type -> t_1 : hol.term (type_1 A) -> hol.term (type_1 A) :=
  A : hol.type => t_1 : hol.term (type_1 A) => t_1.

(; Constant Data.Bool.cond ;)

Data_2EBool_2Econd : A : hol.type -> hol.term (type_0 A).

(; Constant Data.List.member ;)

Data_2EList_2Emember : A : hol.type -> hol.term (type_0 A).

def term_12 : A : hol.type -> t_1 : hol.term (type_1 A) -> hol.term (type_1 A) :=
  A : hol.type => t_1 : hol.term (type_1 A) => term_2 A (term_11 A t_1).

def term_13 : A : hol.type -> hol.term type_2 :=
  A : hol.type => Data_2EBool_2E_21 (hol.arr (hol.arr (type_0 A) type_2) type_2) (h_1 : hol.term (type_0 A) => term_5 A (t_2 : hol.term (type_1 A) => term_0 A (term_2 A (term_10 A h_1 (term_11 A t_2))) (Data_2EBool_2Econd (hol.arr type_2 (hol.arr (type_1 A) (type_4 A))) (Data_2EList_2Emember (hol.arr (type_0 A) (type_3 A)) (term_9 A h_1) (term_11 A t_2)) (term_12 A t_2) (term_10 A h_1 (term_12 A t_2))))).

(; axiom ;)

thm_2 : A : hol.type -> hol.proof (term_13 A).

(; Theorem: |- (Data.Bool.! \lambda h. (Data.Bool.! \lambda t. ((= (Data.List.nubReverse ((Data.List.:: h) t))) (((Data.Bool.cond ((Data.List.member h) t)) (Data.List.nubReverse t)) ((Data.List.:: h) (Data.List.nubReverse t)))))) ;)

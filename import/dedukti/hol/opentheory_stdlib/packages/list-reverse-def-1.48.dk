
(; This file was generated by Holide. ;)

#NAME list_2Dreverse_2Ddef_2D1_2E48.

def type_0 : hol.type -> hol.type :=
  A : hol.type => A.

Data_2EList_2Elist : hol.type -> hol.type.

def type_1 : hol.type -> hol.type :=
  A : hol.type => Data_2EList_2Elist (type_0 A).

def type_2 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_1 A) hol.bool.

def term_0 : A : hol.type -> hol.term (hol.arr (type_1 A) (type_2 A)) :=
  A : hol.type => hol.eq (type_1 A).

def type_3 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_1 A) (type_1 A).

(; Constant list-reverse-def-1.48 ;)

list_2Dreverse_2Ddef_2D1_2E48 : A : hol.type -> hol.term (type_0 A).

(; Constant Data.List.reverse ;)

def Data_2EList_2Ereverse : A : hol.type -> hol.term (type_3 A) :=
  A : hol.type => list_2Dreverse_2Ddef_2D1_2E48 (type_3 A).

def term_1 : A : hol.type -> hol.term (type_3 A) :=
  A : hol.type => Data_2EList_2Ereverse (type_0 A).

(; Constant Data.List.[] ;)

Data_2EList_2E_5B_5D : A : hol.type -> hol.term (type_0 A).

def term_2 : A : hol.type -> hol.term (type_1 A) :=
  A : hol.type => Data_2EList_2E_5B_5D (type_1 A).

def term_3 : A : hol.type -> hol.term hol.bool :=
  A : hol.type => term_0 A (term_1 A (term_2 A)) (term_2 A).

(; axiom ;)

thm_0 : A : hol.type -> hol.proof (term_3 A).

(; Theorem: |- ((= (Data.List.reverse Data.List.[])) Data.List.[]) ;)

(; Constant Data.Bool.! ;)

Data_2EBool_2E_21 : A : hol.type -> hol.term (type_0 A).

(; Constant Data.List.:: ;)

Data_2EList_2E_3A_3A : A : hol.type -> hol.term (type_0 A).

def term_4 : A : hol.type -> h_1 : hol.term (type_0 A) -> hol.term (type_3 A) :=
  A : hol.type => h_1 : hol.term (type_0 A) => Data_2EList_2E_3A_3A (hol.arr (type_0 A) (type_3 A)) h_1.

def term_5 : A : hol.type -> t_1 : hol.term (type_1 A) -> hol.term (type_1 A) :=
  A : hol.type => t_1 : hol.term (type_1 A) => t_1.

(; Constant Data.List.@ ;)

Data_2EList_2E_40 : A : hol.type -> hol.term (type_0 A).

def term_6 : A : hol.type -> hol.term hol.bool :=
  A : hol.type => Data_2EBool_2E_21 (hol.arr (hol.arr (type_0 A) hol.bool) hol.bool) (h_1 : hol.term (type_0 A) => Data_2EBool_2E_21 (hol.arr (type_2 A) hol.bool) (t_2 : hol.term (type_1 A) => term_0 A (term_1 A (term_4 A h_1 (term_5 A t_2))) (Data_2EList_2E_40 (hol.arr (type_1 A) (type_3 A)) (term_1 A (term_5 A t_2)) (term_4 A h_1 (term_2 A))))).

(; axiom ;)

thm_1 : A : hol.type -> hol.proof (term_6 A).

(; Theorem: |- (Data.Bool.! \lambda h. (Data.Bool.! \lambda t. ((= (Data.List.reverse ((Data.List.:: h) t))) ((Data.List.@ (Data.List.reverse t)) ((Data.List.:: h) Data.List.[]))))) ;)

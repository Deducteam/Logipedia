
(; This file was generated by Holide. ;)

#NAME list_2Dappend_2Dthm_2D1_2E29.

def type_0 : hol.type -> hol.type :=
  A : hol.type => A.

Data_2EList_2Elist : hol.type -> hol.type.

def type_1 : hol.type -> hol.type :=
  A : hol.type => Data_2EList_2Elist (type_0 A).

def type_2 : hol.type :=
  hol.bool.

def type_3 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_1 A) type_2.

def type_4 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_3 A) type_2.

(; Constant Data.Bool.! ;)

Data_2EBool_2E_21 : A : hol.type -> hol.term (type_0 A).

def term_0 : A : hol.type -> hol.term (type_4 A) :=
  A : hol.type => Data_2EBool_2E_21 (type_4 A).

def term_1 : A : hol.type -> hol.term (hol.arr (type_1 A) (type_3 A)) :=
  A : hol.type => hol.eq (type_1 A).

(; Constant Data.List.@ ;)

Data_2EList_2E_40 : A : hol.type -> hol.term (type_0 A).

def term_2 : A : hol.type -> hol.term (hol.arr (type_1 A) (hol.arr (type_1 A) (type_1 A))) :=
  A : hol.type => Data_2EList_2E_40 (hol.arr (type_1 A) (hol.arr (type_1 A) (type_1 A))).

def term_3 : A : hol.type -> l_1 : hol.term (type_1 A) -> hol.term (type_1 A) :=
  A : hol.type => l_1 : hol.term (type_1 A) => l_1.

def term_4 : A : hol.type -> l_1 : hol.term (type_1 A) -> hol.term (hol.arr (type_1 A) (type_1 A)) :=
  A : hol.type => l_1 : hol.term (type_1 A) => term_2 A (term_3 A l_1).

(; Constant Data.List.[] ;)

Data_2EList_2E_5B_5D : A : hol.type -> hol.term (type_0 A).

def term_5 : A : hol.type -> hol.term (type_1 A) :=
  A : hol.type => Data_2EList_2E_5B_5D (type_1 A).

def term_6 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_0 A (l_1 : hol.term (type_1 A) => term_1 A (term_4 A l_1 (term_5 A)) (term_3 A l_1)).

(; axiom ;)

thm_0 : A : hol.type -> hol.proof (term_6 A).

(; Theorem: |- (Data.Bool.! \lambda l. ((= ((Data.List.@ l) Data.List.[])) l)) ;)

def type_5 : hol.type -> hol.type :=
  A : hol.type => Data_2EList_2Elist (type_1 A).

def type_6 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_5 A) type_2.

def type_7 : hol.type :=
  hol.arr type_2 type_2.

def type_8 : hol.type :=
  hol.arr type_2 type_7.

def term_7 : hol.term type_8 :=
  hol.eq type_2.

(; Constant Data.List.null ;)

Data_2EList_2Enull : A : hol.type -> hol.term (type_0 A).

def term_8 : A : hol.type -> hol.term (type_3 A) :=
  A : hol.type => Data_2EList_2Enull (type_3 A).

(; Constant Data.List.concat ;)

Data_2EList_2Econcat : A : hol.type -> hol.term (type_0 A).

def term_9 : A : hol.type -> l_1 : hol.term (type_5 A) -> hol.term (type_5 A) :=
  A : hol.type => l_1 : hol.term (type_5 A) => l_1.

(; Constant Data.List.all ;)

Data_2EList_2Eall : A : hol.type -> hol.term (type_0 A).

def term_10 : A : hol.type -> hol.term type_2 :=
  A : hol.type => Data_2EBool_2E_21 (hol.arr (type_6 A) type_2) (l_1 : hol.term (type_5 A) => term_7 (term_8 A (Data_2EList_2Econcat (hol.arr (type_5 A) (type_1 A)) (term_9 A l_1))) (Data_2EList_2Eall (hol.arr (type_3 A) (type_6 A)) (term_8 A) (term_9 A l_1))).

(; axiom ;)

thm_1 : A : hol.type -> hol.proof (term_10 A).

(; Theorem: |- (Data.Bool.! \lambda l. ((= (Data.List.null (Data.List.concat l))) ((Data.List.all Data.List.null) l))) ;)

def type_9 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_0 A) type_2.

def type_10 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_9 A) type_2.

def term_11 : A : hol.type -> hol.term (type_10 A) :=
  A : hol.type => Data_2EBool_2E_21 (type_10 A).

(; Constant Data.List.:: ;)

Data_2EList_2E_3A_3A : A : hol.type -> hol.term (type_0 A).

def term_12 : A : hol.type -> hol.term (hol.arr (type_0 A) (hol.arr (type_1 A) (type_1 A))) :=
  A : hol.type => Data_2EList_2E_3A_3A (hol.arr (type_0 A) (hol.arr (type_1 A) (type_1 A))).

def term_13 : A : hol.type -> h_1 : hol.term (type_0 A) -> hol.term (hol.arr (type_1 A) (type_1 A)) :=
  A : hol.type => h_1 : hol.term (type_0 A) => term_12 A h_1.

def term_14 : A : hol.type -> t_1 : hol.term (type_1 A) -> hol.term (type_1 A) :=
  A : hol.type => t_1 : hol.term (type_1 A) => t_1.

def term_15 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_11 A (h_1 : hol.term (type_0 A) => term_0 A (t_2 : hol.term (type_1 A) => term_1 A (term_2 A (term_13 A h_1 (term_5 A)) (term_14 A t_2)) (term_13 A h_1 (term_14 A t_2)))).

(; axiom ;)

thm_2 : A : hol.type -> hol.proof (term_15 A).

(; Theorem: |- (Data.Bool.! \lambda h. (Data.Bool.! \lambda t. ((= ((Data.List.@ ((Data.List.:: h) Data.List.[])) t)) ((Data.List.:: h) t)))) ;)

def term_16 : A : hol.type -> l1_1 : hol.term (type_1 A) -> hol.term (type_1 A) :=
  A : hol.type => l1_1 : hol.term (type_1 A) => l1_1.

def term_17 : A : hol.type -> l1_1 : hol.term (type_1 A) -> hol.term (hol.arr (type_1 A) (type_1 A)) :=
  A : hol.type => l1_1 : hol.term (type_1 A) => term_2 A (term_16 A l1_1).

def term_18 : A : hol.type -> l2_1 : hol.term (type_1 A) -> hol.term (type_1 A) :=
  A : hol.type => l2_1 : hol.term (type_1 A) => l2_1.

def term_19 : A : hol.type -> l2_1 : hol.term (type_1 A) -> l1_2 : hol.term (type_1 A) -> hol.term (type_1 A) :=
  A : hol.type => l2_1 : hol.term (type_1 A) => l1_2 : hol.term (type_1 A) => term_17 A l1_2 (term_18 A l2_1).

(; Constant Data.Bool./\ ;)

Data_2EBool_2E_2F_5C : A : hol.type -> hol.term (type_0 A).

def term_20 : hol.term type_8 :=
  Data_2EBool_2E_2F_5C type_8.

def term_21 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_0 A (l1_1 : hol.term (type_1 A) => term_0 A (l2_2 : hol.term (type_1 A) => term_7 (term_8 A (term_19 A l2_2 l1_1)) (term_20 (term_8 A (term_16 A l1_1)) (term_8 A (term_18 A l2_2))))).

(; axiom ;)

thm_3 : A : hol.type -> hol.proof (term_21 A).

(; Theorem: |- (Data.Bool.! \lambda l1. (Data.Bool.! \lambda l2. ((= (Data.List.null ((Data.List.@ l1) l2))) ((Data.Bool./\ (Data.List.null l1)) (Data.List.null l2))))) ;)

Number_2ENatural_2Enatural : hol.type.

def type_11 : hol.type :=
  Number_2ENatural_2Enatural.

def term_22 : hol.term (hol.arr type_11 (hol.arr type_11 type_2)) :=
  hol.eq type_11.

(; Constant Data.List.length ;)

Data_2EList_2Elength : A : hol.type -> hol.term (type_0 A).

def term_23 : A : hol.type -> hol.term (hol.arr (type_1 A) type_11) :=
  A : hol.type => Data_2EList_2Elength (hol.arr (type_1 A) type_11).

(; Constant Number.Natural.+ ;)

Number_2ENatural_2E_2B : A : hol.type -> hol.term (type_0 A).

def term_24 : A : hol.type -> l1_1 : hol.term (type_1 A) -> hol.term type_11 :=
  A : hol.type => l1_1 : hol.term (type_1 A) => term_23 A (term_16 A l1_1).

def term_25 : A : hol.type -> l2_1 : hol.term (type_1 A) -> hol.term type_11 :=
  A : hol.type => l2_1 : hol.term (type_1 A) => term_23 A (term_18 A l2_1).

def term_26 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_0 A (l1_1 : hol.term (type_1 A) => term_0 A (l2_2 : hol.term (type_1 A) => term_22 (term_23 A (term_19 A l2_2 l1_1)) (Number_2ENatural_2E_2B (hol.arr type_11 (hol.arr type_11 type_11)) (term_24 A l1_1) (term_25 A l2_2)))).

(; axiom ;)

thm_4 : A : hol.type -> hol.proof (term_26 A).

(; Theorem: |- (Data.Bool.! \lambda l1. (Data.Bool.! \lambda l2. ((= (Data.List.length ((Data.List.@ l1) l2))) ((Number.Natural.+ (Data.List.length l1)) (Data.List.length l2))))) ;)

Set_2Eset : hol.type -> hol.type.

def type_12 : hol.type -> hol.type :=
  A : hol.type => Set_2Eset (type_0 A).

(; Constant Data.List.toSet ;)

Data_2EList_2EtoSet : A : hol.type -> hol.term (type_0 A).

def term_27 : A : hol.type -> hol.term (hol.arr (type_1 A) (type_12 A)) :=
  A : hol.type => Data_2EList_2EtoSet (hol.arr (type_1 A) (type_12 A)).

(; Constant Set.union ;)

Set_2Eunion : A : hol.type -> hol.term (type_0 A).

def term_28 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_0 A (l1_1 : hol.term (type_1 A) => term_0 A (l2_2 : hol.term (type_1 A) => hol.eq (type_12 A) (term_27 A (term_19 A l2_2 l1_1)) (Set_2Eunion (hol.arr (type_12 A) (hol.arr (type_12 A) (type_12 A))) (term_27 A (term_16 A l1_1)) (term_27 A (term_18 A l2_2))))).

(; axiom ;)

thm_5 : A : hol.type -> hol.proof (term_28 A).

(; Theorem: |- (Data.Bool.! \lambda l1. (Data.Bool.! \lambda l2. ((= (Data.List.toSet ((Data.List.@ l1) l2))) ((Set.union (Data.List.toSet l1)) (Data.List.toSet l2))))) ;)

def term_29 : A : hol.type -> l2_1 : hol.term (type_1 A) -> hol.term (hol.arr (type_1 A) (type_1 A)) :=
  A : hol.type => l2_1 : hol.term (type_1 A) => term_2 A (term_18 A l2_1).

def term_30 : A : hol.type -> l3_1 : hol.term (type_1 A) -> hol.term (type_1 A) :=
  A : hol.type => l3_1 : hol.term (type_1 A) => l3_1.

def term_31 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_0 A (l1_1 : hol.term (type_1 A) => term_0 A (l2_2 : hol.term (type_1 A) => term_0 A (l3_3 : hol.term (type_1 A) => term_1 A (term_17 A l1_1 (term_29 A l2_2 (term_30 A l3_3))) (term_2 A (term_19 A l2_2 l1_1) (term_30 A l3_3))))).

(; axiom ;)

thm_6 : A : hol.type -> hol.proof (term_31 A).

(; Theorem: |- (Data.Bool.! \lambda l1. (Data.Bool.! \lambda l2. (Data.Bool.! \lambda l3. ((= ((Data.List.@ l1) ((Data.List.@ l2) l3))) ((Data.List.@ ((Data.List.@ l1) l2)) l3))))) ;)

def term_32 : A : hol.type -> l2_1 : hol.term (type_1 A) -> l1_2 : hol.term (type_1 A) -> l_3 : hol.term (type_1 A) -> hol.term type_2 :=
  A : hol.type => l2_1 : hol.term (type_1 A) => l1_2 : hol.term (type_1 A) => l_3 : hol.term (type_1 A) => term_1 A (term_4 A l_3 (term_16 A l1_2)) (term_4 A l_3 (term_18 A l2_1)).

def term_33 : A : hol.type -> l1_1 : hol.term (type_1 A) -> hol.term (type_3 A) :=
  A : hol.type => l1_1 : hol.term (type_1 A) => term_1 A (term_16 A l1_1).

def term_34 : A : hol.type -> l2_1 : hol.term (type_1 A) -> l1_2 : hol.term (type_1 A) -> hol.term type_2 :=
  A : hol.type => l2_1 : hol.term (type_1 A) => l1_2 : hol.term (type_1 A) => term_33 A l1_2 (term_18 A l2_1).

def term_35 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_0 A (l_1 : hol.term (type_1 A) => term_0 A (l1_2 : hol.term (type_1 A) => term_0 A (l2_3 : hol.term (type_1 A) => term_7 (term_32 A l2_3 l1_2 l_1) (term_34 A l2_3 l1_2)))).

(; axiom ;)

thm_7 : A : hol.type -> hol.proof (term_35 A).

(; Theorem: |- (Data.Bool.! \lambda l. (Data.Bool.! \lambda l1. (Data.Bool.! \lambda l2. ((= ((= ((Data.List.@ l) l1)) ((Data.List.@ l) l2))) ((= l1) l2))))) ;)

def term_36 : A : hol.type -> l2_1 : hol.term (type_1 A) -> l_2 : hol.term (type_1 A) -> l1_3 : hol.term (type_1 A) -> hol.term type_2 :=
  A : hol.type => l2_1 : hol.term (type_1 A) => l_2 : hol.term (type_1 A) => l1_3 : hol.term (type_1 A) => term_1 A (term_17 A l1_3 (term_3 A l_2)) (term_29 A l2_1 (term_3 A l_2)).

def term_37 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_0 A (l_1 : hol.term (type_1 A) => term_0 A (l1_2 : hol.term (type_1 A) => term_0 A (l2_3 : hol.term (type_1 A) => term_7 (term_36 A l2_3 l_1 l1_2) (term_34 A l2_3 l1_2)))).

(; axiom ;)

thm_8 : A : hol.type -> hol.proof (term_37 A).

(; Theorem: |- (Data.Bool.! \lambda l. (Data.Bool.! \lambda l1. (Data.Bool.! \lambda l2. ((= ((= ((Data.List.@ l1) l)) ((Data.List.@ l2) l))) ((= l1) l2))))) ;)

(; Constant Data.Bool.==> ;)

Data_2EBool_2E_3D_3D_3E : A : hol.type -> hol.term (type_0 A).

def term_38 : hol.term type_8 :=
  Data_2EBool_2E_3D_3D_3E type_8.

def term_39 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_0 A (l_1 : hol.term (type_1 A) => term_0 A (l1_2 : hol.term (type_1 A) => term_0 A (l2_3 : hol.term (type_1 A) => term_38 (term_32 A l2_3 l1_2 l_1) (term_34 A l2_3 l1_2)))).

(; axiom ;)

thm_9 : A : hol.type -> hol.proof (term_39 A).

(; Theorem: |- (Data.Bool.! \lambda l. (Data.Bool.! \lambda l1. (Data.Bool.! \lambda l2. ((Data.Bool.==> ((= ((Data.List.@ l) l1)) ((Data.List.@ l) l2))) ((= l1) l2))))) ;)

def term_40 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_0 A (l_1 : hol.term (type_1 A) => term_0 A (l1_2 : hol.term (type_1 A) => term_0 A (l2_3 : hol.term (type_1 A) => term_38 (term_36 A l2_3 l_1 l1_2) (term_34 A l2_3 l1_2)))).

(; axiom ;)

thm_10 : A : hol.type -> hol.proof (term_40 A).

(; Theorem: |- (Data.Bool.! \lambda l. (Data.Bool.! \lambda l1. (Data.Bool.! \lambda l2. ((Data.Bool.==> ((= ((Data.List.@ l1) l)) ((Data.List.@ l2) l))) ((= l1) l2))))) ;)

def term_41 : A : hol.type -> l2_1 : hol.term (type_1 A) -> l1_2 : hol.term (type_1 A) -> hol.term (type_3 A) :=
  A : hol.type => l2_1 : hol.term (type_1 A) => l1_2 : hol.term (type_1 A) => term_1 A (term_19 A l2_1 l1_2).

def term_42 : A : hol.type -> l2_1 : hol.term (type_1 A) -> hol.term (type_3 A) :=
  A : hol.type => l2_1 : hol.term (type_1 A) => term_1 A (term_18 A l2_1).

def term_43 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_0 A (l1_1 : hol.term (type_1 A) => term_0 A (l2_2 : hol.term (type_1 A) => term_7 (term_41 A l2_2 l1_1 (term_5 A)) (term_20 (term_33 A l1_1 (term_5 A)) (term_42 A l2_2 (term_5 A))))).

(; axiom ;)

thm_11 : A : hol.type -> hol.proof (term_43 A).

(; Theorem: |- (Data.Bool.! \lambda l1. (Data.Bool.! \lambda l2. ((= ((= ((Data.List.@ l1) l2)) Data.List.[])) ((Data.Bool./\ ((= l1) Data.List.[])) ((= l2) Data.List.[]))))) ;)

(; Constant Data.List.member ;)

Data_2EList_2Emember : A : hol.type -> hol.term (type_0 A).

def term_44 : A : hol.type -> x_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => x_1 : hol.term (type_0 A) => x_1.

def term_45 : A : hol.type -> x_1 : hol.term (type_0 A) -> hol.term (type_3 A) :=
  A : hol.type => x_1 : hol.term (type_0 A) => Data_2EList_2Emember (hol.arr (type_0 A) (type_3 A)) (term_44 A x_1).

(; Constant Data.Bool.\/ ;)

Data_2EBool_2E_5C_2F : A : hol.type -> hol.term (type_0 A).

def term_46 : hol.term type_8 :=
  Data_2EBool_2E_5C_2F type_8.

def term_47 : A : hol.type -> l1_1 : hol.term (type_1 A) -> x_2 : hol.term (type_0 A) -> hol.term type_2 :=
  A : hol.type => l1_1 : hol.term (type_1 A) => x_2 : hol.term (type_0 A) => term_45 A x_2 (term_16 A l1_1).

def term_48 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_0 A (l1_1 : hol.term (type_1 A) => term_0 A (l2_2 : hol.term (type_1 A) => term_11 A (x_3 : hol.term (type_0 A) => term_7 (term_45 A x_3 (term_19 A l2_2 l1_1)) (term_46 (term_47 A l1_1 x_3) (term_45 A x_3 (term_18 A l2_2)))))).

(; axiom ;)

thm_12 : A : hol.type -> hol.proof (term_48 A).

(; Theorem: |- (Data.Bool.! \lambda l1. (Data.Bool.! \lambda l2. (Data.Bool.! \lambda x. ((= ((Data.List.member x) ((Data.List.@ l1) l2))) ((Data.Bool.\/ ((Data.List.member x) l1)) ((Data.List.member x) l2)))))) ;)

def term_49 : A : hol.type -> hol.term (hol.arr (type_10 A) type_2) :=
  A : hol.type => Data_2EBool_2E_21 (hol.arr (type_10 A) type_2).

def type_13 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_9 A) (type_3 A).

def term_50 : A : hol.type -> p_1 : hol.term (type_9 A) -> hol.term (type_9 A) :=
  A : hol.type => p_1 : hol.term (type_9 A) => p_1.

def term_51 : A : hol.type -> p_1 : hol.term (type_9 A) -> hol.term (type_3 A) :=
  A : hol.type => p_1 : hol.term (type_9 A) => Data_2EList_2Eall (type_13 A) (term_50 A p_1).

def term_52 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_49 A (p_1 : hol.term (type_9 A) => term_0 A (l1_2 : hol.term (type_1 A) => term_0 A (l2_3 : hol.term (type_1 A) => term_7 (term_51 A p_1 (term_19 A l2_3 l1_2)) (term_20 (term_51 A p_1 (term_16 A l1_2)) (term_51 A p_1 (term_18 A l2_3)))))).

(; axiom ;)

thm_13 : A : hol.type -> hol.proof (term_52 A).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda l1. (Data.Bool.! \lambda l2. ((= ((Data.List.all p) ((Data.List.@ l1) l2))) ((Data.Bool./\ ((Data.List.all p) l1)) ((Data.List.all p) l2)))))) ;)

(; Constant Data.List.any ;)

Data_2EList_2Eany : A : hol.type -> hol.term (type_0 A).

def term_53 : A : hol.type -> p_1 : hol.term (type_9 A) -> hol.term (type_3 A) :=
  A : hol.type => p_1 : hol.term (type_9 A) => Data_2EList_2Eany (type_13 A) (term_50 A p_1).

def term_54 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_49 A (p_1 : hol.term (type_9 A) => term_0 A (l1_2 : hol.term (type_1 A) => term_0 A (l2_3 : hol.term (type_1 A) => term_7 (term_53 A p_1 (term_19 A l2_3 l1_2)) (term_46 (term_53 A p_1 (term_16 A l1_2)) (term_53 A p_1 (term_18 A l2_3)))))).

(; axiom ;)

thm_14 : A : hol.type -> hol.proof (term_54 A).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda l1. (Data.Bool.! \lambda l2. ((= ((Data.List.any p) ((Data.List.@ l1) l2))) ((Data.Bool.\/ ((Data.List.any p) l1)) ((Data.List.any p) l2)))))) ;)

(; Constant Data.Bool.? ;)

Data_2EBool_2E_3F : A : hol.type -> hol.term (type_0 A).

def term_55 : A : hol.type -> hol.term (type_4 A) :=
  A : hol.type => Data_2EBool_2E_3F (type_4 A).

(; Constant Data.Bool.~ ;)

Data_2EBool_2E_7E : A : hol.type -> hol.term (type_0 A).

def term_56 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_11 A (x_1 : hol.term (type_0 A) => term_0 A (l_2 : hol.term (type_1 A) => term_7 (term_45 A x_1 (term_3 A l_2)) (term_55 A (l1_3 : hol.term (type_1 A) => term_55 A (l2_4 : hol.term (type_1 A) => term_20 (Data_2EBool_2E_7E type_7 (term_47 A l1_3 x_1)) (term_1 A (term_3 A l_2) (term_17 A l1_3 (term_12 A (term_44 A x_1) (term_18 A l2_4))))))))).

(; axiom ;)

thm_15 : A : hol.type -> hol.proof (term_56 A).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda l. ((= ((Data.List.member x) l)) (Data.Bool.? \lambda l1. (Data.Bool.? \lambda l2. ((Data.Bool./\ (Data.Bool.~ ((Data.List.member x) l1))) ((= l) ((Data.List.@ l1) ((Data.List.:: x) l2))))))))) ;)

def term_57 : A : hol.type -> l1_27_1 : hol.term (type_1 A) -> hol.term (type_1 A) :=
  A : hol.type => l1_27_1 : hol.term (type_1 A) => l1_27_1.

def term_58 : A : hol.type -> l2_27_1 : hol.term (type_1 A) -> hol.term (type_1 A) :=
  A : hol.type => l2_27_1 : hol.term (type_1 A) => l2_27_1.

def term_59 : A : hol.type -> l2_27_1 : hol.term (type_1 A) -> l1_27_2 : hol.term (type_1 A) -> l2_3 : hol.term (type_1 A) -> l1_4 : hol.term (type_1 A) -> hol.term type_2 :=
  A : hol.type => l2_27_1 : hol.term (type_1 A) => l1_27_2 : hol.term (type_1 A) => l2_3 : hol.term (type_1 A) => l1_4 : hol.term (type_1 A) => term_41 A l2_3 l1_4 (term_2 A (term_57 A l1_27_2) (term_58 A l2_27_1)).

def term_60 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_0 A (l1_1 : hol.term (type_1 A) => term_0 A (l1_27_2 : hol.term (type_1 A) => term_0 A (l2_3 : hol.term (type_1 A) => term_0 A (l2_27_4 : hol.term (type_1 A) => term_38 (term_20 (term_22 (term_24 A l1_1) (term_23 A (term_57 A l1_27_2))) (term_59 A l2_27_4 l1_27_2 l2_3 l1_1)) (term_33 A l1_1 (term_57 A l1_27_2)))))).

(; axiom ;)

thm_16 : A : hol.type -> hol.proof (term_60 A).

(; Theorem: |- (Data.Bool.! \lambda l1. (Data.Bool.! \lambda l1'. (Data.Bool.! \lambda l2. (Data.Bool.! \lambda l2'. ((Data.Bool.==> ((Data.Bool./\ ((= (Data.List.length l1)) (Data.List.length l1'))) ((= ((Data.List.@ l1) l2)) ((Data.List.@ l1') l2')))) ((= l1) l1')))))) ;)

def term_61 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_0 A (l1_1 : hol.term (type_1 A) => term_0 A (l1_27_2 : hol.term (type_1 A) => term_0 A (l2_3 : hol.term (type_1 A) => term_0 A (l2_27_4 : hol.term (type_1 A) => term_38 (term_20 (term_22 (term_25 A l2_3) (term_23 A (term_58 A l2_27_4))) (term_59 A l2_27_4 l1_27_2 l2_3 l1_1)) (term_42 A l2_3 (term_58 A l2_27_4)))))).

(; axiom ;)

thm_17 : A : hol.type -> hol.proof (term_61 A).

(; Theorem: |- (Data.Bool.! \lambda l1. (Data.Bool.! \lambda l1'. (Data.Bool.! \lambda l2. (Data.Bool.! \lambda l2'. ((Data.Bool.==> ((Data.Bool./\ ((= (Data.List.length l2)) (Data.List.length l2'))) ((= ((Data.List.@ l1) l2)) ((Data.List.@ l1') l2')))) ((= l2) l2')))))) ;)

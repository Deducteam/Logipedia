
(; This file was generated by Holide. ;)

#NAME list_2Dzip_2D1_2E31.

def type_0 : hol.type -> hol.type :=
  A : hol.type => A.

def type_1 : hol.type -> hol.type :=
  B : hol.type => B.

Data_2EPair_2E_2A : hol.type -> hol.type -> hol.type.

def type_2 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => Data_2EPair_2E_2A (type_0 A) (type_1 B).

Data_2EList_2Elist : hol.type -> hol.type.

def type_3 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => Data_2EList_2Elist (type_2 B A).

def type_4 : hol.type :=
  hol.bool.

def type_5 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_3 B A) type_4.

def term_0 : B : hol.type -> A : hol.type -> hol.term (hol.arr (type_3 B A) (type_5 B A)) :=
  B : hol.type => A : hol.type => hol.eq (type_3 B A).

def type_6 : hol.type -> hol.type :=
  A : hol.type => Data_2EList_2Elist (type_0 A).

def type_7 : hol.type -> hol.type :=
  B : hol.type => Data_2EList_2Elist (type_1 B).

def type_8 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_6 A) (hol.arr (type_7 B) (type_3 B A)).

(; Constant list-zip-1.31 ;)

list_2Dzip_2D1_2E31 : A : hol.type -> hol.term (type_0 A).

(; Constant Data.List.zip ;)

def Data_2EList_2Ezip : B : hol.type -> A : hol.type -> hol.term (type_8 B A) :=
  B : hol.type => A : hol.type => list_2Dzip_2D1_2E31 (type_8 B A).

def term_1 : B : hol.type -> A : hol.type -> hol.term (type_8 B A) :=
  B : hol.type => A : hol.type => Data_2EList_2Ezip (type_1 B) (type_0 A).

(; Constant Data.List.[] ;)

Data_2EList_2E_5B_5D : A : hol.type -> hol.term (type_0 A).

def term_2 : A : hol.type -> hol.term (type_6 A) :=
  A : hol.type => Data_2EList_2E_5B_5D (type_6 A).

def term_3 : B : hol.type -> hol.term (type_7 B) :=
  B : hol.type => Data_2EList_2E_5B_5D (type_7 B).

def term_4 : B : hol.type -> A : hol.type -> hol.term (type_3 B A) :=
  B : hol.type => A : hol.type => Data_2EList_2E_5B_5D (type_3 B A).

def term_5 : B : hol.type -> A : hol.type -> hol.term type_4 :=
  B : hol.type => A : hol.type => term_0 B A (term_1 B A (term_2 A) (term_3 B)) (term_4 B A).

(; axiom ;)

thm_0 : B : hol.type -> A : hol.type -> hol.proof (term_5 B A).

(; Theorem: |- ((= ((Data.List.zip Data.List.[]) Data.List.[])) Data.List.[]) ;)

def type_9 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => Data_2EPair_2E_2A (type_6 A) (type_7 B).

def term_6 : B : hol.type -> A : hol.type -> hol.term (hol.arr (type_9 B A) (hol.arr (type_9 B A) type_4)) :=
  B : hol.type => A : hol.type => hol.eq (type_9 B A).

def type_10 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_3 B A) (type_9 B A).

(; Constant Data.List.unzip ;)

def Data_2EList_2Eunzip : B : hol.type -> A : hol.type -> hol.term (type_10 B A) :=
  B : hol.type => A : hol.type => list_2Dzip_2D1_2E31 (type_10 B A).

def term_7 : B : hol.type -> A : hol.type -> hol.term (type_10 B A) :=
  B : hol.type => A : hol.type => Data_2EList_2Eunzip (type_1 B) (type_0 A).

(; Constant Data.Pair., ;)

Data_2EPair_2E_2C : A : hol.type -> hol.term (type_0 A).

def term_8 : B : hol.type -> A : hol.type -> hol.term (hol.arr (type_6 A) (hol.arr (type_7 B) (type_9 B A))) :=
  B : hol.type => A : hol.type => Data_2EPair_2E_2C (hol.arr (type_6 A) (hol.arr (type_7 B) (type_9 B A))).

def term_9 : B : hol.type -> A : hol.type -> hol.term (hol.arr (type_7 B) (type_9 B A)) :=
  B : hol.type => A : hol.type => term_8 B A (term_2 A).

def term_10 : B : hol.type -> A : hol.type -> hol.term (type_9 B A) :=
  B : hol.type => A : hol.type => term_9 B A (term_3 B).

def term_11 : B : hol.type -> A : hol.type -> hol.term type_4 :=
  B : hol.type => A : hol.type => term_6 B A (term_7 B A (term_4 B A)) (term_10 B A).

(; axiom ;)

thm_1 : B : hol.type -> A : hol.type -> hol.proof (term_11 B A).

(; Theorem: |- ((= (Data.List.unzip Data.List.[])) ((Data.Pair., Data.List.[]) Data.List.[])) ;)

def type_11 : hol.type -> hol.type :=
  C : hol.type => C.

def type_12 : hol.type -> hol.type -> hol.type -> hol.type :=
  C : hol.type => B : hol.type => A : hol.type => hol.arr (type_0 A) (hol.arr (type_1 B) (type_11 C)).

(; Constant Data.Bool.! ;)

Data_2EBool_2E_21 : A : hol.type -> hol.term (type_0 A).

def term_12 : C : hol.type -> B : hol.type -> A : hol.type -> hol.term (hol.arr (hol.arr (type_12 C B A) type_4) type_4) :=
  C : hol.type => B : hol.type => A : hol.type => Data_2EBool_2E_21 (hol.arr (hol.arr (type_12 C B A) type_4) type_4).

def type_13 : hol.type -> hol.type :=
  C : hol.type => Data_2EList_2Elist (type_11 C).

def term_13 : C : hol.type -> hol.term (hol.arr (type_13 C) (hol.arr (type_13 C) type_4)) :=
  C : hol.type => hol.eq (type_13 C).

def type_14 : hol.type -> hol.type -> hol.type -> hol.type :=
  C : hol.type => B : hol.type => A : hol.type => hol.arr (type_12 C B A) (hol.arr (type_6 A) (hol.arr (type_7 B) (type_13 C))).

(; Constant Data.List.zipWith ;)

def Data_2EList_2EzipWith : C : hol.type -> B : hol.type -> A : hol.type -> hol.term (type_14 C B A) :=
  C : hol.type => B : hol.type => A : hol.type => list_2Dzip_2D1_2E31 (type_14 C B A).

def term_14 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (type_12 C B A) -> hol.term (type_12 C B A) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (type_12 C B A) => f_1.

def term_15 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (type_12 C B A) -> hol.term (hol.arr (type_6 A) (hol.arr (type_7 B) (type_13 C))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (type_12 C B A) => Data_2EList_2EzipWith (type_11 C) (type_1 B) (type_0 A) (term_14 C B A f_1).

def term_16 : C : hol.type -> hol.term (type_13 C) :=
  C : hol.type => Data_2EList_2E_5B_5D (type_13 C).

def term_17 : C : hol.type -> B : hol.type -> A : hol.type -> hol.term type_4 :=
  C : hol.type => B : hol.type => A : hol.type => term_12 C B A (f_1 : hol.term (type_12 C B A) => term_13 C (term_15 C B A f_1 (term_2 A) (term_3 B)) (term_16 C)).

(; axiom ;)

thm_2 : C : hol.type -> B : hol.type -> A : hol.type -> hol.proof (term_17 C B A).

(; Theorem: |- (Data.Bool.! \lambda f. ((= (((Data.List.zipWith f) Data.List.[]) Data.List.[])) Data.List.[])) ;)

def type_15 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_6 A) type_4.

def term_18 : A : hol.type -> hol.term (hol.arr (type_15 A) type_4) :=
  A : hol.type => Data_2EBool_2E_21 (hol.arr (type_15 A) type_4).

def type_16 : hol.type -> hol.type :=
  B : hol.type => hol.arr (type_7 B) type_4.

def term_19 : B : hol.type -> hol.term (hol.arr (type_16 B) type_4) :=
  B : hol.type => Data_2EBool_2E_21 (hol.arr (type_16 B) type_4).

def term_20 : A : hol.type -> l1_1 : hol.term (type_6 A) -> hol.term (type_6 A) :=
  A : hol.type => l1_1 : hol.term (type_6 A) => l1_1.

def term_21 : B : hol.type -> l2_1 : hol.term (type_7 B) -> hol.term (type_7 B) :=
  B : hol.type => l2_1 : hol.term (type_7 B) => l2_1.

def term_22 : B : hol.type -> A : hol.type -> l2_1 : hol.term (type_7 B) -> l1_2 : hol.term (type_6 A) -> hol.term (type_3 B A) :=
  B : hol.type => A : hol.type => l2_1 : hol.term (type_7 B) => l1_2 : hol.term (type_6 A) => term_1 B A (term_20 A l1_2) (term_21 B l2_1).

def type_17 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_0 A) (hol.arr (type_1 B) (type_2 B A)).

def term_23 : B : hol.type -> A : hol.type -> hol.term (type_17 B A) :=
  B : hol.type => A : hol.type => Data_2EPair_2E_2C (type_17 B A).

def term_24 : B : hol.type -> A : hol.type -> hol.term type_4 :=
  B : hol.type => A : hol.type => term_18 A (l1_1 : hol.term (type_6 A) => term_19 B (l2_2 : hol.term (type_7 B) => term_0 B A (term_22 B A l2_2 l1_1) (Data_2EList_2EzipWith (type_2 B A) (type_1 B) (type_0 A) (term_23 B A) (term_20 A l1_1) (term_21 B l2_2)))).

(; axiom ;)

thm_3 : B : hol.type -> A : hol.type -> hol.proof (term_24 B A).

(; Theorem: |- (Data.Bool.! \lambda l1. (Data.Bool.! \lambda l2. ((= ((Data.List.zip l1) l2)) (((Data.List.zipWith Data.Pair.,) l1) l2)))) ;)

def term_25 : B : hol.type -> A : hol.type -> hol.term (hol.arr (type_5 B A) type_4) :=
  B : hol.type => A : hol.type => Data_2EBool_2E_21 (hol.arr (type_5 B A) type_4).

def term_26 : B : hol.type -> A : hol.type -> l_1 : hol.term (type_3 B A) -> hol.term (type_3 B A) :=
  B : hol.type => A : hol.type => l_1 : hol.term (type_3 B A) => l_1.

def term_27 : B : hol.type -> A : hol.type -> l_1 : hol.term (type_3 B A) -> hol.term (hol.arr (type_9 B A) type_4) :=
  B : hol.type => A : hol.type => l_1 : hol.term (type_3 B A) => term_6 B A (term_7 B A (term_26 B A l_1)).

def type_18 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_2 B A) (type_0 A).

(; Constant Data.List.map ;)

Data_2EList_2Emap : A : hol.type -> hol.term (type_0 A).

(; Constant Data.Pair.fst ;)

Data_2EPair_2Efst : A : hol.type -> hol.term (type_0 A).

def term_28 : B : hol.type -> A : hol.type -> hol.term (hol.arr (type_3 B A) (type_6 A)) :=
  B : hol.type => A : hol.type => Data_2EList_2Emap (hol.arr (type_18 B A) (hol.arr (type_3 B A) (type_6 A))) (Data_2EPair_2Efst (type_18 B A)).

def type_19 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_2 B A) (type_1 B).

(; Constant Data.Pair.snd ;)

Data_2EPair_2Esnd : A : hol.type -> hol.term (type_0 A).

def term_29 : B : hol.type -> A : hol.type -> hol.term (hol.arr (type_3 B A) (type_7 B)) :=
  B : hol.type => A : hol.type => Data_2EList_2Emap (hol.arr (type_19 B A) (hol.arr (type_3 B A) (type_7 B))) (Data_2EPair_2Esnd (type_19 B A)).

def term_30 : B : hol.type -> A : hol.type -> hol.term type_4 :=
  B : hol.type => A : hol.type => term_25 B A (l_1 : hol.term (type_3 B A) => term_27 B A l_1 (term_8 B A (term_28 B A (term_26 B A l_1)) (term_29 B A (term_26 B A l_1)))).

(; axiom ;)

thm_4 : B : hol.type -> A : hol.type -> hol.proof (term_30 B A).

(; Theorem: |- (Data.Bool.! \lambda l. ((= (Data.List.unzip l)) ((Data.Pair., ((Data.List.map Data.Pair.fst) l)) ((Data.List.map Data.Pair.snd) l)))) ;)

def term_31 : A : hol.type -> hol.term (hol.arr (hol.arr (type_0 A) type_4) type_4) :=
  A : hol.type => Data_2EBool_2E_21 (hol.arr (hol.arr (type_0 A) type_4) type_4).

def term_32 : B : hol.type -> hol.term (hol.arr (hol.arr (type_1 B) type_4) type_4) :=
  B : hol.type => Data_2EBool_2E_21 (hol.arr (hol.arr (type_1 B) type_4) type_4).

(; Constant Data.List.:: ;)

Data_2EList_2E_3A_3A : A : hol.type -> hol.term (type_0 A).

def term_33 : A : hol.type -> hol.term (hol.arr (type_0 A) (hol.arr (type_6 A) (type_6 A))) :=
  A : hol.type => Data_2EList_2E_3A_3A (hol.arr (type_0 A) (hol.arr (type_6 A) (type_6 A))).

def term_34 : A : hol.type -> x_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => x_1 : hol.term (type_0 A) => x_1.

def term_35 : A : hol.type -> x_1 : hol.term (type_0 A) -> hol.term (hol.arr (type_6 A) (type_6 A)) :=
  A : hol.type => x_1 : hol.term (type_0 A) => term_33 A (term_34 A x_1).

def term_36 : A : hol.type -> x_1 : hol.term (type_0 A) -> hol.term (type_6 A) :=
  A : hol.type => x_1 : hol.term (type_0 A) => term_35 A x_1 (term_2 A).

def term_37 : B : hol.type -> hol.term (hol.arr (type_1 B) (hol.arr (type_7 B) (type_7 B))) :=
  B : hol.type => Data_2EList_2E_3A_3A (hol.arr (type_1 B) (hol.arr (type_7 B) (type_7 B))).

def term_38 : B : hol.type -> y_1 : hol.term (type_1 B) -> hol.term (type_1 B) :=
  B : hol.type => y_1 : hol.term (type_1 B) => y_1.

def term_39 : B : hol.type -> y_1 : hol.term (type_1 B) -> hol.term (hol.arr (type_7 B) (type_7 B)) :=
  B : hol.type => y_1 : hol.term (type_1 B) => term_37 B (term_38 B y_1).

def term_40 : B : hol.type -> y_1 : hol.term (type_1 B) -> hol.term (type_7 B) :=
  B : hol.type => y_1 : hol.term (type_1 B) => term_39 B y_1 (term_3 B).

def term_41 : B : hol.type -> A : hol.type -> hol.term (hol.arr (type_2 B A) (hol.arr (type_3 B A) (type_3 B A))) :=
  B : hol.type => A : hol.type => Data_2EList_2E_3A_3A (hol.arr (type_2 B A) (hol.arr (type_3 B A) (type_3 B A))).

def term_42 : B : hol.type -> A : hol.type -> y_1 : hol.term (type_1 B) -> x_2 : hol.term (type_0 A) -> hol.term (type_2 B A) :=
  B : hol.type => A : hol.type => y_1 : hol.term (type_1 B) => x_2 : hol.term (type_0 A) => term_23 B A (term_34 A x_2) (term_38 B y_1).

def term_43 : B : hol.type -> A : hol.type -> y_1 : hol.term (type_1 B) -> x_2 : hol.term (type_0 A) -> hol.term (hol.arr (type_3 B A) (type_3 B A)) :=
  B : hol.type => A : hol.type => y_1 : hol.term (type_1 B) => x_2 : hol.term (type_0 A) => term_41 B A (term_42 B A y_1 x_2).

def term_44 : B : hol.type -> A : hol.type -> hol.term type_4 :=
  B : hol.type => A : hol.type => term_31 A (x_1 : hol.term (type_0 A) => term_32 B (y_2 : hol.term (type_1 B) => term_0 B A (term_1 B A (term_36 A x_1) (term_40 B y_2)) (term_43 B A y_2 x_1 (term_4 B A)))).

(; axiom ;)

thm_5 : B : hol.type -> A : hol.type -> hol.proof (term_44 B A).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= ((Data.List.zip ((Data.List.:: x) Data.List.[])) ((Data.List.:: y) Data.List.[]))) ((Data.List.:: ((Data.Pair., x) y)) Data.List.[])))) ;)

def type_20 : hol.type :=
  hol.arr type_4 (hol.arr type_4 type_4).

(; Constant Data.Bool.==> ;)

Data_2EBool_2E_3D_3D_3E : A : hol.type -> hol.term (type_0 A).

def term_45 : hol.term type_20 :=
  Data_2EBool_2E_3D_3D_3E type_20.

Number_2ENatural_2Enatural : hol.type.

def type_21 : hol.type :=
  Number_2ENatural_2Enatural.

def type_22 : hol.type :=
  hol.arr type_21 type_4.

def type_23 : hol.type :=
  hol.arr type_21 type_22.

def term_46 : hol.term type_23 :=
  hol.eq type_21.

(; Constant Data.List.length ;)

Data_2EList_2Elength : A : hol.type -> hol.term (type_0 A).

def term_47 : A : hol.type -> hol.term (hol.arr (type_6 A) type_21) :=
  A : hol.type => Data_2EList_2Elength (hol.arr (type_6 A) type_21).

def term_48 : A : hol.type -> xs_1 : hol.term (type_6 A) -> hol.term (type_6 A) :=
  A : hol.type => xs_1 : hol.term (type_6 A) => xs_1.

def term_49 : B : hol.type -> hol.term (hol.arr (type_7 B) type_21) :=
  B : hol.type => Data_2EList_2Elength (hol.arr (type_7 B) type_21).

def term_50 : B : hol.type -> ys_1 : hol.term (type_7 B) -> hol.term (type_7 B) :=
  B : hol.type => ys_1 : hol.term (type_7 B) => ys_1.

def term_51 : B : hol.type -> A : hol.type -> ys_1 : hol.term (type_7 B) -> xs_2 : hol.term (type_6 A) -> hol.term type_4 :=
  B : hol.type => A : hol.type => ys_1 : hol.term (type_7 B) => xs_2 : hol.term (type_6 A) => term_46 (term_47 A (term_48 A xs_2)) (term_49 B (term_50 B ys_1)).

def term_52 : B : hol.type -> A : hol.type -> ys_1 : hol.term (type_7 B) -> xs_2 : hol.term (type_6 A) -> hol.term (hol.arr type_4 type_4) :=
  B : hol.type => A : hol.type => ys_1 : hol.term (type_7 B) => xs_2 : hol.term (type_6 A) => term_45 (term_51 B A ys_1 xs_2).

def term_53 : A : hol.type -> hol.term (hol.arr (type_6 A) (type_15 A)) :=
  A : hol.type => hol.eq (type_6 A).

def term_54 : B : hol.type -> A : hol.type -> ys_1 : hol.term (type_7 B) -> xs_2 : hol.term (type_6 A) -> hol.term (type_3 B A) :=
  B : hol.type => A : hol.type => ys_1 : hol.term (type_7 B) => xs_2 : hol.term (type_6 A) => term_1 B A (term_48 A xs_2) (term_50 B ys_1).

def term_55 : B : hol.type -> A : hol.type -> hol.term type_4 :=
  B : hol.type => A : hol.type => term_18 A (xs_1 : hol.term (type_6 A) => term_19 B (ys_2 : hol.term (type_7 B) => term_52 B A ys_2 xs_1 (term_53 A (term_28 B A (term_54 B A ys_2 xs_1)) (term_48 A xs_1)))).

(; axiom ;)

thm_6 : B : hol.type -> A : hol.type -> hol.proof (term_55 B A).

(; Theorem: |- (Data.Bool.! \lambda xs. (Data.Bool.! \lambda ys. ((Data.Bool.==> ((= (Data.List.length xs)) (Data.List.length ys))) ((= ((Data.List.map Data.Pair.fst) ((Data.List.zip xs) ys))) xs)))) ;)

def term_56 : B : hol.type -> hol.term (hol.arr (type_7 B) (type_16 B)) :=
  B : hol.type => hol.eq (type_7 B).

def term_57 : B : hol.type -> A : hol.type -> hol.term type_4 :=
  B : hol.type => A : hol.type => term_18 A (xs_1 : hol.term (type_6 A) => term_19 B (ys_2 : hol.term (type_7 B) => term_52 B A ys_2 xs_1 (term_56 B (term_29 B A (term_54 B A ys_2 xs_1)) (term_50 B ys_2)))).

(; axiom ;)

thm_7 : B : hol.type -> A : hol.type -> hol.proof (term_57 B A).

(; Theorem: |- (Data.Bool.! \lambda xs. (Data.Bool.! \lambda ys. ((Data.Bool.==> ((= (Data.List.length xs)) (Data.List.length ys))) ((= ((Data.List.map Data.Pair.snd) ((Data.List.zip xs) ys))) ys)))) ;)

def term_58 : hol.term type_20 :=
  hol.eq type_4.

def term_59 : B : hol.type -> A : hol.type -> xs_1 : hol.term (type_6 A) -> hol.term (hol.arr (type_7 B) (type_9 B A)) :=
  B : hol.type => A : hol.type => xs_1 : hol.term (type_6 A) => term_8 B A (term_48 A xs_1).

(; Constant Data.Bool./\ ;)

Data_2EBool_2E_2F_5C : A : hol.type -> hol.term (type_0 A).

def term_60 : hol.term type_20 :=
  Data_2EBool_2E_2F_5C type_20.

def term_61 : B : hol.type -> A : hol.type -> l_1 : hol.term (type_3 B A) -> hol.term (type_5 B A) :=
  B : hol.type => A : hol.type => l_1 : hol.term (type_3 B A) => term_0 B A (term_26 B A l_1).

def term_62 : B : hol.type -> A : hol.type -> l_1 : hol.term (type_3 B A) -> hol.term (hol.arr type_4 type_4) :=
  B : hol.type => A : hol.type => l_1 : hol.term (type_3 B A) => term_60 (term_61 B A l_1 (term_4 B A)).

def term_63 : B : hol.type -> A : hol.type -> hol.term type_4 :=
  B : hol.type => A : hol.type => term_25 B A (l_1 : hol.term (type_3 B A) => term_18 A (xs_2 : hol.term (type_6 A) => term_58 (term_27 B A l_1 (term_59 B A xs_2 (term_3 B))) (term_62 B A l_1 (term_53 A (term_48 A xs_2) (term_2 A))))).

(; axiom ;)

thm_8 : B : hol.type -> A : hol.type -> hol.proof (term_63 B A).

(; Theorem: |- (Data.Bool.! \lambda l. (Data.Bool.! \lambda xs. ((= ((= (Data.List.unzip l)) ((Data.Pair., xs) Data.List.[]))) ((Data.Bool./\ ((= l) Data.List.[])) ((= xs) Data.List.[]))))) ;)

def term_64 : B : hol.type -> A : hol.type -> hol.term type_4 :=
  B : hol.type => A : hol.type => term_25 B A (l_1 : hol.term (type_3 B A) => term_19 B (ys_2 : hol.term (type_7 B) => term_58 (term_27 B A l_1 (term_9 B A (term_50 B ys_2))) (term_62 B A l_1 (term_56 B (term_50 B ys_2) (term_3 B))))).

(; axiom ;)

thm_9 : B : hol.type -> A : hol.type -> hol.proof (term_64 B A).

(; Theorem: |- (Data.Bool.! \lambda l. (Data.Bool.! \lambda ys. ((= ((= (Data.List.unzip l)) ((Data.Pair., Data.List.[]) ys))) ((Data.Bool./\ ((= l) Data.List.[])) ((= ys) Data.List.[]))))) ;)

def term_65 : C : hol.type -> hol.term (hol.arr (type_11 C) (hol.arr (type_13 C) (type_13 C))) :=
  C : hol.type => Data_2EList_2E_3A_3A (hol.arr (type_11 C) (hol.arr (type_13 C) (type_13 C))).

def term_66 : C : hol.type -> B : hol.type -> A : hol.type -> hol.term type_4 :=
  C : hol.type => B : hol.type => A : hol.type => term_12 C B A (f_1 : hol.term (type_12 C B A) => term_31 A (x_2 : hol.term (type_0 A) => term_32 B (y_3 : hol.term (type_1 B) => term_13 C (term_15 C B A f_1 (term_36 A x_2) (term_40 B y_3)) (term_65 C (term_14 C B A f_1 (term_34 A x_2) (term_38 B y_3)) (term_16 C))))).

(; axiom ;)

thm_10 : C : hol.type -> B : hol.type -> A : hol.type -> hol.proof (term_66 C B A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (((Data.List.zipWith f) ((Data.List.:: x) Data.List.[])) ((Data.List.:: y) Data.List.[]))) ((Data.List.:: ((f x) y)) Data.List.[]))))) ;)

def term_67 : hol.term (hol.arr type_22 type_4) :=
  Data_2EBool_2E_21 (hol.arr type_22 type_4).

def term_68 : n_1 : hol.term type_21 -> hol.term type_21 :=
  n_1 : hol.term type_21 => n_1.

def term_69 : A : hol.type -> n_1 : hol.term type_21 -> l1_2 : hol.term (type_6 A) -> hol.term (hol.arr type_4 type_4) :=
  A : hol.type => n_1 : hol.term type_21 => l1_2 : hol.term (type_6 A) => term_60 (term_46 (term_47 A (term_20 A l1_2)) (term_68 n_1)).

def term_70 : B : hol.type -> n_1 : hol.term type_21 -> l2_2 : hol.term (type_7 B) -> hol.term type_4 :=
  B : hol.type => n_1 : hol.term type_21 => l2_2 : hol.term (type_7 B) => term_46 (term_49 B (term_21 B l2_2)) (term_68 n_1).

def term_71 : B : hol.type -> A : hol.type -> l2_1 : hol.term (type_7 B) -> n_2 : hol.term type_21 -> l1_3 : hol.term (type_6 A) -> hol.term (hol.arr type_4 type_4) :=
  B : hol.type => A : hol.type => l2_1 : hol.term (type_7 B) => n_2 : hol.term type_21 => l1_3 : hol.term (type_6 A) => term_45 (term_69 A n_2 l1_3 (term_70 B n_2 l2_1)).

def term_72 : B : hol.type -> A : hol.type -> hol.term type_4 :=
  B : hol.type => A : hol.type => term_18 A (l1_1 : hol.term (type_6 A) => term_19 B (l2_2 : hol.term (type_7 B) => term_67 (n_3 : hol.term type_21 => term_71 B A l2_2 n_3 l1_1 (term_46 (Data_2EList_2Elength (hol.arr (type_3 B A) type_21) (term_22 B A l2_2 l1_1)) (term_68 n_3))))).

(; axiom ;)

thm_11 : B : hol.type -> A : hol.type -> hol.proof (term_72 B A).

(; Theorem: |- (Data.Bool.! \lambda l1. (Data.Bool.! \lambda l2. (Data.Bool.! \lambda n. ((Data.Bool.==> ((Data.Bool./\ ((= (Data.List.length l1)) n)) ((= (Data.List.length l2)) n))) ((= (Data.List.length ((Data.List.zip l1) l2))) n))))) ;)

def term_73 : B : hol.type -> A : hol.type -> ys_1 : hol.term (type_7 B) -> xs_2 : hol.term (type_6 A) -> hol.term (type_9 B A) :=
  B : hol.type => A : hol.type => ys_1 : hol.term (type_7 B) => xs_2 : hol.term (type_6 A) => term_59 B A xs_2 (term_50 B ys_1).

def term_74 : B : hol.type -> A : hol.type -> hol.term type_4 :=
  B : hol.type => A : hol.type => term_25 B A (l_1 : hol.term (type_3 B A) => term_18 A (xs_2 : hol.term (type_6 A) => term_19 B (ys_3 : hol.term (type_7 B) => term_58 (term_27 B A l_1 (term_73 B A ys_3 xs_2)) (term_60 (term_51 B A ys_3 xs_2) (term_61 B A l_1 (term_54 B A ys_3 xs_2)))))).

(; axiom ;)

thm_12 : B : hol.type -> A : hol.type -> hol.proof (term_74 B A).

(; Theorem: |- (Data.Bool.! \lambda l. (Data.Bool.! \lambda xs. (Data.Bool.! \lambda ys. ((= ((= (Data.List.unzip l)) ((Data.Pair., xs) ys))) ((Data.Bool./\ ((= (Data.List.length xs)) (Data.List.length ys))) ((= l) ((Data.List.zip xs) ys))))))) ;)

def term_75 : C : hol.type -> B : hol.type -> A : hol.type -> l2_1 : hol.term (type_7 B) -> l1_2 : hol.term (type_6 A) -> f_3 : hol.term (type_12 C B A) -> hol.term (type_13 C) :=
  C : hol.type => B : hol.type => A : hol.type => l2_1 : hol.term (type_7 B) => l1_2 : hol.term (type_6 A) => f_3 : hol.term (type_12 C B A) => term_15 C B A f_3 (term_20 A l1_2) (term_21 B l2_1).

def term_76 : C : hol.type -> B : hol.type -> A : hol.type -> hol.term type_4 :=
  C : hol.type => B : hol.type => A : hol.type => term_12 C B A (f_1 : hol.term (type_12 C B A) => term_18 A (l1_2 : hol.term (type_6 A) => term_19 B (l2_3 : hol.term (type_7 B) => term_67 (n_4 : hol.term type_21 => term_71 B A l2_3 n_4 l1_2 (term_46 (Data_2EList_2Elength (hol.arr (type_13 C) type_21) (term_75 C B A l2_3 l1_2 f_1)) (term_68 n_4)))))).

(; axiom ;)

thm_13 : C : hol.type -> B : hol.type -> A : hol.type -> hol.proof (term_76 C B A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda l1. (Data.Bool.! \lambda l2. (Data.Bool.! \lambda n. ((Data.Bool.==> ((Data.Bool./\ ((= (Data.List.length l1)) n)) ((= (Data.List.length l2)) n))) ((= (Data.List.length (((Data.List.zipWith f) l1) l2))) n)))))) ;)

def term_77 : A : hol.type -> xs_1 : hol.term (type_6 A) -> x_2 : hol.term (type_0 A) -> hol.term (type_6 A) :=
  A : hol.type => xs_1 : hol.term (type_6 A) => x_2 : hol.term (type_0 A) => term_35 A x_2 (term_48 A xs_1).

def term_78 : B : hol.type -> ys_1 : hol.term (type_7 B) -> y_2 : hol.term (type_1 B) -> hol.term (type_7 B) :=
  B : hol.type => ys_1 : hol.term (type_7 B) => y_2 : hol.term (type_1 B) => term_39 B y_2 (term_50 B ys_1).

def term_79 : B : hol.type -> A : hol.type -> hol.term type_4 :=
  B : hol.type => A : hol.type => term_31 A (x_1 : hol.term (type_0 A) => term_32 B (y_2 : hol.term (type_1 B) => term_18 A (xs_3 : hol.term (type_6 A) => term_19 B (ys_4 : hol.term (type_7 B) => term_52 B A ys_4 xs_3 (term_0 B A (term_1 B A (term_77 A xs_3 x_1) (term_78 B ys_4 y_2)) (term_43 B A y_2 x_1 (term_54 B A ys_4 xs_3))))))).

(; axiom ;)

thm_14 : B : hol.type -> A : hol.type -> hol.proof (term_79 B A).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda xs. (Data.Bool.! \lambda ys. ((Data.Bool.==> ((= (Data.List.length xs)) (Data.List.length ys))) ((= ((Data.List.zip ((Data.List.:: x) xs)) ((Data.List.:: y) ys))) ((Data.List.:: ((Data.Pair., x) y)) ((Data.List.zip xs) ys)))))))) ;)

def term_80 : A : hol.type -> t1_1 : hol.term (type_6 A) -> hol.term (type_6 A) :=
  A : hol.type => t1_1 : hol.term (type_6 A) => t1_1.

def term_81 : B : hol.type -> t2_1 : hol.term (type_7 B) -> hol.term (type_7 B) :=
  B : hol.type => t2_1 : hol.term (type_7 B) => t2_1.

def term_82 : A : hol.type -> h1_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => h1_1 : hol.term (type_0 A) => h1_1.

def term_83 : B : hol.type -> h2_1 : hol.term (type_1 B) -> hol.term (type_1 B) :=
  B : hol.type => h2_1 : hol.term (type_1 B) => h2_1.

def term_84 : C : hol.type -> B : hol.type -> A : hol.type -> hol.term type_4 :=
  C : hol.type => B : hol.type => A : hol.type => term_12 C B A (f_1 : hol.term (type_12 C B A) => term_31 A (h1_2 : hol.term (type_0 A) => term_32 B (h2_3 : hol.term (type_1 B) => term_18 A (t1_4 : hol.term (type_6 A) => term_19 B (t2_5 : hol.term (type_7 B) => term_45 (term_46 (term_47 A (term_80 A t1_4)) (term_49 B (term_81 B t2_5))) (term_13 C (term_15 C B A f_1 (term_33 A (term_82 A h1_2) (term_80 A t1_4)) (term_37 B (term_83 B h2_3) (term_81 B t2_5))) (term_65 C (term_14 C B A f_1 (term_82 A h1_2) (term_83 B h2_3)) (term_15 C B A f_1 (term_80 A t1_4) (term_81 B t2_5))))))))).

(; axiom ;)

thm_15 : C : hol.type -> B : hol.type -> A : hol.type -> hol.proof (term_84 C B A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda h1. (Data.Bool.! \lambda h2. (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool.==> ((= (Data.List.length t1)) (Data.List.length t2))) ((= (((Data.List.zipWith f) ((Data.List.:: h1) t1)) ((Data.List.:: h2) t2))) ((Data.List.:: ((f h1) h2)) (((Data.List.zipWith f) t1) t2))))))))) ;)

def type_24 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_9 B A) (type_9 B A).

def type_25 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_2 B A) (type_24 B A).

(; Constant Data.List.foldr ;)

Data_2EList_2Efoldr : A : hol.type -> hol.term (type_0 A).

def type_26 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_24 B A) type_4.

def term_85 : B : hol.type -> A : hol.type -> ys_1 : hol.term (type_7 B) -> y_2 : hol.term (type_1 B) -> xs_3 : hol.term (type_6 A) -> x_4 : hol.term (type_0 A) -> hol.term (type_9 B A) :=
  B : hol.type => A : hol.type => ys_1 : hol.term (type_7 B) => y_2 : hol.term (type_1 B) => xs_3 : hol.term (type_6 A) => x_4 : hol.term (type_0 A) => term_8 B A (term_77 A xs_3 x_4) (term_78 B ys_1 y_2).

def term_86 : B : hol.type -> A : hol.type -> hol.term type_4 :=
  B : hol.type => A : hol.type => hol.eq (type_10 B A) (term_7 B A) (Data_2EList_2Efoldr (hol.arr (type_25 B A) (hol.arr (type_9 B A) (type_10 B A))) (hol.select (type_25 B A) (f_1 : hol.term (type_25 B A) => term_31 A (x_2 : hol.term (type_0 A) => term_32 B (y_3 : hol.term (type_1 B) => hol.eq (type_24 B A) (f_1 (term_42 B A y_3 x_2)) (hol.select (type_24 B A) (f_4 : hol.term (type_24 B A) => term_18 A (xs_5 : hol.term (type_6 A) => term_19 B (ys_6 : hol.term (type_7 B) => term_6 B A (f_4 (term_73 B A ys_6 xs_5)) (term_85 B A ys_6 y_3 xs_5 x_2))))))))) (term_10 B A)).

(; axiom ;)

thm_16 : B : hol.type -> A : hol.type -> hol.proof (term_86 B A).

(; Theorem: |- ((= Data.List.unzip) ((Data.List.foldr (select \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (f ((Data.Pair., x) y))) (select \lambda f. (Data.Bool.! \lambda xs. (Data.Bool.! \lambda ys. ((= (f ((Data.Pair., xs) ys))) ((Data.Pair., ((Data.List.:: x) xs)) ((Data.List.:: y) ys))))))))))) ((Data.Pair., Data.List.[]) Data.List.[]))) ;)

def term_87 : A : hol.type -> x1_1 : hol.term (type_6 A) -> hol.term (type_6 A) :=
  A : hol.type => x1_1 : hol.term (type_6 A) => x1_1.

def term_88 : B : hol.type -> y1_1 : hol.term (type_7 B) -> hol.term (type_7 B) :=
  B : hol.type => y1_1 : hol.term (type_7 B) => y1_1.

def term_89 : A : hol.type -> x2_1 : hol.term (type_6 A) -> hol.term (type_6 A) :=
  A : hol.type => x2_1 : hol.term (type_6 A) => x2_1.

def term_90 : B : hol.type -> y2_1 : hol.term (type_7 B) -> hol.term (type_7 B) :=
  B : hol.type => y2_1 : hol.term (type_7 B) => y2_1.

def term_91 : B : hol.type -> A : hol.type -> y2_1 : hol.term (type_7 B) -> x2_2 : hol.term (type_6 A) -> y1_3 : hol.term (type_7 B) -> x1_4 : hol.term (type_6 A) -> hol.term (hol.arr type_4 type_4) :=
  B : hol.type => A : hol.type => y2_1 : hol.term (type_7 B) => x2_2 : hol.term (type_6 A) => y1_3 : hol.term (type_7 B) => x1_4 : hol.term (type_6 A) => term_45 (term_60 (term_46 (term_47 A (term_87 A x1_4)) (term_49 B (term_88 B y1_3))) (term_46 (term_47 A (term_89 A x2_2)) (term_49 B (term_90 B y2_1)))).

(; Constant Data.List.@ ;)

Data_2EList_2E_40 : A : hol.type -> hol.term (type_0 A).

def term_92 : A : hol.type -> x2_1 : hol.term (type_6 A) -> x1_2 : hol.term (type_6 A) -> hol.term (type_6 A) :=
  A : hol.type => x2_1 : hol.term (type_6 A) => x1_2 : hol.term (type_6 A) => Data_2EList_2E_40 (hol.arr (type_6 A) (hol.arr (type_6 A) (type_6 A))) (term_87 A x1_2) (term_89 A x2_1).

def term_93 : B : hol.type -> y2_1 : hol.term (type_7 B) -> y1_2 : hol.term (type_7 B) -> hol.term (type_7 B) :=
  B : hol.type => y2_1 : hol.term (type_7 B) => y1_2 : hol.term (type_7 B) => Data_2EList_2E_40 (hol.arr (type_7 B) (hol.arr (type_7 B) (type_7 B))) (term_88 B y1_2) (term_90 B y2_1).

def term_94 : B : hol.type -> A : hol.type -> hol.term type_4 :=
  B : hol.type => A : hol.type => term_18 A (x1_1 : hol.term (type_6 A) => term_18 A (x2_2 : hol.term (type_6 A) => term_19 B (y1_3 : hol.term (type_7 B) => term_19 B (y2_4 : hol.term (type_7 B) => term_91 B A y2_4 x2_2 y1_3 x1_1 (term_0 B A (term_1 B A (term_92 A x2_2 x1_1) (term_93 B y2_4 y1_3)) (Data_2EList_2E_40 (hol.arr (type_3 B A) (hol.arr (type_3 B A) (type_3 B A))) (term_1 B A (term_87 A x1_1) (term_88 B y1_3)) (term_1 B A (term_89 A x2_2) (term_90 B y2_4)))))))).

(; axiom ;)

thm_17 : B : hol.type -> A : hol.type -> hol.proof (term_94 B A).

(; Theorem: |- (Data.Bool.! \lambda x1. (Data.Bool.! \lambda x2. (Data.Bool.! \lambda y1. (Data.Bool.! \lambda y2. ((Data.Bool.==> ((Data.Bool./\ ((= (Data.List.length x1)) (Data.List.length y1))) ((= (Data.List.length x2)) (Data.List.length y2)))) ((= ((Data.List.zip ((Data.List.@ x1) x2)) ((Data.List.@ y1) y2))) ((Data.List.@ ((Data.List.zip x1) y1)) ((Data.List.zip x2) y2)))))))) ;)

(; Constant Number.Natural.< ;)

Number_2ENatural_2E_3C : A : hol.type -> hol.term (type_0 A).

def term_95 : i_1 : hol.term type_21 -> hol.term type_21 :=
  i_1 : hol.term type_21 => i_1.

def term_96 : B : hol.type -> A : hol.type -> i_1 : hol.term type_21 -> l2_2 : hol.term (type_7 B) -> n_3 : hol.term type_21 -> l1_4 : hol.term (type_6 A) -> hol.term (hol.arr type_4 type_4) :=
  B : hol.type => A : hol.type => i_1 : hol.term type_21 => l2_2 : hol.term (type_7 B) => n_3 : hol.term type_21 => l1_4 : hol.term (type_6 A) => term_45 (term_69 A n_3 l1_4 (term_60 (term_70 B n_3 l2_2) (Number_2ENatural_2E_3C type_23 (term_95 i_1) (term_68 n_3)))).

def type_27 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_2 B A) type_4.

def term_97 : B : hol.type -> A : hol.type -> hol.term (hol.arr (type_2 B A) (type_27 B A)) :=
  B : hol.type => A : hol.type => hol.eq (type_2 B A).

(; Constant Data.List.nth ;)

Data_2EList_2Enth : A : hol.type -> hol.term (type_0 A).

def term_98 : A : hol.type -> i_1 : hol.term type_21 -> l1_2 : hol.term (type_6 A) -> hol.term (type_0 A) :=
  A : hol.type => i_1 : hol.term type_21 => l1_2 : hol.term (type_6 A) => Data_2EList_2Enth (hol.arr (type_6 A) (hol.arr type_21 (type_0 A))) (term_20 A l1_2) (term_95 i_1).

def term_99 : B : hol.type -> i_1 : hol.term type_21 -> l2_2 : hol.term (type_7 B) -> hol.term (type_1 B) :=
  B : hol.type => i_1 : hol.term type_21 => l2_2 : hol.term (type_7 B) => Data_2EList_2Enth (hol.arr (type_7 B) (hol.arr type_21 (type_1 B))) (term_21 B l2_2) (term_95 i_1).

def term_100 : B : hol.type -> A : hol.type -> hol.term type_4 :=
  B : hol.type => A : hol.type => term_18 A (l1_1 : hol.term (type_6 A) => term_19 B (l2_2 : hol.term (type_7 B) => term_67 (n_3 : hol.term type_21 => term_67 (i_4 : hol.term type_21 => term_96 B A i_4 l2_2 n_3 l1_1 (term_97 B A (Data_2EList_2Enth (hol.arr (type_3 B A) (hol.arr type_21 (type_2 B A))) (term_22 B A l2_2 l1_1) (term_95 i_4)) (term_23 B A (term_98 A i_4 l1_1) (term_99 B i_4 l2_2))))))).

(; axiom ;)

thm_18 : B : hol.type -> A : hol.type -> hol.proof (term_100 B A).

(; Theorem: |- (Data.Bool.! \lambda l1. (Data.Bool.! \lambda l2. (Data.Bool.! \lambda n. (Data.Bool.! \lambda i. ((Data.Bool.==> ((Data.Bool./\ ((= (Data.List.length l1)) n)) ((Data.Bool./\ ((= (Data.List.length l2)) n)) ((Number.Natural.< i) n)))) ((= ((Data.List.nth ((Data.List.zip l1) l2)) i)) ((Data.Pair., ((Data.List.nth l1) i)) ((Data.List.nth l2) i)))))))) ;)

def term_101 : B : hol.type -> A : hol.type -> h_1 : hol.term (type_2 B A) -> hol.term (type_2 B A) :=
  B : hol.type => A : hol.type => h_1 : hol.term (type_2 B A) => h_1.

def term_102 : B : hol.type -> A : hol.type -> t_1 : hol.term (type_3 B A) -> hol.term (type_3 B A) :=
  B : hol.type => A : hol.type => t_1 : hol.term (type_3 B A) => t_1.

def term_103 : B : hol.type -> A : hol.type -> hol.term type_4 :=
  B : hol.type => A : hol.type => Data_2EBool_2E_21 (hol.arr (type_27 B A) type_4) (h_1 : hol.term (type_2 B A) => term_31 A (x_2 : hol.term (type_0 A) => term_32 B (y_3 : hol.term (type_1 B) => term_25 B A (t_4 : hol.term (type_3 B A) => term_18 A (xs_5 : hol.term (type_6 A) => term_19 B (ys_6 : hol.term (type_7 B) => term_58 (term_6 B A (term_7 B A (term_41 B A (term_101 B A h_1) (term_102 B A t_4))) (term_85 B A ys_6 y_3 xs_5 x_2)) (term_60 (term_97 B A (term_101 B A h_1) (term_42 B A y_3 x_2)) (term_6 B A (term_7 B A (term_102 B A t_4)) (term_73 B A ys_6 xs_5))))))))).

(; axiom ;)

thm_19 : B : hol.type -> A : hol.type -> hol.proof (term_103 B A).

(; Theorem: |- (Data.Bool.! \lambda h. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda t. (Data.Bool.! \lambda xs. (Data.Bool.! \lambda ys. ((= ((= (Data.List.unzip ((Data.List.:: h) t))) ((Data.Pair., ((Data.List.:: x) xs)) ((Data.List.:: y) ys)))) ((Data.Bool./\ ((= h) ((Data.Pair., x) y))) ((= (Data.List.unzip t)) ((Data.Pair., xs) ys)))))))))) ;)

def term_104 : C : hol.type -> B : hol.type -> A : hol.type -> hol.term type_4 :=
  C : hol.type => B : hol.type => A : hol.type => term_12 C B A (f_1 : hol.term (type_12 C B A) => term_18 A (l1_2 : hol.term (type_6 A) => term_19 B (l2_3 : hol.term (type_7 B) => term_67 (n_4 : hol.term type_21 => term_67 (i_5 : hol.term type_21 => term_96 B A i_5 l2_3 n_4 l1_2 (hol.eq (type_11 C) (Data_2EList_2Enth (hol.arr (type_13 C) (hol.arr type_21 (type_11 C))) (term_75 C B A l2_3 l1_2 f_1) (term_95 i_5)) (term_14 C B A f_1 (term_98 A i_5 l1_2) (term_99 B i_5 l2_3)))))))).

(; axiom ;)

thm_20 : C : hol.type -> B : hol.type -> A : hol.type -> hol.proof (term_104 C B A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda l1. (Data.Bool.! \lambda l2. (Data.Bool.! \lambda n. (Data.Bool.! \lambda i. ((Data.Bool.==> ((Data.Bool./\ ((= (Data.List.length l1)) n)) ((Data.Bool./\ ((= (Data.List.length l2)) n)) ((Number.Natural.< i) n)))) ((= ((Data.List.nth (((Data.List.zipWith f) l1) l2)) i)) ((f ((Data.List.nth l1) i)) ((Data.List.nth l2) i))))))))) ;)

def term_105 : C : hol.type -> B : hol.type -> A : hol.type -> hol.term type_4 :=
  C : hol.type => B : hol.type => A : hol.type => term_12 C B A (f_1 : hol.term (type_12 C B A) => term_18 A (x1_2 : hol.term (type_6 A) => term_18 A (x2_3 : hol.term (type_6 A) => term_19 B (y1_4 : hol.term (type_7 B) => term_19 B (y2_5 : hol.term (type_7 B) => term_91 B A y2_5 x2_3 y1_4 x1_2 (term_13 C (term_15 C B A f_1 (term_92 A x2_3 x1_2) (term_93 B y2_5 y1_4)) (Data_2EList_2E_40 (hol.arr (type_13 C) (hol.arr (type_13 C) (type_13 C))) (term_15 C B A f_1 (term_87 A x1_2) (term_88 B y1_4)) (term_15 C B A f_1 (term_89 A x2_3) (term_90 B y2_5))))))))).

(; axiom ;)

thm_21 : C : hol.type -> B : hol.type -> A : hol.type -> hol.proof (term_105 C B A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda x1. (Data.Bool.! \lambda x2. (Data.Bool.! \lambda y1. (Data.Bool.! \lambda y2. ((Data.Bool.==> ((Data.Bool./\ ((= (Data.List.length x1)) (Data.List.length y1))) ((= (Data.List.length x2)) (Data.List.length y2)))) ((= (((Data.List.zipWith f) ((Data.List.@ x1) x2)) ((Data.List.@ y1) y2))) ((Data.List.@ (((Data.List.zipWith f) x1) y1)) (((Data.List.zipWith f) x2) y2))))))))) ;)

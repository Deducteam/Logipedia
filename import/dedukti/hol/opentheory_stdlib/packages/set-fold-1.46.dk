
(; This file was generated by Holide. ;)

#NAME set_2Dfold_2D1_2E46.

def type_0 : hol.type -> hol.type :=
  A : hol.type => A.

def type_1 : hol.type -> hol.type :=
  B : hol.type => B.

def type_2 : hol.type -> hol.type :=
  B : hol.type => hol.arr (type_1 B) (type_1 B).

def type_3 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_0 A) (type_2 B).

def type_4 : hol.type :=
  hol.bool.

(; Constant Data.Bool.! ;)

Data_2EBool_2E_21 : A : hol.type -> hol.term (type_0 A).

def term_0 : B : hol.type -> A : hol.type -> hol.term (hol.arr (hol.arr (type_3 B A) type_4) type_4) :=
  B : hol.type => A : hol.type => Data_2EBool_2E_21 (hol.arr (hol.arr (type_3 B A) type_4) type_4).

def type_5 : hol.type -> hol.type :=
  B : hol.type => hol.arr (type_1 B) type_4.

def term_1 : B : hol.type -> hol.term (hol.arr (type_5 B) type_4) :=
  B : hol.type => Data_2EBool_2E_21 (hol.arr (type_5 B) type_4).

def type_6 : hol.type :=
  hol.arr type_4 type_4.

def type_7 : hol.type :=
  hol.arr type_4 type_6.

(; Constant Data.Bool.==> ;)

Data_2EBool_2E_3D_3D_3E : A : hol.type -> hol.term (type_0 A).

def term_2 : hol.term type_7 :=
  Data_2EBool_2E_3D_3D_3E type_7.

def type_8 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_0 A) type_4.

def term_3 : A : hol.type -> hol.term (hol.arr (type_8 A) type_4) :=
  A : hol.type => Data_2EBool_2E_21 (hol.arr (type_8 A) type_4).

(; Constant Data.Bool.~ ;)

Data_2EBool_2E_7E : A : hol.type -> hol.term (type_0 A).

def term_4 : A : hol.type -> x_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => x_1 : hol.term (type_0 A) => x_1.

def term_5 : A : hol.type -> y_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => y_1 : hol.term (type_0 A) => y_1.

def term_6 : A : hol.type -> y_1 : hol.term (type_0 A) -> x_2 : hol.term (type_0 A) -> hol.term type_6 :=
  A : hol.type => y_1 : hol.term (type_0 A) => x_2 : hol.term (type_0 A) => term_2 (Data_2EBool_2E_7E type_6 (hol.eq (type_0 A) (term_4 A x_2) (term_5 A y_1))).

def term_7 : B : hol.type -> hol.term (hol.arr (type_1 B) (type_5 B)) :=
  B : hol.type => hol.eq (type_1 B).

def term_8 : B : hol.type -> A : hol.type -> f_1 : hol.term (type_3 B A) -> hol.term (type_3 B A) :=
  B : hol.type => A : hol.type => f_1 : hol.term (type_3 B A) => f_1.

def term_9 : B : hol.type -> A : hol.type -> x_1 : hol.term (type_0 A) -> f_2 : hol.term (type_3 B A) -> hol.term (type_2 B) :=
  B : hol.type => A : hol.type => x_1 : hol.term (type_0 A) => f_2 : hol.term (type_3 B A) => term_8 B A f_2 (term_4 A x_1).

def term_10 : B : hol.type -> A : hol.type -> y_1 : hol.term (type_0 A) -> f_2 : hol.term (type_3 B A) -> hol.term (type_2 B) :=
  B : hol.type => A : hol.type => y_1 : hol.term (type_0 A) => f_2 : hol.term (type_3 B A) => term_8 B A f_2 (term_5 A y_1).

def term_11 : B : hol.type -> s_1 : hol.term (type_1 B) -> hol.term (type_1 B) :=
  B : hol.type => s_1 : hol.term (type_1 B) => s_1.

def term_12 : B : hol.type -> A : hol.type -> f_1 : hol.term (type_3 B A) -> hol.term type_4 :=
  B : hol.type => A : hol.type => f_1 : hol.term (type_3 B A) => term_3 A (x_2 : hol.term (type_0 A) => term_3 A (y_3 : hol.term (type_0 A) => term_1 B (s_4 : hol.term (type_1 B) => term_6 A y_3 x_2 (term_7 B (term_9 B A x_2 f_1 (term_10 B A y_3 f_1 (term_11 B s_4))) (term_10 B A y_3 f_1 (term_9 B A x_2 f_1 (term_11 B s_4))))))).

def term_13 : B : hol.type -> A : hol.type -> f_1 : hol.term (type_3 B A) -> hol.term type_6 :=
  B : hol.type => A : hol.type => f_1 : hol.term (type_3 B A) => term_2 (term_12 B A f_1).

(; Constant Data.Bool./\ ;)

Data_2EBool_2E_2F_5C : A : hol.type -> hol.term (type_0 A).

def term_14 : hol.term type_7 :=
  Data_2EBool_2E_2F_5C type_7.

Set_2Eset : hol.type -> hol.type.

def type_9 : hol.type -> hol.type :=
  A : hol.type => Set_2Eset (type_0 A).

def type_10 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_3 B A) (hol.arr (type_1 B) (hol.arr (type_9 A) (type_1 B))).

(; Constant set-fold-1.46 ;)

set_2Dfold_2D1_2E46 : A : hol.type -> hol.term (type_0 A).

(; Constant Set.fold ;)

def Set_2Efold : B : hol.type -> A : hol.type -> hol.term (type_10 B A) :=
  B : hol.type => A : hol.type => set_2Dfold_2D1_2E46 (type_10 B A).

def term_15 : B : hol.type -> A : hol.type -> hol.term (type_10 B A) :=
  B : hol.type => A : hol.type => Set_2Efold (type_1 B) (type_0 A).

def term_16 : B : hol.type -> b_1 : hol.term (type_1 B) -> hol.term (type_1 B) :=
  B : hol.type => b_1 : hol.term (type_1 B) => b_1.

def term_17 : B : hol.type -> A : hol.type -> b_1 : hol.term (type_1 B) -> f_2 : hol.term (type_3 B A) -> hol.term (hol.arr (type_9 A) (type_1 B)) :=
  B : hol.type => A : hol.type => b_1 : hol.term (type_1 B) => f_2 : hol.term (type_3 B A) => term_15 B A (term_8 B A f_2) (term_16 B b_1).

(; Constant Set.{} ;)

Set_2E_7B_7D : A : hol.type -> hol.term (type_0 A).

def term_18 : A : hol.type -> B : hol.type -> b_1 : hol.term (type_1 B) -> f_2 : hol.term (type_3 B A) -> hol.term type_6 :=
  A : hol.type => B : hol.type => b_1 : hol.term (type_1 B) => f_2 : hol.term (type_3 B A) => term_14 (term_7 B (term_17 B A b_1 f_2 (Set_2E_7B_7D (type_9 A))) (term_16 B b_1)).

def type_11 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_9 A) type_4.

def term_19 : A : hol.type -> hol.term (hol.arr (type_11 A) type_4) :=
  A : hol.type => Data_2EBool_2E_21 (hol.arr (type_11 A) type_4).

(; Constant Set.finite ;)

Set_2Efinite : A : hol.type -> hol.term (type_0 A).

def term_20 : A : hol.type -> s_1 : hol.term (type_9 A) -> hol.term (type_9 A) :=
  A : hol.type => s_1 : hol.term (type_9 A) => s_1.

def term_21 : A : hol.type -> s_1 : hol.term (type_9 A) -> hol.term type_4 :=
  A : hol.type => s_1 : hol.term (type_9 A) => Set_2Efinite (type_11 A) (term_20 A s_1).

def term_22 : A : hol.type -> s_1 : hol.term (type_9 A) -> hol.term type_6 :=
  A : hol.type => s_1 : hol.term (type_9 A) => term_2 (term_21 A s_1).

(; Constant Set.insert ;)

Set_2Einsert : A : hol.type -> hol.term (type_0 A).

(; Constant Data.Bool.cond ;)

Data_2EBool_2Econd : A : hol.type -> hol.term (type_0 A).

(; Constant Set.member ;)

Set_2Emember : A : hol.type -> hol.term (type_0 A).

def term_23 : A : hol.type -> s_1 : hol.term (type_9 A) -> x_2 : hol.term (type_0 A) -> hol.term type_4 :=
  A : hol.type => s_1 : hol.term (type_9 A) => x_2 : hol.term (type_0 A) => Set_2Emember (hol.arr (type_0 A) (type_11 A)) (term_4 A x_2) (term_20 A s_1).

def term_24 : A : hol.type -> B : hol.type -> s_1 : hol.term (type_9 A) -> x_2 : hol.term (type_0 A) -> hol.term (hol.arr (type_1 B) (type_2 B)) :=
  A : hol.type => B : hol.type => s_1 : hol.term (type_9 A) => x_2 : hol.term (type_0 A) => Data_2EBool_2Econd (hol.arr type_4 (hol.arr (type_1 B) (type_2 B))) (term_23 A s_1 x_2).

def term_25 : B : hol.type -> A : hol.type -> s_1 : hol.term (type_9 A) -> b_2 : hol.term (type_1 B) -> f_3 : hol.term (type_3 B A) -> hol.term (type_1 B) :=
  B : hol.type => A : hol.type => s_1 : hol.term (type_9 A) => b_2 : hol.term (type_1 B) => f_3 : hol.term (type_3 B A) => term_17 B A b_2 f_3 (term_20 A s_1).

def term_26 : B : hol.type -> A : hol.type -> hol.term type_4 :=
  B : hol.type => A : hol.type => term_0 B A (f_1 : hol.term (type_3 B A) => term_1 B (b_2 : hol.term (type_1 B) => term_13 B A f_1 (term_18 A B b_2 f_1 (term_3 A (x_3 : hol.term (type_0 A) => term_19 A (s_4 : hol.term (type_9 A) => term_22 A s_4 (term_7 B (term_17 B A b_2 f_1 (Set_2Einsert (hol.arr (type_0 A) (hol.arr (type_9 A) (type_9 A))) (term_4 A x_3) (term_20 A s_4))) (term_24 A B s_4 x_3 (term_25 B A s_4 b_2 f_1) (term_9 B A x_3 f_1 (term_25 B A s_4 b_2 f_1)))))))))).

(; axiom ;)

thm_0 : B : hol.type -> A : hol.type -> hol.proof (term_26 B A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda b. ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda s. ((Data.Bool.==> (Data.Bool.~ ((= x) y))) ((= ((f x) ((f y) s))) ((f y) ((f x) s)))))))) ((Data.Bool./\ ((= (((Set.fold f) b) Set.{})) b)) (Data.Bool.! \lambda x. (Data.Bool.! \lambda s. ((Data.Bool.==> (Set.finite s)) ((= (((Set.fold f) b) ((Set.insert x) s))) (((Data.Bool.cond ((Set.member x) s)) (((Set.fold f) b) s)) ((f x) (((Set.fold f) b) s))))))))))) ;)

def term_27 : A : hol.type -> B : hol.type -> s_1 : hol.term (type_9 A) -> b_2 : hol.term (type_1 B) -> f_3 : hol.term (type_3 B A) -> hol.term (type_5 B) :=
  A : hol.type => B : hol.type => s_1 : hol.term (type_9 A) => b_2 : hol.term (type_1 B) => f_3 : hol.term (type_3 B A) => term_7 B (term_25 B A s_1 b_2 f_3).

(; Constant Set.delete ;)

Set_2Edelete : A : hol.type -> hol.term (type_0 A).

def term_28 : B : hol.type -> A : hol.type -> x_1 : hol.term (type_0 A) -> s_2 : hol.term (type_9 A) -> b_3 : hol.term (type_1 B) -> f_4 : hol.term (type_3 B A) -> hol.term (type_1 B) :=
  B : hol.type => A : hol.type => x_1 : hol.term (type_0 A) => s_2 : hol.term (type_9 A) => b_3 : hol.term (type_1 B) => f_4 : hol.term (type_3 B A) => term_17 B A b_3 f_4 (Set_2Edelete (hol.arr (type_9 A) (hol.arr (type_0 A) (type_9 A))) (term_20 A s_2) (term_4 A x_1)).

def term_29 : B : hol.type -> A : hol.type -> hol.term type_4 :=
  B : hol.type => A : hol.type => term_0 B A (f_1 : hol.term (type_3 B A) => term_1 B (b_2 : hol.term (type_1 B) => term_13 B A f_1 (term_18 A B b_2 f_1 (term_3 A (x_3 : hol.term (type_0 A) => term_19 A (s_4 : hol.term (type_9 A) => term_22 A s_4 (term_27 A B s_4 b_2 f_1 (term_24 A B s_4 x_3 (term_9 B A x_3 f_1 (term_28 B A x_3 s_4 b_2 f_1)) (term_28 B A x_3 s_4 b_2 f_1))))))))).

(; axiom ;)

thm_1 : B : hol.type -> A : hol.type -> hol.proof (term_29 B A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda b. ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda s. ((Data.Bool.==> (Data.Bool.~ ((= x) y))) ((= ((f x) ((f y) s))) ((f y) ((f x) s)))))))) ((Data.Bool./\ ((= (((Set.fold f) b) Set.{})) b)) (Data.Bool.! \lambda x. (Data.Bool.! \lambda s. ((Data.Bool.==> (Set.finite s)) ((= (((Set.fold f) b) s)) (((Data.Bool.cond ((Set.member x) s)) ((f x) (((Set.fold f) b) ((Set.delete s) x)))) (((Set.fold f) b) ((Set.delete s) x))))))))))) ;)

def term_30 : B : hol.type -> A : hol.type -> g_1 : hol.term (type_3 B A) -> hol.term (type_3 B A) :=
  B : hol.type => A : hol.type => g_1 : hol.term (type_3 B A) => g_1.

def term_31 : B : hol.type -> A : hol.type -> x_1 : hol.term (type_0 A) -> g_2 : hol.term (type_3 B A) -> hol.term (type_2 B) :=
  B : hol.type => A : hol.type => x_1 : hol.term (type_0 A) => g_2 : hol.term (type_3 B A) => term_30 B A g_2 (term_4 A x_1).

def term_32 : B : hol.type -> A : hol.type -> y_1 : hol.term (type_0 A) -> g_2 : hol.term (type_3 B A) -> hol.term (type_2 B) :=
  B : hol.type => A : hol.type => y_1 : hol.term (type_0 A) => g_2 : hol.term (type_3 B A) => term_30 B A g_2 (term_5 A y_1).

def term_33 : B : hol.type -> A : hol.type -> hol.term type_4 :=
  B : hol.type => A : hol.type => term_0 B A (f_1 : hol.term (type_3 B A) => term_0 B A (g_2 : hol.term (type_3 B A) => term_1 B (b_3 : hol.term (type_1 B) => term_19 A (s_4 : hol.term (type_9 A) => term_2 (term_14 (term_21 A s_4) (term_14 (term_3 A (x_5 : hol.term (type_0 A) => term_2 (term_23 A s_4 x_5) (hol.eq (type_2 B) (term_9 B A x_5 f_1) (term_31 B A x_5 g_2)))) (term_14 (term_12 B A f_1) (term_3 A (x_5 : hol.term (type_0 A) => term_3 A (y_6 : hol.term (type_0 A) => term_1 B (s_7 : hol.term (type_1 B) => term_6 A y_6 x_5 (term_7 B (term_31 B A x_5 g_2 (term_32 B A y_6 g_2 (term_11 B s_7))) (term_32 B A y_6 g_2 (term_31 B A x_5 g_2 (term_11 B s_7))))))))))) (term_27 A B s_4 b_3 f_1 (term_15 B A (term_30 B A g_2) (term_16 B b_3) (term_20 A s_4))))))).

(; axiom ;)

thm_2 : B : hol.type -> A : hol.type -> hol.proof (term_33 B A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda b. (Data.Bool.! \lambda s. ((Data.Bool.==> ((Data.Bool./\ (Set.finite s)) ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) s)) ((= (f x)) (g x))))) ((Data.Bool./\ (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda s. ((Data.Bool.==> (Data.Bool.~ ((= x) y))) ((= ((f x) ((f y) s))) ((f y) ((f x) s)))))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda s. ((Data.Bool.==> (Data.Bool.~ ((= x) y))) ((= ((g x) ((g y) s))) ((g y) ((g x) s))))))))))) ((= (((Set.fold f) b) s)) (((Set.fold g) b) s))))))) ;)

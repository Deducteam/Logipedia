
(; This file was generated by Holide. ;)

#NAME relation_2Dwell_2Dfounded_2Ddef_2D1_2E38.

def type_0 : hol.type -> hol.type :=
  A : hol.type => A.

def type_1 : hol.type :=
  hol.bool.

def type_2 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_0 A) type_1.

def type_3 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_0 A) (type_2 A).

def type_4 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_3 A) type_1.

(; Constant Data.Bool.! ;)

Data_2EBool_2E_21 : A : hol.type -> hol.term (type_0 A).

def type_5 : hol.type :=
  hol.arr type_1 type_1.

def type_6 : hol.type :=
  hol.arr type_1 type_5.

(; Constant relation-well-founded-def-1.38 ;)

relation_2Dwell_2Dfounded_2Ddef_2D1_2E38 : A : hol.type -> hol.term (type_0 A).

(; Constant Relation.wellFounded ;)

def Relation_2EwellFounded : A : hol.type -> hol.term (type_4 A) :=
  A : hol.type => relation_2Dwell_2Dfounded_2Ddef_2D1_2E38 (type_4 A).

def term_0 : A : hol.type -> r_1 : hol.term (type_3 A) -> hol.term (type_3 A) :=
  A : hol.type => r_1 : hol.term (type_3 A) => r_1.

def type_7 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_2 A) type_1.

(; Constant Data.Bool.==> ;)

Data_2EBool_2E_3D_3D_3E : A : hol.type -> hol.term (type_0 A).

def term_1 : hol.term type_6 :=
  Data_2EBool_2E_3D_3D_3E type_6.

(; Constant Data.Bool.? ;)

Data_2EBool_2E_3F : A : hol.type -> hol.term (type_0 A).

def term_2 : A : hol.type -> hol.term (type_7 A) :=
  A : hol.type => Data_2EBool_2E_3F (type_7 A).

def term_3 : A : hol.type -> p_1 : hol.term (type_2 A) -> hol.term (type_2 A) :=
  A : hol.type => p_1 : hol.term (type_2 A) => p_1.

def term_4 : A : hol.type -> x_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => x_1 : hol.term (type_0 A) => x_1.

def term_5 : A : hol.type -> x_1 : hol.term (type_0 A) -> p_2 : hol.term (type_2 A) -> hol.term type_1 :=
  A : hol.type => x_1 : hol.term (type_0 A) => p_2 : hol.term (type_2 A) => term_3 A p_2 (term_4 A x_1).

(; Constant Data.Bool./\ ;)

Data_2EBool_2E_2F_5C : A : hol.type -> hol.term (type_0 A).

def term_6 : A : hol.type -> y_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => y_1 : hol.term (type_0 A) => y_1.

(; Constant Data.Bool.~ ;)

Data_2EBool_2E_7E : A : hol.type -> hol.term (type_0 A).

def term_7 : A : hol.type -> hol.term type_1 :=
  A : hol.type => Data_2EBool_2E_21 (hol.arr (type_4 A) type_1) (r_1 : hol.term (type_3 A) => hol.eq type_1 (Relation_2EwellFounded (type_0 A) (term_0 A r_1)) (Data_2EBool_2E_21 (hol.arr (type_7 A) type_1) (p_2 : hol.term (type_2 A) => term_1 (term_2 A (x_3 : hol.term (type_0 A) => term_5 A x_3 p_2)) (term_2 A (x_3 : hol.term (type_0 A) => Data_2EBool_2E_2F_5C type_6 (term_5 A x_3 p_2) (Data_2EBool_2E_21 (type_7 A) (y_4 : hol.term (type_0 A) => term_1 (term_0 A r_1 (term_6 A y_4) (term_4 A x_3)) (Data_2EBool_2E_7E type_5 (term_3 A p_2 (term_6 A y_4)))))))))).

(; axiom ;)

thm_0 : A : hol.type -> hol.proof (term_7 A).

(; Theorem: |- (Data.Bool.! \lambda r. ((= (Relation.wellFounded r)) (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))))) ;)


(; This file was generated by Holide. ;)

#NAME list_2Dnth_2Dthm_2D1_2E62.

def type_0 : hol.type -> hol.type :=
  A : hol.type => A.

Data_2EList_2Elist : hol.type -> hol.type.

def type_1 : hol.type -> hol.type :=
  A : hol.type => Data_2EList_2Elist (type_0 A).

def type_2 : hol.type :=
  hol.bool.

def type_3 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_1 A) type_2.

(; Constant Data.Bool.! ;)

Data_2EBool_2E_21 : A : hol.type -> hol.term (type_0 A).

def term_0 : A : hol.type -> hol.term (hol.arr (type_3 A) type_2) :=
  A : hol.type => Data_2EBool_2E_21 (hol.arr (type_3 A) type_2).

def type_4 : hol.type :=
  hol.arr type_2 type_2.

def type_5 : hol.type :=
  hol.arr type_2 type_4.

(; Constant Data.Bool.==> ;)

Data_2EBool_2E_3D_3D_3E : A : hol.type -> hol.term (type_0 A).

def term_1 : hol.term type_5 :=
  Data_2EBool_2E_3D_3D_3E type_5.

(; Constant Data.Bool.~ ;)

Data_2EBool_2E_7E : A : hol.type -> hol.term (type_0 A).

(; Constant Data.List.null ;)

Data_2EList_2Enull : A : hol.type -> hol.term (type_0 A).

def term_2 : A : hol.type -> l_1 : hol.term (type_1 A) -> hol.term (type_1 A) :=
  A : hol.type => l_1 : hol.term (type_1 A) => l_1.

def type_6 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_0 A) type_2.

def term_3 : A : hol.type -> hol.term (hol.arr (type_0 A) (type_6 A)) :=
  A : hol.type => hol.eq (type_0 A).

Number_2ENatural_2Enatural : hol.type.

def type_7 : hol.type :=
  Number_2ENatural_2Enatural.

def type_8 : hol.type -> hol.type :=
  A : hol.type => hol.arr type_7 (type_0 A).

(; Constant Data.List.nth ;)

Data_2EList_2Enth : A : hol.type -> hol.term (type_0 A).

def term_4 : A : hol.type -> hol.term (hol.arr (type_1 A) (type_8 A)) :=
  A : hol.type => Data_2EList_2Enth (hol.arr (type_1 A) (type_8 A)).

def term_5 : A : hol.type -> l_1 : hol.term (type_1 A) -> hol.term (type_8 A) :=
  A : hol.type => l_1 : hol.term (type_1 A) => term_4 A (term_2 A l_1).

def type_9 : hol.type :=
  hol.arr type_7 type_7.

def type_10 : hol.type :=
  hol.arr type_7 type_9.

(; Constant Number.Natural.- ;)

Number_2ENatural_2E_2D : A : hol.type -> hol.term (type_0 A).

def term_6 : hol.term type_10 :=
  Number_2ENatural_2E_2D type_10.

(; Constant Data.List.length ;)

Data_2EList_2Elength : A : hol.type -> hol.term (type_0 A).

def term_7 : A : hol.type -> hol.term (hol.arr (type_1 A) type_7) :=
  A : hol.type => Data_2EList_2Elength (hol.arr (type_1 A) type_7).

def term_8 : A : hol.type -> l_1 : hol.term (type_1 A) -> hol.term type_7 :=
  A : hol.type => l_1 : hol.term (type_1 A) => term_7 A (term_2 A l_1).

(; Constant Number.Natural.bit1 ;)

Number_2ENatural_2Ebit1 : A : hol.type -> hol.term (type_0 A).

(; Constant Number.Natural.zero ;)

Number_2ENatural_2Ezero : A : hol.type -> hol.term (type_0 A).

(; Constant Data.List.last ;)

Data_2EList_2Elast : A : hol.type -> hol.term (type_0 A).

def term_9 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_0 A (l_1 : hol.term (type_1 A) => term_1 (Data_2EBool_2E_7E type_4 (Data_2EList_2Enull (type_3 A) (term_2 A l_1))) (term_3 A (term_5 A l_1 (term_6 (term_8 A l_1) (Number_2ENatural_2Ebit1 type_9 (Number_2ENatural_2Ezero type_7)))) (Data_2EList_2Elast (hol.arr (type_1 A) (type_0 A)) (term_2 A l_1)))).

(; axiom ;)

thm_0 : A : hol.type -> hol.proof (term_9 A).

(; Theorem: |- (Data.Bool.! \lambda l. ((Data.Bool.==> (Data.Bool.~ (Data.List.null l))) ((= ((Data.List.nth l) ((Number.Natural.- (Data.List.length l)) (Number.Natural.bit1 Number.Natural.zero)))) (Data.List.last l)))) ;)

def type_11 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_6 A) type_2.

def term_10 : A : hol.type -> hol.term (hol.arr (type_11 A) type_2) :=
  A : hol.type => Data_2EBool_2E_21 (hol.arr (type_11 A) type_2).

def term_11 : hol.term type_5 :=
  hol.eq type_2.

def type_12 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_6 A) (type_3 A).

(; Constant Data.List.all ;)

Data_2EList_2Eall : A : hol.type -> hol.term (type_0 A).

def term_12 : A : hol.type -> p_1 : hol.term (type_6 A) -> hol.term (type_6 A) :=
  A : hol.type => p_1 : hol.term (type_6 A) => p_1.

def type_13 : hol.type :=
  hol.arr type_7 type_2.

def type_14 : hol.type :=
  hol.arr type_13 type_2.

def term_13 : hol.term type_14 :=
  Data_2EBool_2E_21 type_14.

def type_15 : hol.type :=
  hol.arr type_7 type_13.

(; Constant Number.Natural.< ;)

Number_2ENatural_2E_3C : A : hol.type -> hol.term (type_0 A).

def term_14 : hol.term type_15 :=
  Number_2ENatural_2E_3C type_15.

def term_15 : i_1 : hol.term type_7 -> hol.term type_7 :=
  i_1 : hol.term type_7 => i_1.

def term_16 : i_1 : hol.term type_7 -> hol.term type_13 :=
  i_1 : hol.term type_7 => term_14 (term_15 i_1).

def term_17 : A : hol.type -> l_1 : hol.term (type_1 A) -> i_2 : hol.term type_7 -> hol.term type_2 :=
  A : hol.type => l_1 : hol.term (type_1 A) => i_2 : hol.term type_7 => term_16 i_2 (term_8 A l_1).

def term_18 : A : hol.type -> l_1 : hol.term (type_1 A) -> i_2 : hol.term type_7 -> hol.term type_4 :=
  A : hol.type => l_1 : hol.term (type_1 A) => i_2 : hol.term type_7 => term_1 (term_17 A l_1 i_2).

def term_19 : A : hol.type -> i_1 : hol.term type_7 -> l_2 : hol.term (type_1 A) -> hol.term (type_0 A) :=
  A : hol.type => i_1 : hol.term type_7 => l_2 : hol.term (type_1 A) => term_5 A l_2 (term_15 i_1).

def term_20 : A : hol.type -> i_1 : hol.term type_7 -> l_2 : hol.term (type_1 A) -> p_3 : hol.term (type_6 A) -> hol.term type_2 :=
  A : hol.type => i_1 : hol.term type_7 => l_2 : hol.term (type_1 A) => p_3 : hol.term (type_6 A) => term_12 A p_3 (term_19 A i_1 l_2).

def term_21 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_10 A (p_1 : hol.term (type_6 A) => term_0 A (l_2 : hol.term (type_1 A) => term_11 (Data_2EList_2Eall (type_12 A) (term_12 A p_1) (term_2 A l_2)) (term_13 (i_3 : hol.term type_7 => term_18 A l_2 i_3 (term_20 A i_3 l_2 p_1))))).

(; axiom ;)

thm_1 : A : hol.type -> hol.proof (term_21 A).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda l. ((= ((Data.List.all p) l)) (Data.Bool.! \lambda i. ((Data.Bool.==> ((Number.Natural.< i) (Data.List.length l))) (p ((Data.List.nth l) i))))))) ;)

(; Constant Data.List.any ;)

Data_2EList_2Eany : A : hol.type -> hol.term (type_0 A).

(; Constant Data.Bool.? ;)

Data_2EBool_2E_3F : A : hol.type -> hol.term (type_0 A).

def term_22 : hol.term type_14 :=
  Data_2EBool_2E_3F type_14.

(; Constant Data.Bool./\ ;)

Data_2EBool_2E_2F_5C : A : hol.type -> hol.term (type_0 A).

def term_23 : hol.term type_5 :=
  Data_2EBool_2E_2F_5C type_5.

def term_24 : A : hol.type -> l_1 : hol.term (type_1 A) -> i_2 : hol.term type_7 -> hol.term type_4 :=
  A : hol.type => l_1 : hol.term (type_1 A) => i_2 : hol.term type_7 => term_23 (term_17 A l_1 i_2).

def term_25 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_10 A (p_1 : hol.term (type_6 A) => term_0 A (l_2 : hol.term (type_1 A) => term_11 (Data_2EList_2Eany (type_12 A) (term_12 A p_1) (term_2 A l_2)) (term_22 (i_3 : hol.term type_7 => term_24 A l_2 i_3 (term_20 A i_3 l_2 p_1))))).

(; axiom ;)

thm_2 : A : hol.type -> hol.proof (term_25 A).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda l. ((= ((Data.List.any p) l)) (Data.Bool.? \lambda i. ((Data.Bool./\ ((Number.Natural.< i) (Data.List.length l))) (p ((Data.List.nth l) i))))))) ;)

(; Constant Data.List.member ;)

Data_2EList_2Emember : A : hol.type -> hol.term (type_0 A).

def term_26 : A : hol.type -> x_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => x_1 : hol.term (type_0 A) => x_1.

def term_27 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_0 A (l_1 : hol.term (type_1 A) => Data_2EBool_2E_21 (type_11 A) (x_2 : hol.term (type_0 A) => term_11 (Data_2EList_2Emember (hol.arr (type_0 A) (type_3 A)) (term_26 A x_2) (term_2 A l_1)) (term_22 (i_3 : hol.term type_7 => term_24 A l_1 i_3 (term_3 A (term_26 A x_2) (term_19 A i_3 l_1)))))).

(; axiom ;)

thm_3 : A : hol.type -> hol.proof (term_27 A).

(; Theorem: |- (Data.Bool.! \lambda l. (Data.Bool.! \lambda x. ((= ((Data.List.member x) l)) (Data.Bool.? \lambda i. ((Data.Bool./\ ((Number.Natural.< i) (Data.List.length l))) ((= x) ((Data.List.nth l) i))))))) ;)

Set_2Eset : hol.type -> hol.type.

def type_16 : hol.type -> hol.type :=
  A : hol.type => Set_2Eset (type_0 A).

(; Constant Data.List.toSet ;)

Data_2EList_2EtoSet : A : hol.type -> hol.term (type_0 A).

def type_17 : hol.type :=
  Set_2Eset type_7.

(; Constant Set.image ;)

Set_2Eimage : A : hol.type -> hol.term (type_0 A).

(; Constant Set.fromPredicate ;)

Set_2EfromPredicate : A : hol.type -> hol.term (type_0 A).

def term_28 : hol.term type_15 :=
  hol.eq type_7.

def term_29 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_0 A (l_1 : hol.term (type_1 A) => hol.eq (type_16 A) (Data_2EList_2EtoSet (hol.arr (type_1 A) (type_16 A)) (term_2 A l_1)) (Set_2Eimage (hol.arr (type_8 A) (hol.arr type_17 (type_16 A))) (term_5 A l_1) (Set_2EfromPredicate (hol.arr type_13 type_17) (v_2 : hol.term type_7 => term_22 (i_3 : hol.term type_7 => term_23 (term_28 v_2 (term_15 i_3)) (term_17 A l_1 i_3)))))).

(; axiom ;)

thm_4 : A : hol.type -> hol.proof (term_29 A).

(; Theorem: |- (Data.Bool.! \lambda l. ((= (Data.List.toSet l)) ((Set.image (Data.List.nth l)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda i. ((Data.Bool./\ ((= v) i)) ((Number.Natural.< i) (Data.List.length l)))))))) ;)

def type_18 : hol.type -> hol.type :=
  B : hol.type => B.

def type_19 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_0 A) (type_18 B).

def type_20 : hol.type -> hol.type :=
  B : hol.type => Data_2EList_2Elist (type_18 B).

(; Constant Data.List.map ;)

Data_2EList_2Emap : A : hol.type -> hol.term (type_0 A).

def term_30 : B : hol.type -> A : hol.type -> f_1 : hol.term (type_19 B A) -> hol.term (type_19 B A) :=
  B : hol.type => A : hol.type => f_1 : hol.term (type_19 B A) => f_1.

def term_31 : B : hol.type -> A : hol.type -> hol.term type_2 :=
  B : hol.type => A : hol.type => Data_2EBool_2E_21 (hol.arr (hol.arr (type_19 B A) type_2) type_2) (f_1 : hol.term (type_19 B A) => term_0 A (l_2 : hol.term (type_1 A) => term_13 (i_3 : hol.term type_7 => term_18 A l_2 i_3 (hol.eq (type_18 B) (Data_2EList_2Enth (hol.arr (type_20 B) (hol.arr type_7 (type_18 B))) (Data_2EList_2Emap (hol.arr (type_19 B A) (hol.arr (type_1 A) (type_20 B))) (term_30 B A f_1) (term_2 A l_2)) (term_15 i_3)) (term_30 B A f_1 (term_19 A i_3 l_2)))))).

(; axiom ;)

thm_5 : B : hol.type -> A : hol.type -> hol.proof (term_31 B A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda l. (Data.Bool.! \lambda i. ((Data.Bool.==> ((Number.Natural.< i) (Data.List.length l))) ((= ((Data.List.nth ((Data.List.map f) l)) i)) (f ((Data.List.nth l) i))))))) ;)

def term_32 : A : hol.type -> l1_1 : hol.term (type_1 A) -> hol.term (type_1 A) :=
  A : hol.type => l1_1 : hol.term (type_1 A) => l1_1.

def term_33 : A : hol.type -> l1_1 : hol.term (type_1 A) -> hol.term type_7 :=
  A : hol.type => l1_1 : hol.term (type_1 A) => term_7 A (term_32 A l1_1).

def term_34 : A : hol.type -> l2_1 : hol.term (type_1 A) -> hol.term (type_1 A) :=
  A : hol.type => l2_1 : hol.term (type_1 A) => l2_1.

def term_35 : A : hol.type -> l2_1 : hol.term (type_1 A) -> hol.term type_7 :=
  A : hol.type => l2_1 : hol.term (type_1 A) => term_7 A (term_34 A l2_1).

def term_36 : A : hol.type -> l1_1 : hol.term (type_1 A) -> hol.term (type_8 A) :=
  A : hol.type => l1_1 : hol.term (type_1 A) => term_4 A (term_32 A l1_1).

def term_37 : A : hol.type -> l2_1 : hol.term (type_1 A) -> hol.term (type_8 A) :=
  A : hol.type => l2_1 : hol.term (type_1 A) => term_4 A (term_34 A l2_1).

def term_38 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_0 A (l1_1 : hol.term (type_1 A) => term_0 A (l2_2 : hol.term (type_1 A) => term_1 (term_23 (term_28 (term_33 A l1_1) (term_35 A l2_2)) (term_13 (i_3 : hol.term type_7 => term_1 (term_16 i_3 (term_33 A l1_1)) (term_3 A (term_36 A l1_1 (term_15 i_3)) (term_37 A l2_2 (term_15 i_3)))))) (hol.eq (type_1 A) (term_32 A l1_1) (term_34 A l2_2)))).

(; axiom ;)

thm_6 : A : hol.type -> hol.proof (term_38 A).

(; Theorem: |- (Data.Bool.! \lambda l1. (Data.Bool.! \lambda l2. ((Data.Bool.==> ((Data.Bool./\ ((= (Data.List.length l1)) (Data.List.length l2))) (Data.Bool.! \lambda i. ((Data.Bool.==> ((Number.Natural.< i) (Data.List.length l1))) ((= ((Data.List.nth l1) i)) ((Data.List.nth l2) i)))))) ((= l1) l2)))) ;)

def term_39 : k_1 : hol.term type_7 -> hol.term type_7 :=
  k_1 : hol.term type_7 => k_1.

def term_40 : k_1 : hol.term type_7 -> hol.term type_13 :=
  k_1 : hol.term type_7 => term_14 (term_39 k_1).

(; Constant Number.Natural.+ ;)

Number_2ENatural_2E_2B : A : hol.type -> hol.term (type_0 A).

(; Constant Data.List.@ ;)

Data_2EList_2E_40 : A : hol.type -> hol.term (type_0 A).

(; Constant Data.Bool.cond ;)

Data_2EBool_2Econd : A : hol.type -> hol.term (type_0 A).

def term_41 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_0 A (l1_1 : hol.term (type_1 A) => term_0 A (l2_2 : hol.term (type_1 A) => term_13 (k_3 : hol.term type_7 => term_1 (term_40 k_3 (Number_2ENatural_2E_2B type_10 (term_33 A l1_1) (term_35 A l2_2))) (term_3 A (term_4 A (Data_2EList_2E_40 (hol.arr (type_1 A) (hol.arr (type_1 A) (type_1 A))) (term_32 A l1_1) (term_34 A l2_2)) (term_39 k_3)) (Data_2EBool_2Econd (hol.arr type_2 (hol.arr (type_0 A) (hol.arr (type_0 A) (type_0 A)))) (term_40 k_3 (term_33 A l1_1)) (term_36 A l1_1 (term_39 k_3)) (term_37 A l2_2 (term_6 (term_39 k_3) (term_33 A l1_1)))))))).

(; axiom ;)

thm_7 : A : hol.type -> hol.proof (term_41 A).

(; Theorem: |- (Data.Bool.! \lambda l1. (Data.Bool.! \lambda l2. (Data.Bool.! \lambda k. ((Data.Bool.==> ((Number.Natural.< k) ((Number.Natural.+ (Data.List.length l1)) (Data.List.length l2)))) ((= ((Data.List.nth ((Data.List.@ l1) l2)) k)) (((Data.Bool.cond ((Number.Natural.< k) (Data.List.length l1))) ((Data.List.nth l1) k)) ((Data.List.nth l2) ((Number.Natural.- k) (Data.List.length l1))))))))) ;)

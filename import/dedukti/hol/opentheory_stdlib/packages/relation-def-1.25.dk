
(; This file was generated by Holide. ;)

#NAME relation_2Ddef_2D1_2E25.

def type_0 : hol.type -> hol.type :=
  A : hol.type => A.

def type_1 : hol.type -> hol.type :=
  B : hol.type => B.

def type_2 : hol.type :=
  hol.bool.

def type_3 : hol.type -> hol.type :=
  B : hol.type => hol.arr (type_1 B) type_2.

def type_4 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_0 A) (type_3 B).

def type_5 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_4 B A) type_2.

def type_6 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_4 B A) (type_5 B A).

def term_0 : B : hol.type -> A : hol.type -> hol.term (type_6 B A) :=
  B : hol.type => A : hol.type => hol.eq (type_4 B A).

(; Constant relation-def-1.25 ;)

relation_2Ddef_2D1_2E25 : A : hol.type -> hol.term (type_0 A).

def term_1 : B : hol.type -> A : hol.type -> hol.term (type_4 B A) :=
  B : hol.type => A : hol.type => relation_2Ddef_2D1_2E25 (type_4 B A).

(; Constant Relation.empty ;)

def Relation_2Eempty : B : hol.type -> A : hol.type -> hol.term (type_4 B A) :=
  B : hol.type => A : hol.type => term_1 B A.

Data_2EPair_2E_2A : hol.type -> hol.type -> hol.type.

def type_7 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => Data_2EPair_2E_2A (type_0 A) (type_1 B).

Set_2Eset : hol.type -> hol.type.

def type_8 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => Set_2Eset (type_7 B A).

def type_9 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_8 B A) (type_4 B A).

(; Constant Relation.fromSet ;)

def Relation_2EfromSet : B : hol.type -> A : hol.type -> hol.term (type_9 B A) :=
  B : hol.type => A : hol.type => relation_2Ddef_2D1_2E25 (type_9 B A).

def term_2 : B : hol.type -> A : hol.type -> hol.term (type_9 B A) :=
  B : hol.type => A : hol.type => Relation_2EfromSet (type_1 B) (type_0 A).

(; Constant Set.{} ;)

Set_2E_7B_7D : A : hol.type -> hol.term (type_0 A).

def term_3 : B : hol.type -> A : hol.type -> hol.term type_2 :=
  B : hol.type => A : hol.type => term_0 B A (Relation_2Eempty (type_1 B) (type_0 A)) (term_2 B A (Set_2E_7B_7D (type_8 B A))).

(; axiom ;)

thm_0 : B : hol.type -> A : hol.type -> hol.proof (term_3 B A).

(; Theorem: |- ((= Relation.empty) (Relation.fromSet Set.{})) ;)

(; Constant Relation.universe ;)

def Relation_2Euniverse : B : hol.type -> A : hol.type -> hol.term (type_4 B A) :=
  B : hol.type => A : hol.type => term_1 B A.

(; Constant Set.universe ;)

Set_2Euniverse : A : hol.type -> hol.term (type_0 A).

def term_4 : B : hol.type -> A : hol.type -> hol.term type_2 :=
  B : hol.type => A : hol.type => term_0 B A (Relation_2Euniverse (type_1 B) (type_0 A)) (term_2 B A (Set_2Euniverse (type_8 B A))).

(; axiom ;)

thm_1 : B : hol.type -> A : hol.type -> hol.proof (term_4 B A).

(; Theorem: |- ((= Relation.universe) (Relation.fromSet Set.universe)) ;)

def type_10 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_0 A) type_2.

def type_11 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_0 A) (type_10 A).

def type_12 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_11 A) type_2.

def type_13 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_12 A) type_2.

(; Constant Data.Bool.! ;)

Data_2EBool_2E_21 : A : hol.type -> hol.term (type_0 A).

def term_5 : A : hol.type -> hol.term (type_13 A) :=
  A : hol.type => Data_2EBool_2E_21 (type_13 A).

def type_14 : hol.type :=
  hol.arr type_2 type_2.

def type_15 : hol.type :=
  hol.arr type_2 type_14.

def term_6 : hol.term type_15 :=
  hol.eq type_2.

def term_7 : A : hol.type -> hol.term (type_12 A) :=
  A : hol.type => relation_2Ddef_2D1_2E25 (type_12 A).

(; Constant Relation.reflexive ;)

def Relation_2Ereflexive : A : hol.type -> hol.term (type_12 A) :=
  A : hol.type => term_7 A.

def term_8 : A : hol.type -> r_1 : hol.term (type_11 A) -> hol.term (type_11 A) :=
  A : hol.type => r_1 : hol.term (type_11 A) => r_1.

def type_16 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_10 A) type_2.

def term_9 : A : hol.type -> hol.term (type_16 A) :=
  A : hol.type => Data_2EBool_2E_21 (type_16 A).

def term_10 : A : hol.type -> x_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => x_1 : hol.term (type_0 A) => x_1.

def term_11 : A : hol.type -> x_1 : hol.term (type_0 A) -> r_2 : hol.term (type_11 A) -> hol.term (type_10 A) :=
  A : hol.type => x_1 : hol.term (type_0 A) => r_2 : hol.term (type_11 A) => term_8 A r_2 (term_10 A x_1).

def term_12 : A : hol.type -> x_1 : hol.term (type_0 A) -> r_2 : hol.term (type_11 A) -> hol.term type_2 :=
  A : hol.type => x_1 : hol.term (type_0 A) => r_2 : hol.term (type_11 A) => term_11 A x_1 r_2 (term_10 A x_1).

def term_13 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_5 A (r_1 : hol.term (type_11 A) => term_6 (Relation_2Ereflexive (type_0 A) (term_8 A r_1)) (term_9 A (x_2 : hol.term (type_0 A) => term_12 A x_2 r_1))).

(; axiom ;)

thm_2 : A : hol.type -> hol.proof (term_13 A).

(; Theorem: |- (Data.Bool.! \lambda r. ((= (Relation.reflexive r)) (Data.Bool.! \lambda x. ((r x) x)))) ;)

def type_17 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => Set_2Eset (type_4 B A).

def term_14 : B : hol.type -> A : hol.type -> hol.term (hol.arr (hol.arr (type_17 B A) type_2) type_2) :=
  B : hol.type => A : hol.type => Data_2EBool_2E_21 (hol.arr (hol.arr (type_17 B A) type_2) type_2).

def type_18 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_17 B A) (type_4 B A).

def term_15 : B : hol.type -> A : hol.type -> hol.term (type_18 B A) :=
  B : hol.type => A : hol.type => relation_2Ddef_2D1_2E25 (type_18 B A).

(; Constant Relation.bigIntersect ;)

def Relation_2EbigIntersect : B : hol.type -> A : hol.type -> hol.term (type_18 B A) :=
  B : hol.type => A : hol.type => term_15 B A.

def term_16 : B : hol.type -> A : hol.type -> s_1 : hol.term (type_17 B A) -> hol.term (type_17 B A) :=
  B : hol.type => A : hol.type => s_1 : hol.term (type_17 B A) => s_1.

def type_19 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => Set_2Eset (type_8 B A).

def type_20 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_19 B A) (type_8 B A).

(; Constant Set.bigIntersect ;)

Set_2EbigIntersect : A : hol.type -> hol.term (type_0 A).

def type_21 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_4 B A) (type_8 B A).

(; Constant Set.image ;)

Set_2Eimage : A : hol.type -> hol.term (type_0 A).

(; Constant Relation.toSet ;)

def Relation_2EtoSet : B : hol.type -> A : hol.type -> hol.term (type_21 B A) :=
  B : hol.type => A : hol.type => relation_2Ddef_2D1_2E25 (type_21 B A).

def term_17 : B : hol.type -> A : hol.type -> hol.term (type_21 B A) :=
  B : hol.type => A : hol.type => Relation_2EtoSet (type_1 B) (type_0 A).

def term_18 : B : hol.type -> A : hol.type -> s_1 : hol.term (type_17 B A) -> hol.term (type_19 B A) :=
  B : hol.type => A : hol.type => s_1 : hol.term (type_17 B A) => Set_2Eimage (hol.arr (type_21 B A) (hol.arr (type_17 B A) (type_19 B A))) (term_17 B A) (term_16 B A s_1).

def term_19 : B : hol.type -> A : hol.type -> hol.term type_2 :=
  B : hol.type => A : hol.type => term_14 B A (s_1 : hol.term (type_17 B A) => term_0 B A (Relation_2EbigIntersect (type_1 B) (type_0 A) (term_16 B A s_1)) (term_2 B A (Set_2EbigIntersect (type_20 B A) (term_18 B A s_1)))).

(; axiom ;)

thm_3 : B : hol.type -> A : hol.type -> hol.proof (term_19 B A).

(; Theorem: |- (Data.Bool.! \lambda s. ((= (Relation.bigIntersect s)) (Relation.fromSet (Set.bigIntersect ((Set.image Relation.toSet) s))))) ;)

(; Constant Relation.bigUnion ;)

def Relation_2EbigUnion : B : hol.type -> A : hol.type -> hol.term (type_18 B A) :=
  B : hol.type => A : hol.type => term_15 B A.

(; Constant Set.bigUnion ;)

Set_2EbigUnion : A : hol.type -> hol.term (type_0 A).

def term_20 : B : hol.type -> A : hol.type -> hol.term type_2 :=
  B : hol.type => A : hol.type => term_14 B A (s_1 : hol.term (type_17 B A) => term_0 B A (Relation_2EbigUnion (type_1 B) (type_0 A) (term_16 B A s_1)) (term_2 B A (Set_2EbigUnion (type_20 B A) (term_18 B A s_1)))).

(; axiom ;)

thm_4 : B : hol.type -> A : hol.type -> hol.proof (term_20 B A).

(; Theorem: |- (Data.Bool.! \lambda s. ((= (Relation.bigUnion s)) (Relation.fromSet (Set.bigUnion ((Set.image Relation.toSet) s))))) ;)

(; Constant Relation.irreflexive ;)

def Relation_2Eirreflexive : A : hol.type -> hol.term (type_12 A) :=
  A : hol.type => term_7 A.

(; Constant Data.Bool.~ ;)

Data_2EBool_2E_7E : A : hol.type -> hol.term (type_0 A).

def term_21 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_5 A (r_1 : hol.term (type_11 A) => term_6 (Relation_2Eirreflexive (type_0 A) (term_8 A r_1)) (term_9 A (x_2 : hol.term (type_0 A) => Data_2EBool_2E_7E type_14 (term_12 A x_2 r_1)))).

(; axiom ;)

thm_5 : A : hol.type -> hol.proof (term_21 A).

(; Theorem: |- (Data.Bool.! \lambda r. ((= (Relation.irreflexive r)) (Data.Bool.! \lambda x. (Data.Bool.~ ((r x) x))))) ;)

def term_22 : B : hol.type -> A : hol.type -> hol.term (hol.arr (type_5 B A) type_2) :=
  B : hol.type => A : hol.type => Data_2EBool_2E_21 (hol.arr (type_5 B A) type_2).

(; Constant Relation.subrelation ;)

def Relation_2Esubrelation : B : hol.type -> A : hol.type -> hol.term (type_6 B A) :=
  B : hol.type => A : hol.type => relation_2Ddef_2D1_2E25 (type_6 B A).

def term_23 : B : hol.type -> A : hol.type -> r_1 : hol.term (type_4 B A) -> hol.term (type_4 B A) :=
  B : hol.type => A : hol.type => r_1 : hol.term (type_4 B A) => r_1.

def term_24 : B : hol.type -> A : hol.type -> s_1 : hol.term (type_4 B A) -> hol.term (type_4 B A) :=
  B : hol.type => A : hol.type => s_1 : hol.term (type_4 B A) => s_1.

def type_22 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_8 B A) type_2.

def type_23 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_8 B A) (type_22 B A).

(; Constant Set.subset ;)

Set_2Esubset : A : hol.type -> hol.term (type_0 A).

def term_25 : B : hol.type -> A : hol.type -> r_1 : hol.term (type_4 B A) -> hol.term (type_8 B A) :=
  B : hol.type => A : hol.type => r_1 : hol.term (type_4 B A) => term_17 B A (term_23 B A r_1).

def term_26 : B : hol.type -> A : hol.type -> s_1 : hol.term (type_4 B A) -> hol.term (type_8 B A) :=
  B : hol.type => A : hol.type => s_1 : hol.term (type_4 B A) => term_17 B A (term_24 B A s_1).

def term_27 : B : hol.type -> A : hol.type -> hol.term type_2 :=
  B : hol.type => A : hol.type => term_22 B A (r_1 : hol.term (type_4 B A) => term_22 B A (s_2 : hol.term (type_4 B A) => term_6 (Relation_2Esubrelation (type_1 B) (type_0 A) (term_23 B A r_1) (term_24 B A s_2)) (Set_2Esubset (type_23 B A) (term_25 B A r_1) (term_26 B A s_2)))).

(; axiom ;)

thm_6 : B : hol.type -> A : hol.type -> hol.proof (term_27 B A).

(; Theorem: |- (Data.Bool.! \lambda r. (Data.Bool.! \lambda s. ((= ((Relation.subrelation r) s)) ((Set.subset (Relation.toSet r)) (Relation.toSet s))))) ;)

def type_24 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_4 B A) (hol.arr (type_4 B A) (type_4 B A)).

def term_28 : B : hol.type -> A : hol.type -> hol.term (type_24 B A) :=
  B : hol.type => A : hol.type => relation_2Ddef_2D1_2E25 (type_24 B A).

(; Constant Relation.intersect ;)

def Relation_2Eintersect : B : hol.type -> A : hol.type -> hol.term (type_24 B A) :=
  B : hol.type => A : hol.type => term_28 B A.

def type_25 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_8 B A) (hol.arr (type_8 B A) (type_8 B A)).

(; Constant Set.intersect ;)

Set_2Eintersect : A : hol.type -> hol.term (type_0 A).

def term_29 : B : hol.type -> A : hol.type -> hol.term type_2 :=
  B : hol.type => A : hol.type => term_22 B A (r_1 : hol.term (type_4 B A) => term_22 B A (s_2 : hol.term (type_4 B A) => term_0 B A (Relation_2Eintersect (type_1 B) (type_0 A) (term_23 B A r_1) (term_24 B A s_2)) (term_2 B A (Set_2Eintersect (type_25 B A) (term_25 B A r_1) (term_26 B A s_2))))).

(; axiom ;)

thm_7 : B : hol.type -> A : hol.type -> hol.proof (term_29 B A).

(; Theorem: |- (Data.Bool.! \lambda r. (Data.Bool.! \lambda s. ((= ((Relation.intersect r) s)) (Relation.fromSet ((Set.intersect (Relation.toSet r)) (Relation.toSet s)))))) ;)

(; Constant Relation.union ;)

def Relation_2Eunion : B : hol.type -> A : hol.type -> hol.term (type_24 B A) :=
  B : hol.type => A : hol.type => term_28 B A.

(; Constant Set.union ;)

Set_2Eunion : A : hol.type -> hol.term (type_0 A).

def term_30 : B : hol.type -> A : hol.type -> hol.term type_2 :=
  B : hol.type => A : hol.type => term_22 B A (r_1 : hol.term (type_4 B A) => term_22 B A (s_2 : hol.term (type_4 B A) => term_0 B A (Relation_2Eunion (type_1 B) (type_0 A) (term_23 B A r_1) (term_24 B A s_2)) (term_2 B A (Set_2Eunion (type_25 B A) (term_25 B A r_1) (term_26 B A s_2))))).

(; axiom ;)

thm_8 : B : hol.type -> A : hol.type -> hol.proof (term_30 B A).

(; Theorem: |- (Data.Bool.! \lambda r. (Data.Bool.! \lambda s. ((= ((Relation.union r) s)) (Relation.fromSet ((Set.union (Relation.toSet r)) (Relation.toSet s)))))) ;)

def type_26 : hol.type -> hol.type :=
  B : hol.type => hol.arr (type_3 B) type_2.

def term_31 : B : hol.type -> A : hol.type -> s_1 : hol.term (type_8 B A) -> hol.term (type_8 B A) :=
  B : hol.type => A : hol.type => s_1 : hol.term (type_8 B A) => s_1.

def term_32 : B : hol.type -> y_1 : hol.term (type_1 B) -> hol.term (type_1 B) :=
  B : hol.type => y_1 : hol.term (type_1 B) => y_1.

(; Constant Set.member ;)

Set_2Emember : A : hol.type -> hol.term (type_0 A).

(; Constant Data.Pair., ;)

Data_2EPair_2E_2C : A : hol.type -> hol.term (type_0 A).

def term_33 : B : hol.type -> A : hol.type -> y_1 : hol.term (type_1 B) -> x_2 : hol.term (type_0 A) -> hol.term (type_7 B A) :=
  B : hol.type => A : hol.type => y_1 : hol.term (type_1 B) => x_2 : hol.term (type_0 A) => Data_2EPair_2E_2C (hol.arr (type_0 A) (hol.arr (type_1 B) (type_7 B A))) (term_10 A x_2) (term_32 B y_1).

def term_34 : B : hol.type -> A : hol.type -> hol.term type_2 :=
  B : hol.type => A : hol.type => Data_2EBool_2E_21 (hol.arr (type_22 B A) type_2) (s_1 : hol.term (type_8 B A) => term_9 A (x_2 : hol.term (type_0 A) => Data_2EBool_2E_21 (type_26 B) (y_3 : hol.term (type_1 B) => term_6 (term_2 B A (term_31 B A s_1) (term_10 A x_2) (term_32 B y_3)) (Set_2Emember (hol.arr (type_7 B A) (type_22 B A)) (term_33 B A y_3 x_2) (term_31 B A s_1))))).

(; axiom ;)

thm_9 : B : hol.type -> A : hol.type -> hol.proof (term_34 B A).

(; Theorem: |- (Data.Bool.! \lambda s. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (((Relation.fromSet s) x) y)) ((Set.member ((Data.Pair., x) y)) s))))) ;)

def type_27 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_7 B A) type_2.

(; Constant Set.fromPredicate ;)

Set_2EfromPredicate : A : hol.type -> hol.term (type_0 A).

(; Constant Data.Bool.? ;)

Data_2EBool_2E_3F : A : hol.type -> hol.term (type_0 A).

(; Constant Data.Bool./\ ;)

Data_2EBool_2E_2F_5C : A : hol.type -> hol.term (type_0 A).

def term_35 : hol.term type_15 :=
  Data_2EBool_2E_2F_5C type_15.

def term_36 : B : hol.type -> A : hol.type -> hol.term type_2 :=
  B : hol.type => A : hol.type => term_22 B A (r_1 : hol.term (type_4 B A) => hol.eq (type_8 B A) (term_25 B A r_1) (Set_2EfromPredicate (hol.arr (type_27 B A) (type_8 B A)) (v_2 : hol.term (type_7 B A) => Data_2EBool_2E_3F (type_16 A) (x_3 : hol.term (type_0 A) => Data_2EBool_2E_3F (type_26 B) (y_4 : hol.term (type_1 B) => term_35 (hol.eq (type_7 B A) v_2 (term_33 B A y_4 x_3)) (term_23 B A r_1 (term_10 A x_3) (term_32 B y_4))))))).

(; axiom ;)

thm_10 : B : hol.type -> A : hol.type -> hol.proof (term_36 B A).

(; Theorem: |- (Data.Bool.! \lambda r. ((= (Relation.toSet r)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((r x) y))))))) ;)

def type_28 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_11 A) (type_12 A).

def term_37 : A : hol.type -> hol.term (type_28 A) :=
  A : hol.type => hol.eq (type_11 A).

def type_29 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_11 A) (type_11 A).

(; Constant Relation.transitiveClosure ;)

def Relation_2EtransitiveClosure : A : hol.type -> hol.term (type_29 A) :=
  A : hol.type => relation_2Ddef_2D1_2E25 (type_29 A).

def type_30 : hol.type -> hol.type :=
  A : hol.type => Set_2Eset (type_11 A).

def term_38 : A : hol.type -> s_1 : hol.term (type_11 A) -> hol.term (type_11 A) :=
  A : hol.type => s_1 : hol.term (type_11 A) => s_1.

(; Constant Relation.transitive ;)

def Relation_2Etransitive : A : hol.type -> hol.term (type_12 A) :=
  A : hol.type => term_7 A.

def term_39 : A : hol.type -> hol.term (type_12 A) :=
  A : hol.type => Relation_2Etransitive (type_0 A).

def term_40 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_5 A (r_1 : hol.term (type_11 A) => term_37 A (Relation_2EtransitiveClosure (type_0 A) (term_8 A r_1)) (Relation_2EbigIntersect (type_0 A) (type_0 A) (Set_2EfromPredicate (hol.arr (type_12 A) (type_30 A)) (v_2 : hol.term (type_11 A) => Data_2EBool_2E_3F (type_13 A) (s_3 : hol.term (type_11 A) => term_35 (term_37 A v_2 (term_38 A s_3)) (term_35 (Relation_2Esubrelation (type_0 A) (type_0 A) (term_8 A r_1) (term_38 A s_3)) (term_39 A (term_38 A s_3)))))))).

(; axiom ;)

thm_11 : A : hol.type -> hol.proof (term_40 A).

(; Theorem: |- (Data.Bool.! \lambda r. ((= (Relation.transitiveClosure r)) (Relation.bigIntersect (Set.fromPredicate \lambda v. (Data.Bool.? \lambda s. ((Data.Bool./\ ((= v) s)) ((Data.Bool./\ ((Relation.subrelation r) s)) (Relation.transitive s)))))))) ;)

(; Constant Data.Bool.==> ;)

Data_2EBool_2E_3D_3D_3E : A : hol.type -> hol.term (type_0 A).

def term_41 : A : hol.type -> y_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => y_1 : hol.term (type_0 A) => y_1.

def term_42 : A : hol.type -> z_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => z_1 : hol.term (type_0 A) => z_1.

def term_43 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_5 A (r_1 : hol.term (type_11 A) => term_6 (term_39 A (term_8 A r_1)) (term_9 A (x_2 : hol.term (type_0 A) => term_9 A (y_3 : hol.term (type_0 A) => term_9 A (z_4 : hol.term (type_0 A) => Data_2EBool_2E_3D_3D_3E type_15 (term_35 (term_11 A x_2 r_1 (term_41 A y_3)) (term_8 A r_1 (term_41 A y_3) (term_42 A z_4))) (term_11 A x_2 r_1 (term_42 A z_4))))))).

(; axiom ;)

thm_12 : A : hol.type -> hol.proof (term_43 A).

(; Theorem: |- (Data.Bool.! \lambda r. ((= (Relation.transitive r)) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda z. ((Data.Bool.==> ((Data.Bool./\ ((r x) y)) ((r y) z))) ((r x) z))))))) ;)

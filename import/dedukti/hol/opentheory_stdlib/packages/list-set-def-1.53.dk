
(; This file was generated by Holide. ;)

#NAME list_2Dset_2Ddef_2D1_2E53.

def type_0 : hol.type -> hol.type :=
  A : hol.type => A.

Set_2Eset : hol.type -> hol.type.

def type_1 : hol.type -> hol.type :=
  A : hol.type => Set_2Eset (type_0 A).

def type_2 : hol.type :=
  hol.bool.

def type_3 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_1 A) type_2.

def term_0 : A : hol.type -> hol.term (hol.arr (type_1 A) (type_3 A)) :=
  A : hol.type => hol.eq (type_1 A).

Data_2EList_2Elist : hol.type -> hol.type.

def type_4 : hol.type -> hol.type :=
  A : hol.type => Data_2EList_2Elist (type_0 A).

def type_5 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_4 A) (type_1 A).

(; Constant list-set-def-1.53 ;)

list_2Dset_2Ddef_2D1_2E53 : A : hol.type -> hol.term (type_0 A).

(; Constant Data.List.toSet ;)

def Data_2EList_2EtoSet : A : hol.type -> hol.term (type_5 A) :=
  A : hol.type => list_2Dset_2Ddef_2D1_2E53 (type_5 A).

def term_1 : A : hol.type -> hol.term (type_5 A) :=
  A : hol.type => Data_2EList_2EtoSet (type_0 A).

(; Constant Data.List.[] ;)

Data_2EList_2E_5B_5D : A : hol.type -> hol.term (type_0 A).

def term_2 : A : hol.type -> hol.term (type_4 A) :=
  A : hol.type => Data_2EList_2E_5B_5D (type_4 A).

(; Constant Set.{} ;)

Set_2E_7B_7D : A : hol.type -> hol.term (type_0 A).

def term_3 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_0 A (term_1 A (term_2 A)) (Set_2E_7B_7D (type_1 A)).

(; axiom ;)

thm_0 : A : hol.type -> hol.proof (term_3 A).

(; Theorem: |- ((= (Data.List.toSet Data.List.[])) Set.{}) ;)

def type_6 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_0 A) type_2.

def type_7 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_6 A) type_2.

(; Constant Data.Bool.! ;)

Data_2EBool_2E_21 : A : hol.type -> hol.term (type_0 A).

def term_4 : A : hol.type -> hol.term (hol.arr (type_7 A) type_2) :=
  A : hol.type => Data_2EBool_2E_21 (hol.arr (type_7 A) type_2).

def type_8 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_4 A) type_2.

def type_9 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_6 A) (type_8 A).

def term_5 : A : hol.type -> hol.term (type_9 A) :=
  A : hol.type => list_2Dset_2Ddef_2D1_2E53 (type_9 A).

(; Constant Data.List.all ;)

def Data_2EList_2Eall : A : hol.type -> hol.term (type_9 A) :=
  A : hol.type => term_5 A.

def term_6 : A : hol.type -> p_1 : hol.term (type_6 A) -> hol.term (type_6 A) :=
  A : hol.type => p_1 : hol.term (type_6 A) => p_1.

def term_7 : A : hol.type -> p_1 : hol.term (type_6 A) -> hol.term (type_8 A) :=
  A : hol.type => p_1 : hol.term (type_6 A) => Data_2EList_2Eall (type_0 A) (term_6 A p_1).

def term_8 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_4 A (p_1 : hol.term (type_6 A) => term_7 A p_1 (term_2 A)).

(; axiom ;)

thm_1 : A : hol.type -> hol.proof (term_8 A).

(; Theorem: |- (Data.Bool.! \lambda p. ((Data.List.all p) Data.List.[])) ;)

def term_9 : A : hol.type -> hol.term (type_7 A) :=
  A : hol.type => Data_2EBool_2E_21 (type_7 A).

def type_10 : hol.type :=
  hol.arr type_2 type_2.

(; Constant Data.Bool.~ ;)

Data_2EBool_2E_7E : A : hol.type -> hol.term (type_0 A).

def term_10 : hol.term type_10 :=
  Data_2EBool_2E_7E type_10.

def type_11 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_0 A) (type_8 A).

(; Constant Data.List.member ;)

def Data_2EList_2Emember : A : hol.type -> hol.term (type_11 A) :=
  A : hol.type => list_2Dset_2Ddef_2D1_2E53 (type_11 A).

def term_11 : A : hol.type -> x_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => x_1 : hol.term (type_0 A) => x_1.

def term_12 : A : hol.type -> x_1 : hol.term (type_0 A) -> hol.term (type_8 A) :=
  A : hol.type => x_1 : hol.term (type_0 A) => Data_2EList_2Emember (type_0 A) (term_11 A x_1).

def term_13 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_9 A (x_1 : hol.term (type_0 A) => term_10 (term_12 A x_1 (term_2 A))).

(; axiom ;)

thm_2 : A : hol.type -> hol.proof (term_13 A).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.~ ((Data.List.member x) Data.List.[]))) ;)

(; Constant Data.List.any ;)

def Data_2EList_2Eany : A : hol.type -> hol.term (type_9 A) :=
  A : hol.type => term_5 A.

def term_14 : A : hol.type -> p_1 : hol.term (type_6 A) -> hol.term (type_8 A) :=
  A : hol.type => p_1 : hol.term (type_6 A) => Data_2EList_2Eany (type_0 A) (term_6 A p_1).

def term_15 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_4 A (p_1 : hol.term (type_6 A) => term_10 (term_14 A p_1 (term_2 A))).

(; axiom ;)

thm_3 : A : hol.type -> hol.proof (term_15 A).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.~ ((Data.List.any p) Data.List.[]))) ;)

def term_16 : A : hol.type -> hol.term (hol.arr (type_8 A) type_2) :=
  A : hol.type => Data_2EBool_2E_21 (hol.arr (type_8 A) type_2).

(; Constant Data.List.:: ;)

Data_2EList_2E_3A_3A : A : hol.type -> hol.term (type_0 A).

def term_17 : A : hol.type -> h_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => h_1 : hol.term (type_0 A) => h_1.

def term_18 : A : hol.type -> t_1 : hol.term (type_4 A) -> hol.term (type_4 A) :=
  A : hol.type => t_1 : hol.term (type_4 A) => t_1.

def term_19 : A : hol.type -> t_1 : hol.term (type_4 A) -> h_2 : hol.term (type_0 A) -> hol.term (type_4 A) :=
  A : hol.type => t_1 : hol.term (type_4 A) => h_2 : hol.term (type_0 A) => Data_2EList_2E_3A_3A (hol.arr (type_0 A) (hol.arr (type_4 A) (type_4 A))) (term_17 A h_2) (term_18 A t_1).

(; Constant Set.insert ;)

Set_2Einsert : A : hol.type -> hol.term (type_0 A).

def term_20 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_9 A (h_1 : hol.term (type_0 A) => term_16 A (t_2 : hol.term (type_4 A) => term_0 A (term_1 A (term_19 A t_2 h_1)) (Set_2Einsert (hol.arr (type_0 A) (hol.arr (type_1 A) (type_1 A))) (term_17 A h_1) (term_1 A (term_18 A t_2))))).

(; axiom ;)

thm_4 : A : hol.type -> hol.proof (term_20 A).

(; Theorem: |- (Data.Bool.! \lambda h. (Data.Bool.! \lambda t. ((= (Data.List.toSet ((Data.List.:: h) t))) ((Set.insert h) (Data.List.toSet t))))) ;)

def type_12 : hol.type :=
  hol.arr type_2 type_10.

(; Constant Data.Bool.==> ;)

Data_2EBool_2E_3D_3D_3E : A : hol.type -> hol.term (type_0 A).

(; Constant Set.finite ;)

Set_2Efinite : A : hol.type -> hol.term (type_0 A).

def term_21 : A : hol.type -> s_1 : hol.term (type_1 A) -> hol.term (type_1 A) :=
  A : hol.type => s_1 : hol.term (type_1 A) => s_1.

(; Constant Data.Bool./\ ;)

Data_2EBool_2E_2F_5C : A : hol.type -> hol.term (type_0 A).

def term_22 : hol.term type_12 :=
  Data_2EBool_2E_2F_5C type_12.

def type_13 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_1 A) (type_4 A).

(; Constant Data.List.fromSet ;)

def Data_2EList_2EfromSet : A : hol.type -> hol.term (type_13 A) :=
  A : hol.type => list_2Dset_2Ddef_2D1_2E53 (type_13 A).

def term_23 : A : hol.type -> s_1 : hol.term (type_1 A) -> hol.term (type_4 A) :=
  A : hol.type => s_1 : hol.term (type_1 A) => Data_2EList_2EfromSet (type_0 A) (term_21 A s_1).

Number_2ENatural_2Enatural : hol.type.

def type_14 : hol.type :=
  Number_2ENatural_2Enatural.

(; Constant Data.List.length ;)

Data_2EList_2Elength : A : hol.type -> hol.term (type_0 A).

(; Constant Set.size ;)

Set_2Esize : A : hol.type -> hol.term (type_0 A).

def term_24 : A : hol.type -> hol.term type_2 :=
  A : hol.type => Data_2EBool_2E_21 (hol.arr (type_3 A) type_2) (s_1 : hol.term (type_1 A) => Data_2EBool_2E_3D_3D_3E type_12 (Set_2Efinite (type_3 A) (term_21 A s_1)) (term_22 (term_0 A (term_1 A (term_23 A s_1)) (term_21 A s_1)) (hol.eq type_14 (Data_2EList_2Elength (hol.arr (type_4 A) type_14) (term_23 A s_1)) (Set_2Esize (hol.arr (type_1 A) type_14) (term_21 A s_1))))).

(; axiom ;)

thm_5 : A : hol.type -> hol.proof (term_24 A).

(; Theorem: |- (Data.Bool.! \lambda s. ((Data.Bool.==> (Set.finite s)) ((Data.Bool./\ ((= (Data.List.toSet (Data.List.fromSet s))) s)) ((= (Data.List.length (Data.List.fromSet s))) (Set.size s))))) ;)

def term_25 : hol.term type_12 :=
  hol.eq type_2.

def term_26 : A : hol.type -> h_1 : hol.term (type_0 A) -> p_2 : hol.term (type_6 A) -> hol.term type_2 :=
  A : hol.type => h_1 : hol.term (type_0 A) => p_2 : hol.term (type_6 A) => term_6 A p_2 (term_17 A h_1).

def term_27 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_4 A (p_1 : hol.term (type_6 A) => term_9 A (h_2 : hol.term (type_0 A) => term_16 A (t_3 : hol.term (type_4 A) => term_25 (term_7 A p_1 (term_19 A t_3 h_2)) (term_22 (term_26 A h_2 p_1) (term_7 A p_1 (term_18 A t_3)))))).

(; axiom ;)

thm_6 : A : hol.type -> hol.proof (term_27 A).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda h. (Data.Bool.! \lambda t. ((= ((Data.List.all p) ((Data.List.:: h) t))) ((Data.Bool./\ (p h)) ((Data.List.all p) t)))))) ;)

(; Constant Data.Bool.\/ ;)

Data_2EBool_2E_5C_2F : A : hol.type -> hol.term (type_0 A).

def term_28 : hol.term type_12 :=
  Data_2EBool_2E_5C_2F type_12.

def term_29 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_4 A (p_1 : hol.term (type_6 A) => term_9 A (h_2 : hol.term (type_0 A) => term_16 A (t_3 : hol.term (type_4 A) => term_25 (term_14 A p_1 (term_19 A t_3 h_2)) (term_28 (term_26 A h_2 p_1) (term_14 A p_1 (term_18 A t_3)))))).

(; axiom ;)

thm_7 : A : hol.type -> hol.proof (term_29 A).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda h. (Data.Bool.! \lambda t. ((= ((Data.List.any p) ((Data.List.:: h) t))) ((Data.Bool.\/ (p h)) ((Data.List.any p) t)))))) ;)

def term_30 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_9 A (x_1 : hol.term (type_0 A) => term_9 A (h_2 : hol.term (type_0 A) => term_16 A (t_3 : hol.term (type_4 A) => term_25 (term_12 A x_1 (term_19 A t_3 h_2)) (term_28 (hol.eq (type_0 A) (term_11 A x_1) (term_17 A h_2)) (term_12 A x_1 (term_18 A t_3)))))).

(; axiom ;)

thm_8 : A : hol.type -> hol.proof (term_30 A).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda h. (Data.Bool.! \lambda t. ((= ((Data.List.member x) ((Data.List.:: h) t))) ((Data.Bool.\/ ((= x) h)) ((Data.List.member x) t)))))) ;)


(; This file was generated by Holide. ;)

#NAME list_2Dlast_2Dthm_2D1_2E42.

def type_0 : hol.type -> hol.type :=
  A : hol.type => A.

def type_1 : hol.type :=
  hol.bool.

def type_2 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_0 A) type_1.

(; Constant Data.Bool.! ;)

Data_2EBool_2E_21 : A : hol.type -> hol.term (type_0 A).

def term_0 : A : hol.type -> hol.term (hol.arr (type_2 A) type_1) :=
  A : hol.type => Data_2EBool_2E_21 (hol.arr (type_2 A) type_1).

def term_1 : A : hol.type -> hol.term (hol.arr (type_0 A) (type_2 A)) :=
  A : hol.type => hol.eq (type_0 A).

Data_2EList_2Elist : hol.type -> hol.type.

def type_3 : hol.type -> hol.type :=
  A : hol.type => Data_2EList_2Elist (type_0 A).

def type_4 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_3 A) (type_0 A).

(; Constant Data.List.last ;)

Data_2EList_2Elast : A : hol.type -> hol.term (type_0 A).

def term_2 : A : hol.type -> hol.term (type_4 A) :=
  A : hol.type => Data_2EList_2Elast (type_4 A).

def type_5 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_3 A) (type_3 A).

(; Constant Data.List.:: ;)

Data_2EList_2E_3A_3A : A : hol.type -> hol.term (type_0 A).

def term_3 : A : hol.type -> hol.term (hol.arr (type_0 A) (type_5 A)) :=
  A : hol.type => Data_2EList_2E_3A_3A (hol.arr (type_0 A) (type_5 A)).

def term_4 : A : hol.type -> x_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => x_1 : hol.term (type_0 A) => x_1.

(; Constant Data.List.[] ;)

Data_2EList_2E_5B_5D : A : hol.type -> hol.term (type_0 A).

def term_5 : A : hol.type -> hol.term (type_3 A) :=
  A : hol.type => Data_2EList_2E_5B_5D (type_3 A).

def term_6 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_0 A (x_1 : hol.term (type_0 A) => term_1 A (term_2 A (term_3 A (term_4 A x_1) (term_5 A))) (term_4 A x_1)).

(; axiom ;)

thm_0 : A : hol.type -> hol.proof (term_6 A).

(; Theorem: |- (Data.Bool.! \lambda x. ((= (Data.List.last ((Data.List.:: x) Data.List.[]))) x)) ;)

def type_6 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_3 A) type_1.

def term_7 : A : hol.type -> hol.term (hol.arr (type_6 A) type_1) :=
  A : hol.type => Data_2EBool_2E_21 (hol.arr (type_6 A) type_1).

def type_7 : hol.type :=
  hol.arr type_1 type_1.

(; Constant Data.Bool.==> ;)

Data_2EBool_2E_3D_3D_3E : A : hol.type -> hol.term (type_0 A).

(; Constant Data.Bool.~ ;)

Data_2EBool_2E_7E : A : hol.type -> hol.term (type_0 A).

def term_8 : A : hol.type -> l_1 : hol.term (type_3 A) -> hol.term (type_3 A) :=
  A : hol.type => l_1 : hol.term (type_3 A) => l_1.

def term_9 : A : hol.type -> l_1 : hol.term (type_3 A) -> hol.term type_7 :=
  A : hol.type => l_1 : hol.term (type_3 A) => Data_2EBool_2E_3D_3D_3E (hol.arr type_1 type_7) (Data_2EBool_2E_7E type_7 (hol.eq (type_3 A) (term_8 A l_1) (term_5 A))).

(; Constant Data.List.head ;)

Data_2EList_2Ehead : A : hol.type -> hol.term (type_0 A).

def term_10 : A : hol.type -> hol.term (type_4 A) :=
  A : hol.type => Data_2EList_2Ehead (type_4 A).

(; Constant Data.List.reverse ;)

Data_2EList_2Ereverse : A : hol.type -> hol.term (type_0 A).

def term_11 : A : hol.type -> l_1 : hol.term (type_3 A) -> hol.term (type_3 A) :=
  A : hol.type => l_1 : hol.term (type_3 A) => Data_2EList_2Ereverse (type_5 A) (term_8 A l_1).

def term_12 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_7 A (l_1 : hol.term (type_3 A) => term_9 A l_1 (term_1 A (term_10 A (term_11 A l_1)) (term_2 A (term_8 A l_1)))).

(; axiom ;)

thm_1 : A : hol.type -> hol.proof (term_12 A).

(; Theorem: |- (Data.Bool.! \lambda l. ((Data.Bool.==> (Data.Bool.~ ((= l) Data.List.[]))) ((= (Data.List.head (Data.List.reverse l))) (Data.List.last l)))) ;)

def term_13 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_7 A (l_1 : hol.term (type_3 A) => term_9 A l_1 (term_1 A (term_2 A (term_11 A l_1)) (term_10 A (term_8 A l_1)))).

(; axiom ;)

thm_2 : A : hol.type -> hol.proof (term_13 A).

(; Theorem: |- (Data.Bool.! \lambda l. ((Data.Bool.==> (Data.Bool.~ ((= l) Data.List.[]))) ((= (Data.List.last (Data.List.reverse l))) (Data.List.head l)))) ;)

(; Constant Data.List.@ ;)

Data_2EList_2E_40 : A : hol.type -> hol.term (type_0 A).

def term_14 : A : hol.type -> hol.term (hol.arr (type_3 A) (type_5 A)) :=
  A : hol.type => Data_2EList_2E_40 (hol.arr (type_3 A) (type_5 A)).

def term_15 : A : hol.type -> l1_1 : hol.term (type_3 A) -> hol.term (type_3 A) :=
  A : hol.type => l1_1 : hol.term (type_3 A) => l1_1.

def term_16 : A : hol.type -> l2_1 : hol.term (type_3 A) -> hol.term (type_3 A) :=
  A : hol.type => l2_1 : hol.term (type_3 A) => l2_1.

(; Constant Data.Bool.cond ;)

Data_2EBool_2Econd : A : hol.type -> hol.term (type_0 A).

(; Constant Data.List.null ;)

Data_2EList_2Enull : A : hol.type -> hol.term (type_0 A).

def term_17 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_7 A (l1_1 : hol.term (type_3 A) => term_7 A (l2_2 : hol.term (type_3 A) => term_1 A (term_2 A (term_14 A (term_15 A l1_1) (term_16 A l2_2))) (Data_2EBool_2Econd (hol.arr type_1 (hol.arr (type_0 A) (hol.arr (type_0 A) (type_0 A)))) (Data_2EList_2Enull (type_6 A) (term_16 A l2_2)) (term_2 A (term_15 A l1_1)) (term_2 A (term_16 A l2_2))))).

(; axiom ;)

thm_3 : A : hol.type -> hol.proof (term_17 A).

(; Theorem: |- (Data.Bool.! \lambda l1. (Data.Bool.! \lambda l2. ((= (Data.List.last ((Data.List.@ l1) l2))) (((Data.Bool.cond (Data.List.null l2)) (Data.List.last l1)) (Data.List.last l2))))) ;)

def term_18 : A : hol.type -> l_1 : hol.term (type_3 A) -> x2_2 : hol.term (type_0 A) -> hol.term (type_3 A) :=
  A : hol.type => l_1 : hol.term (type_3 A) => x2_2 : hol.term (type_0 A) => term_3 A x2_2 (term_8 A l_1).

def term_19 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_0 A (x1_1 : hol.term (type_0 A) => term_0 A (x2_2 : hol.term (type_0 A) => term_7 A (l_3 : hol.term (type_3 A) => term_1 A (term_2 A (term_3 A x1_1 (term_18 A l_3 x2_2))) (term_2 A (term_18 A l_3 x2_2))))).

(; axiom ;)

thm_4 : A : hol.type -> hol.proof (term_19 A).

(; Theorem: |- (Data.Bool.! \lambda x1. (Data.Bool.! \lambda x2. (Data.Bool.! \lambda l. ((= (Data.List.last ((Data.List.:: x1) ((Data.List.:: x2) l)))) (Data.List.last ((Data.List.:: x2) l)))))) ;)

def term_20 : A : hol.type -> t_1 : hol.term (type_3 A) -> h_2 : hol.term (type_0 A) -> hol.term (type_3 A) :=
  A : hol.type => t_1 : hol.term (type_3 A) => h_2 : hol.term (type_0 A) => term_3 A h_2 t_1.

def term_21 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_0 A (h_1 : hol.term (type_0 A) => term_7 A (t_2 : hol.term (type_3 A) => term_7 A (l_3 : hol.term (type_3 A) => term_1 A (term_2 A (term_14 A (term_8 A l_3) (term_20 A t_2 h_1))) (term_2 A (term_20 A t_2 h_1))))).

(; axiom ;)

thm_5 : A : hol.type -> hol.proof (term_21 A).

(; Theorem: |- (Data.Bool.! \lambda h. (Data.Bool.! \lambda t. (Data.Bool.! \lambda l. ((= (Data.List.last ((Data.List.@ l) ((Data.List.:: h) t)))) (Data.List.last ((Data.List.:: h) t)))))) ;)

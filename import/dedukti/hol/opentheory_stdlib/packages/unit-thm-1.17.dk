
(; This file was generated by Holide. ;)

#NAME unit_2Dthm_2D1_2E17.

def type_0 : hol.type -> hol.type :=
  A : hol.type => A.

Data_2EUnit_2Eunit : hol.type.

def type_1 : hol.type :=
  Data_2EUnit_2Eunit.

def type_2 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_0 A) type_1.

def type_3 : hol.type :=
  hol.bool.

def type_4 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_2 A) type_3.

(; Constant Data.Bool.! ;)

Data_2EBool_2E_21 : A : hol.type -> hol.term (type_0 A).

def term_0 : A : hol.type -> hol.term (hol.arr (type_4 A) type_3) :=
  A : hol.type => Data_2EBool_2E_21 (hol.arr (type_4 A) type_3).

def term_1 : A : hol.type -> hol.term type_3 :=
  A : hol.type => term_0 A (f_1 : hol.term (type_2 A) => term_0 A (g_2 : hol.term (type_2 A) => hol.eq (type_2 A) f_1 g_2)).

(; axiom ;)

thm_0 : A : hol.type -> hol.proof (term_1 A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= f) g))) ;)

def type_5 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_0 A) type_3.

def term_2 : A : hol.type -> hol.term (hol.arr (type_5 A) type_3) :=
  A : hol.type => Data_2EBool_2E_21 (hol.arr (type_5 A) type_3).

def type_6 : hol.type -> hol.type :=
  A : hol.type => hol.arr type_1 (type_0 A).

def type_7 : hol.type -> hol.type :=
  A : hol.type => hol.arr (hol.arr (type_6 A) type_3) type_3.

(; Constant Data.Bool.? ;)

Data_2EBool_2E_3F : A : hol.type -> hol.term (type_0 A).

(; Constant Data.Unit.() ;)

Data_2EUnit_2E_28_29 : A : hol.type -> hol.term (type_0 A).

def term_3 : hol.term type_1 :=
  Data_2EUnit_2E_28_29 type_1.

def term_4 : A : hol.type -> e_1 : hol.term (type_0 A) -> hol.term (hol.arr (type_6 A) type_3) :=
  A : hol.type => e_1 : hol.term (type_0 A) => fn_2 : hol.term (type_6 A) => hol.eq (type_0 A) (fn_2 term_3) e_1.

def term_5 : A : hol.type -> hol.term type_3 :=
  A : hol.type => term_2 A (e_1 : hol.term (type_0 A) => Data_2EBool_2E_3F (type_7 A) (term_4 A e_1)).

(; axiom ;)

thm_1 : A : hol.type -> hol.proof (term_5 A).

(; Theorem: |- (Data.Bool.! \lambda e. (Data.Bool.? \lambda fn. ((= (fn Data.Unit.())) e))) ;)

(; Constant Data.Bool.?! ;)

Data_2EBool_2E_3F_21 : A : hol.type -> hol.term (type_0 A).

def term_6 : A : hol.type -> hol.term type_3 :=
  A : hol.type => term_2 A (e_1 : hol.term (type_0 A) => Data_2EBool_2E_3F_21 (type_7 A) (term_4 A e_1)).

(; axiom ;)

thm_2 : A : hol.type -> hol.proof (term_6 A).

(; Theorem: |- (Data.Bool.! \lambda e. (Data.Bool.?! \lambda fn. ((= (fn Data.Unit.())) e))) ;)

def type_8 : hol.type :=
  hol.arr type_1 type_3.

def type_9 : hol.type :=
  hol.arr type_8 type_3.

def term_7 : hol.term (hol.arr type_9 type_3) :=
  Data_2EBool_2E_21 (hol.arr type_9 type_3).

def type_10 : hol.type :=
  hol.arr type_3 (hol.arr type_3 type_3).

(; Constant Data.Bool.==> ;)

Data_2EBool_2E_3D_3D_3E : A : hol.type -> hol.term (type_0 A).

def term_8 : p_1 : hol.term type_8 -> hol.term type_8 :=
  p_1 : hol.term type_8 => p_1.

def term_9 : p_1 : hol.term type_8 -> hol.term type_3 :=
  p_1 : hol.term type_8 => term_8 p_1 term_3.

def term_10 : p_1 : hol.term type_8 -> hol.term type_8 :=
  p_1 : hol.term type_8 => x_2 : hol.term type_1 => term_8 p_1 x_2.

def term_11 : p_1 : hol.term type_8 -> hol.term type_3 :=
  p_1 : hol.term type_8 => Data_2EBool_2E_21 type_9 (term_10 p_1).

def term_12 : hol.term type_3 :=
  term_7 (p_1 : hol.term type_8 => Data_2EBool_2E_3D_3D_3E type_10 (term_9 p_1) (term_11 p_1)).

(; axiom ;)

thm_3 : hol.proof term_12.

(; Theorem: |- (Data.Bool.! \lambda p. ((Data.Bool.==> (p Data.Unit.())) (Data.Bool.! \lambda x. (p x)))) ;)

def term_13 : hol.term type_10 :=
  hol.eq type_3.

def term_14 : hol.term type_3 :=
  term_7 (p_1 : hol.term type_8 => term_13 (term_11 p_1) (term_9 p_1)).

(; axiom ;)

thm_4 : hol.proof term_14.

(; Theorem: |- (Data.Bool.! \lambda p. ((= (Data.Bool.! \lambda x. (p x))) (p Data.Unit.()))) ;)

def term_15 : hol.term type_3 :=
  term_7 (p_1 : hol.term type_8 => term_13 (Data_2EBool_2E_3F type_9 (term_10 p_1)) (term_9 p_1)).

(; axiom ;)

thm_5 : hol.proof term_15.

(; Theorem: |- (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda x. (p x))) (p Data.Unit.()))) ;)

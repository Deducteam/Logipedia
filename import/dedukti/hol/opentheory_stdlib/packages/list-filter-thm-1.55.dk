
(; This file was generated by Holide. ;)

#NAME list_2Dfilter_2Dthm_2D1_2E55.

def type_0 : hol.type -> hol.type :=
  A : hol.type => A.

def type_1 : hol.type :=
  hol.bool.

def type_2 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_0 A) type_1.

def type_3 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_2 A) type_1.

(; Constant Data.Bool.! ;)

Data_2EBool_2E_21 : A : hol.type -> hol.term (type_0 A).

def term_0 : A : hol.type -> hol.term (hol.arr (type_3 A) type_1) :=
  A : hol.type => Data_2EBool_2E_21 (hol.arr (type_3 A) type_1).

Data_2EList_2Elist : hol.type -> hol.type.

def type_4 : hol.type -> hol.type :=
  A : hol.type => Data_2EList_2Elist (type_0 A).

def type_5 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_4 A) type_1.

def term_1 : A : hol.type -> hol.term (hol.arr (type_5 A) type_1) :=
  A : hol.type => Data_2EBool_2E_21 (hol.arr (type_5 A) type_1).

Number_2ENatural_2Enatural : hol.type.

def type_6 : hol.type :=
  Number_2ENatural_2Enatural.

(; Constant Number.Natural.<= ;)

Number_2ENatural_2E_3C_3D : A : hol.type -> hol.term (type_0 A).

(; Constant Data.List.length ;)

Data_2EList_2Elength : A : hol.type -> hol.term (type_0 A).

def term_2 : A : hol.type -> hol.term (hol.arr (type_4 A) type_6) :=
  A : hol.type => Data_2EList_2Elength (hol.arr (type_4 A) type_6).

(; Constant Data.List.filter ;)

Data_2EList_2Efilter : A : hol.type -> hol.term (type_0 A).

def term_3 : A : hol.type -> hol.term (hol.arr (type_2 A) (hol.arr (type_4 A) (type_4 A))) :=
  A : hol.type => Data_2EList_2Efilter (hol.arr (type_2 A) (hol.arr (type_4 A) (type_4 A))).

def term_4 : A : hol.type -> p_1 : hol.term (type_2 A) -> hol.term (type_2 A) :=
  A : hol.type => p_1 : hol.term (type_2 A) => p_1.

def term_5 : A : hol.type -> p_1 : hol.term (type_2 A) -> hol.term (hol.arr (type_4 A) (type_4 A)) :=
  A : hol.type => p_1 : hol.term (type_2 A) => term_3 A (term_4 A p_1).

def term_6 : A : hol.type -> l_1 : hol.term (type_4 A) -> hol.term (type_4 A) :=
  A : hol.type => l_1 : hol.term (type_4 A) => l_1.

def term_7 : A : hol.type -> l_1 : hol.term (type_4 A) -> p_2 : hol.term (type_2 A) -> hol.term (type_4 A) :=
  A : hol.type => l_1 : hol.term (type_4 A) => p_2 : hol.term (type_2 A) => term_5 A p_2 (term_6 A l_1).

def term_8 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_0 A (p_1 : hol.term (type_2 A) => term_1 A (l_2 : hol.term (type_4 A) => Number_2ENatural_2E_3C_3D (hol.arr type_6 (hol.arr type_6 type_1)) (term_2 A (term_7 A l_2 p_1)) (term_2 A (term_6 A l_2)))).

(; axiom ;)

thm_0 : A : hol.type -> hol.proof (term_8 A).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda l. ((Number.Natural.<= (Data.List.length ((Data.List.filter p) l))) (Data.List.length l)))) ;)

def type_7 : hol.type :=
  hol.arr type_1 type_1.

def type_8 : hol.type :=
  hol.arr type_1 type_7.

def term_9 : hol.term type_8 :=
  hol.eq type_1.

(; Constant Data.List.member ;)

Data_2EList_2Emember : A : hol.type -> hol.term (type_0 A).

def term_10 : A : hol.type -> x_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => x_1 : hol.term (type_0 A) => x_1.

def term_11 : A : hol.type -> x_1 : hol.term (type_0 A) -> hol.term (type_5 A) :=
  A : hol.type => x_1 : hol.term (type_0 A) => Data_2EList_2Emember (hol.arr (type_0 A) (type_5 A)) (term_10 A x_1).

(; Constant Data.Bool./\ ;)

Data_2EBool_2E_2F_5C : A : hol.type -> hol.term (type_0 A).

def term_12 : hol.term type_8 :=
  Data_2EBool_2E_2F_5C type_8.

def term_13 : A : hol.type -> x_1 : hol.term (type_0 A) -> p_2 : hol.term (type_2 A) -> hol.term type_1 :=
  A : hol.type => x_1 : hol.term (type_0 A) => p_2 : hol.term (type_2 A) => term_4 A p_2 (term_10 A x_1).

def term_14 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_0 A (p_1 : hol.term (type_2 A) => term_1 A (l_2 : hol.term (type_4 A) => Data_2EBool_2E_21 (type_3 A) (x_3 : hol.term (type_0 A) => term_9 (term_11 A x_3 (term_7 A l_2 p_1)) (term_12 (term_11 A x_3 (term_6 A l_2)) (term_13 A x_3 p_1))))).

(; axiom ;)

thm_1 : A : hol.type -> hol.proof (term_14 A).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda l. (Data.Bool.! \lambda x. ((= ((Data.List.member x) ((Data.List.filter p) l))) ((Data.Bool./\ ((Data.List.member x) l)) (p x)))))) ;)

(; Constant Data.List.@ ;)

Data_2EList_2E_40 : A : hol.type -> hol.term (type_0 A).

def term_15 : A : hol.type -> hol.term (hol.arr (type_4 A) (hol.arr (type_4 A) (type_4 A))) :=
  A : hol.type => Data_2EList_2E_40 (hol.arr (type_4 A) (hol.arr (type_4 A) (type_4 A))).

def term_16 : A : hol.type -> l1_1 : hol.term (type_4 A) -> hol.term (type_4 A) :=
  A : hol.type => l1_1 : hol.term (type_4 A) => l1_1.

def term_17 : A : hol.type -> l2_1 : hol.term (type_4 A) -> hol.term (type_4 A) :=
  A : hol.type => l2_1 : hol.term (type_4 A) => l2_1.

def term_18 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_0 A (p_1 : hol.term (type_2 A) => term_1 A (l1_2 : hol.term (type_4 A) => term_1 A (l2_3 : hol.term (type_4 A) => hol.eq (type_4 A) (term_5 A p_1 (term_15 A (term_16 A l1_2) (term_17 A l2_3))) (term_15 A (term_5 A p_1 (term_16 A l1_2)) (term_5 A p_1 (term_17 A l2_3)))))).

(; axiom ;)

thm_2 : A : hol.type -> hol.proof (term_18 A).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda l1. (Data.Bool.! \lambda l2. ((= ((Data.List.filter p) ((Data.List.@ l1) l2))) ((Data.List.@ ((Data.List.filter p) l1)) ((Data.List.filter p) l2)))))) ;)

def type_9 : hol.type -> hol.type :=
  B : hol.type => B.

def type_10 : hol.type -> hol.type :=
  B : hol.type => hol.arr (type_9 B) type_1.

def type_11 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_0 A) (type_9 B).

def type_12 : hol.type -> hol.type :=
  B : hol.type => Data_2EList_2Elist (type_9 B).

def term_19 : B : hol.type -> p_1 : hol.term (type_10 B) -> hol.term (type_10 B) :=
  B : hol.type => p_1 : hol.term (type_10 B) => p_1.

(; Constant Data.List.map ;)

Data_2EList_2Emap : A : hol.type -> hol.term (type_0 A).

def term_20 : B : hol.type -> A : hol.type -> f_1 : hol.term (type_11 B A) -> hol.term (type_11 B A) :=
  B : hol.type => A : hol.type => f_1 : hol.term (type_11 B A) => f_1.

def term_21 : B : hol.type -> A : hol.type -> f_1 : hol.term (type_11 B A) -> hol.term (hol.arr (type_4 A) (type_12 B)) :=
  B : hol.type => A : hol.type => f_1 : hol.term (type_11 B A) => Data_2EList_2Emap (hol.arr (type_11 B A) (hol.arr (type_4 A) (type_12 B))) (term_20 B A f_1).

(; Constant Function.o ;)

Function_2Eo : A : hol.type -> hol.term (type_0 A).

def term_22 : A : hol.type -> B : hol.type -> hol.term type_1 :=
  A : hol.type => B : hol.type => Data_2EBool_2E_21 (hol.arr (hol.arr (type_10 B) type_1) type_1) (p_1 : hol.term (type_10 B) => Data_2EBool_2E_21 (hol.arr (hol.arr (type_11 B A) type_1) type_1) (f_2 : hol.term (type_11 B A) => term_1 A (l_3 : hol.term (type_4 A) => hol.eq (type_12 B) (Data_2EList_2Efilter (hol.arr (type_10 B) (hol.arr (type_12 B) (type_12 B))) (term_19 B p_1) (term_21 B A f_2 (term_6 A l_3))) (term_21 B A f_2 (term_3 A (Function_2Eo (hol.arr (type_10 B) (hol.arr (type_11 B A) (type_2 A))) (term_19 B p_1) (term_20 B A f_2)) (term_6 A l_3)))))).

(; axiom ;)

thm_3 : A : hol.type -> B : hol.type -> hol.proof (term_22 A B).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda f. (Data.Bool.! \lambda l. ((= ((Data.List.filter p) ((Data.List.map f) l))) ((Data.List.map f) ((Data.List.filter ((Function.o p) f)) l)))))) ;)

def type_13 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_2 A) (type_5 A).

(; Constant Data.List.all ;)

Data_2EList_2Eall : A : hol.type -> hol.term (type_0 A).

def term_23 : A : hol.type -> hol.term (type_13 A) :=
  A : hol.type => Data_2EList_2Eall (type_13 A).

def term_24 : A : hol.type -> q_1 : hol.term (type_2 A) -> hol.term (type_2 A) :=
  A : hol.type => q_1 : hol.term (type_2 A) => q_1.

def term_25 : A : hol.type -> l_1 : hol.term (type_4 A) -> q_2 : hol.term (type_2 A) -> hol.term (type_4 A) :=
  A : hol.type => l_1 : hol.term (type_4 A) => q_2 : hol.term (type_2 A) => term_3 A (term_24 A q_2) (term_6 A l_1).

(; Constant Data.Bool.==> ;)

Data_2EBool_2E_3D_3D_3E : A : hol.type -> hol.term (type_0 A).

def term_26 : A : hol.type -> x_1 : hol.term (type_0 A) -> q_2 : hol.term (type_2 A) -> hol.term type_1 :=
  A : hol.type => x_1 : hol.term (type_0 A) => q_2 : hol.term (type_2 A) => term_24 A q_2 (term_10 A x_1).

def term_27 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_0 A (p_1 : hol.term (type_2 A) => term_0 A (q_2 : hol.term (type_2 A) => term_1 A (l_3 : hol.term (type_4 A) => term_9 (term_23 A (term_4 A p_1) (term_25 A l_3 q_2)) (term_23 A (x_4 : hol.term (type_0 A) => Data_2EBool_2E_3D_3D_3E type_8 (term_26 A x_4 q_2) (term_13 A x_4 p_1)) (term_6 A l_3))))).

(; axiom ;)

thm_4 : A : hol.type -> hol.proof (term_27 A).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda l. ((= ((Data.List.all p) ((Data.List.filter q) l))) ((Data.List.all \lambda x. ((Data.Bool.==> (q x)) (p x))) l))))) ;)

(; Constant Data.List.any ;)

Data_2EList_2Eany : A : hol.type -> hol.term (type_0 A).

def term_28 : A : hol.type -> hol.term (type_13 A) :=
  A : hol.type => Data_2EList_2Eany (type_13 A).

def term_29 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_0 A (p_1 : hol.term (type_2 A) => term_0 A (q_2 : hol.term (type_2 A) => term_1 A (l_3 : hol.term (type_4 A) => term_9 (term_28 A (term_4 A p_1) (term_25 A l_3 q_2)) (term_28 A (x_4 : hol.term (type_0 A) => term_12 (term_26 A x_4 q_2) (term_13 A x_4 p_1)) (term_6 A l_3))))).

(; axiom ;)

thm_5 : A : hol.type -> hol.proof (term_29 A).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda q. (Data.Bool.! \lambda l. ((= ((Data.List.any p) ((Data.List.filter q) l))) ((Data.List.any \lambda x. ((Data.Bool./\ (q x)) (p x))) l))))) ;)

Set_2Eset : hol.type -> hol.type.

def type_14 : hol.type -> hol.type :=
  A : hol.type => Set_2Eset (type_0 A).

(; Constant Data.List.toSet ;)

Data_2EList_2EtoSet : A : hol.type -> hol.term (type_0 A).

def term_30 : A : hol.type -> hol.term (hol.arr (type_4 A) (type_14 A)) :=
  A : hol.type => Data_2EList_2EtoSet (hol.arr (type_4 A) (type_14 A)).

(; Constant Set.difference ;)

Set_2Edifference : A : hol.type -> hol.term (type_0 A).

(; Constant Set.fromPredicate ;)

Set_2EfromPredicate : A : hol.type -> hol.term (type_0 A).

(; Constant Data.Bool.? ;)

Data_2EBool_2E_3F : A : hol.type -> hol.term (type_0 A).

(; Constant Data.Bool.~ ;)

Data_2EBool_2E_7E : A : hol.type -> hol.term (type_0 A).

def term_31 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_0 A (p_1 : hol.term (type_2 A) => term_1 A (l_2 : hol.term (type_4 A) => hol.eq (type_14 A) (term_30 A (term_7 A l_2 p_1)) (Set_2Edifference (hol.arr (type_14 A) (hol.arr (type_14 A) (type_14 A))) (term_30 A (term_6 A l_2)) (Set_2EfromPredicate (hol.arr (type_2 A) (type_14 A)) (v_3 : hol.term (type_0 A) => Data_2EBool_2E_3F (type_3 A) (x_4 : hol.term (type_0 A) => term_12 (hol.eq (type_0 A) v_3 (term_10 A x_4)) (Data_2EBool_2E_7E type_7 (term_13 A x_4 p_1)))))))).

(; axiom ;)

thm_6 : A : hol.type -> hol.proof (term_31 A).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda l. ((= (Data.List.toSet ((Data.List.filter p) l))) ((Set.difference (Data.List.toSet l)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) (Data.Bool.~ (p x))))))))) ;)

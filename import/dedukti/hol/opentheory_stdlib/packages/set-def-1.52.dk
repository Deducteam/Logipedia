
(; This file was generated by Holide. ;)

#NAME set_2Ddef_2D1_2E52.

def type_0 : hol.type -> hol.type :=
  A : hol.type => A.

def type_1 : hol.type :=
  hol.bool.

def type_2 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_0 A) type_1.

(; Constant set-def-1.52 ;)

set_2Ddef_2D1_2E52 : A : hol.type -> hol.term (type_0 A).

Set_2Eset : hol.type -> hol.type.

(; Constant Set.fromPredicate ;)

Set_2EfromPredicate : A : hol.type -> hol.term (hol.arr (type_2 A) (Set_2Eset (type_0 A))).

(; Constant _ ;)

__ : A : hol.type -> hol.term (hol.arr (Set_2Eset (type_0 A)) (type_2 A)).

(; defineTypeOp ;)

thm_0 : A : hol.type -> hol.proof (hol.eq (hol.arr (type_2 A) type_1) (r_1 : hol.term (type_2 A) => hol.eq (type_2 A) (__ (type_0 A) (Set_2EfromPredicate (type_0 A) r_1)) r_1) (r_1 : hol.term (type_2 A) => hol.eq (type_2 A) (set_2Ddef_2D1_2E52 (type_2 A)) r_1)).

(; defineTypeOp ;)

thm_1 : A : hol.type -> hol.proof (hol.eq (hol.arr (Set_2Eset (type_0 A)) (Set_2Eset (type_0 A))) (a_1 : hol.term (Set_2Eset (type_0 A)) => Set_2EfromPredicate (type_0 A) (__ (type_0 A) a_1)) (a_1 : hol.term (Set_2Eset (type_0 A)) => a_1)).

def type_3 : hol.type -> hol.type :=
  A : hol.type => Set_2Eset (type_0 A).

def type_4 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_3 A) type_1.

def type_5 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_4 A) type_1.

(; Constant Data.Bool.! ;)

Data_2EBool_2E_21 : A : hol.type -> hol.term (type_0 A).

def term_0 : A : hol.type -> hol.term (type_5 A) :=
  A : hol.type => Data_2EBool_2E_21 (type_5 A).

def type_6 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_3 A) (type_4 A).

def term_1 : A : hol.type -> hol.term (type_6 A) :=
  A : hol.type => hol.eq (type_3 A).

def type_7 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_3 A) (type_3 A).

(; Constant Set.rest ;)

def Set_2Erest : A : hol.type -> hol.term (type_7 A) :=
  A : hol.type => set_2Ddef_2D1_2E52 (type_7 A).

def term_2 : A : hol.type -> s_1 : hol.term (type_3 A) -> hol.term (type_3 A) :=
  A : hol.type => s_1 : hol.term (type_3 A) => s_1.

def type_8 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_3 A) (hol.arr (type_0 A) (type_3 A)).

(; Constant Set.delete ;)

def Set_2Edelete : A : hol.type -> hol.term (type_8 A) :=
  A : hol.type => set_2Ddef_2D1_2E52 (type_8 A).

def term_3 : A : hol.type -> s_1 : hol.term (type_3 A) -> hol.term (hol.arr (type_0 A) (type_3 A)) :=
  A : hol.type => s_1 : hol.term (type_3 A) => Set_2Edelete (type_0 A) (term_2 A s_1).

def type_9 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_3 A) (type_0 A).

(; Constant Set.choice ;)

def Set_2Echoice : A : hol.type -> hol.term (type_9 A) :=
  A : hol.type => set_2Ddef_2D1_2E52 (type_9 A).

def term_4 : A : hol.type -> s_1 : hol.term (type_3 A) -> hol.term (type_0 A) :=
  A : hol.type => s_1 : hol.term (type_3 A) => Set_2Echoice (type_0 A) (term_2 A s_1).

def term_5 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_0 A (s_1 : hol.term (type_3 A) => term_1 A (Set_2Erest (type_0 A) (term_2 A s_1)) (term_3 A s_1 (term_4 A s_1))).

(; axiom ;)

thm_2 : A : hol.type -> hol.proof (term_5 A).

(; Theorem: |- (Data.Bool.! \lambda s. ((= (Set.rest s)) ((Set.delete s) (Set.choice s)))) ;)

def type_10 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_2 A) type_1.

def term_6 : A : hol.type -> hol.term (type_10 A) :=
  A : hol.type => Data_2EBool_2E_21 (type_10 A).

def type_11 : hol.type :=
  hol.arr type_1 type_1.

def type_12 : hol.type :=
  hol.arr type_1 type_11.

def term_7 : hol.term type_12 :=
  hol.eq type_1.

def type_13 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_0 A) (type_4 A).

(; Constant Set.member ;)

def Set_2Emember : A : hol.type -> hol.term (type_13 A) :=
  A : hol.type => set_2Ddef_2D1_2E52 (type_13 A).

def term_8 : A : hol.type -> hol.term (type_13 A) :=
  A : hol.type => Set_2Emember (type_0 A).

def term_9 : A : hol.type -> x_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => x_1 : hol.term (type_0 A) => x_1.

def term_10 : A : hol.type -> x_1 : hol.term (type_0 A) -> hol.term (type_4 A) :=
  A : hol.type => x_1 : hol.term (type_0 A) => term_8 A (term_9 A x_1).

def term_11 : A : hol.type -> hol.term (hol.arr (type_2 A) (type_3 A)) :=
  A : hol.type => Set_2EfromPredicate (type_0 A).

def term_12 : A : hol.type -> p_1 : hol.term (type_2 A) -> hol.term (type_2 A) :=
  A : hol.type => p_1 : hol.term (type_2 A) => p_1.

def term_13 : A : hol.type -> hol.term type_1 :=
  A : hol.type => Data_2EBool_2E_21 (hol.arr (type_10 A) type_1) (p_1 : hol.term (type_2 A) => term_6 A (x_2 : hol.term (type_0 A) => term_7 (term_10 A x_2 (term_11 A (term_12 A p_1))) (term_12 A p_1 (term_9 A x_2)))).

(; axiom ;)

thm_3 : A : hol.type -> hol.proof (term_13 A).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda x. ((= ((Set.member x) (Set.fromPredicate p))) (p x)))) ;)

def term_14 : A : hol.type -> hol.term (type_3 A) :=
  A : hol.type => set_2Ddef_2D1_2E52 (type_3 A).

(; Constant Set.{} ;)

def Set_2E_7B_7D : A : hol.type -> hol.term (type_3 A) :=
  A : hol.type => term_14 A.

def term_15 : A : hol.type -> hol.term (type_3 A) :=
  A : hol.type => Set_2E_7B_7D (type_0 A).

(; Constant Data.Bool.? ;)

Data_2EBool_2E_3F : A : hol.type -> hol.term (type_0 A).

def term_16 : A : hol.type -> hol.term (type_10 A) :=
  A : hol.type => Data_2EBool_2E_3F (type_10 A).

(; Constant Data.Bool./\ ;)

Data_2EBool_2E_2F_5C : A : hol.type -> hol.term (type_0 A).

def term_17 : hol.term type_12 :=
  Data_2EBool_2E_2F_5C type_12.

def term_18 : A : hol.type -> hol.term (hol.arr (type_0 A) (type_2 A)) :=
  A : hol.type => hol.eq (type_0 A).

def term_19 : A : hol.type -> v_1 : hol.term (type_0 A) -> hol.term (type_2 A) :=
  A : hol.type => v_1 : hol.term (type_0 A) => term_18 A v_1.

def term_20 : A : hol.type -> x_1 : hol.term (type_0 A) -> v_2 : hol.term (type_0 A) -> hol.term type_11 :=
  A : hol.type => x_1 : hol.term (type_0 A) => v_2 : hol.term (type_0 A) => term_17 (term_19 A v_2 (term_9 A x_1)).

(; Constant Data.Bool.F ;)

Data_2EBool_2EF : A : hol.type -> hol.term (type_0 A).

def term_21 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_1 A (term_15 A) (term_11 A (v_1 : hol.term (type_0 A) => term_16 A (x_2 : hol.term (type_0 A) => term_20 A x_2 v_1 (Data_2EBool_2EF type_1)))).

(; axiom ;)

thm_4 : A : hol.type -> hol.proof (term_21 A).

(; Theorem: |- ((= Set.{}) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) Data.Bool.F)))) ;)

(; Constant Set.universe ;)

def Set_2Euniverse : A : hol.type -> hol.term (type_3 A) :=
  A : hol.type => term_14 A.

(; Constant Data.Bool.T ;)

Data_2EBool_2ET : A : hol.type -> hol.term (type_0 A).

def term_22 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_1 A (Set_2Euniverse (type_0 A)) (term_11 A (v_1 : hol.term (type_0 A) => term_16 A (x_2 : hol.term (type_0 A) => term_20 A x_2 v_1 (Data_2EBool_2ET type_1)))).

(; axiom ;)

thm_5 : A : hol.type -> hol.proof (term_22 A).

(; Theorem: |- ((= Set.universe) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) Data.Bool.T)))) ;)

(; Constant Data.Bool.==> ;)

Data_2EBool_2E_3D_3D_3E : A : hol.type -> hol.term (type_0 A).

def term_23 : hol.term type_12 :=
  Data_2EBool_2E_3D_3D_3E type_12.

(; Constant Data.Bool.~ ;)

Data_2EBool_2E_7E : A : hol.type -> hol.term (type_0 A).

def term_24 : hol.term type_11 :=
  Data_2EBool_2E_7E type_11.

def term_25 : A : hol.type -> s_1 : hol.term (type_3 A) -> hol.term (type_4 A) :=
  A : hol.type => s_1 : hol.term (type_3 A) => term_1 A (term_2 A s_1).

def term_26 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_0 A (s_1 : hol.term (type_3 A) => term_23 (term_24 (term_25 A s_1 (term_15 A))) (term_8 A (term_4 A s_1) (term_2 A s_1))).

(; axiom ;)

thm_6 : A : hol.type -> hol.proof (term_26 A).

(; Theorem: |- (Data.Bool.! \lambda s. ((Data.Bool.==> (Data.Bool.~ ((= s) Set.{}))) ((Set.member (Set.choice s)) s))) ;)

(; Constant Set.singleton ;)

def Set_2Esingleton : A : hol.type -> hol.term (type_4 A) :=
  A : hol.type => set_2Ddef_2D1_2E52 (type_4 A).

def type_14 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_0 A) (type_7 A).

(; Constant Set.insert ;)

def Set_2Einsert : A : hol.type -> hol.term (type_14 A) :=
  A : hol.type => set_2Ddef_2D1_2E52 (type_14 A).

def term_27 : A : hol.type -> x_1 : hol.term (type_0 A) -> hol.term (type_7 A) :=
  A : hol.type => x_1 : hol.term (type_0 A) => Set_2Einsert (type_0 A) (term_9 A x_1).

def term_28 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_0 A (s_1 : hol.term (type_3 A) => term_7 (Set_2Esingleton (type_0 A) (term_2 A s_1)) (term_16 A (x_2 : hol.term (type_0 A) => term_25 A s_1 (term_27 A x_2 (term_15 A))))).

(; axiom ;)

thm_7 : A : hol.type -> hol.proof (term_28 A).

(; Theorem: |- (Data.Bool.! \lambda s. ((= (Set.singleton s)) (Data.Bool.? \lambda x. ((= s) ((Set.insert x) Set.{}))))) ;)

def term_29 : A : hol.type -> hol.term (type_6 A) :=
  A : hol.type => set_2Ddef_2D1_2E52 (type_6 A).

(; Constant Set.disjoint ;)

def Set_2Edisjoint : A : hol.type -> hol.term (type_6 A) :=
  A : hol.type => term_29 A.

def term_30 : A : hol.type -> t_1 : hol.term (type_3 A) -> hol.term (type_3 A) :=
  A : hol.type => t_1 : hol.term (type_3 A) => t_1.

def type_15 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_3 A) (type_7 A).

def term_31 : A : hol.type -> hol.term (type_15 A) :=
  A : hol.type => set_2Ddef_2D1_2E52 (type_15 A).

(; Constant Set.intersect ;)

def Set_2Eintersect : A : hol.type -> hol.term (type_15 A) :=
  A : hol.type => term_31 A.

def term_32 : A : hol.type -> t_1 : hol.term (type_3 A) -> s_2 : hol.term (type_3 A) -> hol.term (type_4 A) :=
  A : hol.type => t_1 : hol.term (type_3 A) => s_2 : hol.term (type_3 A) => term_1 A (Set_2Eintersect (type_0 A) (term_2 A s_2) (term_30 A t_1)).

def term_33 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_0 A (s_1 : hol.term (type_3 A) => term_0 A (t_2 : hol.term (type_3 A) => term_7 (Set_2Edisjoint (type_0 A) (term_2 A s_1) (term_30 A t_2)) (term_32 A t_2 s_1 (term_15 A)))).

(; axiom ;)

thm_8 : A : hol.type -> hol.proof (term_33 A).

(; Theorem: |- (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((= ((Set.disjoint s) t)) ((= ((Set.intersect s) t)) Set.{})))) ;)

def type_16 : hol.type -> hol.type :=
  B : hol.type => B.

def type_17 : hol.type -> hol.type :=
  B : hol.type => Set_2Eset (type_16 B).

def type_18 : hol.type -> hol.type :=
  B : hol.type => hol.arr (type_17 B) type_1.

def term_34 : B : hol.type -> hol.term (hol.arr (type_18 B) type_1) :=
  B : hol.type => Data_2EBool_2E_21 (hol.arr (type_18 B) type_1).

def type_19 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_0 A) (type_16 B).

def type_20 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => Set_2Eset (type_19 B A).

def term_35 : B : hol.type -> A : hol.type -> hol.term (hol.arr (type_20 B A) (hol.arr (type_20 B A) type_1)) :=
  B : hol.type => A : hol.type => hol.eq (type_20 B A).

def type_21 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_3 A) (hol.arr (type_17 B) (type_20 B A)).

def term_36 : B : hol.type -> A : hol.type -> hol.term (type_21 B A) :=
  B : hol.type => A : hol.type => set_2Ddef_2D1_2E52 (type_21 B A).

(; Constant Set.bijections ;)

def Set_2Ebijections : B : hol.type -> A : hol.type -> hol.term (type_21 B A) :=
  B : hol.type => A : hol.type => term_36 B A.

def term_37 : B : hol.type -> t_1 : hol.term (type_17 B) -> hol.term (type_17 B) :=
  B : hol.type => t_1 : hol.term (type_17 B) => t_1.

(; Constant Set.injections ;)

def Set_2Einjections : B : hol.type -> A : hol.type -> hol.term (type_21 B A) :=
  B : hol.type => A : hol.type => term_36 B A.

def term_38 : B : hol.type -> A : hol.type -> t_1 : hol.term (type_17 B) -> s_2 : hol.term (type_3 A) -> hol.term (type_20 B A) :=
  B : hol.type => A : hol.type => t_1 : hol.term (type_17 B) => s_2 : hol.term (type_3 A) => Set_2Einjections (type_16 B) (type_0 A) (term_2 A s_2) (term_37 B t_1).

(; Constant Set.surjections ;)

def Set_2Esurjections : B : hol.type -> A : hol.type -> hol.term (type_21 B A) :=
  B : hol.type => A : hol.type => term_36 B A.

def term_39 : B : hol.type -> A : hol.type -> t_1 : hol.term (type_17 B) -> s_2 : hol.term (type_3 A) -> hol.term (type_20 B A) :=
  B : hol.type => A : hol.type => t_1 : hol.term (type_17 B) => s_2 : hol.term (type_3 A) => Set_2Esurjections (type_16 B) (type_0 A) (term_2 A s_2) (term_37 B t_1).

def term_40 : B : hol.type -> A : hol.type -> hol.term type_1 :=
  B : hol.type => A : hol.type => term_0 A (s_1 : hol.term (type_3 A) => term_34 B (t_2 : hol.term (type_17 B) => term_35 B A (Set_2Ebijections (type_16 B) (type_0 A) (term_2 A s_1) (term_37 B t_2)) (Set_2Eintersect (type_19 B A) (term_38 B A t_2 s_1) (term_39 B A t_2 s_1)))).

(; axiom ;)

thm_9 : B : hol.type -> A : hol.type -> hol.proof (term_40 B A).

(; Theorem: |- (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((= ((Set.bijections s) t)) ((Set.intersect ((Set.injections s) t)) ((Set.surjections s) t))))) ;)

(; Constant Set.properSubset ;)

def Set_2EproperSubset : A : hol.type -> hol.term (type_6 A) :=
  A : hol.type => term_29 A.

(; Constant Set.subset ;)

def Set_2Esubset : A : hol.type -> hol.term (type_6 A) :=
  A : hol.type => term_29 A.

def term_41 : A : hol.type -> t_1 : hol.term (type_3 A) -> s_2 : hol.term (type_3 A) -> hol.term type_1 :=
  A : hol.type => t_1 : hol.term (type_3 A) => s_2 : hol.term (type_3 A) => Set_2Esubset (type_0 A) (term_2 A s_2) (term_30 A t_1).

def term_42 : A : hol.type -> t_1 : hol.term (type_3 A) -> s_2 : hol.term (type_3 A) -> hol.term type_1 :=
  A : hol.type => t_1 : hol.term (type_3 A) => s_2 : hol.term (type_3 A) => term_25 A s_2 (term_30 A t_1).

def term_43 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_0 A (s_1 : hol.term (type_3 A) => term_0 A (t_2 : hol.term (type_3 A) => term_7 (Set_2EproperSubset (type_0 A) (term_2 A s_1) (term_30 A t_2)) (term_17 (term_41 A t_2 s_1) (term_24 (term_42 A t_2 s_1))))).

(; axiom ;)

thm_10 : A : hol.type -> hol.proof (term_43 A).

(; Theorem: |- (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((= ((Set.properSubset s) t)) ((Data.Bool./\ ((Set.subset s) t)) (Data.Bool.~ ((= s) t)))))) ;)

def term_44 : A : hol.type -> s_1 : hol.term (type_3 A) -> x_2 : hol.term (type_0 A) -> hol.term type_1 :=
  A : hol.type => s_1 : hol.term (type_3 A) => x_2 : hol.term (type_0 A) => term_10 A x_2 (term_2 A s_1).

def term_45 : A : hol.type -> s_1 : hol.term (type_3 A) -> x_2 : hol.term (type_0 A) -> hol.term type_11 :=
  A : hol.type => s_1 : hol.term (type_3 A) => x_2 : hol.term (type_0 A) => term_23 (term_44 A s_1 x_2).

def term_46 : A : hol.type -> t_1 : hol.term (type_3 A) -> x_2 : hol.term (type_0 A) -> hol.term type_1 :=
  A : hol.type => t_1 : hol.term (type_3 A) => x_2 : hol.term (type_0 A) => term_10 A x_2 (term_30 A t_1).

def term_47 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_0 A (s_1 : hol.term (type_3 A) => term_0 A (t_2 : hol.term (type_3 A) => term_7 (term_41 A t_2 s_1) (term_6 A (x_3 : hol.term (type_0 A) => term_45 A s_1 x_3 (term_46 A t_2 x_3))))).

(; axiom ;)

thm_11 : A : hol.type -> hol.proof (term_47 A).

(; Theorem: |- (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((= ((Set.subset s) t)) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) s)) ((Set.member x) t)))))) ;)

def term_48 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_0 A (s_1 : hol.term (type_3 A) => term_0 A (t_2 : hol.term (type_3 A) => term_23 (term_6 A (x_3 : hol.term (type_0 A) => term_7 (term_44 A s_1 x_3) (term_46 A t_2 x_3))) (term_42 A t_2 s_1))).

(; axiom ;)

thm_12 : A : hol.type -> hol.proof (term_48 A).

(; Theorem: |- (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((Data.Bool.==> (Data.Bool.! \lambda x. ((= ((Set.member x) s)) ((Set.member x) t)))) ((= s) t)))) ;)

def type_22 : hol.type -> hol.type :=
  A : hol.type => Set_2Eset (type_3 A).

def type_23 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_22 A) type_1.

def term_49 : A : hol.type -> hol.term (hol.arr (type_23 A) type_1) :=
  A : hol.type => Data_2EBool_2E_21 (hol.arr (type_23 A) type_1).

def type_24 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_22 A) (type_3 A).

def term_50 : A : hol.type -> hol.term (type_24 A) :=
  A : hol.type => set_2Ddef_2D1_2E52 (type_24 A).

(; Constant Set.bigIntersect ;)

def Set_2EbigIntersect : A : hol.type -> hol.term (type_24 A) :=
  A : hol.type => term_50 A.

def term_51 : A : hol.type -> s_1 : hol.term (type_22 A) -> hol.term (type_22 A) :=
  A : hol.type => s_1 : hol.term (type_22 A) => s_1.

def term_52 : A : hol.type -> u_1 : hol.term (type_3 A) -> hol.term (type_3 A) :=
  A : hol.type => u_1 : hol.term (type_3 A) => u_1.

def term_53 : A : hol.type -> s_1 : hol.term (type_22 A) -> u_2 : hol.term (type_3 A) -> hol.term type_1 :=
  A : hol.type => s_1 : hol.term (type_22 A) => u_2 : hol.term (type_3 A) => Set_2Emember (type_3 A) (term_52 A u_2) (term_51 A s_1).

def term_54 : A : hol.type -> u_1 : hol.term (type_3 A) -> x_2 : hol.term (type_0 A) -> hol.term type_1 :=
  A : hol.type => u_1 : hol.term (type_3 A) => x_2 : hol.term (type_0 A) => term_10 A x_2 (term_52 A u_1).

def term_55 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_49 A (s_1 : hol.term (type_22 A) => term_1 A (Set_2EbigIntersect (type_0 A) (term_51 A s_1)) (term_11 A (v_2 : hol.term (type_0 A) => term_16 A (x_3 : hol.term (type_0 A) => term_20 A x_3 v_2 (term_0 A (u_4 : hol.term (type_3 A) => term_23 (term_53 A s_1 u_4) (term_54 A u_4 x_3))))))).

(; axiom ;)

thm_13 : A : hol.type -> hol.proof (term_55 A).

(; Theorem: |- (Data.Bool.! \lambda s. ((= (Set.bigIntersect s)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) (Data.Bool.! \lambda u. ((Data.Bool.==> ((Set.member u) s)) ((Set.member x) u)))))))) ;)

(; Constant Set.bigUnion ;)

def Set_2EbigUnion : A : hol.type -> hol.term (type_24 A) :=
  A : hol.type => term_50 A.

def term_56 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_49 A (s_1 : hol.term (type_22 A) => term_1 A (Set_2EbigUnion (type_0 A) (term_51 A s_1)) (term_11 A (v_2 : hol.term (type_0 A) => term_16 A (x_3 : hol.term (type_0 A) => term_20 A x_3 v_2 (Data_2EBool_2E_3F (type_5 A) (u_4 : hol.term (type_3 A) => term_17 (term_53 A s_1 u_4) (term_54 A u_4 x_3))))))).

(; axiom ;)

thm_14 : A : hol.type -> hol.proof (term_56 A).

(; Theorem: |- (Data.Bool.! \lambda s. ((= (Set.bigUnion s)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) (Data.Bool.? \lambda u. ((Data.Bool./\ ((Set.member u) s)) ((Set.member x) u)))))))) ;)

def term_57 : A : hol.type -> y_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => y_1 : hol.term (type_0 A) => y_1.

def term_58 : A : hol.type -> y_1 : hol.term (type_0 A) -> v_2 : hol.term (type_0 A) -> hol.term type_11 :=
  A : hol.type => y_1 : hol.term (type_0 A) => v_2 : hol.term (type_0 A) => term_17 (term_19 A v_2 (term_57 A y_1)).

(; Constant Data.Bool.\/ ;)

Data_2EBool_2E_5C_2F : A : hol.type -> hol.term (type_0 A).

def term_59 : hol.term type_12 :=
  Data_2EBool_2E_5C_2F type_12.

def term_60 : A : hol.type -> x_1 : hol.term (type_0 A) -> y_2 : hol.term (type_0 A) -> hol.term type_1 :=
  A : hol.type => x_1 : hol.term (type_0 A) => y_2 : hol.term (type_0 A) => term_18 A (term_57 A y_2) (term_9 A x_1).

def term_61 : A : hol.type -> s_1 : hol.term (type_3 A) -> y_2 : hol.term (type_0 A) -> hol.term type_1 :=
  A : hol.type => s_1 : hol.term (type_3 A) => y_2 : hol.term (type_0 A) => term_8 A (term_57 A y_2) (term_2 A s_1).

def term_62 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_6 A (x_1 : hol.term (type_0 A) => term_0 A (s_2 : hol.term (type_3 A) => term_1 A (term_27 A x_1 (term_2 A s_2)) (term_11 A (v_3 : hol.term (type_0 A) => term_16 A (y_4 : hol.term (type_0 A) => term_58 A y_4 v_3 (term_59 (term_60 A x_1 y_4) (term_61 A s_2 y_4))))))).

(; axiom ;)

thm_15 : A : hol.type -> hol.proof (term_62 A).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda s. ((= ((Set.insert x) s)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) ((Data.Bool.\/ ((= y) x)) ((Set.member y) s)))))))) ;)

def term_63 : A : hol.type -> s_1 : hol.term (type_3 A) -> x_2 : hol.term (type_0 A) -> hol.term type_11 :=
  A : hol.type => s_1 : hol.term (type_3 A) => x_2 : hol.term (type_0 A) => term_17 (term_44 A s_1 x_2).

def term_64 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_0 A (s_1 : hol.term (type_3 A) => term_0 A (t_2 : hol.term (type_3 A) => term_32 A t_2 s_1 (term_11 A (v_3 : hol.term (type_0 A) => term_16 A (x_4 : hol.term (type_0 A) => term_20 A x_4 v_3 (term_63 A s_1 x_4 (term_46 A t_2 x_4))))))).

(; axiom ;)

thm_16 : A : hol.type -> hol.proof (term_64 A).

(; Theorem: |- (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((= ((Set.intersect s) t)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool./\ ((Set.member x) s)) ((Set.member x) t)))))))) ;)

(; Constant Set.union ;)

def Set_2Eunion : A : hol.type -> hol.term (type_15 A) :=
  A : hol.type => term_31 A.

def term_65 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_0 A (s_1 : hol.term (type_3 A) => term_0 A (t_2 : hol.term (type_3 A) => term_1 A (Set_2Eunion (type_0 A) (term_2 A s_1) (term_30 A t_2)) (term_11 A (v_3 : hol.term (type_0 A) => term_16 A (x_4 : hol.term (type_0 A) => term_20 A x_4 v_3 (term_59 (term_44 A s_1 x_4) (term_46 A t_2 x_4))))))).

(; axiom ;)

thm_17 : A : hol.type -> hol.proof (term_65 A).

(; Theorem: |- (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((= ((Set.union s) t)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool.\/ ((Set.member x) s)) ((Set.member x) t)))))))) ;)

def term_66 : A : hol.type -> s_1 : hol.term (type_3 A) -> y_2 : hol.term (type_0 A) -> hol.term type_11 :=
  A : hol.type => s_1 : hol.term (type_3 A) => y_2 : hol.term (type_0 A) => term_17 (term_61 A s_1 y_2).

def term_67 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_0 A (s_1 : hol.term (type_3 A) => term_6 A (x_2 : hol.term (type_0 A) => term_1 A (term_3 A s_1 (term_9 A x_2)) (term_11 A (v_3 : hol.term (type_0 A) => term_16 A (y_4 : hol.term (type_0 A) => term_58 A y_4 v_3 (term_66 A s_1 y_4 (term_24 (term_60 A x_2 y_4)))))))).

(; axiom ;)

thm_18 : A : hol.type -> hol.proof (term_67 A).

(; Theorem: |- (Data.Bool.! \lambda s. (Data.Bool.! \lambda x. ((= ((Set.delete s) x)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) ((Data.Bool./\ ((Set.member y) s)) (Data.Bool.~ ((= y) x))))))))) ;)

(; Constant Set.difference ;)

def Set_2Edifference : A : hol.type -> hol.term (type_15 A) :=
  A : hol.type => term_31 A.

def term_68 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_0 A (s_1 : hol.term (type_3 A) => term_0 A (t_2 : hol.term (type_3 A) => term_1 A (Set_2Edifference (type_0 A) (term_2 A s_1) (term_30 A t_2)) (term_11 A (v_3 : hol.term (type_0 A) => term_16 A (x_4 : hol.term (type_0 A) => term_20 A x_4 v_3 (term_63 A s_1 x_4 (term_24 (term_46 A t_2 x_4)))))))).

(; axiom ;)

thm_19 : A : hol.type -> hol.proof (term_68 A).

(; Theorem: |- (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((= ((Set.difference s) t)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. ((Data.Bool./\ ((= v) x)) ((Data.Bool./\ ((Set.member x) s)) (Data.Bool.~ ((Set.member x) t))))))))) ;)

def type_25 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_19 B A) type_1.

def type_26 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_25 B A) type_1.

def type_27 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_19 B A) (hol.arr (type_3 A) (type_17 B)).

(; Constant Set.image ;)

def Set_2Eimage : B : hol.type -> A : hol.type -> hol.term (type_27 B A) :=
  B : hol.type => A : hol.type => set_2Ddef_2D1_2E52 (type_27 B A).

def term_69 : B : hol.type -> A : hol.type -> f_1 : hol.term (type_19 B A) -> hol.term (type_19 B A) :=
  B : hol.type => A : hol.type => f_1 : hol.term (type_19 B A) => f_1.

def type_28 : hol.type -> hol.type :=
  B : hol.type => hol.arr (type_16 B) type_1.

def type_29 : hol.type -> hol.type :=
  B : hol.type => hol.arr (type_28 B) type_1.

def term_70 : B : hol.type -> hol.term (type_29 B) :=
  B : hol.type => Data_2EBool_2E_3F (type_29 B).

def term_71 : B : hol.type -> hol.term (hol.arr (type_16 B) (type_28 B)) :=
  B : hol.type => hol.eq (type_16 B).

def term_72 : B : hol.type -> y_1 : hol.term (type_16 B) -> hol.term (type_16 B) :=
  B : hol.type => y_1 : hol.term (type_16 B) => y_1.

def term_73 : B : hol.type -> A : hol.type -> x_1 : hol.term (type_0 A) -> f_2 : hol.term (type_19 B A) -> hol.term (type_16 B) :=
  B : hol.type => A : hol.type => x_1 : hol.term (type_0 A) => f_2 : hol.term (type_19 B A) => term_69 B A f_2 (term_9 A x_1).

def term_74 : B : hol.type -> A : hol.type -> hol.term type_1 :=
  B : hol.type => A : hol.type => Data_2EBool_2E_21 (type_26 B A) (f_1 : hol.term (type_19 B A) => term_0 A (s_2 : hol.term (type_3 A) => hol.eq (type_17 B) (Set_2Eimage (type_16 B) (type_0 A) (term_69 B A f_1) (term_2 A s_2)) (Set_2EfromPredicate (type_16 B) (v_3 : hol.term (type_16 B) => term_70 B (y_4 : hol.term (type_16 B) => term_17 (term_71 B v_3 (term_72 B y_4)) (term_16 A (x_5 : hol.term (type_0 A) => term_63 A s_2 x_5 (term_71 B (term_72 B y_4) (term_73 B A x_5 f_1))))))))).

(; axiom ;)

thm_20 : B : hol.type -> A : hol.type -> hol.proof (term_74 B A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda s. ((= ((Set.image f) s)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) y)) (Data.Bool.? \lambda x. ((Data.Bool./\ ((Set.member x) s)) ((= y) (f x)))))))))) ;)

Data_2EPair_2E_2A : hol.type -> hol.type -> hol.type.

def type_30 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => Data_2EPair_2E_2A (type_0 A) (type_16 B).

def type_31 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => Set_2Eset (type_30 B A).

def type_32 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_3 A) (hol.arr (type_17 B) (type_31 B A)).

(; Constant Set.cross ;)

def Set_2Ecross : B : hol.type -> A : hol.type -> hol.term (type_32 B A) :=
  B : hol.type => A : hol.type => set_2Ddef_2D1_2E52 (type_32 B A).

def type_33 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_30 B A) type_1.

(; Constant Data.Pair., ;)

Data_2EPair_2E_2C : A : hol.type -> hol.term (type_0 A).

def term_75 : B : hol.type -> hol.term (hol.arr (type_16 B) (type_18 B)) :=
  B : hol.type => Set_2Emember (type_16 B).

def term_76 : B : hol.type -> A : hol.type -> hol.term type_1 :=
  B : hol.type => A : hol.type => term_0 A (s_1 : hol.term (type_3 A) => term_34 B (t_2 : hol.term (type_17 B) => hol.eq (type_31 B A) (Set_2Ecross (type_16 B) (type_0 A) (term_2 A s_1) (term_37 B t_2)) (Set_2EfromPredicate (type_30 B A) (v_3 : hol.term (type_30 B A) => term_16 A (x_4 : hol.term (type_0 A) => term_70 B (y_5 : hol.term (type_16 B) => term_17 (hol.eq (type_30 B A) v_3 (Data_2EPair_2E_2C (hol.arr (type_0 A) (hol.arr (type_16 B) (type_30 B A))) (term_9 A x_4) (term_72 B y_5))) (term_63 A s_1 x_4 (term_75 B (term_72 B y_5) (term_37 B t_2))))))))).

(; axiom ;)

thm_21 : B : hol.type -> A : hol.type -> hol.proof (term_76 B A).

(; Theorem: |- (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((= ((Set.cross s) t)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda x. (Data.Bool.? \lambda y. ((Data.Bool./\ ((= v) ((Data.Pair., x) y))) ((Data.Bool./\ ((Set.member x) s)) ((Set.member y) t))))))))) ;)

def term_77 : B : hol.type -> A : hol.type -> hol.term (hol.arr (type_25 B A) (type_20 B A)) :=
  B : hol.type => A : hol.type => Set_2EfromPredicate (type_19 B A).

def term_78 : B : hol.type -> A : hol.type -> hol.term (type_26 B A) :=
  B : hol.type => A : hol.type => Data_2EBool_2E_3F (type_26 B A).

def term_79 : B : hol.type -> A : hol.type -> f_1 : hol.term (type_19 B A) -> v_2 : hol.term (type_19 B A) -> hol.term type_11 :=
  B : hol.type => A : hol.type => f_1 : hol.term (type_19 B A) => v_2 : hol.term (type_19 B A) => term_17 (hol.eq (type_19 B A) v_2 (term_69 B A f_1)).

def term_80 : B : hol.type -> A : hol.type -> t_1 : hol.term (type_17 B) -> f_2 : hol.term (type_19 B A) -> s_3 : hol.term (type_3 A) -> hol.term type_11 :=
  B : hol.type => A : hol.type => t_1 : hol.term (type_17 B) => f_2 : hol.term (type_19 B A) => s_3 : hol.term (type_3 A) => term_17 (term_6 A (x_4 : hol.term (type_0 A) => term_45 A s_3 x_4 (term_75 B (term_73 B A x_4 f_2) (term_37 B t_1)))).

def term_81 : B : hol.type -> x_1 : hol.term (type_16 B) -> hol.term (type_16 B) :=
  B : hol.type => x_1 : hol.term (type_16 B) => x_1.

def term_82 : B : hol.type -> A : hol.type -> y_1 : hol.term (type_0 A) -> f_2 : hol.term (type_19 B A) -> hol.term (type_16 B) :=
  B : hol.type => A : hol.type => y_1 : hol.term (type_0 A) => f_2 : hol.term (type_19 B A) => term_69 B A f_2 (term_57 A y_1).

def term_83 : B : hol.type -> A : hol.type -> hol.term type_1 :=
  B : hol.type => A : hol.type => term_0 A (s_1 : hol.term (type_3 A) => term_34 B (t_2 : hol.term (type_17 B) => term_35 B A (term_39 B A t_2 s_1) (term_77 B A (v_3 : hol.term (type_19 B A) => term_78 B A (f_4 : hol.term (type_19 B A) => term_79 B A f_4 v_3 (term_80 B A t_2 f_4 s_1 (Data_2EBool_2E_21 (type_29 B) (x_5 : hol.term (type_16 B) => term_23 (term_75 B (term_81 B x_5) (term_37 B t_2)) (term_16 A (y_6 : hol.term (type_0 A) => term_66 A s_1 y_6 (term_71 B (term_82 B A y_6 f_4) (term_81 B x_5)))))))))))).

(; axiom ;)

thm_22 : B : hol.type -> A : hol.type -> hol.proof (term_83 B A).

(; Theorem: |- (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((= ((Set.surjections s) t)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= v) f)) ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) s)) ((Set.member (f x)) t)))) (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) t)) (Data.Bool.? \lambda y. ((Data.Bool./\ ((Set.member y) s)) ((= (f y)) x)))))))))))) ;)

def term_84 : B : hol.type -> A : hol.type -> hol.term type_1 :=
  B : hol.type => A : hol.type => term_0 A (s_1 : hol.term (type_3 A) => term_34 B (t_2 : hol.term (type_17 B) => term_35 B A (term_38 B A t_2 s_1) (term_77 B A (v_3 : hol.term (type_19 B A) => term_78 B A (f_4 : hol.term (type_19 B A) => term_79 B A f_4 v_3 (term_80 B A t_2 f_4 s_1 (term_6 A (x_5 : hol.term (type_0 A) => term_6 A (y_6 : hol.term (type_0 A) => term_23 (term_63 A s_1 x_5 (term_66 A s_1 y_6 (term_71 B (term_73 B A x_5 f_4) (term_82 B A y_6 f_4)))) (term_18 A (term_9 A x_5) (term_57 A y_6))))))))))).

(; axiom ;)

thm_23 : B : hol.type -> A : hol.type -> hol.proof (term_84 B A).

(; Theorem: |- (Data.Bool.! \lambda s. (Data.Bool.! \lambda t. ((= ((Set.injections s) t)) (Set.fromPredicate \lambda v. (Data.Bool.? \lambda f. ((Data.Bool./\ ((= v) f)) ((Data.Bool./\ (Data.Bool.! \lambda x. ((Data.Bool.==> ((Set.member x) s)) ((Set.member (f x)) t)))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ ((Set.member x) s)) ((Data.Bool./\ ((Set.member y) s)) ((= (f x)) (f y))))) ((= x) y))))))))))) ;)

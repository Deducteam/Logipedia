
(; This file was generated by Holide. ;)

#NAME list_2Dinterval_2Dthm_2D1_2E60.

Number_2ENatural_2Enatural : hol.type.

def type_0 : hol.type :=
  Number_2ENatural_2Enatural.

def type_1 : hol.type :=
  hol.bool.

def type_2 : hol.type :=
  hol.arr type_0 type_1.

(; Constant Data.Bool.! ;)

Data_2EBool_2E_21 : A : hol.type -> hol.term A.

def term_0 : hol.term (hol.arr type_2 type_1) :=
  Data_2EBool_2E_21 (hol.arr type_2 type_1).

def type_3 : hol.type :=
  hol.arr type_0 type_2.

def term_1 : hol.term type_3 :=
  hol.eq type_0.

Data_2EList_2Elist : hol.type -> hol.type.

def type_4 : hol.type :=
  Data_2EList_2Elist type_0.

(; Constant Data.List.length ;)

Data_2EList_2Elength : A : hol.type -> hol.term A.

(; Constant Data.List.interval ;)

Data_2EList_2Einterval : A : hol.type -> hol.term A.

def term_2 : hol.term (hol.arr type_0 (hol.arr type_0 type_4)) :=
  Data_2EList_2Einterval (hol.arr type_0 (hol.arr type_0 type_4)).

def term_3 : m_1 : hol.term type_0 -> hol.term type_0 :=
  m_1 : hol.term type_0 => m_1.

def term_4 : n_1 : hol.term type_0 -> hol.term type_0 :=
  n_1 : hol.term type_0 => n_1.

def term_5 : n_1 : hol.term type_0 -> m_2 : hol.term type_0 -> hol.term type_4 :=
  n_1 : hol.term type_0 => m_2 : hol.term type_0 => term_2 (term_3 m_2) (term_4 n_1).

def term_6 : hol.term type_1 :=
  term_0 (m_1 : hol.term type_0 => term_0 (n_2 : hol.term type_0 => term_1 (Data_2EList_2Elength (hol.arr type_4 type_0) (term_5 n_2 m_1)) (term_4 n_2))).

(; axiom ;)

thm_0 : hol.proof term_6.

(; Theorem: |- (Data.Bool.! \lambda m. (Data.Bool.! \lambda n. ((= (Data.List.length ((Data.List.interval m) n))) n))) ;)

def type_5 : hol.type :=
  hol.arr type_0 type_0.

(; Constant Data.List.map ;)

Data_2EList_2Emap : A : hol.type -> hol.term A.

(; Constant Number.Natural.suc ;)

Number_2ENatural_2Esuc : A : hol.type -> hol.term A.

def term_7 : hol.term type_5 :=
  Number_2ENatural_2Esuc type_5.

def term_8 : hol.term type_1 :=
  term_0 (m_1 : hol.term type_0 => term_0 (n_2 : hol.term type_0 => hol.eq type_4 (Data_2EList_2Emap (hol.arr type_5 (hol.arr type_4 type_4)) term_7 (term_5 n_2 m_1)) (term_2 (term_7 (term_3 m_1)) (term_4 n_2)))).

(; axiom ;)

thm_1 : hol.proof term_8.

(; Theorem: |- (Data.Bool.! \lambda m. (Data.Bool.! \lambda n. ((= ((Data.List.map Number.Natural.suc) ((Data.List.interval m) n))) ((Data.List.interval (Number.Natural.suc m)) n)))) ;)

(; Constant Data.Bool.==> ;)

Data_2EBool_2E_3D_3D_3E : A : hol.type -> hol.term A.

(; Constant Number.Natural.< ;)

Number_2ENatural_2E_3C : A : hol.type -> hol.term A.

def term_9 : i_1 : hol.term type_0 -> hol.term type_0 :=
  i_1 : hol.term type_0 => i_1.

(; Constant Data.List.nth ;)

Data_2EList_2Enth : A : hol.type -> hol.term A.

(; Constant Number.Natural.+ ;)

Number_2ENatural_2E_2B : A : hol.type -> hol.term A.

def term_10 : hol.term type_1 :=
  term_0 (m_1 : hol.term type_0 => term_0 (n_2 : hol.term type_0 => term_0 (i_3 : hol.term type_0 => Data_2EBool_2E_3D_3D_3E (hol.arr type_1 (hol.arr type_1 type_1)) (Number_2ENatural_2E_3C type_3 (term_9 i_3) (term_4 n_2)) (term_1 (Data_2EList_2Enth (hol.arr type_4 type_5) (term_5 n_2 m_1) (term_9 i_3)) (Number_2ENatural_2E_2B (hol.arr type_0 type_5) (term_3 m_1) (term_9 i_3)))))).

(; axiom ;)

thm_2 : hol.proof term_10.

(; Theorem: |- (Data.Bool.! \lambda m. (Data.Bool.! \lambda n. (Data.Bool.! \lambda i. ((Data.Bool.==> ((Number.Natural.< i) n)) ((= ((Data.List.nth ((Data.List.interval m) n)) i)) ((Number.Natural.+ m) i)))))) ;)

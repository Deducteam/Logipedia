
(; This file was generated by Holide. ;)

#NAME list_2Dthm_2D1_2E55.

def type_0 : hol.type -> hol.type :=
  A : hol.type => A.

def type_1 : hol.type :=
  hol.bool.

def type_2 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_0 A) type_1.

def type_3 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_2 A) type_1.

(; Constant Data.Bool.! ;)

Data_2EBool_2E_21 : A : hol.type -> hol.term (type_0 A).

def term_0 : A : hol.type -> hol.term (type_3 A) :=
  A : hol.type => Data_2EBool_2E_21 (type_3 A).

Data_2EList_2Elist : hol.type -> hol.type.

def type_4 : hol.type -> hol.type :=
  A : hol.type => Data_2EList_2Elist (type_0 A).

def type_5 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_4 A) type_1.

def type_6 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_5 A) type_1.

def term_1 : A : hol.type -> hol.term (type_6 A) :=
  A : hol.type => Data_2EBool_2E_21 (type_6 A).

def type_7 : hol.type :=
  hol.arr type_1 type_1.

(; Constant Data.Bool.~ ;)

Data_2EBool_2E_7E : A : hol.type -> hol.term (type_0 A).

def term_2 : A : hol.type -> hol.term (hol.arr (type_4 A) (type_5 A)) :=
  A : hol.type => hol.eq (type_4 A).

(; Constant Data.List.:: ;)

Data_2EList_2E_3A_3A : A : hol.type -> hol.term (type_0 A).

def term_3 : A : hol.type -> hol.term (hol.arr (type_0 A) (hol.arr (type_4 A) (type_4 A))) :=
  A : hol.type => Data_2EList_2E_3A_3A (hol.arr (type_0 A) (hol.arr (type_4 A) (type_4 A))).

def term_4 : A : hol.type -> t_1 : hol.term (type_4 A) -> h_2 : hol.term (type_0 A) -> hol.term (type_4 A) :=
  A : hol.type => t_1 : hol.term (type_4 A) => h_2 : hol.term (type_0 A) => term_3 A h_2 t_1.

(; Constant Data.List.[] ;)

Data_2EList_2E_5B_5D : A : hol.type -> hol.term (type_0 A).

def term_5 : A : hol.type -> hol.term (type_4 A) :=
  A : hol.type => Data_2EList_2E_5B_5D (type_4 A).

def term_6 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_0 A (h_1 : hol.term (type_0 A) => term_1 A (t_2 : hol.term (type_4 A) => Data_2EBool_2E_7E type_7 (term_2 A (term_4 A t_2 h_1) (term_5 A)))).

(; axiom ;)

thm_0 : A : hol.type -> hol.proof (term_6 A).

(; Theorem: |- (Data.Bool.! \lambda h. (Data.Bool.! \lambda t. (Data.Bool.~ ((= ((Data.List.:: h) t)) Data.List.[])))) ;)

def type_8 : hol.type :=
  hol.arr type_1 type_7.

(; Constant Data.Bool.\/ ;)

Data_2EBool_2E_5C_2F : A : hol.type -> hol.term (type_0 A).

def term_7 : A : hol.type -> l_1 : hol.term (type_4 A) -> hol.term (type_5 A) :=
  A : hol.type => l_1 : hol.term (type_4 A) => term_2 A l_1.

(; Constant Data.Bool.? ;)

Data_2EBool_2E_3F : A : hol.type -> hol.term (type_0 A).

def term_8 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_1 A (l_1 : hol.term (type_4 A) => Data_2EBool_2E_5C_2F type_8 (term_7 A l_1 (term_5 A)) (Data_2EBool_2E_3F (type_3 A) (h_2 : hol.term (type_0 A) => Data_2EBool_2E_3F (type_6 A) (t_3 : hol.term (type_4 A) => term_7 A l_1 (term_4 A t_3 h_2))))).

(; axiom ;)

thm_1 : A : hol.type -> hol.proof (term_8 A).

(; Theorem: |- (Data.Bool.! \lambda l. ((Data.Bool.\/ ((= l) Data.List.[])) (Data.Bool.? \lambda h. (Data.Bool.? \lambda t. ((= l) ((Data.List.:: h) t)))))) ;)

def term_9 : A : hol.type -> h1_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => h1_1 : hol.term (type_0 A) => h1_1.

def term_10 : A : hol.type -> t1_1 : hol.term (type_4 A) -> hol.term (type_4 A) :=
  A : hol.type => t1_1 : hol.term (type_4 A) => t1_1.

def term_11 : A : hol.type -> h2_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => h2_1 : hol.term (type_0 A) => h2_1.

def term_12 : A : hol.type -> t2_1 : hol.term (type_4 A) -> hol.term (type_4 A) :=
  A : hol.type => t2_1 : hol.term (type_4 A) => t2_1.

(; Constant Data.Bool./\ ;)

Data_2EBool_2E_2F_5C : A : hol.type -> hol.term (type_0 A).

def term_13 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_0 A (h1_1 : hol.term (type_0 A) => term_0 A (h2_2 : hol.term (type_0 A) => term_1 A (t1_3 : hol.term (type_4 A) => term_1 A (t2_4 : hol.term (type_4 A) => hol.eq type_1 (term_2 A (term_3 A (term_9 A h1_1) (term_10 A t1_3)) (term_3 A (term_11 A h2_2) (term_12 A t2_4))) (Data_2EBool_2E_2F_5C type_8 (hol.eq (type_0 A) (term_9 A h1_1) (term_11 A h2_2)) (term_2 A (term_10 A t1_3) (term_12 A t2_4))))))).

(; axiom ;)

thm_2 : A : hol.type -> hol.proof (term_13 A).

(; Theorem: |- (Data.Bool.! \lambda h1. (Data.Bool.! \lambda h2. (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((= ((= ((Data.List.:: h1) t1)) ((Data.List.:: h2) t2))) ((Data.Bool./\ ((= h1) h2)) ((= t1) t2))))))) ;)

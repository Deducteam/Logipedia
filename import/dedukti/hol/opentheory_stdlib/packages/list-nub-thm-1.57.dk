
(; This file was generated by Holide. ;)

#NAME list_2Dnub_2Dthm_2D1_2E57.

def type_0 : hol.type -> hol.type :=
  A : hol.type => A.

Data_2EList_2Elist : hol.type -> hol.type.

def type_1 : hol.type -> hol.type :=
  A : hol.type => Data_2EList_2Elist (type_0 A).

def type_2 : hol.type :=
  hol.bool.

def type_3 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_1 A) type_2.

(; Constant Data.Bool.! ;)

Data_2EBool_2E_21 : A : hol.type -> hol.term (type_0 A).

def term_0 : A : hol.type -> hol.term (hol.arr (type_3 A) type_2) :=
  A : hol.type => Data_2EBool_2E_21 (hol.arr (type_3 A) type_2).

def term_1 : A : hol.type -> hol.term (hol.arr (type_1 A) (type_3 A)) :=
  A : hol.type => hol.eq (type_1 A).

def type_4 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_1 A) (type_1 A).

(; Constant Data.List.nub ;)

Data_2EList_2Enub : A : hol.type -> hol.term (type_0 A).

def term_2 : A : hol.type -> hol.term (type_4 A) :=
  A : hol.type => Data_2EList_2Enub (type_4 A).

def term_3 : A : hol.type -> l_1 : hol.term (type_1 A) -> hol.term (type_1 A) :=
  A : hol.type => l_1 : hol.term (type_1 A) => l_1.

def term_4 : A : hol.type -> l_1 : hol.term (type_1 A) -> hol.term (type_1 A) :=
  A : hol.type => l_1 : hol.term (type_1 A) => term_2 A (term_3 A l_1).

def term_5 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_0 A (l_1 : hol.term (type_1 A) => term_1 A (term_2 A (term_4 A l_1)) (term_4 A l_1)).

(; axiom ;)

thm_0 : A : hol.type -> hol.proof (term_5 A).

(; Theorem: |- (Data.Bool.! \lambda l. ((= (Data.List.nub (Data.List.nub l))) (Data.List.nub l))) ;)

(; Constant Data.List.nubReverse ;)

Data_2EList_2EnubReverse : A : hol.type -> hol.term (type_0 A).

def term_6 : A : hol.type -> hol.term (type_4 A) :=
  A : hol.type => Data_2EList_2EnubReverse (type_4 A).

def term_7 : A : hol.type -> l_1 : hol.term (type_1 A) -> hol.term (type_1 A) :=
  A : hol.type => l_1 : hol.term (type_1 A) => term_6 A (term_3 A l_1).

def term_8 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_0 A (l_1 : hol.term (type_1 A) => term_1 A (term_6 A (term_7 A l_1)) (term_7 A l_1)).

(; axiom ;)

thm_1 : A : hol.type -> hol.proof (term_8 A).

(; Theorem: |- (Data.Bool.! \lambda l. ((= (Data.List.nubReverse (Data.List.nubReverse l))) (Data.List.nubReverse l))) ;)

Set_2Eset : hol.type -> hol.type.

def type_5 : hol.type -> hol.type :=
  A : hol.type => Set_2Eset (type_0 A).

def term_9 : A : hol.type -> hol.term (hol.arr (type_5 A) (hol.arr (type_5 A) type_2)) :=
  A : hol.type => hol.eq (type_5 A).

(; Constant Data.List.toSet ;)

Data_2EList_2EtoSet : A : hol.type -> hol.term (type_0 A).

def term_10 : A : hol.type -> hol.term (hol.arr (type_1 A) (type_5 A)) :=
  A : hol.type => Data_2EList_2EtoSet (hol.arr (type_1 A) (type_5 A)).

def term_11 : A : hol.type -> l_1 : hol.term (type_1 A) -> hol.term (type_5 A) :=
  A : hol.type => l_1 : hol.term (type_1 A) => term_10 A (term_3 A l_1).

def term_12 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_0 A (l_1 : hol.term (type_1 A) => term_9 A (term_10 A (term_4 A l_1)) (term_11 A l_1)).

(; axiom ;)

thm_2 : A : hol.type -> hol.proof (term_12 A).

(; Theorem: |- (Data.Bool.! \lambda l. ((= (Data.List.toSet (Data.List.nub l))) (Data.List.toSet l))) ;)

def term_13 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_0 A (l_1 : hol.term (type_1 A) => term_9 A (term_10 A (term_7 A l_1)) (term_11 A l_1)).

(; axiom ;)

thm_3 : A : hol.type -> hol.proof (term_13 A).

(; Theorem: |- (Data.Bool.! \lambda l. ((= (Data.List.toSet (Data.List.nubReverse l))) (Data.List.toSet l))) ;)

Number_2ENatural_2Enatural : hol.type.

def type_6 : hol.type :=
  Number_2ENatural_2Enatural.

(; Constant Number.Natural.<= ;)

Number_2ENatural_2E_3C_3D : A : hol.type -> hol.term (type_0 A).

def term_14 : hol.term (hol.arr type_6 (hol.arr type_6 type_2)) :=
  Number_2ENatural_2E_3C_3D (hol.arr type_6 (hol.arr type_6 type_2)).

(; Constant Data.List.length ;)

Data_2EList_2Elength : A : hol.type -> hol.term (type_0 A).

def term_15 : A : hol.type -> hol.term (hol.arr (type_1 A) type_6) :=
  A : hol.type => Data_2EList_2Elength (hol.arr (type_1 A) type_6).

def term_16 : A : hol.type -> l_1 : hol.term (type_1 A) -> hol.term type_6 :=
  A : hol.type => l_1 : hol.term (type_1 A) => term_15 A (term_3 A l_1).

def term_17 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_0 A (l_1 : hol.term (type_1 A) => term_14 (term_15 A (term_4 A l_1)) (term_16 A l_1)).

(; axiom ;)

thm_4 : A : hol.type -> hol.proof (term_17 A).

(; Theorem: |- (Data.Bool.! \lambda l. ((Number.Natural.<= (Data.List.length (Data.List.nub l))) (Data.List.length l))) ;)

def term_18 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_0 A (l_1 : hol.term (type_1 A) => term_14 (term_15 A (term_7 A l_1)) (term_16 A l_1)).

(; axiom ;)

thm_5 : A : hol.type -> hol.proof (term_18 A).

(; Theorem: |- (Data.Bool.! \lambda l. ((Number.Natural.<= (Data.List.length (Data.List.nubReverse l))) (Data.List.length l))) ;)

def term_19 : A : hol.type -> hol.term (hol.arr (hol.arr (type_0 A) type_2) type_2) :=
  A : hol.type => Data_2EBool_2E_21 (hol.arr (hol.arr (type_0 A) type_2) type_2).

def term_20 : hol.term (hol.arr type_2 (hol.arr type_2 type_2)) :=
  hol.eq type_2.

(; Constant Data.List.member ;)

Data_2EList_2Emember : A : hol.type -> hol.term (type_0 A).

def term_21 : A : hol.type -> x_1 : hol.term (type_0 A) -> hol.term (type_3 A) :=
  A : hol.type => x_1 : hol.term (type_0 A) => Data_2EList_2Emember (hol.arr (type_0 A) (type_3 A)) x_1.

def term_22 : A : hol.type -> l_1 : hol.term (type_1 A) -> x_2 : hol.term (type_0 A) -> hol.term type_2 :=
  A : hol.type => l_1 : hol.term (type_1 A) => x_2 : hol.term (type_0 A) => term_21 A x_2 (term_3 A l_1).

def term_23 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_0 A (l_1 : hol.term (type_1 A) => term_19 A (x_2 : hol.term (type_0 A) => term_20 (term_21 A x_2 (term_4 A l_1)) (term_22 A l_1 x_2))).

(; axiom ;)

thm_6 : A : hol.type -> hol.proof (term_23 A).

(; Theorem: |- (Data.Bool.! \lambda l. (Data.Bool.! \lambda x. ((= ((Data.List.member x) (Data.List.nub l))) ((Data.List.member x) l)))) ;)

def term_24 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_0 A (l_1 : hol.term (type_1 A) => term_19 A (x_2 : hol.term (type_0 A) => term_20 (term_21 A x_2 (term_7 A l_1)) (term_22 A l_1 x_2))).

(; axiom ;)

thm_7 : A : hol.type -> hol.proof (term_24 A).

(; Theorem: |- (Data.Bool.! \lambda l. (Data.Bool.! \lambda x. ((= ((Data.List.member x) (Data.List.nubReverse l))) ((Data.List.member x) l)))) ;)

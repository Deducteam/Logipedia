
(; This file was generated by Holide. ;)

#NAME bool_2Ddef_2D1_2E11.

def type_0 : hol.type :=
  hol.bool.

def type_1 : hol.type :=
  hol.arr type_0 type_0.

def type_2 : hol.type :=
  hol.arr type_0 type_1.

def term_0 : hol.term type_2 :=
  hol.eq type_0.

(; Constant bool-def-1.11 ;)

bool_2Ddef_2D1_2E11 : A : hol.type -> hol.term A.

def term_1 : hol.term type_0 :=
  bool_2Ddef_2D1_2E11 type_0.

(; Constant Data.Bool.F ;)

def Data_2EBool_2EF : hol.term type_0 :=
  term_1.

def term_2 : hol.term type_0 :=
  Data_2EBool_2EF.

def type_3 : hol.type -> hol.type :=
  A : hol.type => A.

def type_4 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_3 A) type_0.

def type_5 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_4 A) type_0.

def term_3 : A : hol.type -> hol.term (type_5 A) :=
  A : hol.type => bool_2Ddef_2D1_2E11 (type_5 A).

(; Constant Data.Bool.! ;)

def Data_2EBool_2E_21 : A : hol.type -> hol.term (type_5 A) :=
  A : hol.type => term_3 A.

def type_6 : hol.type :=
  hol.arr type_1 type_0.

def term_4 : hol.term type_6 :=
  Data_2EBool_2E_21 type_0.

def term_5 : p_1 : hol.term type_0 -> hol.term type_0 :=
  p_1 : hol.term type_0 => p_1.

def term_6 : hol.term type_1 :=
  p_1 : hol.term type_0 => term_5 p_1.

def term_7 : hol.term type_0 :=
  term_0 term_2 (term_4 term_6).

(; axiom ;)

thm_0 : hol.proof term_7.

(; Theorem: |- ((= Data.Bool.F) (Data.Bool.! \lambda p. p)) ;)

def term_8 : hol.term (hol.arr type_1 type_6) :=
  hol.eq type_1.

(; Constant Data.Bool.~ ;)

def Data_2EBool_2E_7E : hol.term type_1 :=
  bool_2Ddef_2D1_2E11 type_1.

def term_9 : hol.term type_2 :=
  bool_2Ddef_2D1_2E11 type_2.

(; Constant Data.Bool.==> ;)

def Data_2EBool_2E_3D_3D_3E : hol.term type_2 :=
  term_9.

def term_10 : hol.term type_2 :=
  Data_2EBool_2E_3D_3D_3E.

def term_11 : p_1 : hol.term type_0 -> hol.term type_1 :=
  p_1 : hol.term type_0 => term_10 (term_5 p_1).

def term_12 : hol.term type_0 :=
  term_8 Data_2EBool_2E_7E (p_1 : hol.term type_0 => term_11 p_1 term_2).

(; axiom ;)

thm_1 : hol.proof term_12.

(; Theorem: |- ((= Data.Bool.~) \lambda p. ((Data.Bool.==> p) Data.Bool.F)) ;)

(; Constant Data.Bool.T ;)

def Data_2EBool_2ET : hol.term type_0 :=
  term_1.

def term_13 : hol.term type_0 :=
  Data_2EBool_2ET.

def term_14 : hol.term type_0 :=
  term_0 term_13 (term_8 term_6 term_6).

(; axiom ;)

thm_2 : hol.proof term_14.

(; Theorem: |- ((= Data.Bool.T) ((= \lambda p. p) \lambda p. p)) ;)

def term_15 : A : hol.type -> hol.term (hol.arr (type_5 A) (hol.arr (type_5 A) type_0)) :=
  A : hol.type => hol.eq (type_5 A).

def term_16 : A : hol.type -> hol.term (type_5 A) :=
  A : hol.type => Data_2EBool_2E_21 (type_3 A).

def term_17 : A : hol.type -> p_1 : hol.term (type_4 A) -> hol.term (type_4 A) :=
  A : hol.type => p_1 : hol.term (type_4 A) => p_1.

def term_18 : A : hol.type -> hol.term type_0 :=
  A : hol.type => term_15 A (term_16 A) (p_1 : hol.term (type_4 A) => hol.eq (type_4 A) (term_17 A p_1) (x_2 : hol.term (type_3 A) => term_13)).

(; axiom ;)

thm_3 : A : hol.type -> hol.proof (term_18 A).

(; Theorem: |- ((= Data.Bool.!) \lambda p. ((= p) \lambda x. Data.Bool.T)) ;)

def type_7 : hol.type :=
  hol.arr type_2 type_0.

def term_19 : hol.term (hol.arr type_2 type_7) :=
  hol.eq type_2.

(; Constant Data.Bool./\ ;)

def Data_2EBool_2E_2F_5C : hol.term type_2 :=
  term_9.

def term_20 : hol.term type_2 :=
  Data_2EBool_2E_2F_5C.

def term_21 : q_1 : hol.term type_0 -> hol.term type_0 :=
  q_1 : hol.term type_0 => q_1.

def term_22 : hol.term type_0 :=
  term_19 term_10 (p_1 : hol.term type_0 => q_2 : hol.term type_0 => term_0 (term_20 (term_5 p_1) (term_21 q_2)) (term_5 p_1)).

(; axiom ;)

thm_4 : hol.proof term_22.

(; Theorem: |- ((= Data.Bool.==>) \lambda p. \lambda q. ((= ((Data.Bool./\ p) q)) p)) ;)

def term_23 : f_1 : hol.term type_2 -> hol.term type_2 :=
  f_1 : hol.term type_2 => f_1.

def term_24 : hol.term type_0 :=
  term_19 term_20 (p_1 : hol.term type_0 => q_2 : hol.term type_0 => hol.eq type_7 (f_3 : hol.term type_2 => term_23 f_3 (term_5 p_1) (term_21 q_2)) (f_3 : hol.term type_2 => term_23 f_3 term_13 term_13)).

(; axiom ;)

thm_5 : hol.proof term_24.

(; Theorem: |- ((= Data.Bool./\) \lambda p. \lambda q. ((= \lambda f. ((f p) q)) \lambda f. ((f Data.Bool.T) Data.Bool.T))) ;)

(; Constant Data.Bool.? ;)

def Data_2EBool_2E_3F : A : hol.type -> hol.term (type_5 A) :=
  A : hol.type => term_3 A.

def term_25 : A : hol.type -> hol.term (type_5 A) :=
  A : hol.type => Data_2EBool_2E_3F (type_3 A).

def term_26 : A : hol.type -> x_1 : hol.term (type_3 A) -> hol.term (type_3 A) :=
  A : hol.type => x_1 : hol.term (type_3 A) => x_1.

def term_27 : A : hol.type -> x_1 : hol.term (type_3 A) -> p_2 : hol.term (type_4 A) -> hol.term type_0 :=
  A : hol.type => x_1 : hol.term (type_3 A) => p_2 : hol.term (type_4 A) => term_17 A p_2 (term_26 A x_1).

def term_28 : A : hol.type -> hol.term type_0 :=
  A : hol.type => term_15 A (term_25 A) (p_1 : hol.term (type_4 A) => term_4 (q_2 : hol.term type_0 => term_10 (term_16 A (x_3 : hol.term (type_3 A) => term_10 (term_27 A x_3 p_1) (term_21 q_2))) (term_21 q_2))).

(; axiom ;)

thm_6 : A : hol.type -> hol.proof (term_28 A).

(; Theorem: |- ((= Data.Bool.?) \lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) q))) ;)

(; Constant Data.Bool.\/ ;)

def Data_2EBool_2E_5C_2F : hol.term type_2 :=
  term_9.

def term_29 : r_1 : hol.term type_0 -> hol.term type_0 :=
  r_1 : hol.term type_0 => r_1.

def term_30 : hol.term type_0 :=
  term_19 Data_2EBool_2E_5C_2F (p_1 : hol.term type_0 => q_2 : hol.term type_0 => term_4 (r_3 : hol.term type_0 => term_10 (term_11 p_1 (term_29 r_3)) (term_10 (term_10 (term_21 q_2) (term_29 r_3)) (term_29 r_3)))).

(; axiom ;)

thm_7 : hol.proof term_30.

(; Theorem: |- ((= Data.Bool.\/) \lambda p. \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> p) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r)))) ;)

(; Constant Data.Bool.?! ;)

def Data_2EBool_2E_3F_21 : A : hol.type -> hol.term (type_5 A) :=
  A : hol.type => term_3 A.

def term_31 : A : hol.type -> y_1 : hol.term (type_3 A) -> hol.term (type_3 A) :=
  A : hol.type => y_1 : hol.term (type_3 A) => y_1.

def term_32 : A : hol.type -> x_1 : hol.term (type_3 A) -> hol.term (type_4 A) :=
  A : hol.type => x_1 : hol.term (type_3 A) => hol.eq (type_3 A) (term_26 A x_1).

def term_33 : A : hol.type -> hol.term type_0 :=
  A : hol.type => term_15 A (Data_2EBool_2E_3F_21 (type_3 A)) (p_1 : hol.term (type_4 A) => term_20 (term_25 A (term_17 A p_1)) (term_16 A (x_2 : hol.term (type_3 A) => term_16 A (y_3 : hol.term (type_3 A) => term_10 (term_20 (term_27 A x_2 p_1) (term_17 A p_1 (term_31 A y_3))) (term_32 A x_2 (term_31 A y_3)))))).

(; axiom ;)

thm_8 : A : hol.type -> hol.proof (term_33 A).

(; Theorem: |- ((= Data.Bool.?!) \lambda p. ((Data.Bool./\ (Data.Bool.? p)) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))) ;)

def type_8 : hol.type -> hol.type :=
  A : hol.type => hol.arr type_0 (hol.arr (type_3 A) (hol.arr (type_3 A) (type_3 A))).

(; Constant Data.Bool.cond ;)

def Data_2EBool_2Econd : A : hol.type -> hol.term (type_8 A) :=
  A : hol.type => bool_2Ddef_2D1_2E11 (type_8 A).

def term_34 : t_1 : hol.term type_0 -> hol.term type_1 :=
  t_1 : hol.term type_0 => term_0 t_1.

def term_35 : A : hol.type -> hol.term type_0 :=
  A : hol.type => hol.eq (type_8 A) (Data_2EBool_2Econd (type_3 A)) (t_1 : hol.term type_0 => t1_2 : hol.term (type_3 A) => t2_3 : hol.term (type_3 A) => hol.select (type_3 A) (x_4 : hol.term (type_3 A) => term_20 (term_10 (term_34 t_1 term_13) (term_32 A x_4 t1_2)) (term_10 (term_34 t_1 term_2) (term_32 A x_4 t2_3)))).

(; axiom ;)

thm_9 : A : hol.type -> hol.proof (term_35 A).

(; Theorem: |- ((= Data.Bool.cond) \lambda t. \lambda t1. \lambda t2. (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> ((= t) Data.Bool.T)) ((= x) t1))) ((Data.Bool.==> ((= t) Data.Bool.F)) ((= x) t2))))) ;)

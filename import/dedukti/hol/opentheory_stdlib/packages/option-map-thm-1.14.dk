
(; This file was generated by Holide. ;)

#NAME option_2Dmap_2Dthm_2D1_2E14.

def type_0 : hol.type -> hol.type :=
  A : hol.type => A.

Data_2EOption_2Eoption : hol.type -> hol.type.

def type_1 : hol.type -> hol.type :=
  A : hol.type => Data_2EOption_2Eoption (type_0 A).

def type_2 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_1 A) (type_1 A).

def type_3 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_0 A) (type_0 A).

(; Constant Data.Option.map ;)

Data_2EOption_2Emap : A : hol.type -> hol.term (type_0 A).

(; Constant Function.id ;)

Function_2Eid : A : hol.type -> hol.term (type_0 A).

def term_0 : A : hol.type -> hol.term hol.bool :=
  A : hol.type => hol.eq (type_2 A) (Data_2EOption_2Emap (hol.arr (type_3 A) (type_2 A)) (Function_2Eid (type_3 A))) (Function_2Eid (type_2 A)).

(; axiom ;)

thm_0 : A : hol.type -> hol.proof (term_0 A).

(; Theorem: |- ((= (Data.Option.map Function.id)) Function.id) ;)

def type_4 : hol.type -> hol.type :=
  B : hol.type => B.

def type_5 : hol.type -> hol.type -> hol.type :=
  C : hol.type => B : hol.type => hol.arr (type_4 B) C.

(; Constant Data.Bool.! ;)

Data_2EBool_2E_21 : A : hol.type -> hol.term (type_0 A).

def term_1 : C : hol.type -> B : hol.type -> hol.term (hol.arr (hol.arr (type_5 C B) hol.bool) hol.bool) :=
  C : hol.type => B : hol.type => Data_2EBool_2E_21 (hol.arr (hol.arr (type_5 C B) hol.bool) hol.bool).

def type_6 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_0 A) (type_4 B).

def term_2 : B : hol.type -> A : hol.type -> hol.term (hol.arr (hol.arr (type_6 B A) hol.bool) hol.bool) :=
  B : hol.type => A : hol.type => Data_2EBool_2E_21 (hol.arr (hol.arr (type_6 B A) hol.bool) hol.bool).

def type_7 : hol.type -> hol.type :=
  C : hol.type => Data_2EOption_2Eoption C.

def type_8 : hol.type -> hol.type -> hol.type :=
  C : hol.type => A : hol.type => hol.arr (type_1 A) (type_7 C).

def type_9 : hol.type -> hol.type :=
  B : hol.type => Data_2EOption_2Eoption (type_4 B).

def type_10 : hol.type -> hol.type -> hol.type :=
  C : hol.type => B : hol.type => hol.arr (type_9 B) (type_7 C).

def type_11 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_1 A) (type_9 B).

(; Constant Function.o ;)

Function_2Eo : A : hol.type -> hol.term (type_0 A).

def term_3 : C : hol.type -> B : hol.type -> f_1 : hol.term (type_5 C B) -> hol.term (type_5 C B) :=
  C : hol.type => B : hol.type => f_1 : hol.term (type_5 C B) => f_1.

def term_4 : C : hol.type -> B : hol.type -> f_1 : hol.term (type_5 C B) -> hol.term (type_10 C B) :=
  C : hol.type => B : hol.type => f_1 : hol.term (type_5 C B) => Data_2EOption_2Emap (hol.arr (type_5 C B) (type_10 C B)) (term_3 C B f_1).

def term_5 : B : hol.type -> A : hol.type -> g_1 : hol.term (type_6 B A) -> hol.term (type_6 B A) :=
  B : hol.type => A : hol.type => g_1 : hol.term (type_6 B A) => g_1.

def term_6 : B : hol.type -> A : hol.type -> g_1 : hol.term (type_6 B A) -> hol.term (type_11 B A) :=
  B : hol.type => A : hol.type => g_1 : hol.term (type_6 B A) => Data_2EOption_2Emap (hol.arr (type_6 B A) (type_11 B A)) (term_5 B A g_1).

def type_12 : hol.type -> hol.type -> hol.type :=
  C : hol.type => A : hol.type => hol.arr (type_0 A) C.

def term_7 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (type_6 B A) -> f_2 : hol.term (type_5 C B) -> hol.term (type_8 C A) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (type_6 B A) => f_2 : hol.term (type_5 C B) => Data_2EOption_2Emap (hol.arr (type_12 C A) (type_8 C A)) (Function_2Eo (hol.arr (type_5 C B) (hol.arr (type_6 B A) (type_12 C A))) (term_3 C B f_2) (term_5 B A g_1)).

def term_8 : A : hol.type -> C : hol.type -> B : hol.type -> hol.term hol.bool :=
  A : hol.type => C : hol.type => B : hol.type => term_1 C B (f_1 : hol.term (type_5 C B) => term_2 B A (g_2 : hol.term (type_6 B A) => hol.eq (type_8 C A) (Function_2Eo (hol.arr (type_10 C B) (hol.arr (type_11 B A) (type_8 C A))) (term_4 C B f_1) (term_6 B A g_2)) (term_7 B C A g_2 f_1))).

(; axiom ;)

thm_1 : A : hol.type -> C : hol.type -> B : hol.type -> hol.proof (term_8 A C B).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= ((Function.o (Data.Option.map f)) (Data.Option.map g))) (Data.Option.map ((Function.o f) g))))) ;)

def term_9 : A : hol.type -> x_1 : hol.term (type_1 A) -> hol.term (type_1 A) :=
  A : hol.type => x_1 : hol.term (type_1 A) => x_1.

def term_10 : A : hol.type -> C : hol.type -> B : hol.type -> hol.term hol.bool :=
  A : hol.type => C : hol.type => B : hol.type => term_1 C B (f_1 : hol.term (type_5 C B) => term_2 B A (g_2 : hol.term (type_6 B A) => Data_2EBool_2E_21 (hol.arr (hol.arr (type_1 A) hol.bool) hol.bool) (x_3 : hol.term (type_1 A) => hol.eq (type_7 C) (term_7 B C A g_2 f_1 (term_9 A x_3)) (term_4 C B f_1 (term_6 B A g_2 (term_9 A x_3)))))).

(; axiom ;)

thm_2 : A : hol.type -> C : hol.type -> B : hol.type -> hol.proof (term_10 A C B).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= ((Data.Option.map ((Function.o f) g)) x)) ((Data.Option.map f) ((Data.Option.map g) x)))))) ;)

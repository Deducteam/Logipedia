
(; This file was generated by Holide. ;)

#NAME list_2Dtake_2Ddrop_2Ddef_2D1_2E56.

def type_0 : hol.type -> hol.type :=
  A : hol.type => A.

Data_2EList_2Elist : hol.type -> hol.type.

def type_1 : hol.type -> hol.type :=
  A : hol.type => Data_2EList_2Elist (type_0 A).

def type_2 : hol.type :=
  hol.bool.

def type_3 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_1 A) type_2.

(; Constant Data.Bool.! ;)

Data_2EBool_2E_21 : A : hol.type -> hol.term (type_0 A).

def term_0 : A : hol.type -> hol.term (hol.arr (type_3 A) type_2) :=
  A : hol.type => Data_2EBool_2E_21 (hol.arr (type_3 A) type_2).

def term_1 : A : hol.type -> hol.term (hol.arr (type_1 A) (type_3 A)) :=
  A : hol.type => hol.eq (type_1 A).

Number_2ENatural_2Enatural : hol.type.

def type_4 : hol.type :=
  Number_2ENatural_2Enatural.

def type_5 : hol.type -> hol.type :=
  A : hol.type => hol.arr type_4 (hol.arr (type_1 A) (type_1 A)).

(; Constant list-take-drop-def-1.56 ;)

list_2Dtake_2Ddrop_2Ddef_2D1_2E56 : A : hol.type -> hol.term (type_0 A).

def term_2 : A : hol.type -> hol.term (type_5 A) :=
  A : hol.type => list_2Dtake_2Ddrop_2Ddef_2D1_2E56 (type_5 A).

(; Constant Data.List.drop ;)

def Data_2EList_2Edrop : A : hol.type -> hol.term (type_5 A) :=
  A : hol.type => term_2 A.

def term_3 : A : hol.type -> hol.term (type_5 A) :=
  A : hol.type => Data_2EList_2Edrop (type_0 A).

(; Constant Number.Natural.zero ;)

Number_2ENatural_2Ezero : A : hol.type -> hol.term (type_0 A).

def term_4 : hol.term type_4 :=
  Number_2ENatural_2Ezero type_4.

def term_5 : A : hol.type -> l_1 : hol.term (type_1 A) -> hol.term (type_1 A) :=
  A : hol.type => l_1 : hol.term (type_1 A) => l_1.

def term_6 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_0 A (l_1 : hol.term (type_1 A) => term_1 A (term_3 A term_4 (term_5 A l_1)) (term_5 A l_1)).

(; axiom ;)

thm_0 : A : hol.type -> hol.proof (term_6 A).

(; Theorem: |- (Data.Bool.! \lambda l. ((= ((Data.List.drop Number.Natural.zero) l)) l)) ;)

(; Constant Data.List.take ;)

def Data_2EList_2Etake : A : hol.type -> hol.term (type_5 A) :=
  A : hol.type => term_2 A.

def term_7 : A : hol.type -> hol.term (type_5 A) :=
  A : hol.type => Data_2EList_2Etake (type_0 A).

(; Constant Data.List.[] ;)

Data_2EList_2E_5B_5D : A : hol.type -> hol.term (type_0 A).

def term_8 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_0 A (l_1 : hol.term (type_1 A) => term_1 A (term_7 A term_4 (term_5 A l_1)) (Data_2EList_2E_5B_5D (type_1 A))).

(; axiom ;)

thm_1 : A : hol.type -> hol.proof (term_8 A).

(; Theorem: |- (Data.Bool.! \lambda l. ((= ((Data.List.take Number.Natural.zero) l)) Data.List.[])) ;)

def type_6 : hol.type :=
  hol.arr type_4 type_2.

def term_9 : hol.term (hol.arr type_6 type_2) :=
  Data_2EBool_2E_21 (hol.arr type_6 type_2).

def term_10 : A : hol.type -> hol.term (hol.arr (hol.arr (type_0 A) type_2) type_2) :=
  A : hol.type => Data_2EBool_2E_21 (hol.arr (hol.arr (type_0 A) type_2) type_2).

(; Constant Data.Bool.==> ;)

Data_2EBool_2E_3D_3D_3E : A : hol.type -> hol.term (type_0 A).

(; Constant Number.Natural.<= ;)

Number_2ENatural_2E_3C_3D : A : hol.type -> hol.term (type_0 A).

def term_11 : n_1 : hol.term type_4 -> hol.term type_4 :=
  n_1 : hol.term type_4 => n_1.

(; Constant Data.List.length ;)

Data_2EList_2Elength : A : hol.type -> hol.term (type_0 A).

def term_12 : A : hol.type -> t_1 : hol.term (type_1 A) -> hol.term (type_1 A) :=
  A : hol.type => t_1 : hol.term (type_1 A) => t_1.

def term_13 : A : hol.type -> t_1 : hol.term (type_1 A) -> n_2 : hol.term type_4 -> hol.term (hol.arr type_2 type_2) :=
  A : hol.type => t_1 : hol.term (type_1 A) => n_2 : hol.term type_4 => Data_2EBool_2E_3D_3D_3E (hol.arr type_2 (hol.arr type_2 type_2)) (Number_2ENatural_2E_3C_3D (hol.arr type_4 type_6) (term_11 n_2) (Data_2EList_2Elength (hol.arr (type_1 A) type_4) (term_12 A t_1))).

(; Constant Number.Natural.suc ;)

Number_2ENatural_2Esuc : A : hol.type -> hol.term (type_0 A).

def term_14 : n_1 : hol.term type_4 -> hol.term type_4 :=
  n_1 : hol.term type_4 => Number_2ENatural_2Esuc (hol.arr type_4 type_4) (term_11 n_1).

(; Constant Data.List.:: ;)

Data_2EList_2E_3A_3A : A : hol.type -> hol.term (type_0 A).

def term_15 : A : hol.type -> h_1 : hol.term (type_0 A) -> hol.term (hol.arr (type_1 A) (type_1 A)) :=
  A : hol.type => h_1 : hol.term (type_0 A) => Data_2EList_2E_3A_3A (hol.arr (type_0 A) (hol.arr (type_1 A) (type_1 A))) h_1.

def term_16 : A : hol.type -> t_1 : hol.term (type_1 A) -> h_2 : hol.term (type_0 A) -> hol.term (type_1 A) :=
  A : hol.type => t_1 : hol.term (type_1 A) => h_2 : hol.term (type_0 A) => term_15 A h_2 (term_12 A t_1).

def term_17 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_9 (n_1 : hol.term type_4 => term_10 A (h_2 : hol.term (type_0 A) => term_0 A (t_3 : hol.term (type_1 A) => term_13 A t_3 n_1 (term_1 A (term_3 A (term_14 n_1) (term_16 A t_3 h_2)) (term_3 A (term_11 n_1) (term_12 A t_3)))))).

(; axiom ;)

thm_2 : A : hol.type -> hol.proof (term_17 A).

(; Theorem: |- (Data.Bool.! \lambda n. (Data.Bool.! \lambda h. (Data.Bool.! \lambda t. ((Data.Bool.==> ((Number.Natural.<= n) (Data.List.length t))) ((= ((Data.List.drop (Number.Natural.suc n)) ((Data.List.:: h) t))) ((Data.List.drop n) t)))))) ;)

def term_18 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_9 (n_1 : hol.term type_4 => term_10 A (h_2 : hol.term (type_0 A) => term_0 A (t_3 : hol.term (type_1 A) => term_13 A t_3 n_1 (term_1 A (term_7 A (term_14 n_1) (term_16 A t_3 h_2)) (term_15 A h_2 (term_7 A (term_11 n_1) (term_12 A t_3))))))).

(; axiom ;)

thm_3 : A : hol.type -> hol.proof (term_18 A).

(; Theorem: |- (Data.Bool.! \lambda n. (Data.Bool.! \lambda h. (Data.Bool.! \lambda t. ((Data.Bool.==> ((Number.Natural.<= n) (Data.List.length t))) ((= ((Data.List.take (Number.Natural.suc n)) ((Data.List.:: h) t))) ((Data.List.:: h) ((Data.List.take n) t))))))) ;)

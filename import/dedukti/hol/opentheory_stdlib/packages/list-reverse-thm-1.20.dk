
(; This file was generated by Holide. ;)

#NAME list_2Dreverse_2Dthm_2D1_2E20.

def type_0 : hol.type -> hol.type :=
  A : hol.type => A.

Data_2EList_2Elist : hol.type -> hol.type.

def type_1 : hol.type -> hol.type :=
  A : hol.type => Data_2EList_2Elist (type_0 A).

def type_2 : hol.type :=
  hol.bool.

def type_3 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_1 A) type_2.

(; Constant Data.Bool.! ;)

Data_2EBool_2E_21 : A : hol.type -> hol.term (type_0 A).

def term_0 : A : hol.type -> hol.term (hol.arr (type_3 A) type_2) :=
  A : hol.type => Data_2EBool_2E_21 (hol.arr (type_3 A) type_2).

def term_1 : A : hol.type -> hol.term (hol.arr (type_1 A) (type_3 A)) :=
  A : hol.type => hol.eq (type_1 A).

def type_4 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_1 A) (type_1 A).

(; Constant Data.List.reverse ;)

Data_2EList_2Ereverse : A : hol.type -> hol.term (type_0 A).

def term_2 : A : hol.type -> hol.term (type_4 A) :=
  A : hol.type => Data_2EList_2Ereverse (type_4 A).

def term_3 : A : hol.type -> l_1 : hol.term (type_1 A) -> hol.term (type_1 A) :=
  A : hol.type => l_1 : hol.term (type_1 A) => l_1.

def term_4 : A : hol.type -> l_1 : hol.term (type_1 A) -> hol.term (type_1 A) :=
  A : hol.type => l_1 : hol.term (type_1 A) => term_2 A (term_3 A l_1).

def term_5 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_0 A (l_1 : hol.term (type_1 A) => term_1 A (term_2 A (term_4 A l_1)) (term_3 A l_1)).

(; axiom ;)

thm_0 : A : hol.type -> hol.proof (term_5 A).

(; Theorem: |- (Data.Bool.! \lambda l. ((= (Data.List.reverse (Data.List.reverse l))) l)) ;)

Number_2ENatural_2Enatural : hol.type.

def type_5 : hol.type :=
  Number_2ENatural_2Enatural.

(; Constant Data.List.length ;)

Data_2EList_2Elength : A : hol.type -> hol.term (type_0 A).

def term_6 : A : hol.type -> hol.term (hol.arr (type_1 A) type_5) :=
  A : hol.type => Data_2EList_2Elength (hol.arr (type_1 A) type_5).

def term_7 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_0 A (l_1 : hol.term (type_1 A) => hol.eq type_5 (term_6 A (term_4 A l_1)) (term_6 A (term_3 A l_1))).

(; axiom ;)

thm_1 : A : hol.type -> hol.proof (term_7 A).

(; Theorem: |- (Data.Bool.! \lambda l. ((= (Data.List.length (Data.List.reverse l))) (Data.List.length l))) ;)

Set_2Eset : hol.type -> hol.type.

def type_6 : hol.type -> hol.type :=
  A : hol.type => Set_2Eset (type_0 A).

(; Constant Data.List.toSet ;)

Data_2EList_2EtoSet : A : hol.type -> hol.term (type_0 A).

def term_8 : A : hol.type -> hol.term (hol.arr (type_1 A) (type_6 A)) :=
  A : hol.type => Data_2EList_2EtoSet (hol.arr (type_1 A) (type_6 A)).

def term_9 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_0 A (l_1 : hol.term (type_1 A) => hol.eq (type_6 A) (term_8 A (term_4 A l_1)) (term_8 A (term_3 A l_1))).

(; axiom ;)

thm_2 : A : hol.type -> hol.proof (term_9 A).

(; Theorem: |- (Data.Bool.! \lambda l. ((= (Data.List.toSet (Data.List.reverse l))) (Data.List.toSet l))) ;)

def term_10 : hol.term (hol.arr type_2 (hol.arr type_2 type_2)) :=
  hol.eq type_2.

(; Constant Data.List.[] ;)

Data_2EList_2E_5B_5D : A : hol.type -> hol.term (type_0 A).

def term_11 : A : hol.type -> hol.term (type_1 A) :=
  A : hol.type => Data_2EList_2E_5B_5D (type_1 A).

def term_12 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_0 A (l_1 : hol.term (type_1 A) => term_10 (term_1 A (term_4 A l_1) (term_11 A)) (term_1 A (term_3 A l_1) (term_11 A))).

(; axiom ;)

thm_3 : A : hol.type -> hol.proof (term_12 A).

(; Theorem: |- (Data.Bool.! \lambda l. ((= ((= (Data.List.reverse l)) Data.List.[])) ((= l) Data.List.[]))) ;)

(; Constant Data.List.member ;)

Data_2EList_2Emember : A : hol.type -> hol.term (type_0 A).

def term_13 : A : hol.type -> x_1 : hol.term (type_0 A) -> hol.term (type_3 A) :=
  A : hol.type => x_1 : hol.term (type_0 A) => Data_2EList_2Emember (hol.arr (type_0 A) (type_3 A)) x_1.

def term_14 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_0 A (l_1 : hol.term (type_1 A) => Data_2EBool_2E_21 (hol.arr (hol.arr (type_0 A) type_2) type_2) (x_2 : hol.term (type_0 A) => term_10 (term_13 A x_2 (term_4 A l_1)) (term_13 A x_2 (term_3 A l_1)))).

(; axiom ;)

thm_4 : A : hol.type -> hol.proof (term_14 A).

(; Theorem: |- (Data.Bool.! \lambda l. (Data.Bool.! \lambda x. ((= ((Data.List.member x) (Data.List.reverse l))) ((Data.List.member x) l)))) ;)

def type_7 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_0 A) B.

def type_8 : hol.type -> hol.type :=
  B : hol.type => Data_2EList_2Elist B.

(; Constant Data.List.map ;)

Data_2EList_2Emap : A : hol.type -> hol.term (type_0 A).

def term_15 : B : hol.type -> A : hol.type -> f_1 : hol.term (type_7 B A) -> hol.term (hol.arr (type_1 A) (type_8 B)) :=
  B : hol.type => A : hol.type => f_1 : hol.term (type_7 B A) => Data_2EList_2Emap (hol.arr (type_7 B A) (hol.arr (type_1 A) (type_8 B))) f_1.

def term_16 : B : hol.type -> A : hol.type -> hol.term type_2 :=
  B : hol.type => A : hol.type => Data_2EBool_2E_21 (hol.arr (hol.arr (type_7 B A) type_2) type_2) (f_1 : hol.term (type_7 B A) => term_0 A (l_2 : hol.term (type_1 A) => hol.eq (type_8 B) (Data_2EList_2Ereverse (hol.arr (type_8 B) (type_8 B)) (term_15 B A f_1 (term_3 A l_2))) (term_15 B A f_1 (term_4 A l_2)))).

(; axiom ;)

thm_5 : B : hol.type -> A : hol.type -> hol.proof (term_16 B A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda l. ((= (Data.List.reverse ((Data.List.map f) l))) ((Data.List.map f) (Data.List.reverse l))))) ;)

(; Constant Data.List.@ ;)

Data_2EList_2E_40 : A : hol.type -> hol.term (type_0 A).

def term_17 : A : hol.type -> hol.term (hol.arr (type_1 A) (type_4 A)) :=
  A : hol.type => Data_2EList_2E_40 (hol.arr (type_1 A) (type_4 A)).

def term_18 : A : hol.type -> l1_1 : hol.term (type_1 A) -> hol.term (type_1 A) :=
  A : hol.type => l1_1 : hol.term (type_1 A) => l1_1.

def term_19 : A : hol.type -> l2_1 : hol.term (type_1 A) -> hol.term (type_1 A) :=
  A : hol.type => l2_1 : hol.term (type_1 A) => l2_1.

def term_20 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_0 A (l1_1 : hol.term (type_1 A) => term_0 A (l2_2 : hol.term (type_1 A) => term_1 A (term_2 A (term_17 A (term_18 A l1_1) (term_19 A l2_2))) (term_17 A (term_2 A (term_19 A l2_2)) (term_2 A (term_18 A l1_1))))).

(; axiom ;)

thm_6 : A : hol.type -> hol.proof (term_20 A).

(; Theorem: |- (Data.Bool.! \lambda l1. (Data.Bool.! \lambda l2. ((= (Data.List.reverse ((Data.List.@ l1) l2))) ((Data.List.@ (Data.List.reverse l2)) (Data.List.reverse l1))))) ;)

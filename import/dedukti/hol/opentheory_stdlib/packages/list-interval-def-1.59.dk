
(; This file was generated by Holide. ;)

#NAME list_2Dinterval_2Ddef_2D1_2E59.

Number_2ENatural_2Enatural : hol.type.

def type_0 : hol.type :=
  Number_2ENatural_2Enatural.

(; Constant Data.Bool.! ;)

Data_2EBool_2E_21 : A : hol.type -> hol.term A.

def term_0 : hol.term (hol.arr (hol.arr type_0 hol.bool) hol.bool) :=
  Data_2EBool_2E_21 (hol.arr (hol.arr type_0 hol.bool) hol.bool).

Data_2EList_2Elist : hol.type -> hol.type.

def type_1 : hol.type :=
  Data_2EList_2Elist type_0.

def term_1 : hol.term (hol.arr type_1 (hol.arr type_1 hol.bool)) :=
  hol.eq type_1.

def type_2 : hol.type :=
  hol.arr type_0 (hol.arr type_0 type_1).

(; Constant list-interval-def-1.59 ;)

list_2Dinterval_2Ddef_2D1_2E59 : A : hol.type -> hol.term A.

(; Constant Data.List.interval ;)

def Data_2EList_2Einterval : hol.term type_2 :=
  list_2Dinterval_2Ddef_2D1_2E59 type_2.

def term_2 : hol.term type_2 :=
  Data_2EList_2Einterval.

def term_3 : m_1 : hol.term type_0 -> hol.term type_0 :=
  m_1 : hol.term type_0 => m_1.

def term_4 : m_1 : hol.term type_0 -> hol.term (hol.arr type_0 type_1) :=
  m_1 : hol.term type_0 => term_2 (term_3 m_1).

(; Constant Number.Natural.zero ;)

Number_2ENatural_2Ezero : A : hol.type -> hol.term A.

(; Constant Data.List.[] ;)

Data_2EList_2E_5B_5D : A : hol.type -> hol.term A.

def term_5 : hol.term hol.bool :=
  term_0 (m_1 : hol.term type_0 => term_1 (term_4 m_1 (Number_2ENatural_2Ezero type_0)) (Data_2EList_2E_5B_5D type_1)).

(; axiom ;)

thm_0 : hol.proof term_5.

(; Theorem: |- (Data.Bool.! \lambda m. ((= ((Data.List.interval m) Number.Natural.zero)) Data.List.[])) ;)

(; Constant Number.Natural.suc ;)

Number_2ENatural_2Esuc : A : hol.type -> hol.term A.

def term_6 : hol.term (hol.arr type_0 type_0) :=
  Number_2ENatural_2Esuc (hol.arr type_0 type_0).

def term_7 : n_1 : hol.term type_0 -> hol.term type_0 :=
  n_1 : hol.term type_0 => n_1.

(; Constant Data.List.:: ;)

Data_2EList_2E_3A_3A : A : hol.type -> hol.term A.

def term_8 : hol.term hol.bool :=
  term_0 (m_1 : hol.term type_0 => term_0 (n_2 : hol.term type_0 => term_1 (term_4 m_1 (term_6 (term_7 n_2))) (Data_2EList_2E_3A_3A (hol.arr type_0 (hol.arr type_1 type_1)) (term_3 m_1) (term_2 (term_6 (term_3 m_1)) (term_7 n_2))))).

(; axiom ;)

thm_1 : hol.proof term_8.

(; Theorem: |- (Data.Bool.! \lambda m. (Data.Bool.! \lambda n. ((= ((Data.List.interval m) (Number.Natural.suc n))) ((Data.List.:: m) ((Data.List.interval (Number.Natural.suc m)) n))))) ;)


(; This file was generated by Holide. ;)

#NAME list_2Dmap_2D1_2E54.

def type_0 : hol.type -> hol.type :=
  A : hol.type => A.

Data_2EList_2Elist : hol.type -> hol.type.

def type_1 : hol.type -> hol.type :=
  A : hol.type => Data_2EList_2Elist (type_0 A).

def type_2 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_1 A) (type_1 A).

def type_3 : hol.type :=
  hol.bool.

def type_4 : hol.type -> hol.type :=
  B : hol.type => B.

def type_5 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_0 A) (type_4 B).

def type_6 : hol.type -> hol.type :=
  B : hol.type => Data_2EList_2Elist (type_4 B).

def type_7 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_1 A) (type_6 B).

def type_8 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_5 B A) (type_7 B A).

(; Constant list-map-1.54 ;)

list_2Dmap_2D1_2E54 : A : hol.type -> hol.term (type_0 A).

(; Constant Data.List.map ;)

def Data_2EList_2Emap : B : hol.type -> A : hol.type -> hol.term (type_8 B A) :=
  B : hol.type => A : hol.type => list_2Dmap_2D1_2E54 (type_8 B A).

def type_9 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_0 A) (type_0 A).

def term_0 : A : hol.type -> hol.term (hol.arr (type_9 A) (type_2 A)) :=
  A : hol.type => Data_2EList_2Emap (type_0 A) (type_0 A).

(; Constant Function.id ;)

Function_2Eid : A : hol.type -> hol.term (type_0 A).

def term_1 : A : hol.type -> hol.term type_3 :=
  A : hol.type => hol.eq (type_2 A) (term_0 A (Function_2Eid (type_9 A))) (Function_2Eid (type_2 A)).

(; axiom ;)

thm_0 : A : hol.type -> hol.proof (term_1 A).

(; Theorem: |- ((= (Data.List.map Function.id)) Function.id) ;)

(; Constant Data.Bool.! ;)

Data_2EBool_2E_21 : A : hol.type -> hol.term (type_0 A).

def term_2 : B : hol.type -> A : hol.type -> hol.term (hol.arr (hol.arr (type_5 B A) type_3) type_3) :=
  B : hol.type => A : hol.type => Data_2EBool_2E_21 (hol.arr (hol.arr (type_5 B A) type_3) type_3).

def type_10 : hol.type -> hol.type :=
  B : hol.type => hol.arr (type_6 B) type_3.

def term_3 : B : hol.type -> hol.term (hol.arr (type_6 B) (type_10 B)) :=
  B : hol.type => hol.eq (type_6 B).

def term_4 : B : hol.type -> A : hol.type -> hol.term (type_8 B A) :=
  B : hol.type => A : hol.type => Data_2EList_2Emap (type_4 B) (type_0 A).

def term_5 : B : hol.type -> A : hol.type -> f_1 : hol.term (type_5 B A) -> hol.term (type_5 B A) :=
  B : hol.type => A : hol.type => f_1 : hol.term (type_5 B A) => f_1.

def term_6 : B : hol.type -> A : hol.type -> f_1 : hol.term (type_5 B A) -> hol.term (type_7 B A) :=
  B : hol.type => A : hol.type => f_1 : hol.term (type_5 B A) => term_4 B A (term_5 B A f_1).

(; Constant Data.List.[] ;)

Data_2EList_2E_5B_5D : A : hol.type -> hol.term (type_0 A).

def term_7 : A : hol.type -> hol.term (type_1 A) :=
  A : hol.type => Data_2EList_2E_5B_5D (type_1 A).

def term_8 : B : hol.type -> hol.term (type_6 B) :=
  B : hol.type => Data_2EList_2E_5B_5D (type_6 B).

def term_9 : B : hol.type -> A : hol.type -> hol.term type_3 :=
  B : hol.type => A : hol.type => term_2 B A (f_1 : hol.term (type_5 B A) => term_3 B (term_6 B A f_1 (term_7 A)) (term_8 B)).

(; axiom ;)

thm_1 : B : hol.type -> A : hol.type -> hol.proof (term_9 B A).

(; Theorem: |- (Data.Bool.! \lambda f. ((= ((Data.List.map f) Data.List.[])) Data.List.[])) ;)

def type_11 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_1 A) type_3.

def type_12 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_11 A) type_3.

def term_10 : A : hol.type -> hol.term (type_12 A) :=
  A : hol.type => Data_2EBool_2E_21 (type_12 A).

def term_11 : A : hol.type -> hol.term (hol.arr (type_1 A) (type_11 A)) :=
  A : hol.type => hol.eq (type_1 A).

def term_12 : A : hol.type -> x_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => x_1 : hol.term (type_0 A) => x_1.

def term_13 : A : hol.type -> l_1 : hol.term (type_1 A) -> hol.term (type_1 A) :=
  A : hol.type => l_1 : hol.term (type_1 A) => l_1.

def term_14 : A : hol.type -> hol.term type_3 :=
  A : hol.type => term_10 A (l_1 : hol.term (type_1 A) => term_11 A (term_0 A (x_2 : hol.term (type_0 A) => term_12 A x_2) (term_13 A l_1)) (term_13 A l_1)).

(; axiom ;)

thm_2 : A : hol.type -> hol.proof (term_14 A).

(; Theorem: |- (Data.Bool.! \lambda l. ((= ((Data.List.map \lambda x. x) l)) l)) ;)

def type_13 : hol.type :=
  hol.arr type_3 (hol.arr type_3 type_3).

def term_15 : hol.term type_13 :=
  hol.eq type_3.

(; Constant Data.List.null ;)

Data_2EList_2Enull : A : hol.type -> hol.term (type_0 A).

def term_16 : B : hol.type -> A : hol.type -> l_1 : hol.term (type_1 A) -> f_2 : hol.term (type_5 B A) -> hol.term (type_6 B) :=
  B : hol.type => A : hol.type => l_1 : hol.term (type_1 A) => f_2 : hol.term (type_5 B A) => term_6 B A f_2 (term_13 A l_1).

def term_17 : B : hol.type -> A : hol.type -> hol.term type_3 :=
  B : hol.type => A : hol.type => term_2 B A (f_1 : hol.term (type_5 B A) => term_10 A (l_2 : hol.term (type_1 A) => term_15 (Data_2EList_2Enull (type_10 B) (term_16 B A l_2 f_1)) (Data_2EList_2Enull (type_11 A) (term_13 A l_2)))).

(; axiom ;)

thm_3 : B : hol.type -> A : hol.type -> hol.proof (term_17 B A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda l. ((= (Data.List.null ((Data.List.map f) l))) (Data.List.null l)))) ;)

Number_2ENatural_2Enatural : hol.type.

def type_14 : hol.type :=
  Number_2ENatural_2Enatural.

(; Constant Data.List.length ;)

Data_2EList_2Elength : A : hol.type -> hol.term (type_0 A).

def term_18 : B : hol.type -> A : hol.type -> hol.term type_3 :=
  B : hol.type => A : hol.type => term_2 B A (f_1 : hol.term (type_5 B A) => term_10 A (l_2 : hol.term (type_1 A) => hol.eq type_14 (Data_2EList_2Elength (hol.arr (type_6 B) type_14) (term_16 B A l_2 f_1)) (Data_2EList_2Elength (hol.arr (type_1 A) type_14) (term_13 A l_2)))).

(; axiom ;)

thm_4 : B : hol.type -> A : hol.type -> hol.proof (term_18 B A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda l. ((= (Data.List.length ((Data.List.map f) l))) (Data.List.length l)))) ;)

Set_2Eset : hol.type -> hol.type.

def type_15 : hol.type -> hol.type :=
  B : hol.type => Set_2Eset (type_4 B).

(; Constant Data.List.toSet ;)

Data_2EList_2EtoSet : A : hol.type -> hol.term (type_0 A).

def type_16 : hol.type -> hol.type :=
  A : hol.type => Set_2Eset (type_0 A).

(; Constant Set.image ;)

Set_2Eimage : A : hol.type -> hol.term (type_0 A).

def term_19 : B : hol.type -> A : hol.type -> hol.term type_3 :=
  B : hol.type => A : hol.type => term_2 B A (f_1 : hol.term (type_5 B A) => term_10 A (l_2 : hol.term (type_1 A) => hol.eq (type_15 B) (Data_2EList_2EtoSet (hol.arr (type_6 B) (type_15 B)) (term_16 B A l_2 f_1)) (Set_2Eimage (hol.arr (type_5 B A) (hol.arr (type_16 A) (type_15 B))) (term_5 B A f_1) (Data_2EList_2EtoSet (hol.arr (type_1 A) (type_16 A)) (term_13 A l_2))))).

(; axiom ;)

thm_5 : B : hol.type -> A : hol.type -> hol.proof (term_19 B A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda l. ((= (Data.List.toSet ((Data.List.map f) l))) ((Set.image f) (Data.List.toSet l))))) ;)

def term_20 : A : hol.type -> B : hol.type -> l_1 : hol.term (type_1 A) -> f_2 : hol.term (type_5 B A) -> hol.term (type_10 B) :=
  A : hol.type => B : hol.type => l_1 : hol.term (type_1 A) => f_2 : hol.term (type_5 B A) => term_3 B (term_16 B A l_1 f_2).

def term_21 : B : hol.type -> A : hol.type -> hol.term type_3 :=
  B : hol.type => A : hol.type => term_2 B A (f_1 : hol.term (type_5 B A) => term_10 A (l_2 : hol.term (type_1 A) => term_15 (term_20 A B l_2 f_1 (term_8 B)) (term_11 A (term_13 A l_2) (term_7 A)))).

(; axiom ;)

thm_6 : B : hol.type -> A : hol.type -> hol.proof (term_21 B A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda l. ((= ((= ((Data.List.map f) l)) Data.List.[])) ((= l) Data.List.[])))) ;)

def type_17 : hol.type -> hol.type -> hol.type :=
  C : hol.type => B : hol.type => hol.arr (type_4 B) C.

def term_22 : C : hol.type -> B : hol.type -> hol.term (hol.arr (hol.arr (type_17 C B) type_3) type_3) :=
  C : hol.type => B : hol.type => Data_2EBool_2E_21 (hol.arr (hol.arr (type_17 C B) type_3) type_3).

def type_18 : hol.type -> hol.type :=
  C : hol.type => Data_2EList_2Elist C.

def type_19 : hol.type -> hol.type -> hol.type :=
  C : hol.type => A : hol.type => hol.arr (type_1 A) (type_18 C).

def type_20 : hol.type -> hol.type -> hol.type :=
  C : hol.type => B : hol.type => hol.arr (type_6 B) (type_18 C).

(; Constant Function.o ;)

Function_2Eo : A : hol.type -> hol.term (type_0 A).

def term_23 : C : hol.type -> B : hol.type -> f_1 : hol.term (type_17 C B) -> hol.term (type_17 C B) :=
  C : hol.type => B : hol.type => f_1 : hol.term (type_17 C B) => f_1.

def term_24 : C : hol.type -> B : hol.type -> f_1 : hol.term (type_17 C B) -> hol.term (type_20 C B) :=
  C : hol.type => B : hol.type => f_1 : hol.term (type_17 C B) => Data_2EList_2Emap C (type_4 B) (term_23 C B f_1).

def term_25 : B : hol.type -> A : hol.type -> g_1 : hol.term (type_5 B A) -> hol.term (type_5 B A) :=
  B : hol.type => A : hol.type => g_1 : hol.term (type_5 B A) => g_1.

def term_26 : B : hol.type -> A : hol.type -> g_1 : hol.term (type_5 B A) -> hol.term (type_7 B A) :=
  B : hol.type => A : hol.type => g_1 : hol.term (type_5 B A) => term_4 B A (term_25 B A g_1).

def type_21 : hol.type -> hol.type -> hol.type :=
  C : hol.type => A : hol.type => hol.arr (type_0 A) C.

def term_27 : B : hol.type -> C : hol.type -> A : hol.type -> g_1 : hol.term (type_5 B A) -> f_2 : hol.term (type_17 C B) -> hol.term (type_19 C A) :=
  B : hol.type => C : hol.type => A : hol.type => g_1 : hol.term (type_5 B A) => f_2 : hol.term (type_17 C B) => Data_2EList_2Emap C (type_0 A) (Function_2Eo (hol.arr (type_17 C B) (hol.arr (type_5 B A) (type_21 C A))) (term_23 C B f_2) (term_25 B A g_1)).

def term_28 : A : hol.type -> C : hol.type -> B : hol.type -> hol.term type_3 :=
  A : hol.type => C : hol.type => B : hol.type => term_22 C B (f_1 : hol.term (type_17 C B) => term_2 B A (g_2 : hol.term (type_5 B A) => hol.eq (type_19 C A) (Function_2Eo (hol.arr (type_20 C B) (hol.arr (type_7 B A) (type_19 C A))) (term_24 C B f_1) (term_26 B A g_2)) (term_27 B C A g_2 f_1))).

(; axiom ;)

thm_7 : A : hol.type -> C : hol.type -> B : hol.type -> hol.proof (term_28 A C B).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= ((Function.o (Data.List.map f)) (Data.List.map g))) (Data.List.map ((Function.o f) g))))) ;)

def term_29 : B : hol.type -> A : hol.type -> l_1 : hol.term (type_1 A) -> g_2 : hol.term (type_5 B A) -> hol.term (type_6 B) :=
  B : hol.type => A : hol.type => l_1 : hol.term (type_1 A) => g_2 : hol.term (type_5 B A) => term_26 B A g_2 (term_13 A l_1).

def term_30 : A : hol.type -> C : hol.type -> B : hol.type -> hol.term type_3 :=
  A : hol.type => C : hol.type => B : hol.type => term_22 C B (f_1 : hol.term (type_17 C B) => term_2 B A (g_2 : hol.term (type_5 B A) => term_10 A (l_3 : hol.term (type_1 A) => hol.eq (type_18 C) (term_27 B C A g_2 f_1 (term_13 A l_3)) (term_24 C B f_1 (term_29 B A l_3 g_2))))).

(; axiom ;)

thm_8 : A : hol.type -> C : hol.type -> B : hol.type -> hol.proof (term_30 A C B).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda l. ((= ((Data.List.map ((Function.o f) g)) l)) ((Data.List.map f) ((Data.List.map g) l)))))) ;)

def type_22 : hol.type -> hol.type :=
  B : hol.type => hol.arr (type_4 B) type_3.

def type_23 : hol.type -> hol.type :=
  B : hol.type => hol.arr (type_22 B) type_3.

def term_31 : B : hol.type -> hol.term (hol.arr (type_23 B) type_3) :=
  B : hol.type => Data_2EBool_2E_21 (hol.arr (type_23 B) type_3).

def type_24 : hol.type -> hol.type :=
  B : hol.type => hol.arr (type_22 B) (type_10 B).

(; Constant Data.List.all ;)

Data_2EList_2Eall : A : hol.type -> hol.term (type_0 A).

def term_32 : B : hol.type -> p_1 : hol.term (type_22 B) -> hol.term (type_22 B) :=
  B : hol.type => p_1 : hol.term (type_22 B) => p_1.

def type_25 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_0 A) type_3.

def type_26 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_25 A) (type_11 A).

def term_33 : A : hol.type -> hol.term (type_26 A) :=
  A : hol.type => Data_2EList_2Eall (type_26 A).

def term_34 : A : hol.type -> B : hol.type -> f_1 : hol.term (type_5 B A) -> p_2 : hol.term (type_22 B) -> hol.term (type_25 A) :=
  A : hol.type => B : hol.type => f_1 : hol.term (type_5 B A) => p_2 : hol.term (type_22 B) => Function_2Eo (hol.arr (type_22 B) (hol.arr (type_5 B A) (type_25 A))) (term_32 B p_2) (term_5 B A f_1).

def term_35 : A : hol.type -> B : hol.type -> hol.term type_3 :=
  A : hol.type => B : hol.type => term_31 B (p_1 : hol.term (type_22 B) => term_2 B A (f_2 : hol.term (type_5 B A) => term_10 A (l_3 : hol.term (type_1 A) => term_15 (Data_2EList_2Eall (type_24 B) (term_32 B p_1) (term_16 B A l_3 f_2)) (term_33 A (term_34 A B f_2 p_1) (term_13 A l_3))))).

(; axiom ;)

thm_9 : A : hol.type -> B : hol.type -> hol.proof (term_35 A B).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda f. (Data.Bool.! \lambda l. ((= ((Data.List.all p) ((Data.List.map f) l))) ((Data.List.all ((Function.o p) f)) l))))) ;)

(; Constant Data.List.any ;)

Data_2EList_2Eany : A : hol.type -> hol.term (type_0 A).

def term_36 : A : hol.type -> B : hol.type -> hol.term type_3 :=
  A : hol.type => B : hol.type => term_31 B (p_1 : hol.term (type_22 B) => term_2 B A (f_2 : hol.term (type_5 B A) => term_10 A (l_3 : hol.term (type_1 A) => term_15 (Data_2EList_2Eany (type_24 B) (term_32 B p_1) (term_16 B A l_3 f_2)) (Data_2EList_2Eany (type_26 A) (term_34 A B f_2 p_1) (term_13 A l_3))))).

(; axiom ;)

thm_10 : A : hol.type -> B : hol.type -> hol.proof (term_36 A B).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda f. (Data.Bool.! \lambda l. ((= ((Data.List.any p) ((Data.List.map f) l))) ((Data.List.any ((Function.o p) f)) l))))) ;)

def type_27 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_25 A) type_3.

def term_37 : A : hol.type -> hol.term (type_27 A) :=
  A : hol.type => Data_2EBool_2E_21 (type_27 A).

(; Constant Data.List.:: ;)

Data_2EList_2E_3A_3A : A : hol.type -> hol.term (type_0 A).

def term_38 : A : hol.type -> h_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => h_1 : hol.term (type_0 A) => h_1.

def term_39 : A : hol.type -> t_1 : hol.term (type_1 A) -> hol.term (type_1 A) :=
  A : hol.type => t_1 : hol.term (type_1 A) => t_1.

def term_40 : B : hol.type -> A : hol.type -> hol.term type_3 :=
  B : hol.type => A : hol.type => term_2 B A (f_1 : hol.term (type_5 B A) => term_37 A (h_2 : hol.term (type_0 A) => term_10 A (t_3 : hol.term (type_1 A) => term_3 B (term_6 B A f_1 (Data_2EList_2E_3A_3A (hol.arr (type_0 A) (type_2 A)) (term_38 A h_2) (term_39 A t_3))) (Data_2EList_2E_3A_3A (hol.arr (type_4 B) (hol.arr (type_6 B) (type_6 B))) (term_5 B A f_1 (term_38 A h_2)) (term_6 B A f_1 (term_39 A t_3)))))).

(; axiom ;)

thm_11 : B : hol.type -> A : hol.type -> hol.proof (term_40 B A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda h. (Data.Bool.! \lambda t. ((= ((Data.List.map f) ((Data.List.:: h) t))) ((Data.List.:: (f h)) ((Data.List.map f) t)))))) ;)

(; Constant Data.List.@ ;)

Data_2EList_2E_40 : A : hol.type -> hol.term (type_0 A).

def term_41 : A : hol.type -> l1_1 : hol.term (type_1 A) -> hol.term (type_1 A) :=
  A : hol.type => l1_1 : hol.term (type_1 A) => l1_1.

def term_42 : A : hol.type -> l2_1 : hol.term (type_1 A) -> hol.term (type_1 A) :=
  A : hol.type => l2_1 : hol.term (type_1 A) => l2_1.

def term_43 : B : hol.type -> A : hol.type -> l1_1 : hol.term (type_1 A) -> f_2 : hol.term (type_5 B A) -> hol.term (type_6 B) :=
  B : hol.type => A : hol.type => l1_1 : hol.term (type_1 A) => f_2 : hol.term (type_5 B A) => term_6 B A f_2 (term_41 A l1_1).

def term_44 : B : hol.type -> A : hol.type -> l2_1 : hol.term (type_1 A) -> f_2 : hol.term (type_5 B A) -> hol.term (type_6 B) :=
  B : hol.type => A : hol.type => l2_1 : hol.term (type_1 A) => f_2 : hol.term (type_5 B A) => term_6 B A f_2 (term_42 A l2_1).

def term_45 : B : hol.type -> A : hol.type -> hol.term type_3 :=
  B : hol.type => A : hol.type => term_2 B A (f_1 : hol.term (type_5 B A) => term_10 A (l1_2 : hol.term (type_1 A) => term_10 A (l2_3 : hol.term (type_1 A) => term_3 B (term_6 B A f_1 (Data_2EList_2E_40 (hol.arr (type_1 A) (type_2 A)) (term_41 A l1_2) (term_42 A l2_3))) (Data_2EList_2E_40 (hol.arr (type_6 B) (hol.arr (type_6 B) (type_6 B))) (term_43 B A l1_2 f_1) (term_44 B A l2_3 f_1))))).

(; axiom ;)

thm_12 : B : hol.type -> A : hol.type -> hol.proof (term_45 B A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda l1. (Data.Bool.! \lambda l2. ((= ((Data.List.map f) ((Data.List.@ l1) l2))) ((Data.List.@ ((Data.List.map f) l1)) ((Data.List.map f) l2)))))) ;)

(; Constant Data.Bool.? ;)

Data_2EBool_2E_3F : A : hol.type -> hol.term (type_0 A).

def term_46 : B : hol.type -> hol.term (type_23 B) :=
  B : hol.type => Data_2EBool_2E_21 (type_23 B).

def term_47 : A : hol.type -> hol.term (type_27 A) :=
  A : hol.type => Data_2EBool_2E_3F (type_27 A).

def term_48 : B : hol.type -> hol.term (hol.arr (type_4 B) (type_22 B)) :=
  B : hol.type => hol.eq (type_4 B).

def term_49 : B : hol.type -> A : hol.type -> x_1 : hol.term (type_0 A) -> f_2 : hol.term (type_5 B A) -> hol.term (type_4 B) :=
  B : hol.type => A : hol.type => x_1 : hol.term (type_0 A) => f_2 : hol.term (type_5 B A) => term_5 B A f_2 (term_12 A x_1).

def term_50 : A : hol.type -> B : hol.type -> x_1 : hol.term (type_0 A) -> f_2 : hol.term (type_5 B A) -> hol.term (type_22 B) :=
  A : hol.type => B : hol.type => x_1 : hol.term (type_0 A) => f_2 : hol.term (type_5 B A) => term_48 B (term_49 B A x_1 f_2).

def term_51 : B : hol.type -> y_1 : hol.term (type_4 B) -> hol.term (type_4 B) :=
  B : hol.type => y_1 : hol.term (type_4 B) => y_1.

def term_52 : B : hol.type -> A : hol.type -> hol.term type_3 :=
  B : hol.type => A : hol.type => term_2 B A (f_1 : hol.term (type_5 B A) => term_15 (Data_2EBool_2E_21 (hol.arr (type_10 B) type_3) (ys_2 : hol.term (type_6 B) => Data_2EBool_2E_3F (type_12 A) (xs_3 : hol.term (type_1 A) => term_3 B (term_6 B A f_1 xs_3) ys_2))) (term_46 B (y_2 : hol.term (type_4 B) => term_47 A (x_3 : hol.term (type_0 A) => term_50 A B x_3 f_1 (term_51 B y_2))))).

(; axiom ;)

thm_13 : B : hol.type -> A : hol.type -> hol.proof (term_52 B A).

(; Theorem: |- (Data.Bool.! \lambda f. ((= (Data.Bool.! \lambda ys. (Data.Bool.? \lambda xs. ((= ((Data.List.map f) xs)) ys)))) (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y))))) ;)

(; Constant Data.List.member ;)

Data_2EList_2Emember : A : hol.type -> hol.term (type_0 A).

(; Constant Data.Bool./\ ;)

Data_2EBool_2E_2F_5C : A : hol.type -> hol.term (type_0 A).

def term_53 : B : hol.type -> A : hol.type -> hol.term type_3 :=
  B : hol.type => A : hol.type => term_2 B A (f_1 : hol.term (type_5 B A) => term_10 A (l_2 : hol.term (type_1 A) => term_46 B (y_3 : hol.term (type_4 B) => term_15 (Data_2EList_2Emember (hol.arr (type_4 B) (type_10 B)) (term_51 B y_3) (term_16 B A l_2 f_1)) (term_47 A (x_4 : hol.term (type_0 A) => Data_2EBool_2E_2F_5C type_13 (term_48 B (term_51 B y_3) (term_49 B A x_4 f_1)) (Data_2EList_2Emember (hol.arr (type_0 A) (type_11 A)) (term_12 A x_4) (term_13 A l_2))))))).

(; axiom ;)

thm_14 : B : hol.type -> A : hol.type -> hol.proof (term_53 B A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda l. (Data.Bool.! \lambda y. ((= ((Data.List.member y) ((Data.List.map f) l))) (Data.Bool.? \lambda x. ((Data.Bool./\ ((= y) (f x))) ((Data.List.member x) l))))))) ;)

(; Constant Data.Bool.==> ;)

Data_2EBool_2E_3D_3D_3E : A : hol.type -> hol.term (type_0 A).

def term_54 : hol.term type_13 :=
  Data_2EBool_2E_3D_3D_3E type_13.

def term_55 : B : hol.type -> A : hol.type -> hol.term type_3 :=
  B : hol.type => A : hol.type => term_2 B A (f_1 : hol.term (type_5 B A) => term_2 B A (g_2 : hol.term (type_5 B A) => term_10 A (l_3 : hol.term (type_1 A) => term_54 (term_33 A (x_4 : hol.term (type_0 A) => term_50 A B x_4 f_1 (term_25 B A g_2 (term_12 A x_4))) (term_13 A l_3)) (term_20 A B l_3 f_1 (term_29 B A l_3 g_2))))).

(; axiom ;)

thm_15 : B : hol.type -> A : hol.type -> hol.proof (term_55 B A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda l. ((Data.Bool.==> ((Data.List.all \lambda x. ((= (f x)) (g x))) l)) ((= ((Data.List.map f) l)) ((Data.List.map g) l)))))) ;)

def term_56 : A : hol.type -> y_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => y_1 : hol.term (type_0 A) => y_1.

def term_57 : B : hol.type -> A : hol.type -> hol.term type_3 :=
  B : hol.type => A : hol.type => term_2 B A (f_1 : hol.term (type_5 B A) => term_15 (term_10 A (l1_2 : hol.term (type_1 A) => term_10 A (l2_3 : hol.term (type_1 A) => term_54 (term_3 B (term_43 B A l1_2 f_1) (term_44 B A l2_3 f_1)) (term_11 A (term_41 A l1_2) (term_42 A l2_3))))) (term_37 A (x_2 : hol.term (type_0 A) => term_37 A (y_3 : hol.term (type_0 A) => term_54 (term_50 A B x_2 f_1 (term_5 B A f_1 (term_56 A y_3))) (hol.eq (type_0 A) (term_12 A x_2) (term_56 A y_3)))))).

(; axiom ;)

thm_16 : B : hol.type -> A : hol.type -> hol.proof (term_57 B A).

(; Theorem: |- (Data.Bool.! \lambda f. ((= (Data.Bool.! \lambda l1. (Data.Bool.! \lambda l2. ((Data.Bool.==> ((= ((Data.List.map f) l1)) ((Data.List.map f) l2))) ((= l1) l2))))) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (f x)) (f y))) ((= x) y)))))) ;)

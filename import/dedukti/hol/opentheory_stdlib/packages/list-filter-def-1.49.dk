
(; This file was generated by Holide. ;)

#NAME list_2Dfilter_2Ddef_2D1_2E49.

def type_0 : hol.type -> hol.type :=
  A : hol.type => A.

def type_1 : hol.type :=
  hol.bool.

def type_2 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_0 A) type_1.

def type_3 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_2 A) type_1.

(; Constant Data.Bool.! ;)

Data_2EBool_2E_21 : A : hol.type -> hol.term (type_0 A).

def term_0 : A : hol.type -> hol.term (hol.arr (type_3 A) type_1) :=
  A : hol.type => Data_2EBool_2E_21 (hol.arr (type_3 A) type_1).

Data_2EList_2Elist : hol.type -> hol.type.

def type_4 : hol.type -> hol.type :=
  A : hol.type => Data_2EList_2Elist (type_0 A).

def type_5 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_4 A) type_1.

def term_1 : A : hol.type -> hol.term (hol.arr (type_4 A) (type_5 A)) :=
  A : hol.type => hol.eq (type_4 A).

def type_6 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_2 A) (hol.arr (type_4 A) (type_4 A)).

(; Constant list-filter-def-1.49 ;)

list_2Dfilter_2Ddef_2D1_2E49 : A : hol.type -> hol.term (type_0 A).

(; Constant Data.List.filter ;)

def Data_2EList_2Efilter : A : hol.type -> hol.term (type_6 A) :=
  A : hol.type => list_2Dfilter_2Ddef_2D1_2E49 (type_6 A).

def term_2 : A : hol.type -> p_1 : hol.term (type_2 A) -> hol.term (type_2 A) :=
  A : hol.type => p_1 : hol.term (type_2 A) => p_1.

def term_3 : A : hol.type -> p_1 : hol.term (type_2 A) -> hol.term (hol.arr (type_4 A) (type_4 A)) :=
  A : hol.type => p_1 : hol.term (type_2 A) => Data_2EList_2Efilter (type_0 A) (term_2 A p_1).

(; Constant Data.List.[] ;)

Data_2EList_2E_5B_5D : A : hol.type -> hol.term (type_0 A).

def term_4 : A : hol.type -> hol.term (type_4 A) :=
  A : hol.type => Data_2EList_2E_5B_5D (type_4 A).

def term_5 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_0 A (p_1 : hol.term (type_2 A) => term_1 A (term_3 A p_1 (term_4 A)) (term_4 A)).

(; axiom ;)

thm_0 : A : hol.type -> hol.proof (term_5 A).

(; Theorem: |- (Data.Bool.! \lambda p. ((= ((Data.List.filter p) Data.List.[])) Data.List.[])) ;)

(; Constant Data.List.:: ;)

Data_2EList_2E_3A_3A : A : hol.type -> hol.term (type_0 A).

def term_6 : A : hol.type -> h_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => h_1 : hol.term (type_0 A) => h_1.

def term_7 : A : hol.type -> h_1 : hol.term (type_0 A) -> hol.term (hol.arr (type_4 A) (type_4 A)) :=
  A : hol.type => h_1 : hol.term (type_0 A) => Data_2EList_2E_3A_3A (hol.arr (type_0 A) (hol.arr (type_4 A) (type_4 A))) (term_6 A h_1).

def term_8 : A : hol.type -> t_1 : hol.term (type_4 A) -> hol.term (type_4 A) :=
  A : hol.type => t_1 : hol.term (type_4 A) => t_1.

(; Constant Data.Bool.cond ;)

Data_2EBool_2Econd : A : hol.type -> hol.term (type_0 A).

def term_9 : A : hol.type -> t_1 : hol.term (type_4 A) -> p_2 : hol.term (type_2 A) -> hol.term (type_4 A) :=
  A : hol.type => t_1 : hol.term (type_4 A) => p_2 : hol.term (type_2 A) => term_3 A p_2 (term_8 A t_1).

def term_10 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_0 A (p_1 : hol.term (type_2 A) => Data_2EBool_2E_21 (type_3 A) (h_2 : hol.term (type_0 A) => Data_2EBool_2E_21 (hol.arr (type_5 A) type_1) (t_3 : hol.term (type_4 A) => term_1 A (term_3 A p_1 (term_7 A h_2 (term_8 A t_3))) (Data_2EBool_2Econd (hol.arr type_1 (hol.arr (type_4 A) (hol.arr (type_4 A) (type_4 A)))) (term_2 A p_1 (term_6 A h_2)) (term_7 A h_2 (term_9 A t_3 p_1)) (term_9 A t_3 p_1))))).

(; axiom ;)

thm_1 : A : hol.type -> hol.proof (term_10 A).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda h. (Data.Bool.! \lambda t. ((= ((Data.List.filter p) ((Data.List.:: h) t))) (((Data.Bool.cond (p h)) ((Data.List.:: h) ((Data.List.filter p) t))) ((Data.List.filter p) t)))))) ;)

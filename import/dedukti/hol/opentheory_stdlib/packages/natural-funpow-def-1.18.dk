
(; This file was generated by Holide. ;)

#NAME natural_2Dfunpow_2Ddef_2D1_2E18.

def type_0 : hol.type -> hol.type :=
  A : hol.type => A.

def type_1 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_0 A) (type_0 A).

def type_2 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_1 A) hol.bool.

(; Constant Data.Bool.! ;)

Data_2EBool_2E_21 : A : hol.type -> hol.term (type_0 A).

def term_0 : A : hol.type -> hol.term (hol.arr (type_2 A) hol.bool) :=
  A : hol.type => Data_2EBool_2E_21 (hol.arr (type_2 A) hol.bool).

def term_1 : A : hol.type -> hol.term (hol.arr (type_1 A) (type_2 A)) :=
  A : hol.type => hol.eq (type_1 A).

Number_2ENatural_2Enatural : hol.type.

def type_3 : hol.type :=
  Number_2ENatural_2Enatural.

def type_4 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_1 A) (hol.arr type_3 (type_1 A)).

(; Constant natural-funpow-def-1.18 ;)

natural_2Dfunpow_2Ddef_2D1_2E18 : A : hol.type -> hol.term (type_0 A).

(; Constant Function.^ ;)

def Function_2E_5E : A : hol.type -> hol.term (type_4 A) :=
  A : hol.type => natural_2Dfunpow_2Ddef_2D1_2E18 (type_4 A).

def term_2 : A : hol.type -> f_1 : hol.term (type_1 A) -> hol.term (type_1 A) :=
  A : hol.type => f_1 : hol.term (type_1 A) => f_1.

def term_3 : A : hol.type -> f_1 : hol.term (type_1 A) -> hol.term (hol.arr type_3 (type_1 A)) :=
  A : hol.type => f_1 : hol.term (type_1 A) => Function_2E_5E (type_0 A) (term_2 A f_1).

(; Constant Number.Natural.zero ;)

Number_2ENatural_2Ezero : A : hol.type -> hol.term (type_0 A).

(; Constant Function.id ;)

Function_2Eid : A : hol.type -> hol.term (type_0 A).

def term_4 : A : hol.type -> hol.term hol.bool :=
  A : hol.type => term_0 A (f_1 : hol.term (type_1 A) => term_1 A (term_3 A f_1 (Number_2ENatural_2Ezero type_3)) (Function_2Eid (type_1 A))).

(; axiom ;)

thm_0 : A : hol.type -> hol.proof (term_4 A).

(; Theorem: |- (Data.Bool.! \lambda f. ((= ((Function.^ f) Number.Natural.zero)) Function.id)) ;)

(; Constant Number.Natural.suc ;)

Number_2ENatural_2Esuc : A : hol.type -> hol.term (type_0 A).

def term_5 : n_1 : hol.term type_3 -> hol.term type_3 :=
  n_1 : hol.term type_3 => n_1.

(; Constant Function.o ;)

Function_2Eo : A : hol.type -> hol.term (type_0 A).

def term_6 : A : hol.type -> hol.term hol.bool :=
  A : hol.type => term_0 A (f_1 : hol.term (type_1 A) => Data_2EBool_2E_21 (hol.arr (hol.arr type_3 hol.bool) hol.bool) (n_2 : hol.term type_3 => term_1 A (term_3 A f_1 (Number_2ENatural_2Esuc (hol.arr type_3 type_3) (term_5 n_2))) (Function_2Eo (hol.arr (type_1 A) (hol.arr (type_1 A) (type_1 A))) (term_2 A f_1) (term_3 A f_1 (term_5 n_2))))).

(; axiom ;)

thm_1 : A : hol.type -> hol.proof (term_6 A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda n. ((= ((Function.^ f) (Number.Natural.suc n))) ((Function.o f) ((Function.^ f) n))))) ;)

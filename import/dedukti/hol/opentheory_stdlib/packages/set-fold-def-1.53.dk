
(; This file was generated by Holide. ;)

#NAME set_2Dfold_2Ddef_2D1_2E53.

def type_0 : hol.type -> hol.type :=
  A : hol.type => A.

def type_1 : hol.type -> hol.type :=
  B : hol.type => B.

def type_2 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_0 A) (hol.arr (type_1 B) (type_1 B)).

def type_3 : hol.type :=
  hol.bool.

(; Constant Data.Bool.! ;)

Data_2EBool_2E_21 : A : hol.type -> hol.term (type_0 A).

def type_4 : hol.type -> hol.type :=
  B : hol.type => hol.arr (type_1 B) type_3.

def term_0 : B : hol.type -> hol.term (hol.arr (type_4 B) type_3) :=
  B : hol.type => Data_2EBool_2E_21 (hol.arr (type_4 B) type_3).

def type_5 : hol.type :=
  hol.arr type_3 type_3.

def type_6 : hol.type :=
  hol.arr type_3 type_5.

(; Constant Data.Bool.==> ;)

Data_2EBool_2E_3D_3D_3E : A : hol.type -> hol.term (type_0 A).

def term_1 : hol.term type_6 :=
  Data_2EBool_2E_3D_3D_3E type_6.

def type_7 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_0 A) type_3.

def term_2 : A : hol.type -> hol.term (hol.arr (type_7 A) type_3) :=
  A : hol.type => Data_2EBool_2E_21 (hol.arr (type_7 A) type_3).

(; Constant Data.Bool.~ ;)

Data_2EBool_2E_7E : A : hol.type -> hol.term (type_0 A).

def term_3 : A : hol.type -> x_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => x_1 : hol.term (type_0 A) => x_1.

def term_4 : A : hol.type -> y_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => y_1 : hol.term (type_0 A) => y_1.

def term_5 : B : hol.type -> hol.term (hol.arr (type_1 B) (type_4 B)) :=
  B : hol.type => hol.eq (type_1 B).

def term_6 : B : hol.type -> A : hol.type -> f_1 : hol.term (type_2 B A) -> hol.term (type_2 B A) :=
  B : hol.type => A : hol.type => f_1 : hol.term (type_2 B A) => f_1.

def term_7 : B : hol.type -> A : hol.type -> x_1 : hol.term (type_0 A) -> f_2 : hol.term (type_2 B A) -> hol.term (hol.arr (type_1 B) (type_1 B)) :=
  B : hol.type => A : hol.type => x_1 : hol.term (type_0 A) => f_2 : hol.term (type_2 B A) => term_6 B A f_2 (term_3 A x_1).

def term_8 : B : hol.type -> A : hol.type -> y_1 : hol.term (type_0 A) -> f_2 : hol.term (type_2 B A) -> hol.term (hol.arr (type_1 B) (type_1 B)) :=
  B : hol.type => A : hol.type => y_1 : hol.term (type_0 A) => f_2 : hol.term (type_2 B A) => term_6 B A f_2 (term_4 A y_1).

def term_9 : B : hol.type -> s_1 : hol.term (type_1 B) -> hol.term (type_1 B) :=
  B : hol.type => s_1 : hol.term (type_1 B) => s_1.

(; Constant Data.Bool./\ ;)

Data_2EBool_2E_2F_5C : A : hol.type -> hol.term (type_0 A).

Set_2Eset : hol.type -> hol.type.

def type_8 : hol.type -> hol.type :=
  A : hol.type => Set_2Eset (type_0 A).

def type_9 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_2 B A) (hol.arr (type_1 B) (hol.arr (type_8 A) (type_1 B))).

(; Constant set-fold-def-1.53 ;)

set_2Dfold_2Ddef_2D1_2E53 : A : hol.type -> hol.term (type_0 A).

(; Constant Set.fold ;)

def Set_2Efold : B : hol.type -> A : hol.type -> hol.term (type_9 B A) :=
  B : hol.type => A : hol.type => set_2Dfold_2Ddef_2D1_2E53 (type_9 B A).

def term_10 : B : hol.type -> b_1 : hol.term (type_1 B) -> hol.term (type_1 B) :=
  B : hol.type => b_1 : hol.term (type_1 B) => b_1.

def term_11 : B : hol.type -> A : hol.type -> b_1 : hol.term (type_1 B) -> f_2 : hol.term (type_2 B A) -> hol.term (hol.arr (type_8 A) (type_1 B)) :=
  B : hol.type => A : hol.type => b_1 : hol.term (type_1 B) => f_2 : hol.term (type_2 B A) => Set_2Efold (type_1 B) (type_0 A) (term_6 B A f_2) (term_10 B b_1).

(; Constant Set.{} ;)

Set_2E_7B_7D : A : hol.type -> hol.term (type_0 A).

def type_10 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_8 A) type_3.

(; Constant Set.finite ;)

Set_2Efinite : A : hol.type -> hol.term (type_0 A).

def term_12 : A : hol.type -> s_1 : hol.term (type_8 A) -> hol.term (type_8 A) :=
  A : hol.type => s_1 : hol.term (type_8 A) => s_1.

(; Constant Set.insert ;)

Set_2Einsert : A : hol.type -> hol.term (type_0 A).

(; Constant Data.Bool.cond ;)

Data_2EBool_2Econd : A : hol.type -> hol.term (type_0 A).

(; Constant Set.member ;)

Set_2Emember : A : hol.type -> hol.term (type_0 A).

def term_13 : B : hol.type -> A : hol.type -> s_1 : hol.term (type_8 A) -> b_2 : hol.term (type_1 B) -> f_3 : hol.term (type_2 B A) -> hol.term (type_1 B) :=
  B : hol.type => A : hol.type => s_1 : hol.term (type_8 A) => b_2 : hol.term (type_1 B) => f_3 : hol.term (type_2 B A) => term_11 B A b_2 f_3 (term_12 A s_1).

def term_14 : B : hol.type -> A : hol.type -> hol.term type_3 :=
  B : hol.type => A : hol.type => Data_2EBool_2E_21 (hol.arr (hol.arr (type_2 B A) type_3) type_3) (f_1 : hol.term (type_2 B A) => term_0 B (b_2 : hol.term (type_1 B) => term_1 (term_2 A (x_3 : hol.term (type_0 A) => term_2 A (y_4 : hol.term (type_0 A) => term_0 B (s_5 : hol.term (type_1 B) => term_1 (Data_2EBool_2E_7E type_5 (hol.eq (type_0 A) (term_3 A x_3) (term_4 A y_4))) (term_5 B (term_7 B A x_3 f_1 (term_8 B A y_4 f_1 (term_9 B s_5))) (term_8 B A y_4 f_1 (term_7 B A x_3 f_1 (term_9 B s_5)))))))) (Data_2EBool_2E_2F_5C type_6 (term_5 B (term_11 B A b_2 f_1 (Set_2E_7B_7D (type_8 A))) (term_10 B b_2)) (term_2 A (x_3 : hol.term (type_0 A) => Data_2EBool_2E_21 (hol.arr (type_10 A) type_3) (s_4 : hol.term (type_8 A) => term_1 (Set_2Efinite (type_10 A) (term_12 A s_4)) (term_5 B (term_11 B A b_2 f_1 (Set_2Einsert (hol.arr (type_0 A) (hol.arr (type_8 A) (type_8 A))) (term_3 A x_3) (term_12 A s_4))) (Data_2EBool_2Econd (hol.arr type_3 (hol.arr (type_1 B) (hol.arr (type_1 B) (type_1 B)))) (Set_2Emember (hol.arr (type_0 A) (type_10 A)) (term_3 A x_3) (term_12 A s_4)) (term_13 B A s_4 b_2 f_1) (term_7 B A x_3 f_1 (term_13 B A s_4 b_2 f_1)))))))))).

(; axiom ;)

thm_0 : B : hol.type -> A : hol.type -> hol.proof (term_14 B A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda b. ((Data.Bool.==> (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. (Data.Bool.! \lambda s. ((Data.Bool.==> (Data.Bool.~ ((= x) y))) ((= ((f x) ((f y) s))) ((f y) ((f x) s)))))))) ((Data.Bool./\ ((= (((Set.fold f) b) Set.{})) b)) (Data.Bool.! \lambda x. (Data.Bool.! \lambda s. ((Data.Bool.==> (Set.finite s)) ((= (((Set.fold f) b) ((Set.insert x) s))) (((Data.Bool.cond ((Set.member x) s)) (((Set.fold f) b) s)) ((f x) (((Set.fold f) b) s))))))))))) ;)

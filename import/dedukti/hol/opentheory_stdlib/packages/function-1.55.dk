
(; This file was generated by Holide. ;)

#NAME function_2D1_2E55.

def type_0 : hol.type -> hol.type :=
  A : hol.type => A.

def type_1 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_0 A) (type_0 A).

def type_2 : hol.type :=
  hol.bool.

def term_0 : A : hol.type -> hol.term (hol.arr (type_1 A) (hol.arr (type_1 A) type_2)) :=
  A : hol.type => hol.eq (type_1 A).

(; Constant function-1.55 ;)

function_2D1_2E55 : A : hol.type -> hol.term (type_0 A).

(; Constant Function.id ;)

def Function_2Eid : A : hol.type -> hol.term (type_1 A) :=
  A : hol.type => function_2D1_2E55 (type_1 A).

def term_1 : A : hol.type -> hol.term (type_1 A) :=
  A : hol.type => Function_2Eid (type_0 A).

def term_2 : A : hol.type -> x_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => x_1 : hol.term (type_0 A) => x_1.

def term_3 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_0 A (term_1 A) (x_1 : hol.term (type_0 A) => term_2 A x_1).

(; axiom ;)

thm_0 : A : hol.type -> hol.proof (term_3 A).

(; Theorem: |- ((= Function.id) \lambda x. x) ;)

def type_3 : hol.type -> hol.type :=
  B : hol.type => B.

def type_4 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_0 A) (hol.arr (type_3 B) (type_0 A)).

(; Constant Function.const ;)

def Function_2Econst : B : hol.type -> A : hol.type -> hol.term (type_4 B A) :=
  B : hol.type => A : hol.type => function_2D1_2E55 (type_4 B A).

def term_4 : B : hol.type -> A : hol.type -> hol.term (type_4 B A) :=
  B : hol.type => A : hol.type => Function_2Econst (type_3 B) (type_0 A).

def term_5 : B : hol.type -> A : hol.type -> hol.term type_2 :=
  B : hol.type => A : hol.type => hol.eq (type_4 B A) (term_4 B A) (x_1 : hol.term (type_0 A) => y_2 : hol.term (type_3 B) => term_2 A x_1).

(; axiom ;)

thm_1 : B : hol.type -> A : hol.type -> hol.proof (term_5 B A).

(; Theorem: |- ((= Function.const) \lambda x. \lambda y. x) ;)

def type_5 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_0 A) type_2.

def type_6 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_5 A) type_2.

(; Constant Data.Bool.! ;)

Data_2EBool_2E_21 : A : hol.type -> hol.term (type_0 A).

def term_6 : A : hol.type -> hol.term (type_6 A) :=
  A : hol.type => Data_2EBool_2E_21 (type_6 A).

def term_7 : A : hol.type -> hol.term (hol.arr (type_0 A) (type_5 A)) :=
  A : hol.type => hol.eq (type_0 A).

def term_8 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_6 A (x_1 : hol.term (type_0 A) => term_7 A (term_1 A (term_2 A x_1)) (term_2 A x_1)).

(; axiom ;)

thm_2 : A : hol.type -> hol.proof (term_8 A).

(; Theorem: |- (Data.Bool.! \lambda x. ((= (Function.id x)) x)) ;)

def type_7 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_0 A) (type_3 B).

def type_8 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_0 A) (type_7 B A).

def type_9 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_8 B A) (type_7 B A).

(; Constant Function.Combinator.w ;)

def Function_2ECombinator_2Ew : B : hol.type -> A : hol.type -> hol.term (type_9 B A) :=
  B : hol.type => A : hol.type => function_2D1_2E55 (type_9 B A).

def term_9 : B : hol.type -> A : hol.type -> hol.term (type_9 B A) :=
  B : hol.type => A : hol.type => Function_2ECombinator_2Ew (type_3 B) (type_0 A).

def term_10 : B : hol.type -> A : hol.type -> f_1 : hol.term (type_8 B A) -> hol.term (type_8 B A) :=
  B : hol.type => A : hol.type => f_1 : hol.term (type_8 B A) => f_1.

def term_11 : B : hol.type -> A : hol.type -> x_1 : hol.term (type_0 A) -> f_2 : hol.term (type_8 B A) -> hol.term (type_3 B) :=
  B : hol.type => A : hol.type => x_1 : hol.term (type_0 A) => f_2 : hol.term (type_8 B A) => term_10 B A f_2 (term_2 A x_1) (term_2 A x_1).

def term_12 : B : hol.type -> A : hol.type -> hol.term type_2 :=
  B : hol.type => A : hol.type => hol.eq (type_9 B A) (term_9 B A) (f_1 : hol.term (type_8 B A) => x_2 : hol.term (type_0 A) => term_11 B A x_2 f_1).

(; axiom ;)

thm_3 : B : hol.type -> A : hol.type -> hol.proof (term_12 B A).

(; Theorem: |- ((= Function.Combinator.w) \lambda f. \lambda x. ((f x) x)) ;)

def type_10 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_7 B A) type_2.

def type_11 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_10 B A) type_2.

def term_13 : B : hol.type -> A : hol.type -> hol.term (type_11 B A) :=
  B : hol.type => A : hol.type => Data_2EBool_2E_21 (type_11 B A).

def type_12 : hol.type -> hol.type :=
  C : hol.type => C.

def type_13 : hol.type -> hol.type -> hol.type :=
  C : hol.type => B : hol.type => hol.arr (type_3 B) (type_12 C).

def type_14 : hol.type -> hol.type -> hol.type -> hol.type :=
  C : hol.type => B : hol.type => A : hol.type => hol.arr (type_0 A) (type_13 C B).

def type_15 : hol.type -> hol.type -> hol.type :=
  C : hol.type => A : hol.type => hol.arr (type_0 A) (type_12 C).

def type_16 : hol.type -> hol.type -> hol.type -> hol.type :=
  C : hol.type => B : hol.type => A : hol.type => hol.arr (type_14 C B A) (hol.arr (type_7 B A) (type_15 C A)).

(; Constant Function.Combinator.s ;)

def Function_2ECombinator_2Es : C : hol.type -> B : hol.type -> A : hol.type -> hol.term (type_16 C B A) :=
  C : hol.type => B : hol.type => A : hol.type => function_2D1_2E55 (type_16 C B A).

def term_14 : B : hol.type -> A : hol.type -> hol.term type_2 :=
  B : hol.type => A : hol.type => term_13 B A (x_1 : hol.term (type_7 B A) => term_0 A (Function_2ECombinator_2Es (type_0 A) (type_3 B) (type_0 A) (term_4 B A) x_1) (term_1 A)).

(; axiom ;)

thm_4 : B : hol.type -> A : hol.type -> hol.proof (term_14 B A).

(; Theorem: |- (Data.Bool.! \lambda x. ((= ((Function.Combinator.s Function.const) x)) Function.id)) ;)

def term_15 : B : hol.type -> A : hol.type -> hol.term (hol.arr (type_7 B A) (type_10 B A)) :=
  B : hol.type => A : hol.type => hol.eq (type_7 B A).

def type_17 : hol.type -> hol.type -> hol.type -> hol.type :=
  A : hol.type => C : hol.type => B : hol.type => hol.arr (type_13 C B) (hol.arr (type_7 B A) (type_15 C A)).

(; Constant Function.o ;)

def Function_2Eo : A : hol.type -> C : hol.type -> B : hol.type -> hol.term (type_17 A C B) :=
  A : hol.type => C : hol.type => B : hol.type => function_2D1_2E55 (type_17 A C B).

def term_16 : B : hol.type -> A : hol.type -> f_1 : hol.term (type_7 B A) -> hol.term (type_7 B A) :=
  B : hol.type => A : hol.type => f_1 : hol.term (type_7 B A) => f_1.

def term_17 : B : hol.type -> A : hol.type -> hol.term type_2 :=
  B : hol.type => A : hol.type => term_13 B A (f_1 : hol.term (type_7 B A) => term_15 B A (Function_2Eo (type_0 A) (type_3 B) (type_0 A) (term_16 B A f_1) (term_1 A)) (term_16 B A f_1)).

(; axiom ;)

thm_5 : B : hol.type -> A : hol.type -> hol.proof (term_17 B A).

(; Theorem: |- (Data.Bool.! \lambda f. ((= ((Function.o f) Function.id)) f)) ;)

def type_18 : hol.type -> hol.type :=
  B : hol.type => hol.arr (type_3 B) (type_3 B).

def term_18 : B : hol.type -> A : hol.type -> hol.term type_2 :=
  B : hol.type => A : hol.type => term_13 B A (f_1 : hol.term (type_7 B A) => term_15 B A (Function_2Eo (type_0 A) (type_3 B) (type_3 B) (Function_2Eid (type_3 B)) (term_16 B A f_1)) (term_16 B A f_1)).

(; axiom ;)

thm_6 : B : hol.type -> A : hol.type -> hol.proof (term_18 B A).

(; Theorem: |- (Data.Bool.! \lambda f. ((= ((Function.o Function.id) f)) f)) ;)

def type_19 : hol.type -> hol.type -> hol.type -> hol.type :=
  C : hol.type => B : hol.type => A : hol.type => hol.arr (type_14 C B A) type_2.

def term_19 : C : hol.type -> B : hol.type -> A : hol.type -> hol.term (hol.arr (type_19 C B A) type_2) :=
  C : hol.type => B : hol.type => A : hol.type => Data_2EBool_2E_21 (hol.arr (type_19 C B A) type_2).

def type_20 : hol.type -> hol.type -> hol.type -> hol.type :=
  C : hol.type => A : hol.type => B : hol.type => hol.arr (type_3 B) (type_15 C A).

def type_21 : hol.type -> hol.type -> hol.type -> hol.type :=
  C : hol.type => B : hol.type => A : hol.type => hol.arr (type_14 C B A) (type_20 C A B).

(; Constant Function.flip ;)

def Function_2Eflip : C : hol.type -> B : hol.type -> A : hol.type -> hol.term (type_21 C B A) :=
  C : hol.type => B : hol.type => A : hol.type => function_2D1_2E55 (type_21 C B A).

def term_20 : C : hol.type -> B : hol.type -> A : hol.type -> hol.term (type_21 C B A) :=
  C : hol.type => B : hol.type => A : hol.type => Function_2Eflip (type_12 C) (type_3 B) (type_0 A).

def term_21 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (type_14 C B A) -> hol.term (type_14 C B A) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (type_14 C B A) => f_1.

def term_22 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (type_14 C B A) -> hol.term (type_20 C A B) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (type_14 C B A) => term_20 C B A (term_21 C B A f_1).

def term_23 : C : hol.type -> B : hol.type -> A : hol.type -> hol.term type_2 :=
  C : hol.type => B : hol.type => A : hol.type => term_19 C B A (f_1 : hol.term (type_14 C B A) => hol.eq (type_14 C B A) (Function_2Eflip (type_12 C) (type_0 A) (type_3 B) (term_22 C B A f_1)) (term_21 C B A f_1)).

(; axiom ;)

thm_7 : C : hol.type -> B : hol.type -> A : hol.type -> hol.proof (term_23 C B A).

(; Theorem: |- (Data.Bool.! \lambda f. ((= (Function.flip (Function.flip f))) f)) ;)

def term_24 : A : hol.type -> C : hol.type -> B : hol.type -> hol.term (type_17 A C B) :=
  A : hol.type => C : hol.type => B : hol.type => Function_2Eo (type_0 A) (type_12 C) (type_3 B).

def term_25 : C : hol.type -> B : hol.type -> f_1 : hol.term (type_13 C B) -> hol.term (type_13 C B) :=
  C : hol.type => B : hol.type => f_1 : hol.term (type_13 C B) => f_1.

def term_26 : B : hol.type -> A : hol.type -> g_1 : hol.term (type_7 B A) -> hol.term (type_7 B A) :=
  B : hol.type => A : hol.type => g_1 : hol.term (type_7 B A) => g_1.

def term_27 : B : hol.type -> A : hol.type -> x_1 : hol.term (type_0 A) -> g_2 : hol.term (type_7 B A) -> hol.term (type_3 B) :=
  B : hol.type => A : hol.type => x_1 : hol.term (type_0 A) => g_2 : hol.term (type_7 B A) => term_26 B A g_2 (term_2 A x_1).

def term_28 : A : hol.type -> C : hol.type -> B : hol.type -> x_1 : hol.term (type_0 A) -> g_2 : hol.term (type_7 B A) -> f_3 : hol.term (type_13 C B) -> hol.term (type_12 C) :=
  A : hol.type => C : hol.type => B : hol.type => x_1 : hol.term (type_0 A) => g_2 : hol.term (type_7 B A) => f_3 : hol.term (type_13 C B) => term_25 C B f_3 (term_27 B A x_1 g_2).

def term_29 : A : hol.type -> C : hol.type -> B : hol.type -> hol.term type_2 :=
  A : hol.type => C : hol.type => B : hol.type => hol.eq (type_17 A C B) (term_24 A C B) (f_1 : hol.term (type_13 C B) => g_2 : hol.term (type_7 B A) => x_3 : hol.term (type_0 A) => term_28 A C B x_3 g_2 f_1).

(; axiom ;)

thm_8 : A : hol.type -> C : hol.type -> B : hol.type -> hol.proof (term_29 A C B).

(; Theorem: |- ((= Function.o) \lambda f. \lambda g. \lambda x. (f (g x))) ;)

def term_30 : A : hol.type -> y_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => y_1 : hol.term (type_0 A) => y_1.

def term_31 : B : hol.type -> x_1 : hol.term (type_3 B) -> hol.term (type_3 B) :=
  B : hol.type => x_1 : hol.term (type_3 B) => x_1.

def term_32 : C : hol.type -> B : hol.type -> A : hol.type -> x_1 : hol.term (type_3 B) -> y_2 : hol.term (type_0 A) -> f_3 : hol.term (type_14 C B A) -> hol.term (type_12 C) :=
  C : hol.type => B : hol.type => A : hol.type => x_1 : hol.term (type_3 B) => y_2 : hol.term (type_0 A) => f_3 : hol.term (type_14 C B A) => term_21 C B A f_3 (term_30 A y_2) (term_31 B x_1).

def term_33 : C : hol.type -> B : hol.type -> A : hol.type -> hol.term type_2 :=
  C : hol.type => B : hol.type => A : hol.type => hol.eq (type_21 C B A) (term_20 C B A) (f_1 : hol.term (type_14 C B A) => x_2 : hol.term (type_3 B) => y_3 : hol.term (type_0 A) => term_32 C B A x_2 y_3 f_1).

(; axiom ;)

thm_9 : C : hol.type -> B : hol.type -> A : hol.type -> hol.proof (term_33 C B A).

(; Theorem: |- ((= Function.flip) \lambda f. \lambda x. \lambda y. ((f y) x)) ;)

def term_34 : C : hol.type -> B : hol.type -> A : hol.type -> hol.term (type_16 C B A) :=
  C : hol.type => B : hol.type => A : hol.type => Function_2ECombinator_2Es (type_12 C) (type_3 B) (type_0 A).

def term_35 : C : hol.type -> B : hol.type -> A : hol.type -> g_1 : hol.term (type_7 B A) -> x_2 : hol.term (type_0 A) -> f_3 : hol.term (type_14 C B A) -> hol.term (type_12 C) :=
  C : hol.type => B : hol.type => A : hol.type => g_1 : hol.term (type_7 B A) => x_2 : hol.term (type_0 A) => f_3 : hol.term (type_14 C B A) => term_21 C B A f_3 (term_2 A x_2) (term_27 B A x_2 g_1).

def term_36 : C : hol.type -> B : hol.type -> A : hol.type -> hol.term type_2 :=
  C : hol.type => B : hol.type => A : hol.type => hol.eq (type_16 C B A) (term_34 C B A) (f_1 : hol.term (type_14 C B A) => g_2 : hol.term (type_7 B A) => x_3 : hol.term (type_0 A) => term_35 C B A g_2 x_3 f_1).

(; axiom ;)

thm_10 : C : hol.type -> B : hol.type -> A : hol.type -> hol.proof (term_36 C B A).

(; Theorem: |- ((= Function.Combinator.s) \lambda f. \lambda g. \lambda x. ((f x) (g x))) ;)

def type_22 : hol.type -> hol.type :=
  B : hol.type => hol.arr (type_3 B) type_2.

def type_23 : hol.type -> hol.type :=
  B : hol.type => hol.arr (type_22 B) type_2.

def term_37 : B : hol.type -> hol.term (type_23 B) :=
  B : hol.type => Data_2EBool_2E_21 (type_23 B).

def term_38 : B : hol.type -> y_1 : hol.term (type_3 B) -> hol.term (type_3 B) :=
  B : hol.type => y_1 : hol.term (type_3 B) => y_1.

def term_39 : B : hol.type -> A : hol.type -> hol.term type_2 :=
  B : hol.type => A : hol.type => term_6 A (x_1 : hol.term (type_0 A) => term_37 B (y_2 : hol.term (type_3 B) => term_7 A (term_4 B A (term_2 A x_1) (term_38 B y_2)) (term_2 A x_1))).

(; axiom ;)

thm_11 : B : hol.type -> A : hol.type -> hol.proof (term_39 B A).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= ((Function.const x) y)) x))) ;)

def term_40 : B : hol.type -> hol.term (hol.arr (type_3 B) (type_22 B)) :=
  B : hol.type => hol.eq (type_3 B).

def term_41 : B : hol.type -> A : hol.type -> hol.term type_2 :=
  B : hol.type => A : hol.type => Data_2EBool_2E_21 (hol.arr (hol.arr (type_8 B A) type_2) type_2) (f_1 : hol.term (type_8 B A) => term_6 A (x_2 : hol.term (type_0 A) => term_40 B (term_9 B A (term_10 B A f_1) (term_2 A x_2)) (term_11 B A x_2 f_1))).

(; axiom ;)

thm_12 : B : hol.type -> A : hol.type -> hol.proof (term_41 B A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda x. ((= ((Function.Combinator.w f) x)) ((f x) x)))) ;)

def type_24 : hol.type :=
  hol.arr type_2 (hol.arr type_2 type_2).

def term_42 : hol.term type_24 :=
  hol.eq type_2.

def term_43 : B : hol.type -> A : hol.type -> hol.term (type_10 B A) :=
  B : hol.type => A : hol.type => function_2D1_2E55 (type_10 B A).

(; Constant Function.surjective ;)

def Function_2Esurjective : B : hol.type -> A : hol.type -> hol.term (type_10 B A) :=
  B : hol.type => A : hol.type => term_43 B A.

(; Constant Data.Bool.? ;)

Data_2EBool_2E_3F : A : hol.type -> hol.term (type_0 A).

def term_44 : A : hol.type -> hol.term (type_6 A) :=
  A : hol.type => Data_2EBool_2E_3F (type_6 A).

def term_45 : B : hol.type -> A : hol.type -> x_1 : hol.term (type_0 A) -> f_2 : hol.term (type_7 B A) -> hol.term (type_3 B) :=
  B : hol.type => A : hol.type => x_1 : hol.term (type_0 A) => f_2 : hol.term (type_7 B A) => term_16 B A f_2 (term_2 A x_1).

def term_46 : B : hol.type -> A : hol.type -> hol.term type_2 :=
  B : hol.type => A : hol.type => term_13 B A (f_1 : hol.term (type_7 B A) => term_42 (Function_2Esurjective (type_3 B) (type_0 A) (term_16 B A f_1)) (term_37 B (y_2 : hol.term (type_3 B) => term_44 A (x_3 : hol.term (type_0 A) => term_40 B (term_38 B y_2) (term_45 B A x_3 f_1))))).

(; axiom ;)

thm_13 : B : hol.type -> A : hol.type -> hol.proof (term_46 B A).

(; Theorem: |- (Data.Bool.! \lambda f. ((= (Function.surjective f)) (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= y) (f x)))))) ;)

def type_25 : hol.type -> hol.type -> hol.type :=
  C : hol.type => B : hol.type => hol.arr (hol.arr (type_13 C B) type_2) type_2.

def term_47 : C : hol.type -> B : hol.type -> hol.term (type_25 C B) :=
  C : hol.type => B : hol.type => Data_2EBool_2E_21 (type_25 C B).

def term_48 : C : hol.type -> hol.term (hol.arr (type_12 C) (hol.arr (type_12 C) type_2)) :=
  C : hol.type => hol.eq (type_12 C).

def term_49 : A : hol.type -> C : hol.type -> B : hol.type -> hol.term type_2 :=
  A : hol.type => C : hol.type => B : hol.type => term_47 C B (f_1 : hol.term (type_13 C B) => term_13 B A (g_2 : hol.term (type_7 B A) => term_6 A (x_3 : hol.term (type_0 A) => term_48 C (term_24 A C B (term_25 C B f_1) (term_26 B A g_2) (term_2 A x_3)) (term_28 A C B x_3 g_2 f_1)))).

(; axiom ;)

thm_14 : A : hol.type -> C : hol.type -> B : hol.type -> hol.proof (term_49 A C B).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= (((Function.o f) g) x)) (f (g x)))))) ;)

def term_50 : C : hol.type -> B : hol.type -> A : hol.type -> hol.term type_2 :=
  C : hol.type => B : hol.type => A : hol.type => term_19 C B A (f_1 : hol.term (type_14 C B A) => term_37 B (x_2 : hol.term (type_3 B) => term_6 A (y_3 : hol.term (type_0 A) => term_48 C (term_22 C B A f_1 (term_31 B x_2) (term_30 A y_3)) (term_32 C B A x_2 y_3 f_1)))).

(; axiom ;)

thm_15 : C : hol.type -> B : hol.type -> A : hol.type -> hol.proof (term_50 C B A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (((Function.flip f) x) y)) ((f y) x))))) ;)

def term_51 : C : hol.type -> B : hol.type -> A : hol.type -> hol.term type_2 :=
  C : hol.type => B : hol.type => A : hol.type => term_19 C B A (f_1 : hol.term (type_14 C B A) => term_13 B A (g_2 : hol.term (type_7 B A) => term_6 A (x_3 : hol.term (type_0 A) => term_48 C (term_34 C B A (term_21 C B A f_1) (term_26 B A g_2) (term_2 A x_3)) (term_35 C B A g_2 x_3 f_1)))).

(; axiom ;)

thm_16 : C : hol.type -> B : hol.type -> A : hol.type -> hol.proof (term_51 C B A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= (((Function.Combinator.s f) g) x)) ((f x) (g x)))))) ;)

def type_26 : hol.type -> hol.type -> hol.type :=
  D : hol.type => C : hol.type => hol.arr (type_12 C) D.

def term_52 : D : hol.type -> C : hol.type -> hol.term (hol.arr (hol.arr (type_26 D C) type_2) type_2) :=
  D : hol.type => C : hol.type => Data_2EBool_2E_21 (hol.arr (hol.arr (type_26 D C) type_2) type_2).

def type_27 : hol.type -> hol.type -> hol.type :=
  D : hol.type => A : hol.type => hol.arr (type_0 A) D.

def term_53 : D : hol.type -> A : hol.type -> hol.term (hol.arr (type_27 D A) (hol.arr (type_27 D A) type_2)) :=
  D : hol.type => A : hol.type => hol.eq (type_27 D A).

def term_54 : D : hol.type -> C : hol.type -> f_1 : hol.term (type_26 D C) -> hol.term (type_26 D C) :=
  D : hol.type => C : hol.type => f_1 : hol.term (type_26 D C) => f_1.

def term_55 : C : hol.type -> B : hol.type -> g_1 : hol.term (type_13 C B) -> hol.term (type_13 C B) :=
  C : hol.type => B : hol.type => g_1 : hol.term (type_13 C B) => g_1.

def term_56 : B : hol.type -> A : hol.type -> h_1 : hol.term (type_7 B A) -> hol.term (type_7 B A) :=
  B : hol.type => A : hol.type => h_1 : hol.term (type_7 B A) => h_1.

def term_57 : A : hol.type -> C : hol.type -> B : hol.type -> h_1 : hol.term (type_7 B A) -> g_2 : hol.term (type_13 C B) -> hol.term (type_15 C A) :=
  A : hol.type => C : hol.type => B : hol.type => h_1 : hol.term (type_7 B A) => g_2 : hol.term (type_13 C B) => term_24 A C B (term_55 C B g_2) (term_56 B A h_1).

def term_58 : B : hol.type -> A : hol.type -> D : hol.type -> C : hol.type -> h_1 : hol.term (type_7 B A) -> g_2 : hol.term (type_13 C B) -> f_3 : hol.term (type_26 D C) -> hol.term (type_27 D A) :=
  B : hol.type => A : hol.type => D : hol.type => C : hol.type => h_1 : hol.term (type_7 B A) => g_2 : hol.term (type_13 C B) => f_3 : hol.term (type_26 D C) => Function_2Eo (type_0 A) D (type_12 C) (term_54 D C f_3) (term_57 A C B h_1 g_2).

def type_28 : hol.type -> hol.type -> hol.type :=
  D : hol.type => B : hol.type => hol.arr (type_3 B) D.

def term_59 : C : hol.type -> A : hol.type -> D : hol.type -> B : hol.type -> h_1 : hol.term (type_7 B A) -> g_2 : hol.term (type_13 C B) -> f_3 : hol.term (type_26 D C) -> hol.term (type_27 D A) :=
  C : hol.type => A : hol.type => D : hol.type => B : hol.type => h_1 : hol.term (type_7 B A) => g_2 : hol.term (type_13 C B) => f_3 : hol.term (type_26 D C) => Function_2Eo (type_0 A) D (type_3 B) (Function_2Eo (type_3 B) D (type_12 C) (term_54 D C f_3) (term_55 C B g_2)) (term_56 B A h_1).

def term_60 : A : hol.type -> B : hol.type -> D : hol.type -> C : hol.type -> hol.term type_2 :=
  A : hol.type => B : hol.type => D : hol.type => C : hol.type => term_52 D C (f_1 : hol.term (type_26 D C) => term_47 C B (g_2 : hol.term (type_13 C B) => term_13 B A (h_3 : hol.term (type_7 B A) => term_53 D A (term_58 B A D C h_3 g_2 f_1) (term_59 C A D B h_3 g_2 f_1)))).

(; axiom ;)

thm_17 : A : hol.type -> B : hol.type -> D : hol.type -> C : hol.type -> hol.proof (term_60 A B D C).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda h. ((= ((Function.o f) ((Function.o g) h))) ((Function.o ((Function.o f) g)) h))))) ;)

def term_61 : A : hol.type -> B : hol.type -> D : hol.type -> C : hol.type -> hol.term type_2 :=
  A : hol.type => B : hol.type => D : hol.type => C : hol.type => term_52 D C (f_1 : hol.term (type_26 D C) => term_47 C B (g_2 : hol.term (type_13 C B) => term_13 B A (h_3 : hol.term (type_7 B A) => term_53 D A (term_59 C A D B h_3 g_2 f_1) (term_58 B A D C h_3 g_2 f_1)))).

(; axiom ;)

thm_18 : A : hol.type -> B : hol.type -> D : hol.type -> C : hol.type -> hol.proof (term_61 A B D C).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda h. ((= ((Function.o ((Function.o f) g)) h)) ((Function.o f) ((Function.o g) h)))))) ;)

(; Constant Function.injective ;)

def Function_2Einjective : B : hol.type -> A : hol.type -> hol.term (type_10 B A) :=
  B : hol.type => A : hol.type => term_43 B A.

(; Constant Data.Bool.==> ;)

Data_2EBool_2E_3D_3D_3E : A : hol.type -> hol.term (type_0 A).

def term_62 : hol.term type_24 :=
  Data_2EBool_2E_3D_3D_3E type_24.

def term_63 : A : hol.type -> x1_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => x1_1 : hol.term (type_0 A) => x1_1.

def term_64 : A : hol.type -> x2_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => x2_1 : hol.term (type_0 A) => x2_1.

def term_65 : B : hol.type -> A : hol.type -> hol.term type_2 :=
  B : hol.type => A : hol.type => term_13 B A (f_1 : hol.term (type_7 B A) => term_42 (Function_2Einjective (type_3 B) (type_0 A) (term_16 B A f_1)) (term_6 A (x1_2 : hol.term (type_0 A) => term_6 A (x2_3 : hol.term (type_0 A) => term_62 (term_40 B (term_16 B A f_1 (term_63 A x1_2)) (term_16 B A f_1 (term_64 A x2_3))) (term_7 A (term_63 A x1_2) (term_64 A x2_3)))))).

(; axiom ;)

thm_19 : B : hol.type -> A : hol.type -> hol.proof (term_65 B A).

(; Theorem: |- (Data.Bool.! \lambda f. ((= (Function.injective f)) (Data.Bool.! \lambda x1. (Data.Bool.! \lambda x2. ((Data.Bool.==> ((= (f x1)) (f x2))) ((= x1) x2)))))) ;)

def type_29 : hol.type -> hol.type -> hol.type :=
  C : hol.type => A : hol.type => hol.arr (type_15 C A) type_2.

def term_66 : C : hol.type -> A : hol.type -> hol.term (hol.arr (type_29 C A) type_2) :=
  C : hol.type => A : hol.type => Data_2EBool_2E_21 (hol.arr (type_29 C A) type_2).

def term_67 : B : hol.type -> hol.term (type_23 B) :=
  B : hol.type => Data_2EBool_2E_3F (type_23 B).

def term_68 : C : hol.type -> A : hol.type -> f_1 : hol.term (type_15 C A) -> hol.term (type_15 C A) :=
  C : hol.type => A : hol.type => f_1 : hol.term (type_15 C A) => f_1.

def term_69 : C : hol.type -> A : hol.type -> x_1 : hol.term (type_0 A) -> f_2 : hol.term (type_15 C A) -> hol.term (type_12 C) :=
  C : hol.type => A : hol.type => x_1 : hol.term (type_0 A) => f_2 : hol.term (type_15 C A) => term_68 C A f_2 (term_2 A x_1).

def term_70 : A : hol.type -> C : hol.type -> B : hol.type -> x_1 : hol.term (type_0 A) -> f_2 : hol.term (type_15 C A) -> g_3 : hol.term (type_13 C B) -> hol.term type_2 :=
  A : hol.type => C : hol.type => B : hol.type => x_1 : hol.term (type_0 A) => f_2 : hol.term (type_15 C A) => g_3 : hol.term (type_13 C B) => term_67 B (y_4 : hol.term (type_3 B) => term_48 C (term_55 C B g_3 (term_38 B y_4)) (term_69 C A x_1 f_2)).

def term_71 : B : hol.type -> A : hol.type -> hol.term (type_11 B A) :=
  B : hol.type => A : hol.type => Data_2EBool_2E_3F (type_11 B A).

def term_72 : C : hol.type -> A : hol.type -> f_1 : hol.term (type_15 C A) -> hol.term (type_29 C A) :=
  C : hol.type => A : hol.type => f_1 : hol.term (type_15 C A) => hol.eq (type_15 C A) (term_68 C A f_1).

def term_73 : B : hol.type -> C : hol.type -> A : hol.type -> hol.term type_2 :=
  B : hol.type => C : hol.type => A : hol.type => term_66 C A (f_1 : hol.term (type_15 C A) => term_47 C B (g_2 : hol.term (type_13 C B) => term_42 (term_6 A (x_3 : hol.term (type_0 A) => term_70 A C B x_3 f_1 g_2)) (term_71 B A (h_3 : hol.term (type_7 B A) => term_72 C A f_1 (term_57 A C B h_3 g_2))))).

(; axiom ;)

thm_20 : B : hol.type -> C : hol.type -> A : hol.type -> hol.proof (term_73 B C A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x))))) (Data.Bool.? \lambda h. ((= f) ((Function.o g) h)))))) ;)

def term_74 : A : hol.type -> B : hol.type -> f_1 : hol.term (type_7 B A) -> hol.term (hol.arr type_2 type_2) :=
  A : hol.type => B : hol.type => f_1 : hol.term (type_7 B A) => term_42 (term_37 B (y_2 : hol.term (type_3 B) => term_44 A (x_3 : hol.term (type_0 A) => term_40 B (term_45 B A x_3 f_1) (term_38 B y_2)))).

def term_75 : B : hol.type -> hol.term (hol.arr (type_23 B) type_2) :=
  B : hol.type => Data_2EBool_2E_21 (hol.arr (type_23 B) type_2).

def term_76 : B : hol.type -> p_1 : hol.term (type_22 B) -> hol.term (type_22 B) :=
  B : hol.type => p_1 : hol.term (type_22 B) => p_1.

def term_77 : B : hol.type -> A : hol.type -> f_1 : hol.term (type_7 B A) -> p_2 : hol.term (type_22 B) -> hol.term (type_5 A) :=
  B : hol.type => A : hol.type => f_1 : hol.term (type_7 B A) => p_2 : hol.term (type_22 B) => x_3 : hol.term (type_0 A) => term_76 B p_2 (term_45 B A x_3 f_1).

def term_78 : B : hol.type -> p_1 : hol.term (type_22 B) -> hol.term (type_22 B) :=
  B : hol.type => p_1 : hol.term (type_22 B) => y_2 : hol.term (type_3 B) => term_76 B p_1 (term_38 B y_2).

def term_79 : B : hol.type -> A : hol.type -> hol.term type_2 :=
  B : hol.type => A : hol.type => term_13 B A (f_1 : hol.term (type_7 B A) => term_74 A B f_1 (term_75 B (p_2 : hol.term (type_22 B) => term_42 (term_6 A (term_77 B A f_1 p_2)) (term_37 B (term_78 B p_2))))).

(; axiom ;)

thm_21 : B : hol.type -> A : hol.type -> hol.proof (term_79 B A).

(; Theorem: |- (Data.Bool.! \lambda f. ((= (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))) (Data.Bool.! \lambda p. ((= (Data.Bool.! \lambda x. (p (f x)))) (Data.Bool.! \lambda y. (p y)))))) ;)

def term_80 : B : hol.type -> A : hol.type -> hol.term type_2 :=
  B : hol.type => A : hol.type => term_13 B A (f_1 : hol.term (type_7 B A) => term_74 A B f_1 (term_75 B (p_2 : hol.term (type_22 B) => term_42 (term_44 A (term_77 B A f_1 p_2)) (term_67 B (term_78 B p_2))))).

(; axiom ;)

thm_22 : B : hol.type -> A : hol.type -> hol.proof (term_80 B A).

(; Theorem: |- (Data.Bool.! \lambda f. ((= (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))) (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda x. (p (f x)))) (Data.Bool.? \lambda y. (p y)))))) ;)

def term_81 : A : hol.type -> B : hol.type -> y_1 : hol.term (type_0 A) -> x_2 : hol.term (type_0 A) -> g_3 : hol.term (type_7 B A) -> hol.term type_2 :=
  A : hol.type => B : hol.type => y_1 : hol.term (type_0 A) => x_2 : hol.term (type_0 A) => g_3 : hol.term (type_7 B A) => term_40 B (term_27 B A x_2 g_3) (term_26 B A g_3 (term_30 A y_1)).

def term_82 : A : hol.type -> C : hol.type -> x_1 : hol.term (type_0 A) -> f_2 : hol.term (type_15 C A) -> hol.term (hol.arr (type_12 C) type_2) :=
  A : hol.type => C : hol.type => x_1 : hol.term (type_0 A) => f_2 : hol.term (type_15 C A) => term_48 C (term_69 C A x_1 f_2).

def term_83 : A : hol.type -> C : hol.type -> y_1 : hol.term (type_0 A) -> x_2 : hol.term (type_0 A) -> f_3 : hol.term (type_15 C A) -> hol.term type_2 :=
  A : hol.type => C : hol.type => y_1 : hol.term (type_0 A) => x_2 : hol.term (type_0 A) => f_3 : hol.term (type_15 C A) => term_82 A C x_2 f_3 (term_68 C A f_3 (term_30 A y_1)).

def term_84 : C : hol.type -> B : hol.type -> hol.term (type_25 C B) :=
  C : hol.type => B : hol.type => Data_2EBool_2E_3F (type_25 C B).

def term_85 : C : hol.type -> B : hol.type -> h_1 : hol.term (type_13 C B) -> hol.term (type_13 C B) :=
  C : hol.type => B : hol.type => h_1 : hol.term (type_13 C B) => h_1.

def term_86 : B : hol.type -> C : hol.type -> A : hol.type -> hol.term type_2 :=
  B : hol.type => C : hol.type => A : hol.type => term_66 C A (f_1 : hol.term (type_15 C A) => term_13 B A (g_2 : hol.term (type_7 B A) => term_42 (term_6 A (x_3 : hol.term (type_0 A) => term_6 A (y_4 : hol.term (type_0 A) => term_62 (term_81 A B y_4 x_3 g_2) (term_83 A C y_4 x_3 f_1)))) (term_84 C B (h_3 : hol.term (type_13 C B) => term_72 C A f_1 (term_24 A C B (term_85 C B h_3) (term_26 B A g_2)))))).

(; axiom ;)

thm_23 : B : hol.type -> C : hol.type -> A : hol.type -> hol.proof (term_86 B C A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. ((= f) ((Function.o h) g)))))) ;)

def term_87 : A : hol.type -> hol.term (hol.arr (type_6 A) type_2) :=
  A : hol.type => Data_2EBool_2E_21 (hol.arr (type_6 A) type_2).

def term_88 : A : hol.type -> p_1 : hol.term (type_5 A) -> hol.term (type_5 A) :=
  A : hol.type => p_1 : hol.term (type_5 A) => p_1.

def term_89 : A : hol.type -> x_1 : hol.term (type_0 A) -> p_2 : hol.term (type_5 A) -> hol.term type_2 :=
  A : hol.type => x_1 : hol.term (type_0 A) => p_2 : hol.term (type_5 A) => term_88 A p_2 (term_2 A x_1).

def term_90 : A : hol.type -> x_1 : hol.term (type_0 A) -> p_2 : hol.term (type_5 A) -> hol.term (hol.arr type_2 type_2) :=
  A : hol.type => x_1 : hol.term (type_0 A) => p_2 : hol.term (type_5 A) => term_62 (term_89 A x_1 p_2).

def term_91 : B : hol.type -> C : hol.type -> A : hol.type -> hol.term type_2 :=
  B : hol.type => C : hol.type => A : hol.type => term_87 A (p_1 : hol.term (type_5 A) => term_66 C A (f_2 : hol.term (type_15 C A) => term_47 C B (g_3 : hol.term (type_13 C B) => term_42 (term_6 A (x_4 : hol.term (type_0 A) => term_90 A x_4 p_1 (term_70 A C B x_4 f_2 g_3))) (term_71 B A (h_4 : hol.term (type_7 B A) => term_6 A (x_5 : hol.term (type_0 A) => term_90 A x_5 p_1 (term_82 A C x_5 f_2 (term_55 C B g_3 (term_56 B A h_4 (term_2 A x_5)))))))))).

(; axiom ;)

thm_24 : B : hol.type -> C : hol.type -> A : hol.type -> hol.proof (term_91 B C A).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((= (g y)) (f x)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (g (h x)))))))))) ;)

(; Constant Data.Bool./\ ;)

Data_2EBool_2E_2F_5C : A : hol.type -> hol.term (type_0 A).

def term_92 : hol.term type_24 :=
  Data_2EBool_2E_2F_5C type_24.

def term_93 : B : hol.type -> C : hol.type -> A : hol.type -> hol.term type_2 :=
  B : hol.type => C : hol.type => A : hol.type => term_87 A (p_1 : hol.term (type_5 A) => term_66 C A (f_2 : hol.term (type_15 C A) => term_13 B A (g_3 : hol.term (type_7 B A) => term_42 (term_6 A (x_4 : hol.term (type_0 A) => term_6 A (y_5 : hol.term (type_0 A) => term_62 (term_92 (term_89 A x_4 p_1) (term_92 (term_88 A p_1 (term_30 A y_5)) (term_81 A B y_5 x_4 g_3))) (term_83 A C y_5 x_4 f_2)))) (term_84 C B (h_4 : hol.term (type_13 C B) => term_6 A (x_5 : hol.term (type_0 A) => term_90 A x_5 p_1 (term_82 A C x_5 f_2 (term_85 C B h_4 (term_27 B A x_5 g_3))))))))).

(; axiom ;)

thm_25 : B : hol.type -> C : hol.type -> A : hol.type -> hol.proof (term_93 B C A).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x)))))))))) ;)

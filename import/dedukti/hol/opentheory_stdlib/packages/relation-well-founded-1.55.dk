
(; This file was generated by Holide. ;)

#NAME relation_2Dwell_2Dfounded_2D1_2E55.

def type_0 : hol.type -> hol.type :=
  A : hol.type => A.

def type_1 : hol.type :=
  hol.bool.

def type_2 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_0 A) type_1.

def type_3 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_0 A) (type_2 A).

def type_4 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_3 A) type_1.

(; Constant relation-well-founded-1.55 ;)

relation_2Dwell_2Dfounded_2D1_2E55 : A : hol.type -> hol.term (type_0 A).

(; Constant Relation.wellFounded ;)

def Relation_2EwellFounded : A : hol.type -> hol.term (type_4 A) :=
  A : hol.type => relation_2Dwell_2Dfounded_2D1_2E55 (type_4 A).

def term_0 : A : hol.type -> hol.term (type_4 A) :=
  A : hol.type => Relation_2EwellFounded (type_0 A).

(; Constant Relation.empty ;)

Relation_2Eempty : A : hol.type -> hol.term (type_0 A).

def term_1 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_0 A (Relation_2Eempty (type_3 A)).

(; axiom ;)

thm_0 : A : hol.type -> hol.proof (term_1 A).

(; Theorem: |- (Relation.wellFounded Relation.empty) ;)

(; Constant Data.Bool.! ;)

Data_2EBool_2E_21 : A : hol.type -> hol.term (type_0 A).

def term_2 : A : hol.type -> hol.term (hol.arr (type_4 A) type_1) :=
  A : hol.type => Data_2EBool_2E_21 (hol.arr (type_4 A) type_1).

def type_5 : hol.type :=
  hol.arr type_1 type_1.

def type_6 : hol.type :=
  hol.arr type_1 type_5.

(; Constant Data.Bool.==> ;)

Data_2EBool_2E_3D_3D_3E : A : hol.type -> hol.term (type_0 A).

def term_3 : hol.term type_6 :=
  Data_2EBool_2E_3D_3D_3E type_6.

def term_4 : A : hol.type -> r_1 : hol.term (type_3 A) -> hol.term (type_3 A) :=
  A : hol.type => r_1 : hol.term (type_3 A) => r_1.

def term_5 : A : hol.type -> r_1 : hol.term (type_3 A) -> hol.term type_1 :=
  A : hol.type => r_1 : hol.term (type_3 A) => term_0 A (term_4 A r_1).

(; Constant Relation.irreflexive ;)

Relation_2Eirreflexive : A : hol.type -> hol.term (type_0 A).

def term_6 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_2 A (r_1 : hol.term (type_3 A) => term_3 (term_5 A r_1) (Relation_2Eirreflexive (type_4 A) (term_4 A r_1))).

(; axiom ;)

thm_1 : A : hol.type -> hol.proof (term_6 A).

(; Theorem: |- (Data.Bool.! \lambda r. ((Data.Bool.==> (Relation.wellFounded r)) (Relation.irreflexive r))) ;)

(; Constant Data.Bool./\ ;)

Data_2EBool_2E_2F_5C : A : hol.type -> hol.term (type_0 A).

def term_7 : hol.term type_6 :=
  Data_2EBool_2E_2F_5C type_6.

(; Constant Relation.subrelation ;)

Relation_2Esubrelation : A : hol.type -> hol.term (type_0 A).

def term_8 : A : hol.type -> s_1 : hol.term (type_3 A) -> hol.term (type_3 A) :=
  A : hol.type => s_1 : hol.term (type_3 A) => s_1.

def term_9 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_2 A (r_1 : hol.term (type_3 A) => term_2 A (s_2 : hol.term (type_3 A) => term_3 (term_7 (Relation_2Esubrelation (hol.arr (type_3 A) (type_4 A)) (term_4 A r_1) (term_8 A s_2)) (term_0 A (term_8 A s_2))) (term_5 A r_1))).

(; axiom ;)

thm_2 : A : hol.type -> hol.proof (term_9 A).

(; Theorem: |- (Data.Bool.! \lambda r. (Data.Bool.! \lambda s. ((Data.Bool.==> ((Data.Bool./\ ((Relation.subrelation r) s)) (Relation.wellFounded s))) (Relation.wellFounded r)))) ;)

def type_7 : hol.type -> hol.type :=
  B : hol.type => B.

def type_8 : hol.type -> hol.type :=
  B : hol.type => hol.arr (type_7 B) type_1.

def type_9 : hol.type -> hol.type :=
  B : hol.type => hol.arr (type_7 B) (type_8 B).

def type_10 : hol.type -> hol.type :=
  B : hol.type => hol.arr (type_9 B) type_1.

def term_10 : B : hol.type -> hol.term (hol.arr (type_10 B) type_1) :=
  B : hol.type => Data_2EBool_2E_21 (hol.arr (type_10 B) type_1).

def type_11 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_0 A) (type_7 B).

def term_11 : B : hol.type -> hol.term (type_10 B) :=
  B : hol.type => Relation_2EwellFounded (type_7 B).

def term_12 : B : hol.type -> r_1 : hol.term (type_9 B) -> hol.term (type_9 B) :=
  B : hol.type => r_1 : hol.term (type_9 B) => r_1.

def term_13 : B : hol.type -> A : hol.type -> m_1 : hol.term (type_11 B A) -> hol.term (type_11 B A) :=
  B : hol.type => A : hol.type => m_1 : hol.term (type_11 B A) => m_1.

def term_14 : A : hol.type -> x_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => x_1 : hol.term (type_0 A) => x_1.

def term_15 : A : hol.type -> y_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => y_1 : hol.term (type_0 A) => y_1.

def term_16 : A : hol.type -> B : hol.type -> hol.term type_1 :=
  A : hol.type => B : hol.type => term_10 B (r_1 : hol.term (type_9 B) => Data_2EBool_2E_21 (hol.arr (hol.arr (type_11 B A) type_1) type_1) (m_2 : hol.term (type_11 B A) => term_3 (term_11 B (term_12 B r_1)) (term_0 A (x_3 : hol.term (type_0 A) => y_4 : hol.term (type_0 A) => term_12 B r_1 (term_13 B A m_2 (term_14 A x_3)) (term_13 B A m_2 (term_15 A y_4)))))).

(; axiom ;)

thm_3 : A : hol.type -> B : hol.type -> hol.proof (term_16 A B).

(; Theorem: |- (Data.Bool.! \lambda r. (Data.Bool.! \lambda m. ((Data.Bool.==> (Relation.wellFounded r)) (Relation.wellFounded \lambda x. \lambda y. ((r (m x)) (m y)))))) ;)

def term_17 : hol.term type_6 :=
  hol.eq type_1.

def term_18 : A : hol.type -> r_1 : hol.term (type_3 A) -> hol.term type_5 :=
  A : hol.type => r_1 : hol.term (type_3 A) => term_17 (term_5 A r_1).

def type_12 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_2 A) type_1.

def term_19 : A : hol.type -> hol.term (hol.arr (type_12 A) type_1) :=
  A : hol.type => Data_2EBool_2E_21 (hol.arr (type_12 A) type_1).

def term_20 : A : hol.type -> hol.term (type_12 A) :=
  A : hol.type => Data_2EBool_2E_21 (type_12 A).

def term_21 : A : hol.type -> x_1 : hol.term (type_0 A) -> y_2 : hol.term (type_0 A) -> r_3 : hol.term (type_3 A) -> hol.term type_5 :=
  A : hol.type => x_1 : hol.term (type_0 A) => y_2 : hol.term (type_0 A) => r_3 : hol.term (type_3 A) => term_3 (term_4 A r_3 (term_15 A y_2) (term_14 A x_1)).

def term_22 : A : hol.type -> p_1 : hol.term (type_2 A) -> hol.term (type_2 A) :=
  A : hol.type => p_1 : hol.term (type_2 A) => p_1.

def term_23 : A : hol.type -> y_1 : hol.term (type_0 A) -> p_2 : hol.term (type_2 A) -> hol.term type_1 :=
  A : hol.type => y_1 : hol.term (type_0 A) => p_2 : hol.term (type_2 A) => term_22 A p_2 (term_15 A y_1).

def term_24 : A : hol.type -> x_1 : hol.term (type_0 A) -> p_2 : hol.term (type_2 A) -> hol.term type_1 :=
  A : hol.type => x_1 : hol.term (type_0 A) => p_2 : hol.term (type_2 A) => term_22 A p_2 (term_14 A x_1).

def term_25 : A : hol.type -> p_1 : hol.term (type_2 A) -> hol.term (type_2 A) :=
  A : hol.type => p_1 : hol.term (type_2 A) => x_2 : hol.term (type_0 A) => term_24 A x_2 p_1.

def term_26 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_2 A (r_1 : hol.term (type_3 A) => term_18 A r_1 (term_19 A (p_2 : hol.term (type_2 A) => term_3 (term_20 A (x_3 : hol.term (type_0 A) => term_3 (term_20 A (y_4 : hol.term (type_0 A) => term_21 A x_3 y_4 r_1 (term_23 A y_4 p_2))) (term_24 A x_3 p_2))) (term_20 A (term_25 A p_2))))).

(; axiom ;)

thm_4 : A : hol.type -> hol.proof (term_26 A).

(; Theorem: |- (Data.Bool.! \lambda r. ((= (Relation.wellFounded r)) (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (p y)))) (p x)))) (Data.Bool.! \lambda x. (p x)))))) ;)

(; Constant Data.Bool.? ;)

Data_2EBool_2E_3F : A : hol.type -> hol.term (type_0 A).

def term_27 : A : hol.type -> hol.term (type_12 A) :=
  A : hol.type => Data_2EBool_2E_3F (type_12 A).

def term_28 : A : hol.type -> p_1 : hol.term (type_2 A) -> hol.term type_1 :=
  A : hol.type => p_1 : hol.term (type_2 A) => term_27 A (term_25 A p_1).

(; Constant Data.Bool.~ ;)

Data_2EBool_2E_7E : A : hol.type -> hol.term (type_0 A).

def term_29 : A : hol.type -> r_1 : hol.term (type_3 A) -> p_2 : hol.term (type_2 A) -> hol.term type_1 :=
  A : hol.type => r_1 : hol.term (type_3 A) => p_2 : hol.term (type_2 A) => term_27 A (x_3 : hol.term (type_0 A) => term_7 (term_24 A x_3 p_2) (term_20 A (y_4 : hol.term (type_0 A) => term_21 A x_3 y_4 r_1 (Data_2EBool_2E_7E type_5 (term_23 A y_4 p_2))))).

def term_30 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_2 A (r_1 : hol.term (type_3 A) => term_18 A r_1 (term_19 A (p_2 : hol.term (type_2 A) => term_17 (term_28 A p_2) (term_29 A r_1 p_2)))).

(; axiom ;)

thm_5 : A : hol.type -> hol.proof (term_30 A).

(; Theorem: |- (Data.Bool.! \lambda r. ((= (Relation.wellFounded r)) (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))))) ;)

def term_31 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_2 A (r_1 : hol.term (type_3 A) => term_18 A r_1 (term_19 A (p_2 : hol.term (type_2 A) => term_3 (term_28 A p_2) (term_29 A r_1 p_2)))).

(; axiom ;)

thm_6 : A : hol.type -> hol.proof (term_31 A).

(; Theorem: |- (Data.Bool.! \lambda r. ((= (Relation.wellFounded r)) (Data.Bool.! \lambda p. ((Data.Bool.==> (Data.Bool.? \lambda x. (p x))) (Data.Bool.? \lambda x. ((Data.Bool./\ (p x)) (Data.Bool.! \lambda y. ((Data.Bool.==> ((r y) x)) (Data.Bool.~ (p y)))))))))) ;)

def term_32 : A : hol.type -> r_1 : hol.term (type_3 A) -> hol.term type_5 :=
  A : hol.type => r_1 : hol.term (type_3 A) => term_7 (term_5 A r_1).

def term_33 : B : hol.type -> s_1 : hol.term (type_9 B) -> hol.term (type_9 B) :=
  B : hol.type => s_1 : hol.term (type_9 B) => s_1.

def term_34 : B : hol.type -> A : hol.type -> s_1 : hol.term (type_9 B) -> r_2 : hol.term (type_3 A) -> hol.term type_5 :=
  B : hol.type => A : hol.type => s_1 : hol.term (type_9 B) => r_2 : hol.term (type_3 A) => term_3 (term_32 A r_2 (term_11 B (term_33 B s_1))).

Data_2EPair_2E_2A : hol.type -> hol.type -> hol.type.

def type_13 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => Data_2EPair_2E_2A (type_0 A) (type_7 B).

def type_14 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_13 B A) type_1.

def type_15 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_13 B A) (type_14 B A).

def type_16 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_15 B A) type_1.

def term_35 : B : hol.type -> A : hol.type -> hol.term (type_16 B A) :=
  B : hol.type => A : hol.type => Relation_2EwellFounded (type_13 B A).

def term_36 : B : hol.type -> A : hol.type -> hol.term (hol.arr (type_16 B A) (type_15 B A)) :=
  B : hol.type => A : hol.type => hol.select (type_15 B A).

def term_37 : B : hol.type -> hol.term (hol.arr (type_8 B) type_1) :=
  B : hol.type => Data_2EBool_2E_21 (hol.arr (type_8 B) type_1).

def type_17 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_14 B A) type_1.

(; Constant Data.Pair., ;)

Data_2EPair_2E_2C : A : hol.type -> hol.term (type_0 A).

def term_38 : B : hol.type -> A : hol.type -> hol.term (hol.arr (type_0 A) (hol.arr (type_7 B) (type_13 B A))) :=
  B : hol.type => A : hol.type => Data_2EPair_2E_2C (hol.arr (type_0 A) (hol.arr (type_7 B) (type_13 B A))).

def term_39 : A : hol.type -> x1_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => x1_1 : hol.term (type_0 A) => x1_1.

def term_40 : B : hol.type -> y1_1 : hol.term (type_7 B) -> hol.term (type_7 B) :=
  B : hol.type => y1_1 : hol.term (type_7 B) => y1_1.

def term_41 : B : hol.type -> A : hol.type -> y1_1 : hol.term (type_7 B) -> x1_2 : hol.term (type_0 A) -> f_3 : hol.term (type_15 B A) -> hol.term (type_17 B A) :=
  B : hol.type => A : hol.type => y1_1 : hol.term (type_7 B) => x1_2 : hol.term (type_0 A) => f_3 : hol.term (type_15 B A) => hol.eq (type_14 B A) (f_3 (term_38 B A (term_39 A x1_2) (term_40 B y1_1))).

def term_42 : B : hol.type -> A : hol.type -> hol.term (hol.arr (type_17 B A) (type_14 B A)) :=
  B : hol.type => A : hol.type => hol.select (type_14 B A).

def term_43 : A : hol.type -> x2_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => x2_1 : hol.term (type_0 A) => x2_1.

def term_44 : B : hol.type -> y2_1 : hol.term (type_7 B) -> hol.term (type_7 B) :=
  B : hol.type => y2_1 : hol.term (type_7 B) => y2_1.

def term_45 : B : hol.type -> A : hol.type -> y2_1 : hol.term (type_7 B) -> x2_2 : hol.term (type_0 A) -> f_3 : hol.term (type_14 B A) -> hol.term type_5 :=
  B : hol.type => A : hol.type => y2_1 : hol.term (type_7 B) => x2_2 : hol.term (type_0 A) => f_3 : hol.term (type_14 B A) => term_17 (f_3 (term_38 B A (term_43 A x2_2) (term_44 B y2_1))).

def term_46 : A : hol.type -> x2_1 : hol.term (type_0 A) -> x1_2 : hol.term (type_0 A) -> r_3 : hol.term (type_3 A) -> hol.term type_1 :=
  A : hol.type => x2_1 : hol.term (type_0 A) => x1_2 : hol.term (type_0 A) => r_3 : hol.term (type_3 A) => term_4 A r_3 (term_39 A x1_2) (term_43 A x2_1).

def term_47 : B : hol.type -> y2_1 : hol.term (type_7 B) -> y1_2 : hol.term (type_7 B) -> s_3 : hol.term (type_9 B) -> hol.term type_1 :=
  B : hol.type => y2_1 : hol.term (type_7 B) => y1_2 : hol.term (type_7 B) => s_3 : hol.term (type_9 B) => term_33 B s_3 (term_40 B y1_2) (term_44 B y2_1).

def term_48 : B : hol.type -> A : hol.type -> hol.term type_1 :=
  B : hol.type => A : hol.type => term_2 A (r_1 : hol.term (type_3 A) => term_10 B (s_2 : hol.term (type_9 B) => term_34 B A s_2 r_1 (term_35 B A (term_36 B A (f_3 : hol.term (type_15 B A) => term_20 A (x1_4 : hol.term (type_0 A) => term_37 B (y1_5 : hol.term (type_7 B) => term_41 B A y1_5 x1_4 f_3 (term_42 B A (f_6 : hol.term (type_14 B A) => term_20 A (x2_7 : hol.term (type_0 A) => term_37 B (y2_8 : hol.term (type_7 B) => term_45 B A y2_8 x2_7 f_6 (term_7 (term_46 A x2_7 x1_4 r_1) (term_47 B y2_8 y1_5 s_2))))))))))))).

(; axiom ;)

thm_7 : B : hol.type -> A : hol.type -> hol.proof (term_48 B A).

(; Theorem: |- (Data.Bool.! \lambda r. (Data.Bool.! \lambda s. ((Data.Bool.==> ((Data.Bool./\ (Relation.wellFounded r)) (Relation.wellFounded s))) (Relation.wellFounded (select \lambda f. (Data.Bool.! \lambda x1. (Data.Bool.! \lambda y1. ((= (f ((Data.Pair., x1) y1))) (select \lambda f. (Data.Bool.! \lambda x2. (Data.Bool.! \lambda y2. ((= (f ((Data.Pair., x2) y2))) ((Data.Bool./\ ((r x1) x2)) ((s y1) y2)))))))))))))) ;)

(; Constant Data.Bool.\/ ;)

Data_2EBool_2E_5C_2F : A : hol.type -> hol.term (type_0 A).

def term_49 : A : hol.type -> x2_1 : hol.term (type_0 A) -> x1_2 : hol.term (type_0 A) -> r_3 : hol.term (type_3 A) -> hol.term type_5 :=
  A : hol.type => x2_1 : hol.term (type_0 A) => x1_2 : hol.term (type_0 A) => r_3 : hol.term (type_3 A) => Data_2EBool_2E_5C_2F type_6 (term_46 A x2_1 x1_2 r_3).

def term_50 : A : hol.type -> x2_1 : hol.term (type_0 A) -> x1_2 : hol.term (type_0 A) -> hol.term type_5 :=
  A : hol.type => x2_1 : hol.term (type_0 A) => x1_2 : hol.term (type_0 A) => term_7 (hol.eq (type_0 A) (term_39 A x1_2) (term_43 A x2_1)).

def term_51 : B : hol.type -> A : hol.type -> hol.term type_1 :=
  B : hol.type => A : hol.type => term_2 A (r_1 : hol.term (type_3 A) => term_10 B (s_2 : hol.term (type_9 B) => term_34 B A s_2 r_1 (term_35 B A (term_36 B A (f_3 : hol.term (type_15 B A) => term_20 A (x1_4 : hol.term (type_0 A) => term_37 B (y1_5 : hol.term (type_7 B) => term_41 B A y1_5 x1_4 f_3 (term_42 B A (f_6 : hol.term (type_14 B A) => term_20 A (x2_7 : hol.term (type_0 A) => term_37 B (y2_8 : hol.term (type_7 B) => term_45 B A y2_8 x2_7 f_6 (term_49 A x2_7 x1_4 r_1 (term_50 A x2_7 x1_4 (term_47 B y2_8 y1_5 s_2)))))))))))))).

(; axiom ;)

thm_8 : B : hol.type -> A : hol.type -> hol.proof (term_51 B A).

(; Theorem: |- (Data.Bool.! \lambda r. (Data.Bool.! \lambda s. ((Data.Bool.==> ((Data.Bool./\ (Relation.wellFounded r)) (Relation.wellFounded s))) (Relation.wellFounded (select \lambda f. (Data.Bool.! \lambda x1. (Data.Bool.! \lambda y1. ((= (f ((Data.Pair., x1) y1))) (select \lambda f. (Data.Bool.! \lambda x2. (Data.Bool.! \lambda y2. ((= (f ((Data.Pair., x2) y2))) ((Data.Bool.\/ ((r x1) x2)) ((Data.Bool./\ ((= x1) x2)) ((s y1) y2))))))))))))))) ;)

def type_18 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_0 A) (type_9 B).

def term_52 : B : hol.type -> A : hol.type -> s_1 : hol.term (type_18 B A) -> hol.term (type_18 B A) :=
  B : hol.type => A : hol.type => s_1 : hol.term (type_18 B A) => s_1.

def term_53 : B : hol.type -> A : hol.type -> hol.term type_1 :=
  B : hol.type => A : hol.type => term_2 A (r_1 : hol.term (type_3 A) => Data_2EBool_2E_21 (hol.arr (hol.arr (type_18 B A) type_1) type_1) (s_2 : hol.term (type_18 B A) => term_3 (term_32 A r_1 (term_20 A (a_3 : hol.term (type_0 A) => term_11 B (term_52 B A s_2 a_3)))) (term_35 B A (term_36 B A (f_3 : hol.term (type_15 B A) => term_20 A (x1_4 : hol.term (type_0 A) => term_37 B (y1_5 : hol.term (type_7 B) => term_41 B A y1_5 x1_4 f_3 (term_42 B A (f_6 : hol.term (type_14 B A) => term_20 A (x2_7 : hol.term (type_0 A) => term_37 B (y2_8 : hol.term (type_7 B) => term_45 B A y2_8 x2_7 f_6 (term_49 A x2_7 x1_4 r_1 (term_50 A x2_7 x1_4 (term_52 B A s_2 (term_39 A x1_4) (term_40 B y1_5) (term_44 B y2_8))))))))))))))).

(; axiom ;)

thm_9 : B : hol.type -> A : hol.type -> hol.proof (term_53 B A).

(; Theorem: |- (Data.Bool.! \lambda r. (Data.Bool.! \lambda s. ((Data.Bool.==> ((Data.Bool./\ (Relation.wellFounded r)) (Data.Bool.! \lambda a. (Relation.wellFounded (s a))))) (Relation.wellFounded (select \lambda f. (Data.Bool.! \lambda x1. (Data.Bool.! \lambda y1. ((= (f ((Data.Pair., x1) y1))) (select \lambda f. (Data.Bool.! \lambda x2. (Data.Bool.! \lambda y2. ((= (f ((Data.Pair., x2) y2))) ((Data.Bool.\/ ((r x1) x2)) ((Data.Bool./\ ((= x1) x2)) (((s x1) y1) y2))))))))))))))) ;)

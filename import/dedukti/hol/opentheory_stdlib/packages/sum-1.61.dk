
(; This file was generated by Holide. ;)

#NAME sum_2D1_2E61.

def type_0 : hol.type -> hol.type :=
  A : hol.type => A.

def type_1 : hol.type :=
  hol.bool.

def type_2 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_0 A) type_1.

def type_3 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_2 A) type_1.

(; Constant Data.Bool.! ;)

Data_2EBool_2E_21 : A : hol.type -> hol.term (type_0 A).

def term_0 : A : hol.type -> hol.term (type_3 A) :=
  A : hol.type => Data_2EBool_2E_21 (type_3 A).

def type_4 : hol.type :=
  hol.arr type_1 type_1.

def type_5 : hol.type -> hol.type :=
  B : hol.type => B.

def type_6 : hol.type -> hol.type -> hol.type :=
  A : hol.type => B : hol.type => hol.arr (type_5 B) (type_0 A).

def type_7 : hol.type :=
  hol.arr type_1 type_4.

def term_1 : hol.term type_7 :=
  hol.eq type_1.

(; Constant sum-1.61 ;)

sum_2D1_2E61 : A : hol.type -> hol.term (type_0 A).

def term_2 : hol.term type_1 :=
  sum_2D1_2E61 type_1.

def term_3 : A : hol.type -> B : hol.type -> hol.term type_4 :=
  A : hol.type => B : hol.type => (y_1 : hol.term (hol.arr (type_6 A B) (type_6 A B)) => term_1 term_2) (x_1 : hol.term (type_6 A B) => x_1).

(; dict ;)

thm thm_0 : A : hol.type -> B : hol.type -> hol.proof (hol.eq type_4 (term_3 A B) (term_3 A B)) :=
  A : hol.type => B : hol.type => hol.REFL type_4 (term_3 A B).

(; dict ;)

thm thm_1 : hol.proof (term_1 term_2 term_2) :=
  hol.REFL type_1 term_2.

Data_2ESum_2E_2B : hol.type -> hol.type -> hol.type.

(; Constant _ ;)

__ : B : hol.type -> A : hol.type -> hol.term (hol.arr type_1 (Data_2ESum_2E_2B (type_0 A) (type_5 B))).

(; Constant _ ;)

__ : B : hol.type -> A : hol.type -> hol.term (hol.arr (Data_2ESum_2E_2B (type_0 A) (type_5 B)) type_1).

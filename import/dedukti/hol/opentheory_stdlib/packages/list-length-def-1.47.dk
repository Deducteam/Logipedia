
(; This file was generated by Holide. ;)

#NAME list_2Dlength_2Ddef_2D1_2E47.

Number_2ENatural_2Enatural : hol.type.

def type_0 : hol.type :=
  Number_2ENatural_2Enatural.

def term_0 : hol.term (hol.arr type_0 (hol.arr type_0 hol.bool)) :=
  hol.eq type_0.

def type_1 : hol.type -> hol.type :=
  A : hol.type => A.

Data_2EList_2Elist : hol.type -> hol.type.

def type_2 : hol.type -> hol.type :=
  A : hol.type => Data_2EList_2Elist (type_1 A).

def type_3 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_2 A) type_0.

(; Constant list-length-def-1.47 ;)

list_2Dlength_2Ddef_2D1_2E47 : A : hol.type -> hol.term (type_1 A).

(; Constant Data.List.length ;)

def Data_2EList_2Elength : A : hol.type -> hol.term (type_3 A) :=
  A : hol.type => list_2Dlength_2Ddef_2D1_2E47 (type_3 A).

def term_1 : A : hol.type -> hol.term (type_3 A) :=
  A : hol.type => Data_2EList_2Elength (type_1 A).

(; Constant Data.List.[] ;)

Data_2EList_2E_5B_5D : A : hol.type -> hol.term (type_1 A).

(; Constant Number.Natural.zero ;)

Number_2ENatural_2Ezero : A : hol.type -> hol.term (type_1 A).

def term_2 : A : hol.type -> hol.term hol.bool :=
  A : hol.type => term_0 (term_1 A (Data_2EList_2E_5B_5D (type_2 A))) (Number_2ENatural_2Ezero type_0).

(; axiom ;)

thm_0 : A : hol.type -> hol.proof (term_2 A).

(; Theorem: |- ((= (Data.List.length Data.List.[])) Number.Natural.zero) ;)

(; Constant Data.Bool.! ;)

Data_2EBool_2E_21 : A : hol.type -> hol.term (type_1 A).

(; Constant Data.List.:: ;)

Data_2EList_2E_3A_3A : A : hol.type -> hol.term (type_1 A).

def term_3 : A : hol.type -> t_1 : hol.term (type_2 A) -> hol.term (type_2 A) :=
  A : hol.type => t_1 : hol.term (type_2 A) => t_1.

(; Constant Number.Natural.suc ;)

Number_2ENatural_2Esuc : A : hol.type -> hol.term (type_1 A).

def term_4 : A : hol.type -> hol.term hol.bool :=
  A : hol.type => Data_2EBool_2E_21 (hol.arr (hol.arr (type_1 A) hol.bool) hol.bool) (h_1 : hol.term (type_1 A) => Data_2EBool_2E_21 (hol.arr (hol.arr (type_2 A) hol.bool) hol.bool) (t_2 : hol.term (type_2 A) => term_0 (term_1 A (Data_2EList_2E_3A_3A (hol.arr (type_1 A) (hol.arr (type_2 A) (type_2 A))) h_1 (term_3 A t_2))) (Number_2ENatural_2Esuc (hol.arr type_0 type_0) (term_1 A (term_3 A t_2))))).

(; axiom ;)

thm_1 : A : hol.type -> hol.proof (term_4 A).

(; Theorem: |- (Data.Bool.! \lambda h. (Data.Bool.! \lambda t. ((= (Data.List.length ((Data.List.:: h) t))) (Number.Natural.suc (Data.List.length t))))) ;)

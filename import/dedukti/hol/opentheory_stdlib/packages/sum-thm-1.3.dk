
(; This file was generated by Holide. ;)

#NAME sum_2Dthm_2D1_2E3.

def type_0 : hol.type -> hol.type :=
  A : hol.type => A.

def type_1 : hol.type -> hol.type :=
  B : hol.type => B.

Data_2ESum_2E_2B : hol.type -> hol.type -> hol.type.

def type_2 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => Data_2ESum_2E_2B (type_0 A) (type_1 B).

def type_3 : hol.type :=
  hol.bool.

def type_4 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_2 B A) type_3.

(; Constant Data.Bool.! ;)

Data_2EBool_2E_21 : A : hol.type -> hol.term (type_0 A).

def term_0 : B : hol.type -> A : hol.type -> hol.term (hol.arr (type_4 B A) type_3) :=
  B : hol.type => A : hol.type => Data_2EBool_2E_21 (hol.arr (type_4 B A) type_3).

def term_1 : B : hol.type -> A : hol.type -> hol.term (hol.arr (type_2 B A) (type_4 B A)) :=
  B : hol.type => A : hol.type => hol.eq (type_2 B A).

def type_5 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_0 A) (type_2 B A).

def type_6 : hol.type -> hol.type -> hol.type :=
  A : hol.type => B : hol.type => hol.arr (type_1 B) (type_2 B A).

(; Constant Data.Sum.case.left.right ;)

Data_2ESum_2Ecase_2Eleft_2Eright : A : hol.type -> hol.term (type_0 A).

(; Constant Data.Sum.left ;)

Data_2ESum_2Eleft : A : hol.type -> hol.term (type_0 A).

def term_2 : B : hol.type -> A : hol.type -> hol.term (type_5 B A) :=
  B : hol.type => A : hol.type => Data_2ESum_2Eleft (type_5 B A).

(; Constant Data.Sum.right ;)

Data_2ESum_2Eright : A : hol.type -> hol.term (type_0 A).

def term_3 : A : hol.type -> B : hol.type -> hol.term (type_6 A B) :=
  A : hol.type => B : hol.type => Data_2ESum_2Eright (type_6 A B).

def term_4 : B : hol.type -> A : hol.type -> x_1 : hol.term (type_2 B A) -> hol.term (type_2 B A) :=
  B : hol.type => A : hol.type => x_1 : hol.term (type_2 B A) => x_1.

def term_5 : B : hol.type -> A : hol.type -> hol.term type_3 :=
  B : hol.type => A : hol.type => term_0 B A (x_1 : hol.term (type_2 B A) => term_1 B A (Data_2ESum_2Ecase_2Eleft_2Eright (hol.arr (type_5 B A) (hol.arr (type_6 A B) (hol.arr (type_2 B A) (type_2 B A)))) (term_2 B A) (term_3 A B) (term_4 B A x_1)) (term_4 B A x_1)).

(; axiom ;)

thm_0 : B : hol.type -> A : hol.type -> hol.proof (term_5 B A).

(; Theorem: |- (Data.Bool.! \lambda x. ((= (((Data.Sum.case.left.right Data.Sum.left) Data.Sum.right) x)) x)) ;)

def type_7 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_0 A) type_3.

def type_8 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_7 A) type_3.

def term_6 : A : hol.type -> hol.term (type_8 A) :=
  A : hol.type => Data_2EBool_2E_21 (type_8 A).

def type_9 : hol.type -> hol.type :=
  B : hol.type => hol.arr (type_1 B) type_3.

def type_10 : hol.type -> hol.type :=
  B : hol.type => hol.arr (type_9 B) type_3.

def term_7 : B : hol.type -> hol.term (type_10 B) :=
  B : hol.type => Data_2EBool_2E_21 (type_10 B).

def type_11 : hol.type :=
  hol.arr type_3 type_3.

(; Constant Data.Bool.~ ;)

Data_2EBool_2E_7E : A : hol.type -> hol.term (type_0 A).

def term_8 : A : hol.type -> a_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => a_1 : hol.term (type_0 A) => a_1.

def term_9 : B : hol.type -> A : hol.type -> a_1 : hol.term (type_0 A) -> hol.term (type_2 B A) :=
  B : hol.type => A : hol.type => a_1 : hol.term (type_0 A) => term_2 B A (term_8 A a_1).

def term_10 : B : hol.type -> A : hol.type -> a_1 : hol.term (type_0 A) -> hol.term (type_4 B A) :=
  B : hol.type => A : hol.type => a_1 : hol.term (type_0 A) => term_1 B A (term_9 B A a_1).

def term_11 : B : hol.type -> b_1 : hol.term (type_1 B) -> hol.term (type_1 B) :=
  B : hol.type => b_1 : hol.term (type_1 B) => b_1.

def term_12 : A : hol.type -> B : hol.type -> b_1 : hol.term (type_1 B) -> hol.term (type_2 B A) :=
  A : hol.type => B : hol.type => b_1 : hol.term (type_1 B) => term_3 A B (term_11 B b_1).

def term_13 : B : hol.type -> A : hol.type -> hol.term type_3 :=
  B : hol.type => A : hol.type => term_6 A (a_1 : hol.term (type_0 A) => term_7 B (b_2 : hol.term (type_1 B) => Data_2EBool_2E_7E type_11 (term_10 B A a_1 (term_12 A B b_2)))).

(; axiom ;)

thm_1 : B : hol.type -> A : hol.type -> hol.proof (term_13 B A).

(; Theorem: |- (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. (Data.Bool.~ ((= (Data.Sum.left a)) (Data.Sum.right b))))) ;)

def type_12 : hol.type :=
  hol.arr type_3 type_11.

def term_14 : hol.term type_12 :=
  hol.eq type_3.

def term_15 : A : hol.type -> b_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => b_1 : hol.term (type_0 A) => b_1.

def term_16 : B : hol.type -> A : hol.type -> hol.term type_3 :=
  B : hol.type => A : hol.type => term_6 A (a_1 : hol.term (type_0 A) => term_6 A (b_2 : hol.term (type_0 A) => term_14 (term_10 B A a_1 (term_2 B A (term_15 A b_2))) (hol.eq (type_0 A) (term_8 A a_1) (term_15 A b_2)))).

(; axiom ;)

thm_2 : B : hol.type -> A : hol.type -> hol.proof (term_16 B A).

(; Theorem: |- (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((= ((= (Data.Sum.left a)) (Data.Sum.left b))) ((= a) b)))) ;)

def term_17 : B : hol.type -> a_1 : hol.term (type_1 B) -> hol.term (type_1 B) :=
  B : hol.type => a_1 : hol.term (type_1 B) => a_1.

def term_18 : A : hol.type -> B : hol.type -> hol.term type_3 :=
  A : hol.type => B : hol.type => term_7 B (a_1 : hol.term (type_1 B) => term_7 B (b_2 : hol.term (type_1 B) => term_14 (term_1 B A (term_3 A B (term_17 B a_1)) (term_12 A B b_2)) (hol.eq (type_1 B) (term_17 B a_1) (term_11 B b_2)))).

(; axiom ;)

thm_3 : A : hol.type -> B : hol.type -> hol.proof (term_18 A B).

(; Theorem: |- (Data.Bool.! \lambda a. (Data.Bool.! \lambda b. ((= ((= (Data.Sum.right a)) (Data.Sum.right b))) ((= a) b)))) ;)

(; Constant Data.Bool.\/ ;)

Data_2EBool_2E_5C_2F : A : hol.type -> hol.term (type_0 A).

(; Constant Data.Bool.? ;)

Data_2EBool_2E_3F : A : hol.type -> hol.term (type_0 A).

def term_19 : B : hol.type -> A : hol.type -> x_1 : hol.term (type_2 B A) -> hol.term (type_4 B A) :=
  B : hol.type => A : hol.type => x_1 : hol.term (type_2 B A) => term_1 B A (term_4 B A x_1).

def term_20 : B : hol.type -> A : hol.type -> hol.term type_3 :=
  B : hol.type => A : hol.type => term_0 B A (x_1 : hol.term (type_2 B A) => Data_2EBool_2E_5C_2F type_12 (Data_2EBool_2E_3F (type_8 A) (a_2 : hol.term (type_0 A) => term_19 B A x_1 (term_9 B A a_2))) (Data_2EBool_2E_3F (type_10 B) (b_2 : hol.term (type_1 B) => term_19 B A x_1 (term_12 A B b_2)))).

(; axiom ;)

thm_4 : B : hol.type -> A : hol.type -> hol.proof (term_20 B A).

(; Theorem: |- (Data.Bool.! \lambda x. ((Data.Bool.\/ (Data.Bool.? \lambda a. ((= x) (Data.Sum.left a)))) (Data.Bool.? \lambda b. ((= x) (Data.Sum.right b))))) ;)

def type_13 : hol.type -> hol.type :=
  C : hol.type => C.

def type_14 : hol.type -> hol.type -> hol.type :=
  C : hol.type => A : hol.type => hol.arr (type_0 A) (type_13 C).

def term_21 : C : hol.type -> A : hol.type -> hol.term (hol.arr (hol.arr (type_14 C A) type_3) type_3) :=
  C : hol.type => A : hol.type => Data_2EBool_2E_21 (hol.arr (hol.arr (type_14 C A) type_3) type_3).

def type_15 : hol.type -> hol.type -> hol.type :=
  C : hol.type => B : hol.type => hol.arr (type_1 B) (type_13 C).

def term_22 : C : hol.type -> B : hol.type -> hol.term (hol.arr (hol.arr (type_15 C B) type_3) type_3) :=
  C : hol.type => B : hol.type => Data_2EBool_2E_21 (hol.arr (hol.arr (type_15 C B) type_3) type_3).

(; Constant Data.Bool.==> ;)

Data_2EBool_2E_3D_3D_3E : A : hol.type -> hol.term (type_0 A).

def term_23 : hol.term type_12 :=
  Data_2EBool_2E_3D_3D_3E type_12.

(; Constant Data.Sum.isLeft ;)

Data_2ESum_2EisLeft : A : hol.type -> hol.term (type_0 A).

def term_24 : C : hol.type -> A : hol.type -> f_1 : hol.term (type_14 C A) -> hol.term (type_14 C A) :=
  C : hol.type => A : hol.type => f_1 : hol.term (type_14 C A) => f_1.

def term_25 : C : hol.type -> B : hol.type -> g_1 : hol.term (type_15 C B) -> hol.term (type_15 C B) :=
  C : hol.type => B : hol.type => g_1 : hol.term (type_15 C B) => g_1.

def term_26 : B : hol.type -> A : hol.type -> C : hol.type -> x_1 : hol.term (type_2 B A) -> g_2 : hol.term (type_15 C B) -> f_3 : hol.term (type_14 C A) -> hol.term (hol.arr (type_13 C) type_3) :=
  B : hol.type => A : hol.type => C : hol.type => x_1 : hol.term (type_2 B A) => g_2 : hol.term (type_15 C B) => f_3 : hol.term (type_14 C A) => hol.eq (type_13 C) (Data_2ESum_2Ecase_2Eleft_2Eright (hol.arr (type_14 C A) (hol.arr (type_15 C B) (hol.arr (type_2 B A) (type_13 C)))) (term_24 C A f_3) (term_25 C B g_2) (term_4 B A x_1)).

(; Constant Data.Sum.destLeft ;)

Data_2ESum_2EdestLeft : A : hol.type -> hol.term (type_0 A).

def term_27 : B : hol.type -> C : hol.type -> A : hol.type -> hol.term type_3 :=
  B : hol.type => C : hol.type => A : hol.type => term_21 C A (f_1 : hol.term (type_14 C A) => term_22 C B (g_2 : hol.term (type_15 C B) => term_0 B A (x_3 : hol.term (type_2 B A) => term_23 (Data_2ESum_2EisLeft (type_4 B A) (term_4 B A x_3)) (term_26 B A C x_3 g_2 f_1 (term_24 C A f_1 (Data_2ESum_2EdestLeft (hol.arr (type_2 B A) (type_0 A)) (term_4 B A x_3))))))).

(; axiom ;)

thm_5 : B : hol.type -> C : hol.type -> A : hol.type -> hol.proof (term_27 B C A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Sum.isLeft x)) ((= (((Data.Sum.case.left.right f) g) x)) (f (Data.Sum.destLeft x))))))) ;)

(; Constant Data.Sum.isRight ;)

Data_2ESum_2EisRight : A : hol.type -> hol.term (type_0 A).

(; Constant Data.Sum.destRight ;)

Data_2ESum_2EdestRight : A : hol.type -> hol.term (type_0 A).

def term_28 : B : hol.type -> C : hol.type -> A : hol.type -> hol.term type_3 :=
  B : hol.type => C : hol.type => A : hol.type => term_21 C A (f_1 : hol.term (type_14 C A) => term_22 C B (g_2 : hol.term (type_15 C B) => term_0 B A (x_3 : hol.term (type_2 B A) => term_23 (Data_2ESum_2EisRight (type_4 B A) (term_4 B A x_3)) (term_26 B A C x_3 g_2 f_1 (term_25 C B g_2 (Data_2ESum_2EdestRight (hol.arr (type_2 B A) (type_1 B)) (term_4 B A x_3))))))).

(; axiom ;)

thm_6 : B : hol.type -> C : hol.type -> A : hol.type -> hol.proof (term_28 B C A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((Data.Bool.==> (Data.Sum.isRight x)) ((= (((Data.Sum.case.left.right f) g) x)) (g (Data.Sum.destRight x))))))) ;)

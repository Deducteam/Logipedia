
(; This file was generated by Holide. ;)

#NAME option_2Dmap_2Ddef_2D1_2E17.

def type_0 : hol.type -> hol.type :=
  A : hol.type => A.

def type_1 : hol.type -> hol.type :=
  B : hol.type => B.

def type_2 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_0 A) (type_1 B).

(; Constant Data.Bool.! ;)

Data_2EBool_2E_21 : A : hol.type -> hol.term (type_0 A).

def term_0 : B : hol.type -> A : hol.type -> hol.term (hol.arr (hol.arr (type_2 B A) hol.bool) hol.bool) :=
  B : hol.type => A : hol.type => Data_2EBool_2E_21 (hol.arr (hol.arr (type_2 B A) hol.bool) hol.bool).

Data_2EOption_2Eoption : hol.type -> hol.type.

def type_3 : hol.type -> hol.type :=
  B : hol.type => Data_2EOption_2Eoption (type_1 B).

def term_1 : B : hol.type -> hol.term (hol.arr (type_3 B) (hol.arr (type_3 B) hol.bool)) :=
  B : hol.type => hol.eq (type_3 B).

def type_4 : hol.type -> hol.type :=
  A : hol.type => Data_2EOption_2Eoption (type_0 A).

def type_5 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_2 B A) (hol.arr (type_4 A) (type_3 B)).

(; Constant option-map-def-1.17 ;)

option_2Dmap_2Ddef_2D1_2E17 : A : hol.type -> hol.term (type_0 A).

(; Constant Data.Option.map ;)

def Data_2EOption_2Emap : B : hol.type -> A : hol.type -> hol.term (type_5 B A) :=
  B : hol.type => A : hol.type => option_2Dmap_2Ddef_2D1_2E17 (type_5 B A).

def term_2 : B : hol.type -> A : hol.type -> f_1 : hol.term (type_2 B A) -> hol.term (type_2 B A) :=
  B : hol.type => A : hol.type => f_1 : hol.term (type_2 B A) => f_1.

def term_3 : B : hol.type -> A : hol.type -> f_1 : hol.term (type_2 B A) -> hol.term (hol.arr (type_4 A) (type_3 B)) :=
  B : hol.type => A : hol.type => f_1 : hol.term (type_2 B A) => Data_2EOption_2Emap (type_1 B) (type_0 A) (term_2 B A f_1).

(; Constant Data.Option.none ;)

Data_2EOption_2Enone : A : hol.type -> hol.term (type_0 A).

def term_4 : B : hol.type -> A : hol.type -> hol.term hol.bool :=
  B : hol.type => A : hol.type => term_0 B A (f_1 : hol.term (type_2 B A) => term_1 B (term_3 B A f_1 (Data_2EOption_2Enone (type_4 A))) (Data_2EOption_2Enone (type_3 B))).

(; axiom ;)

thm_0 : B : hol.type -> A : hol.type -> hol.proof (term_4 B A).

(; Theorem: |- (Data.Bool.! \lambda f. ((= ((Data.Option.map f) Data.Option.none)) Data.Option.none)) ;)

(; Constant Data.Option.some ;)

Data_2EOption_2Esome : A : hol.type -> hol.term (type_0 A).

def term_5 : A : hol.type -> a_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => a_1 : hol.term (type_0 A) => a_1.

def term_6 : B : hol.type -> A : hol.type -> hol.term hol.bool :=
  B : hol.type => A : hol.type => term_0 B A (f_1 : hol.term (type_2 B A) => Data_2EBool_2E_21 (hol.arr (hol.arr (type_0 A) hol.bool) hol.bool) (a_2 : hol.term (type_0 A) => term_1 B (term_3 B A f_1 (Data_2EOption_2Esome (hol.arr (type_0 A) (type_4 A)) (term_5 A a_2))) (Data_2EOption_2Esome (hol.arr (type_1 B) (type_3 B)) (term_2 B A f_1 (term_5 A a_2))))).

(; axiom ;)

thm_1 : B : hol.type -> A : hol.type -> hol.proof (term_6 B A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda a. ((= ((Data.Option.map f) (Data.Option.some a))) (Data.Option.some (f a))))) ;)

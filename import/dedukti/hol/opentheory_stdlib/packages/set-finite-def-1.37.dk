
(; This file was generated by Holide. ;)

#NAME set_2Dfinite_2Ddef_2D1_2E37.

def type_0 : hol.type -> hol.type :=
  A : hol.type => A.

Set_2Eset : hol.type -> hol.type.

def type_1 : hol.type -> hol.type :=
  A : hol.type => Set_2Eset (type_0 A).

def type_2 : hol.type :=
  hol.bool.

def type_3 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_1 A) type_2.

(; Constant set-finite-def-1.37 ;)

set_2Dfinite_2Ddef_2D1_2E37 : A : hol.type -> hol.term (type_0 A).

def term_0 : A : hol.type -> hol.term (type_3 A) :=
  A : hol.type => set_2Dfinite_2Ddef_2D1_2E37 (type_3 A).

(; Constant Set.finite ;)

def Set_2Efinite : A : hol.type -> hol.term (type_3 A) :=
  A : hol.type => term_0 A.

def term_1 : A : hol.type -> hol.term (type_3 A) :=
  A : hol.type => Set_2Efinite (type_0 A).

(; Constant Set.{} ;)

Set_2E_7B_7D : A : hol.type -> hol.term (type_0 A).

def term_2 : A : hol.type -> hol.term (type_1 A) :=
  A : hol.type => Set_2E_7B_7D (type_1 A).

def term_3 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_1 A (term_2 A).

(; axiom ;)

thm_0 : A : hol.type -> hol.proof (term_3 A).

(; Theorem: |- (Set.finite Set.{}) ;)

def type_4 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_3 A) type_2.

(; Constant Data.Bool.! ;)

Data_2EBool_2E_21 : A : hol.type -> hol.term (type_0 A).

def term_4 : A : hol.type -> hol.term (type_4 A) :=
  A : hol.type => Data_2EBool_2E_21 (type_4 A).

def type_5 : hol.type :=
  hol.arr type_2 type_2.

def type_6 : hol.type :=
  hol.arr type_2 type_5.

def term_5 : hol.term type_6 :=
  hol.eq type_2.

(; Constant Set.infinite ;)

def Set_2Einfinite : A : hol.type -> hol.term (type_3 A) :=
  A : hol.type => term_0 A.

def term_6 : A : hol.type -> s_1 : hol.term (type_1 A) -> hol.term (type_1 A) :=
  A : hol.type => s_1 : hol.term (type_1 A) => s_1.

(; Constant Data.Bool.~ ;)

Data_2EBool_2E_7E : A : hol.type -> hol.term (type_0 A).

def term_7 : A : hol.type -> s_1 : hol.term (type_1 A) -> hol.term type_2 :=
  A : hol.type => s_1 : hol.term (type_1 A) => term_1 A (term_6 A s_1).

def term_8 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_4 A (s_1 : hol.term (type_1 A) => term_5 (Set_2Einfinite (type_0 A) (term_6 A s_1)) (Data_2EBool_2E_7E type_5 (term_7 A s_1))).

(; axiom ;)

thm_1 : A : hol.type -> hol.proof (term_8 A).

(; Theorem: |- (Data.Bool.! \lambda s. ((= (Set.infinite s)) (Data.Bool.~ (Set.finite s)))) ;)

def type_7 : hol.type -> hol.type :=
  A : hol.type => hol.arr (hol.arr (type_0 A) type_2) type_2.

def term_9 : A : hol.type -> hol.term (type_7 A) :=
  A : hol.type => Data_2EBool_2E_21 (type_7 A).

(; Constant Data.Bool.==> ;)

Data_2EBool_2E_3D_3D_3E : A : hol.type -> hol.term (type_0 A).

def term_10 : hol.term type_6 :=
  Data_2EBool_2E_3D_3D_3E type_6.

(; Constant Set.insert ;)

Set_2Einsert : A : hol.type -> hol.term (type_0 A).

def term_11 : A : hol.type -> s_1 : hol.term (type_1 A) -> x_2 : hol.term (type_0 A) -> hol.term (type_1 A) :=
  A : hol.type => s_1 : hol.term (type_1 A) => x_2 : hol.term (type_0 A) => Set_2Einsert (hol.arr (type_0 A) (hol.arr (type_1 A) (type_1 A))) x_2 (term_6 A s_1).

def term_12 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_9 A (x_1 : hol.term (type_0 A) => term_4 A (s_2 : hol.term (type_1 A) => term_10 (term_7 A s_2) (term_1 A (term_11 A s_2 x_1)))).

(; axiom ;)

thm_2 : A : hol.type -> hol.proof (term_12 A).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda s. ((Data.Bool.==> (Set.finite s)) (Set.finite ((Set.insert x) s))))) ;)

def term_13 : A : hol.type -> a_1 : hol.term (type_1 A) -> hol.term (type_1 A) :=
  A : hol.type => a_1 : hol.term (type_1 A) => a_1.

def term_14 : A : hol.type -> a_1 : hol.term (type_1 A) -> hol.term type_2 :=
  A : hol.type => a_1 : hol.term (type_1 A) => term_1 A (term_13 A a_1).

(; Constant Data.Bool.\/ ;)

Data_2EBool_2E_5C_2F : A : hol.type -> hol.term (type_0 A).

def term_15 : A : hol.type -> a_1 : hol.term (type_1 A) -> hol.term (type_3 A) :=
  A : hol.type => a_1 : hol.term (type_1 A) => hol.eq (type_1 A) (term_13 A a_1).

(; Constant Data.Bool.? ;)

Data_2EBool_2E_3F : A : hol.type -> hol.term (type_0 A).

(; Constant Data.Bool./\ ;)

Data_2EBool_2E_2F_5C : A : hol.type -> hol.term (type_0 A).

def term_16 : hol.term type_6 :=
  Data_2EBool_2E_2F_5C type_6.

def term_17 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_4 A (a_1 : hol.term (type_1 A) => term_5 (term_14 A a_1) (Data_2EBool_2E_5C_2F type_6 (term_15 A a_1 (term_2 A)) (Data_2EBool_2E_3F (type_7 A) (x_2 : hol.term (type_0 A) => Data_2EBool_2E_3F (type_4 A) (s_3 : hol.term (type_1 A) => term_16 (term_15 A a_1 (term_11 A s_3 x_2)) (term_7 A s_3)))))).

(; axiom ;)

thm_3 : A : hol.type -> hol.proof (term_17 A).

(; Theorem: |- (Data.Bool.! \lambda a. ((= (Set.finite a)) ((Data.Bool.\/ ((= a) Set.{})) (Data.Bool.? \lambda x. (Data.Bool.? \lambda s. ((Data.Bool./\ ((= a) ((Set.insert x) s))) (Set.finite s))))))) ;)

def term_18 : A : hol.type -> p_1 : hol.term (type_3 A) -> hol.term (type_3 A) :=
  A : hol.type => p_1 : hol.term (type_3 A) => p_1.

def term_19 : A : hol.type -> hol.term type_2 :=
  A : hol.type => Data_2EBool_2E_21 (hol.arr (type_4 A) type_2) (p_1 : hol.term (type_3 A) => term_10 (term_16 (term_18 A p_1 (term_2 A)) (term_9 A (x_2 : hol.term (type_0 A) => term_4 A (s_3 : hol.term (type_1 A) => term_10 (term_18 A p_1 (term_6 A s_3)) (term_18 A p_1 (term_11 A s_3 x_2)))))) (term_4 A (a_2 : hol.term (type_1 A) => term_10 (term_14 A a_2) (term_18 A p_1 (term_13 A a_2))))).

(; axiom ;)

thm_4 : A : hol.type -> hol.proof (term_19 A).

(; Theorem: |- (Data.Bool.! \lambda p. ((Data.Bool.==> ((Data.Bool./\ (p Set.{})) (Data.Bool.! \lambda x. (Data.Bool.! \lambda s. ((Data.Bool.==> (p s)) (p ((Set.insert x) s))))))) (Data.Bool.! \lambda a. ((Data.Bool.==> (Set.finite a)) (p a))))) ;)

nat : sttfa.type.

0 : sttfa.eta nat.

S : sttfa.eta (sttfa.arrow nat nat).

eq : sttfa.eta (sttfa.arrow nat (sttfa.arrow nat sttfa.bool)).

plus : sttfa.eta (sttfa.arrow nat (sttfa.arrow nat nat)).

plus_0 : sttfa.eps (sttfa.forall nat (n : sttfa.eta nat => eq (plus 0 n) n)).

plus_S : sttfa.eps (sttfa.forall nat (n : sttfa.eta nat => sttfa.forall nat (m : sttfa.eta nat =>
             eq (plus (S n) m) (S (plus n m))))).

nat_ind : sttfa.eps (sttfa.forall (sttfa.arrow nat sttfa.bool) (P : sttfa.eta (sttfa.arrow nat sttfa.bool) =>
          sttfa.impl (P 0) (sttfa.impl (sttfa.forall nat (n : sttfa.eta nat => sttfa.impl (P n) (P (S n))))
          (sttfa.forall nat (n :sttfa.eta nat => P n))))).

leibniz_S : sttfa.eps (sttfa.forall nat (n : sttfa.eta nat => sttfa.forall nat (m : sttfa.eta nat =>
        sttfa.impl (eq n m) (eq (S n) (S m))))).

trans_eq : sttfa.eps (sttfa.forall nat (n : sttfa.eta nat => sttfa.forall nat (m : sttfa.eta nat =>
           sttfa.forall nat (o : sttfa.eta nat => sttfa.impl (eq n m) (sttfa.impl (eq m o) (eq n o)))))).

def plus_n_0 : sttfa.eps (sttfa.forall nat (n : sttfa.eta nat => eq (plus n 0) n)) :=
    n : sttfa.eta nat =>
    nat_ind (z : sttfa.eta nat => eq (plus z 0) z) (plus_0 0)
    (n : sttfa.eta nat => H : sttfa.eps (eq (plus n 0) n) =>
    (trans_eq (plus (S n) 0) (S (plus n 0)) (S n) (plus_S n 0)
              (leibniz_S (plus n 0) n H))) n.
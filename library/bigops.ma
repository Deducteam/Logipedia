include "basics/pts.ma".
include "bool.ma".
include "connectives.ma".
include "div_mod.ma".
include "leibniz.ma".
include "logic.ma".
include "nat.ma".
definition sameF_upto : \forall A : Type[0] . ((nat) ) -> (((nat) ) -> A) -> (((nat) ) -> A) -> Prop := \lambda A : Type[0]. \lambda k : (nat) . \lambda f : ((nat) ) -> A. \lambda g : ((nat) ) -> A. \forall (i:(nat) ). ((((lt) ) (i)) (k)) -> (((eq) (A)) ((f) (i))) ((g) (i)).
definition sameF_p : \forall A : Type[0] . ((nat) ) -> (((nat) ) -> (bool) ) -> (((nat) ) -> A) -> (((nat) ) -> A) -> Prop := \lambda A : Type[0]. \lambda k : (nat) . \lambda p : ((nat) ) -> (bool) . \lambda f : ((nat) ) -> A. \lambda g : ((nat) ) -> A. \forall (i:(nat) ). ((((lt) ) (i)) (k)) -> ((((eq) ((bool) )) ((p) (i))) ((true) )) -> (((eq) (A)) ((f) (i))) ((g) (i)).
definition sameF_upto_le : \forall A. \forall (f:((nat) ) -> A). \forall (g:((nat) ) -> A). \forall (n:(nat) ). \forall (m:(nat) ). ((((le) ) (n)) (m)) -> (((((sameF_upto) (A)) (m)) (f)) (g)) -> ((((sameF_upto) (A)) (n)) (f)) (g) := \lambda A : Type[0]. \lambda f : ((nat) ) -> A. \lambda g : ((nat) ) -> A. \lambda n : (nat) . \lambda m : (nat) . \lambda lenm : (((le) ) (n)) (m). (\lambda samef : ((((sameF_upto) (A)) (m)) (f)) (g). (\lambda i : (nat) . \lambda ltin : (((lt) ) (i)) (n). (((samef) (i)) ((((((lt_to_le_to_lt) (i)) (n)) (m)) (ltin)) (lenm))))).
definition sameF_p_le : \forall A. \forall (p:((nat) ) -> (bool) ). \forall (f:((nat) ) -> A). \forall (g:((nat) ) -> A). \forall (n:(nat) ). \forall (m:(nat) ). ((((le) ) (n)) (m)) -> ((((((sameF_p) (A)) (m)) (p)) (f)) (g)) -> (((((sameF_p) (A)) (n)) (p)) (f)) (g) := \lambda A : Type[0]. \lambda p : ((nat) ) -> (bool) . \lambda f : ((nat) ) -> A. \lambda g : ((nat) ) -> A. \lambda n : (nat) . \lambda m : (nat) . \lambda lenm : (((le) ) (n)) (m). (\lambda samef : (((((sameF_p) (A)) (m)) (p)) (f)) (g). (\lambda i : (nat) . \lambda ltin : (((lt) ) (i)) (n). (\lambda pi : (((eq) ((bool) )) ((p) (i))) ((true) ). ((((samef) (i)) ((((((lt_to_le_to_lt) (i)) (n)) (m)) (ltin)) (lenm))) (((((((rewrite_r) ((bool) )) ((true) )) (\lambda j__ : (bool) . (((eq) ((bool) )) (j__)) ((true) ))) (((refl) ((bool) )) ((true) ))) ((p) (i))) (pi)))))).
axiom bigop : \forall H : Type[0] . ((nat) ) -> (((nat) ) -> (bool) ) -> (H) -> ((H) -> (H) -> H) -> (((nat) ) -> H) -> H.
axiom bigop_body : \forall H : Type[0] . ((nat) ) -> (((nat) ) -> (bool) ) -> (H) -> ((H) -> (H) -> H) -> (((nat) ) -> H) -> H.
axiom axiom_bigop_O : \forall H. (((equal) ((((nat) ) -> (bool) ) -> (H) -> ((H) -> (H) -> H) -> (((nat) ) -> H) -> H)) (((bigop) (H)) ((O) ))) (((bigop_body) (H)) ((O) )).
definition eq_bigop_O : \forall H. (((leibniz) ((((nat) ) -> (bool) ) -> (H) -> ((H) -> (H) -> H) -> (((nat) ) -> H) -> H)) (((bigop) (H)) ((O) ))) (((bigop_body) (H)) ((O) )) := \lambda H : Type[0]. ((((equal_leibniz) ((((nat) ) -> (bool) ) -> (H) -> ((H) -> (H) -> H) -> (((nat) ) -> H) -> H)) (((bigop) (H)) ((O) ))) (((bigop_body) (H)) ((O) ))) ((axiom_bigop_O) (H)).
definition sym_eq_bigop_O : \forall H. (((leibniz) ((((nat) ) -> (bool) ) -> (H) -> ((H) -> (H) -> H) -> (((nat) ) -> H) -> H)) (((bigop_body) (H)) ((O) ))) (((bigop) (H)) ((O) )) := \lambda H : Type[0]. ((((sym_leibniz) ((((nat) ) -> (bool) ) -> (H) -> ((H) -> (H) -> H) -> (((nat) ) -> H) -> H)) (((bigop) (H)) ((O) ))) (((bigop_body) (H)) ((O) ))) ((eq_bigop_O) (H)).
axiom axiom_bigop_S : \forall H. \forall (n:(nat) ). (((equal) ((((nat) ) -> (bool) ) -> (H) -> ((H) -> (H) -> H) -> (((nat) ) -> H) -> H)) (((bigop) (H)) (((S) ) (n)))) (((bigop_body) (H)) (((S) ) (n))).
definition eq_bigop_S : \forall H. \forall (n:(nat) ). (((leibniz) ((((nat) ) -> (bool) ) -> (H) -> ((H) -> (H) -> H) -> (((nat) ) -> H) -> H)) (((bigop) (H)) (((S) ) (n)))) (((bigop_body) (H)) (((S) ) (n))) := \lambda H : Type[0]. \lambda n : (nat) . ((((equal_leibniz) ((((nat) ) -> (bool) ) -> (H) -> ((H) -> (H) -> H) -> (((nat) ) -> H) -> H)) (((bigop) (H)) (((S) ) (n)))) (((bigop_body) (H)) (((S) ) (n)))) (((axiom_bigop_S) (H)) (n)).
definition sym_eq_bigop_S : \forall H. \forall (n:(nat) ). (((leibniz) ((((nat) ) -> (bool) ) -> (H) -> ((H) -> (H) -> H) -> (((nat) ) -> H) -> H)) (((bigop_body) (H)) (((S) ) (n)))) (((bigop) (H)) (((S) ) (n))) := \lambda H : Type[0]. \lambda n : (nat) . ((((sym_leibniz) ((((nat) ) -> (bool) ) -> (H) -> ((H) -> (H) -> H) -> (((nat) ) -> H) -> H)) (((bigop) (H)) (((S) ) (n)))) (((bigop_body) (H)) (((S) ) (n)))) (((eq_bigop_S) (H)) (n)).
axiom axiom_bigop_body_O : \forall H. (((equal) ((((nat) ) -> (bool) ) -> (H) -> ((H) -> (H) -> H) -> (((nat) ) -> H) -> H)) (((bigop_body) (H)) ((O) ))) (\lambda p : ((nat) ) -> (bool) . \lambda nil : H. \lambda op : (H) -> (H) -> H. \lambda f : ((nat) ) -> H. nil).
definition eq_bigop_body_O : \forall H. (((leibniz) ((((nat) ) -> (bool) ) -> (H) -> ((H) -> (H) -> H) -> (((nat) ) -> H) -> H)) (((bigop_body) (H)) ((O) ))) (\lambda p : ((nat) ) -> (bool) . \lambda nil : H. \lambda op : (H) -> (H) -> H. \lambda f : ((nat) ) -> H. nil) := \lambda H : Type[0]. ((((equal_leibniz) ((((nat) ) -> (bool) ) -> (H) -> ((H) -> (H) -> H) -> (((nat) ) -> H) -> H)) (((bigop_body) (H)) ((O) ))) (\lambda p : ((nat) ) -> (bool) . \lambda nil : H. \lambda op : (H) -> (H) -> H. \lambda f : ((nat) ) -> H. nil)) ((axiom_bigop_body_O) (H)).
definition sym_eq_bigop_body_O : \forall H. (((leibniz) ((((nat) ) -> (bool) ) -> (H) -> ((H) -> (H) -> H) -> (((nat) ) -> H) -> H)) (\lambda p : ((nat) ) -> (bool) . \lambda nil : H. \lambda op : (H) -> (H) -> H. \lambda f : ((nat) ) -> H. nil)) (((bigop_body) (H)) ((O) )) := \lambda H : Type[0]. ((((sym_leibniz) ((((nat) ) -> (bool) ) -> (H) -> ((H) -> (H) -> H) -> (((nat) ) -> H) -> H)) (((bigop_body) (H)) ((O) ))) (\lambda p : ((nat) ) -> (bool) . \lambda nil : H. \lambda op : (H) -> (H) -> H. \lambda f : ((nat) ) -> H. nil)) ((eq_bigop_body_O) (H)).
axiom axiom_bigop_body_S : \forall H. \forall (n:(nat) ). (((equal) ((((nat) ) -> (bool) ) -> (H) -> ((H) -> (H) -> H) -> (((nat) ) -> H) -> H)) (((bigop_body) (H)) (((S) ) (n)))) (\lambda p : ((nat) ) -> (bool) . \lambda nil : H. \lambda op : (H) -> (H) -> H. \lambda f : ((nat) ) -> H. ((((match_bool_type) (H)) (((op) ((f) (n))) (((((((bigop) (H)) (n)) (p)) (nil)) (op)) (f)))) (((((((bigop) (H)) (n)) (p)) (nil)) (op)) (f))) ((p) (n))).
definition eq_bigop_body_S : \forall H. \forall (n:(nat) ). (((leibniz) ((((nat) ) -> (bool) ) -> (H) -> ((H) -> (H) -> H) -> (((nat) ) -> H) -> H)) (((bigop_body) (H)) (((S) ) (n)))) (\lambda p : ((nat) ) -> (bool) . \lambda nil : H. \lambda op : (H) -> (H) -> H. \lambda f : ((nat) ) -> H. ((((match_bool_type) (H)) (((op) ((f) (n))) (((((((bigop) (H)) (n)) (p)) (nil)) (op)) (f)))) (((((((bigop) (H)) (n)) (p)) (nil)) (op)) (f))) ((p) (n))) := \lambda H : Type[0]. \lambda n : (nat) . ((((equal_leibniz) ((((nat) ) -> (bool) ) -> (H) -> ((H) -> (H) -> H) -> (((nat) ) -> H) -> H)) (((bigop_body) (H)) (((S) ) (n)))) (\lambda p : ((nat) ) -> (bool) . \lambda nil : H. \lambda op : (H) -> (H) -> H. \lambda f : ((nat) ) -> H. ((((match_bool_type) (H)) (((op) ((f) (n))) (((((((bigop) (H)) (n)) (p)) (nil)) (op)) (f)))) (((((((bigop) (H)) (n)) (p)) (nil)) (op)) (f))) ((p) (n)))) (((axiom_bigop_body_S) (H)) (n)).
definition sym_eq_bigop_body_S : \forall H. \forall (n:(nat) ). (((leibniz) ((((nat) ) -> (bool) ) -> (H) -> ((H) -> (H) -> H) -> (((nat) ) -> H) -> H)) (\lambda p : ((nat) ) -> (bool) . \lambda nil : H. \lambda op : (H) -> (H) -> H. \lambda f : ((nat) ) -> H. ((((match_bool_type) (H)) (((op) ((f) (n))) (((((((bigop) (H)) (n)) (p)) (nil)) (op)) (f)))) (((((((bigop) (H)) (n)) (p)) (nil)) (op)) (f))) ((p) (n)))) (((bigop_body) (H)) (((S) ) (n))) := \lambda H : Type[0]. \lambda n : (nat) . ((((sym_leibniz) ((((nat) ) -> (bool) ) -> (H) -> ((H) -> (H) -> H) -> (((nat) ) -> H) -> H)) (((bigop_body) (H)) (((S) ) (n)))) (\lambda p : ((nat) ) -> (bool) . \lambda nil : H. \lambda op : (H) -> (H) -> H. \lambda f : ((nat) ) -> H. ((((match_bool_type) (H)) (((op) ((f) (n))) (((((((bigop) (H)) (n)) (p)) (nil)) (op)) (f)))) (((((((bigop) (H)) (n)) (p)) (nil)) (op)) (f))) ((p) (n)))) (((eq_bigop_body_S) (H)) (n)).
definition bigop_Strue : \forall B. \forall (k:(nat) ). \forall (p:((nat) ) -> (bool) ). \forall (nil:B). \forall (op:(B) -> (B) -> B). \forall (f:((nat) ) -> B). ((((eq) ((bool) )) ((p) (k))) ((true) )) -> (((eq) (B)) (((((((bigop) (B)) (((S) ) (k))) (\lambda i : (nat) . (p) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i)))) (((op) ((f) (k))) (((((((bigop) (B)) (k)) (\lambda i : (nat) . (p) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i)))) := \lambda B : Type[0]. \lambda k : (nat) . \lambda p : ((nat) ) -> (bool) . \lambda nil : B. \lambda op : (B) -> (B) -> B. \lambda f : ((nat) ) -> B. ((((sym_eq_bigop_S) (B)) (k)) (\lambda y : (((nat) ) -> (bool) ) -> (B) -> ((B) -> (B) -> B) -> (((nat) ) -> B) -> B. ((((eq) ((bool) )) ((p) (k))) ((true) )) -> (((eq) (B)) (((((y) (\lambda i : (nat) . (p) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i)))) (((op) ((f) (k))) (((((((bigop) (B)) (k)) (\lambda i : (nat) . (p) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i)))))) (((((sym_eq_bigop_body_S) (B)) (k)) (\lambda y : (((nat) ) -> (bool) ) -> (B) -> ((B) -> (B) -> B) -> (((nat) ) -> B) -> B. ((((eq) ((bool) )) ((p) (k))) ((true) )) -> (((eq) (B)) (((((y) (\lambda i : (nat) . (p) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i)))) (((op) ((f) (k))) (((((((bigop) (B)) (k)) (\lambda i : (nat) . (p) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i)))))) (\lambda H : (((eq) ((bool) )) ((p) (k))) ((true) ). (((((((eq_ind_r) ((bool) )) ((true) )) (\lambda x : (bool) . (((eq) (B)) (((((match_bool_type) (B)) (((op) ((f) (k))) (((((((bigop) (B)) (k)) (\lambda i : (nat) . (p) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i))))) (((((((bigop) (B)) (k)) (\lambda i : (nat) . (p) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i)))) (x))) (((op) ((f) (k))) (((((((bigop) (B)) (k)) (\lambda i : (nat) . (p) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i)))))) ((((((eq_match_bool_type_true) (B)) (((op) ((f) (k))) (((((((bigop) (B)) (k)) (\lambda i : (nat) . (p) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i))))) (((((((bigop) (B)) (k)) (\lambda i : (nat) . (p) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i)))) (\lambda y : B. (((eq) (B)) (((((match_bool_type) (B)) (((op) ((f) (k))) (((((((bigop) (B)) (k)) (\lambda i : (nat) . (p) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i))))) (((((((bigop) (B)) (k)) (\lambda i : (nat) . (p) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i)))) ((true) ))) (y))) (((refl) (B)) (((((match_bool_type) (B)) (((op) ((f) (k))) (((((((bigop) (B)) (k)) (\lambda i : (nat) . (p) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i))))) (((((((bigop) (B)) (k)) (\lambda i : (nat) . (p) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i)))) ((true) ))))) ((p) (k))) (H)))).
definition bigop_Sfalse : \forall B. \forall (k:(nat) ). \forall (p:((nat) ) -> (bool) ). \forall (nil:B). \forall (op:(B) -> (B) -> B). \forall (f:((nat) ) -> B). ((((eq) ((bool) )) ((p) (k))) ((false) )) -> (((eq) (B)) (((((((bigop) (B)) (((S) ) (k))) (\lambda i : (nat) . (p) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i)))) (((((((bigop) (B)) (k)) (\lambda i : (nat) . (p) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i))) := \lambda B : Type[0]. \lambda k : (nat) . \lambda p : ((nat) ) -> (bool) . \lambda nil : B. \lambda op : (B) -> (B) -> B. \lambda f : ((nat) ) -> B. ((((sym_eq_bigop_S) (B)) (k)) (\lambda y : (((nat) ) -> (bool) ) -> (B) -> ((B) -> (B) -> B) -> (((nat) ) -> B) -> B. ((((eq) ((bool) )) ((p) (k))) ((false) )) -> (((eq) (B)) (((((y) (\lambda i : (nat) . (p) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i)))) (((((((bigop) (B)) (k)) (\lambda i : (nat) . (p) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i))))) (((((sym_eq_bigop_body_S) (B)) (k)) (\lambda y : (((nat) ) -> (bool) ) -> (B) -> ((B) -> (B) -> B) -> (((nat) ) -> B) -> B. ((((eq) ((bool) )) ((p) (k))) ((false) )) -> (((eq) (B)) (((((y) (\lambda i : (nat) . (p) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i)))) (((((((bigop) (B)) (k)) (\lambda i : (nat) . (p) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i))))) (\lambda H : (((eq) ((bool) )) ((p) (k))) ((false) ). (((((((eq_ind_r) ((bool) )) ((false) )) (\lambda x : (bool) . (((eq) (B)) (((((match_bool_type) (B)) (((op) ((f) (k))) (((((((bigop) (B)) (k)) (\lambda i : (nat) . (p) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i))))) (((((((bigop) (B)) (k)) (\lambda i : (nat) . (p) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i)))) (x))) (((((((bigop) (B)) (k)) (\lambda i : (nat) . (p) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i))))) ((((((eq_match_bool_type_false) (B)) (((op) ((f) (k))) (((((((bigop) (B)) (k)) (\lambda i : (nat) . (p) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i))))) (((((((bigop) (B)) (k)) (\lambda i : (nat) . (p) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i)))) (\lambda y : B. (((eq) (B)) (((((match_bool_type) (B)) (((op) ((f) (k))) (((((((bigop) (B)) (k)) (\lambda i : (nat) . (p) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i))))) (((((((bigop) (B)) (k)) (\lambda i : (nat) . (p) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i)))) ((false) ))) (y))) (((refl) (B)) (((((match_bool_type) (B)) (((op) ((f) (k))) (((((((bigop) (B)) (k)) (\lambda i : (nat) . (p) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i))))) (((((((bigop) (B)) (k)) (\lambda i : (nat) . (p) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i)))) ((false) ))))) ((p) (k))) (H)))).
definition same_bigop : \forall B. \forall (k:(nat) ). \forall (p1:((nat) ) -> (bool) ). \forall (p2:((nat) ) -> (bool) ). \forall (nil:B). \forall (op:(B) -> (B) -> B). \forall (f:((nat) ) -> B). \forall (g:((nat) ) -> B). (((((sameF_upto) ((bool) )) (k)) (p1)) (p2)) -> ((((((sameF_p) (B)) (k)) (p1)) (f)) (g)) -> (((eq) (B)) (((((((bigop) (B)) (k)) (\lambda i : (nat) . (p1) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i)))) (((((((bigop) (B)) (k)) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i))) := \lambda B : Type[0]. \lambda k : (nat) . \lambda p1 : ((nat) ) -> (bool) . \lambda p2 : ((nat) ) -> (bool) . \lambda nil : B. \lambda op : (B) -> (B) -> B. \lambda f : ((nat) ) -> B. \lambda g : ((nat) ) -> B. ((((nat_ind) (\lambda j_x_365 : (nat) . (((((sameF_upto) ((bool) )) (j_x_365)) (p1)) (p2)) -> ((((((sameF_p) (B)) (j_x_365)) (p1)) (f)) (g)) -> (((eq) (B)) (((((((bigop) (B)) (j_x_365)) (\lambda i : (nat) . (p1) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i)))) (((((((bigop) (B)) (j_x_365)) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i))))) ((((sym_eq_bigop_O) (B)) (\lambda y : (((nat) ) -> (bool) ) -> (B) -> ((B) -> (B) -> B) -> (((nat) ) -> B) -> B. (((((sameF_upto) ((bool) )) ((O) )) (p1)) (p2)) -> ((((((sameF_p) (B)) ((O) )) (p1)) (f)) (g)) -> (((eq) (B)) (((((((bigop) (B)) ((O) )) (\lambda i : (nat) . (p1) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i)))) (((((y) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i))))) ((((sym_eq_bigop_body_O) (B)) (\lambda y : (((nat) ) -> (bool) ) -> (B) -> ((B) -> (B) -> B) -> (((nat) ) -> B) -> B. (((((sameF_upto) ((bool) )) ((O) )) (p1)) (p2)) -> ((((((sameF_p) (B)) ((O) )) (p1)) (f)) (g)) -> (((eq) (B)) (((((((bigop) (B)) ((O) )) (\lambda i : (nat) . (p1) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i)))) (((((y) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i))))) ((((eq_bigop_body_O) (B)) (\lambda y : (((nat) ) -> (bool) ) -> (B) -> ((B) -> (B) -> B) -> (((nat) ) -> B) -> B. (((((sameF_upto) ((bool) )) ((O) )) (p1)) (p2)) -> ((((((sameF_p) (B)) ((O) )) (p1)) (f)) (g)) -> (((eq) (B)) (((((((bigop) (B)) ((O) )) (\lambda i : (nat) . (p1) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i)))) (((((y) (\lambda i : (nat) . (p1) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i))))) ((((eq_bigop_O) (B)) (\lambda y : (((nat) ) -> (bool) ) -> (B) -> ((B) -> (B) -> B) -> (((nat) ) -> B) -> B. (((((sameF_upto) ((bool) )) ((O) )) (p1)) (p2)) -> ((((((sameF_p) (B)) ((O) )) (p1)) (f)) (g)) -> (((eq) (B)) (((((((bigop) (B)) ((O) )) (\lambda i : (nat) . (p1) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i)))) (((((y) (\lambda i : (nat) . (p1) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i))))) (\lambda auto : ((((sameF_upto) ((bool) )) ((O) )) (p1)) (p2). (\lambda auto' : (((((sameF_p) (B)) ((O) )) (p1)) (f)) (g). (((refl) (B)) (((((((bigop) (B)) ((O) )) (\lambda i : (nat) . (p1) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i))))))))))) (\lambda n : (nat) . ((((sym_eq_bigop_S) (B)) (n)) (\lambda y : (((nat) ) -> (bool) ) -> (B) -> ((B) -> (B) -> B) -> (((nat) ) -> B) -> B. ((((((sameF_upto) ((bool) )) (n)) (p1)) (p2)) -> ((((((sameF_p) (B)) (n)) (p1)) (f)) (g)) -> (((eq) (B)) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (p1) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i)))) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i)))) -> (((((sameF_upto) ((bool) )) (((S) ) (n))) (p1)) (p2)) -> ((((((sameF_p) (B)) (((S) ) (n))) (p1)) (f)) (g)) -> (((eq) (B)) (((((((bigop) (B)) (((S) ) (n))) (\lambda i : (nat) . (p1) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i)))) (((((y) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i))))) (((((sym_eq_bigop_S) (B)) (n)) (\lambda y : (((nat) ) -> (bool) ) -> (B) -> ((B) -> (B) -> B) -> (((nat) ) -> B) -> B. ((((((sameF_upto) ((bool) )) (n)) (p1)) (p2)) -> ((((((sameF_p) (B)) (n)) (p1)) (f)) (g)) -> (((eq) (B)) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (p1) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i)))) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i)))) -> (((((sameF_upto) ((bool) )) (((S) ) (n))) (p1)) (p2)) -> ((((((sameF_p) (B)) (((S) ) (n))) (p1)) (f)) (g)) -> (((eq) (B)) (((((y) (\lambda i : (nat) . (p1) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i)))) (((((((bigop_body) (B)) (((S) ) (n))) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i))))) (((((sym_eq_bigop_body_S) (B)) (n)) (\lambda y : (((nat) ) -> (bool) ) -> (B) -> ((B) -> (B) -> B) -> (((nat) ) -> B) -> B. ((((((sameF_upto) ((bool) )) (n)) (p1)) (p2)) -> ((((((sameF_p) (B)) (n)) (p1)) (f)) (g)) -> (((eq) (B)) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (p1) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i)))) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i)))) -> (((((sameF_upto) ((bool) )) (((S) ) (n))) (p1)) (p2)) -> ((((((sameF_p) (B)) (((S) ) (n))) (p1)) (f)) (g)) -> (((eq) (B)) (((((y) (\lambda i : (nat) . (p1) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i)))) (((((((bigop_body) (B)) (((S) ) (n))) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i))))) (((((sym_eq_bigop_body_S) (B)) (n)) (\lambda y : (((nat) ) -> (bool) ) -> (B) -> ((B) -> (B) -> B) -> (((nat) ) -> B) -> B. ((((((sameF_upto) ((bool) )) (n)) (p1)) (p2)) -> ((((((sameF_p) (B)) (n)) (p1)) (f)) (g)) -> (((eq) (B)) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (p1) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i)))) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i)))) -> (((((sameF_upto) ((bool) )) (((S) ) (n))) (p1)) (p2)) -> ((((((sameF_p) (B)) (((S) ) (n))) (p1)) (f)) (g)) -> (((eq) (B)) (((((\lambda p : ((nat) ) -> (bool) . \lambda nil0 : B. \lambda op0 : (B) -> (B) -> B. \lambda f0 : ((nat) ) -> B. ((((match_bool_type) (B)) (((op0) ((f0) (n))) (((((((bigop) (B)) (n)) (p)) (nil0)) (op0)) (f0)))) (((((((bigop) (B)) (n)) (p)) (nil0)) (op0)) (f0))) ((p) (n))) (\lambda i : (nat) . (p1) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i)))) (((((y) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i))))) (\lambda Hind : (((((sameF_upto) ((bool) )) (n)) (p1)) (p2)) -> ((((((sameF_p) (B)) (n)) (p1)) (f)) (g)) -> (((eq) (B)) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (p1) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i)))) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i))). (\lambda samep : ((((sameF_upto) ((bool) )) (((S) ) (n))) (p1)) (p2). (\lambda samef : (((((sameF_p) (B)) (((S) ) (n))) (p1)) (f)) (g). (((((((eq_ind_r) (B)) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i)))) (\lambda x : B. (((eq) (B)) (((((match_bool_type) (B)) (((op) ((f) (n))) (x))) (x)) ((p1) (n)))) (((((match_bool_type) (B)) (((op) ((g) (n))) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i))))) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i)))) ((p2) (n))))) (((((((eq_ind) ((bool) )) ((p1) (n))) (\lambda x_1 : (bool) . (((eq) (B)) (((((match_bool_type) (B)) (((op) ((f) (n))) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i))))) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i)))) ((p1) (n)))) (((((match_bool_type) (B)) (((op) ((g) (n))) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i))))) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i)))) (x_1)))) (((((((match_Or_prop) ((((eq) ((bool) )) ((p1) (n))) ((true) ))) ((((eq) ((bool) )) ((p1) (n))) ((false) ))) ((((eq) (B)) (((((match_bool_type) (B)) (((op) ((f) (n))) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i))))) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i)))) ((p1) (n)))) (((((match_bool_type) (B)) (((op) ((g) (n))) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i))))) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i)))) ((p1) (n))))) (\lambda H1 : (((eq) ((bool) )) ((p1) (n))) ((true) ). (((((((eq_ind_r) ((bool) )) ((true) )) (\lambda x : (bool) . (((eq) (B)) (((((match_bool_type) (B)) (((op) ((f) (n))) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i))))) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i)))) (x))) (((((match_bool_type) (B)) (((op) ((g) (n))) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i))))) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i)))) (x)))) ((((((sym_eq_match_bool_type_true) (B)) (((op) ((f) (n))) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i))))) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i)))) (\lambda y : B. (((eq) (B)) (y)) (((((match_bool_type) (B)) (((op) ((g) (n))) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i))))) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i)))) ((true) )))) ((((((sym_eq_match_bool_type_true) (B)) (((op) ((g) (n))) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i))))) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i)))) (\lambda y : B. (((eq) (B)) (((op) ((f) (n))) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i))))) (y))) (((((((eq_ind) (B)) ((f) (n))) (\lambda x_1 : B. (((eq) (B)) (((op) ((f) (n))) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i))))) (((op) (x_1)) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i)))))) (((refl) (B)) (((op) ((f) (n))) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i)))))) ((g) (n))) ((((samef) (n)) ((le_n) (((S) ) (n)))) (H1)))))) ((p1) (n))) (H1)))) (\lambda H1 : (((eq) ((bool) )) ((p1) (n))) ((false) ). (((((((eq_ind_r) ((bool) )) ((false) )) (\lambda x : (bool) . (((eq) (B)) (((((match_bool_type) (B)) (((op) ((f) (n))) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i))))) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i)))) (x))) (((((match_bool_type) (B)) (((op) ((g) (n))) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i))))) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i)))) (x)))) ((((((sym_eq_match_bool_type_false) (B)) (((op) ((f) (n))) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i))))) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i)))) (\lambda y : B. (((eq) (B)) (y)) (((((match_bool_type) (B)) (((op) ((g) (n))) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i))))) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i)))) ((false) )))) ((((((sym_eq_match_bool_type_false) (B)) (((op) ((g) (n))) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i))))) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i)))) (\lambda y : B. (((eq) (B)) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i)))) (y))) (((refl) (B)) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (p2) (i))) (nil)) (op)) (\lambda i : (nat) . (g) (i))))))) ((p1) (n))) (H1)))) ((true_or_false) ((p1) (n))))) ((p2) (n))) (((samep) (n)) ((le_n) (((S) ) (n)))))) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (p1) (i))) (nil)) (op)) (\lambda i : (nat) . (f) (i)))) (((Hind) ((((((((sameF_upto_le) ((bool) )) (p1)) (p2)) (n)) (((S) ) (n))) (((((eq_coerc) ((((le) ) (((pred) ) (((S) ) (n)))) (((S) ) (n)))) ((((le) ) (n)) (((S) ) (n)))) ((le_pred_n) (((S) ) (n)))) (((((((rewrite_l) ((nat) )) (n)) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (j__)) (((S) ) (n)))) ((((le) ) (n)) (((S) ) (n))))) (((refl) (Prop)) ((((le) ) (n)) (((S) ) (n))))) (((pred) ) (((S) ) (n)))) ((pred_Sn) (n))))) (samep))) (((((((((sameF_p_le) (B)) (p1)) (f)) (g)) (n)) (((S) ) (n))) (((((eq_coerc) ((((le) ) (((pred) ) (((S) ) (n)))) (((S) ) (n)))) ((((le) ) (n)) (((S) ) (n)))) ((le_pred_n) (((S) ) (n)))) (((((((rewrite_l) ((nat) )) (n)) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (j__)) (((S) ) (n)))) ((((le) ) (n)) (((S) ) (n))))) (((refl) (Prop)) ((((le) ) (n)) (((S) ) (n))))) (((pred) ) (((S) ) (n)))) ((pred_Sn) (n))))) (samef)))))))))))) (k).
definition bigop_false : \forall B. \forall (n:(nat) ). \forall (nil:B). \forall (op:(B) -> (B) -> B). \forall (f:((nat) ) -> B). (((eq) (B)) (((((((bigop) (B)) (n)) (\lambda i : (nat) . (false) )) (nil)) (op)) (\lambda i : (nat) . (f) (i)))) (nil) := \lambda B : Type[0]. \lambda n : (nat) . \lambda nil : B. \lambda op : (B) -> (B) -> B. \lambda f : ((nat) ) -> B. ((((nat_ind) (\lambda j_x_365 : (nat) . (((eq) (B)) (((((((bigop) (B)) (j_x_365)) (\lambda i : (nat) . (false) )) (nil)) (op)) (\lambda i : (nat) . (f) (i)))) (nil))) ((((eq_bigop_body_O) (B)) (\lambda y : (((nat) ) -> (bool) ) -> (B) -> ((B) -> (B) -> B) -> (((nat) ) -> B) -> B. (((eq) (B)) (((((((bigop) (B)) ((O) )) (\lambda i : (nat) . (false) )) (nil)) (op)) (\lambda i : (nat) . (f) (i)))) (((((y) (\lambda i : (nat) . (false) )) (nil)) (op)) (\lambda i : (nat) . (f) (i))))) ((((eq_bigop_O) (B)) (\lambda y : (((nat) ) -> (bool) ) -> (B) -> ((B) -> (B) -> B) -> (((nat) ) -> B) -> B. (((eq) (B)) (((((((bigop) (B)) ((O) )) (\lambda i : (nat) . (false) )) (nil)) (op)) (\lambda i : (nat) . (f) (i)))) (((((y) (\lambda i : (nat) . (false) )) (nil)) (op)) (\lambda i : (nat) . (f) (i))))) (((refl) (B)) (((((((bigop) (B)) ((O) )) (\lambda i : (nat) . (false) )) (nil)) (op)) (\lambda i : (nat) . (f) (i))))))) (\lambda n1 : (nat) . \lambda Hind : (((eq) (B)) (((((((bigop) (B)) (n1)) (\lambda i : (nat) . (false) )) (nil)) (op)) (\lambda i : (nat) . (f) (i)))) (nil). (((((((eq_ind_r) (B)) (((((((bigop) (B)) (n1)) (\lambda i : (nat) . (false) )) (nil)) (op)) (\lambda i : (nat) . (f) (i)))) (\lambda x : B. (((eq) (B)) (x)) (nil))) (((((((rewrite_r) (B)) (nil)) (\lambda j__ : B. (((eq) (B)) (j__)) (nil))) (((refl) (B)) (nil))) (((((((bigop) (B)) (n1)) (\lambda i : (nat) . (false) )) (nil)) (op)) (\lambda i : (nat) . (f) (i)))) (Hind))) (((((((bigop) (B)) (((S) ) (n1))) (\lambda i : (nat) . (false) )) (nil)) (op)) (\lambda i : (nat) . (f) (i)))) ((((((((bigop_Sfalse) (B)) (n1)) (\lambda j__ : (nat) . (false) )) (nil)) (op)) (f)) (((refl) ((bool) )) ((false) )))))) (n).
axiom Aop : \forall A : Type[0] . (A) -> Prop.
axiom mk_Aop : \forall A. \forall (nil:A). \forall (op:(A) -> (A) -> A). (\forall (a:A). (((eq) (A)) (((op) (nil)) (a))) (a)) -> (\forall (a:A). (((eq) (A)) (((op) (a)) (nil))) (a)) -> (\forall (a:A). \forall (b:A). \forall (c:A). (((eq) (A)) (((op) (a)) (((op) (b)) (c)))) (((op) (((op) (a)) (b))) (c))) -> ((Aop) (A)) (nil).
definition assoc : \forall (a:(nat) ). \forall (b:(nat) ). \forall (c:(nat) ). (((eq) ((nat) )) ((((times) ) (a)) ((((times) ) (b)) (c)))) ((((times) ) ((((times) ) (a)) (b))) (c)) := \lambda a : (nat) . \lambda b : (nat) . \lambda c : (nat) . ((((sym_eq) ((nat) )) ((((times) ) ((((times) ) (a)) (b))) (c))) ((((times) ) (a)) ((((times) ) (b)) (c)))) ((((associative_times) (a)) (b)) (c)).
definition timesA : ((Aop) ((nat) )) (((S) ) ((O) )) := ((((((mk_Aop) ((nat) )) (((S) ) ((O) ))) ((times) )) (\lambda a : (nat) . (((sym_eq_times) (((S) ) ((O) ))) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((y) (a))) (a))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((times_body) )) ((O) )) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((y) (a))) (a))) ((((sym_eq_times_body_S) ((O) )) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((y) (a))) (a))) ((((sym_eq_times) ((O) )) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((plus) ) (a)) ((y) (a)))) (a))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((times_body) )) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((plus) ) (a)) ((y) (a)))) (a))) (((sym_eq_times_body_O) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((plus) ) (a)) ((y) (a)))) (a))) (((((sym_eq) ((nat) )) (a)) ((((plus) ) (a)) ((O) ))) ((plus_n_O) (a)))))))))) (\lambda n : (nat) . ((((sym_eq) ((nat) )) (n)) ((((times) ) (n)) (((S) ) ((O) )))) ((times_n_1) (n)))) (\lambda a : (nat) . \lambda b : (nat) . \lambda c : (nat) . ((((sym_eq) ((nat) )) ((((times) ) ((((times) ) (a)) (b))) (c))) ((((times) ) (a)) ((((times) ) (b)) (c)))) ((((associative_times) (a)) (b)) (c))).
definition bigop_I_gen : \forall (a:(nat) ). \forall (b:(nat) ). \forall (p:((nat) ) -> (bool) ). \forall (f:((nat) ) -> (nat) ). ((((le) ) (a)) (b)) -> (((eq) ((nat) )) (((((((bigop) ((nat) )) ((((minus) ) (b)) (a))) (\lambda i : (nat) . (p) ((((plus) ) (i)) (a)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) ((((plus) ) (i)) (a))))) (((((((bigop) ((nat) )) (b)) (\lambda i : (nat) . (((andb) ) ((((leb) ) (a)) (i))) ((p) (i)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) (i))) := \lambda a : (nat) . \lambda b : (nat) . ((((nat_ind) (\lambda j_x_365 : (nat) . \forall (p:((nat) ) -> (bool) ). \forall (f:((nat) ) -> (nat) ). ((((le) ) (a)) (j_x_365)) -> (((eq) ((nat) )) (((((((bigop) ((nat) )) ((((minus) ) (j_x_365)) (a))) (\lambda i : (nat) . (p) ((((plus) ) (i)) (a)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) ((((plus) ) (i)) (a))))) (((((((bigop) ((nat) )) (j_x_365)) (\lambda i : (nat) . (((andb) ) ((((leb) ) (a)) (i))) ((p) (i)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) (i))))) (\lambda p : ((nat) ) -> (bool) . \lambda f : ((nat) ) -> (nat) . (((sym_eq_bigop_O) ((nat) )) (\lambda y : (((nat) ) -> (bool) ) -> ((nat) ) -> (((nat) ) -> ((nat) ) -> (nat) ) -> (((nat) ) -> (nat) ) -> (nat) . ((((le) ) (a)) ((O) )) -> (((eq) ((nat) )) (((((((bigop) ((nat) )) ((((minus) ) ((O) )) (a))) (\lambda i : (nat) . (p) ((((plus) ) (i)) (a)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) ((((plus) ) (i)) (a))))) (((((y) (\lambda i : (nat) . (((andb) ) ((((leb) ) (a)) (i))) ((p) (i)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) (i))))) ((((sym_eq_bigop_body_O) ((nat) )) (\lambda y : (((nat) ) -> (bool) ) -> ((nat) ) -> (((nat) ) -> ((nat) ) -> (nat) ) -> (((nat) ) -> (nat) ) -> (nat) . ((((le) ) (a)) ((O) )) -> (((eq) ((nat) )) (((((((bigop) ((nat) )) ((((minus) ) ((O) )) (a))) (\lambda i : (nat) . (p) ((((plus) ) (i)) (a)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) ((((plus) ) (i)) (a))))) (((((y) (\lambda i : (nat) . (((andb) ) ((((leb) ) (a)) (i))) ((p) (i)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) (i))))) ((((eq_bigop_body_O) ((nat) )) (\lambda y : (((nat) ) -> (bool) ) -> ((nat) ) -> (((nat) ) -> ((nat) ) -> (nat) ) -> (((nat) ) -> (nat) ) -> (nat) . ((((le) ) (a)) ((O) )) -> (((eq) ((nat) )) (((((((bigop) ((nat) )) ((((minus) ) ((O) )) (a))) (\lambda i : (nat) . (p) ((((plus) ) (i)) (a)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) ((((plus) ) (i)) (a))))) (((((y) (\lambda i : (nat) . (p) ((((plus) ) (i)) (a)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) ((((plus) ) (i)) (a)))))) ((((eq_bigop_O) ((nat) )) (\lambda y : (((nat) ) -> (bool) ) -> ((nat) ) -> (((nat) ) -> ((nat) ) -> (nat) ) -> (((nat) ) -> (nat) ) -> (nat) . ((((le) ) (a)) ((O) )) -> (((eq) ((nat) )) (((((((bigop) ((nat) )) ((((minus) ) ((O) )) (a))) (\lambda i : (nat) . (p) ((((plus) ) (i)) (a)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) ((((plus) ) (i)) (a))))) (((((y) (\lambda i : (nat) . (p) ((((plus) ) (i)) (a)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) ((((plus) ) (i)) (a)))))) (((eq_minus_body_O) (\lambda y : ((nat) ) -> (nat) . ((((le) ) (a)) ((O) )) -> (((eq) ((nat) )) (((((((bigop) ((nat) )) ((((minus) ) ((O) )) (a))) (\lambda i : (nat) . (p) ((((plus) ) (i)) (a)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) ((((plus) ) (i)) (a))))) (((((((bigop) ((nat) )) ((y) (a))) (\lambda i : (nat) . (p) ((((plus) ) (i)) (a)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) ((((plus) ) (i)) (a)))))) (((((eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((minus_body) )) (\lambda y : ((nat) ) -> (nat) . ((((le) ) (a)) ((O) )) -> (((eq) ((nat) )) (((((((bigop) ((nat) )) ((((minus) ) ((O) )) (a))) (\lambda i : (nat) . (p) ((((plus) ) (i)) (a)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) ((((plus) ) (i)) (a))))) (((((((bigop) ((nat) )) ((y) (a))) (\lambda i : (nat) . (p) ((((plus) ) (i)) (a)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) ((((plus) ) (i)) (a)))))) ((((eq_minus) ((O) )) (\lambda y : ((nat) ) -> (nat) . ((((le) ) (a)) ((O) )) -> (((eq) ((nat) )) (((((((bigop) ((nat) )) ((((minus) ) ((O) )) (a))) (\lambda i : (nat) . (p) ((((plus) ) (i)) (a)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) ((((plus) ) (i)) (a))))) (((((((bigop) ((nat) )) ((y) (a))) (\lambda i : (nat) . (p) ((((plus) ) (i)) (a)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) ((((plus) ) (i)) (a)))))) (\lambda auto : (((le) ) (a)) ((O) ). (((refl) ((nat) )) (((((((bigop) ((nat) )) ((((minus) ) ((O) )) (a))) (\lambda i : (nat) . (p) ((((plus) ) (i)) (a)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) ((((plus) ) (i)) (a)))))))))))))) (\lambda b0 : (nat) . \lambda Hind : \forall (p:((nat) ) -> (bool) ). \forall (f:((nat) ) -> (nat) ). ((((le) ) (a)) (b0)) -> (((eq) ((nat) )) (((((((bigop) ((nat) )) ((((minus) ) (b0)) (a))) (\lambda i : (nat) . (p) ((((plus) ) (i)) (a)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) ((((plus) ) (i)) (a))))) (((((((bigop) ((nat) )) (b0)) (\lambda i : (nat) . (((andb) ) ((((leb) ) (a)) (i))) ((p) (i)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) (i))). (\lambda p : ((nat) ) -> (bool) . \lambda f : ((nat) ) -> (nat) . \lambda lea : (((le) ) (a)) (((S) ) (b0)). (((((((match_Or_prop) ((((lt) ) (a)) (((S) ) (b0)))) ((((eq) ((nat) )) (a)) (((S) ) (b0)))) ((((eq) ((nat) )) (((((((bigop) ((nat) )) ((((minus) ) (((S) ) (b0))) (a))) (\lambda i : (nat) . (p) ((((plus) ) (i)) (a)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) ((((plus) ) (i)) (a))))) (((((((bigop) ((nat) )) (((S) ) (b0))) (\lambda i : (nat) . (((andb) ) ((((leb) ) (a)) (i))) ((p) (i)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) (i))))) (\lambda Ha : (((lt) ) (a)) (((S) ) (b0)). (((((((match_Or_prop) ((((eq) ((bool) )) ((p) (b0))) ((true) ))) ((((eq) ((bool) )) ((p) (b0))) ((false) ))) ((((eq) ((nat) )) (((((((bigop) ((nat) )) ((((minus) ) (((S) ) (b0))) (a))) (\lambda i : (nat) . (p) ((((plus) ) (i)) (a)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) ((((plus) ) (i)) (a))))) (((((((bigop) ((nat) )) (((S) ) (b0))) (\lambda i : (nat) . (((andb) ) ((((leb) ) (a)) (i))) ((p) (i)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) (i))))) (\lambda Hcase : (((eq) ((bool) )) ((p) (b0))) ((true) ). (((((((eq_ind_r) ((nat) )) ((((times) ) ((f) (b0))) (((((((bigop) ((nat) )) (b0)) (\lambda i : (nat) . (((andb) ) ((((leb) ) (a)) (i))) ((p) (i)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) (i))))) (\lambda x : (nat) . (((eq) ((nat) )) (((((((bigop) ((nat) )) ((((minus) ) (((S) ) (b0))) (a))) (\lambda i : (nat) . (p) ((((plus) ) (i)) (a)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) ((((plus) ) (i)) (a))))) (x))) (((((((eq_ind_r) ((nat) )) (((S) ) ((((minus) ) (b0)) (a)))) (\lambda x : (nat) . (((eq) ((nat) )) (((((((bigop) ((nat) )) (x)) (\lambda i : (nat) . (p) ((((plus) ) (i)) (a)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) ((((plus) ) (i)) (a))))) ((((times) ) ((f) (b0))) (((((((bigop) ((nat) )) (b0)) (\lambda i : (nat) . (((andb) ) ((((leb) ) (a)) (i))) ((p) (i)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) (i)))))) (((((((eq_ind_r) ((nat) )) ((((times) ) ((f) ((((plus) ) ((((minus) ) (b0)) (a))) (a)))) (((((((bigop) ((nat) )) ((((minus) ) (b0)) (a))) (\lambda i : (nat) . (p) ((((plus) ) (i)) (a)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) ((((plus) ) (i)) (a)))))) (\lambda x : (nat) . (((eq) ((nat) )) (x)) ((((times) ) ((f) (b0))) (((((((bigop) ((nat) )) (b0)) (\lambda i : (nat) . (((andb) ) ((((leb) ) (a)) (i))) ((p) (i)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) (i)))))) (((((((((((eq_f2) ((nat) )) ((nat) )) ((nat) )) ((times) )) ((f) ((((plus) ) ((((minus) ) (b0)) (a))) (a)))) ((f) (b0))) (((((((bigop) ((nat) )) ((((minus) ) (b0)) (a))) (\lambda i : (nat) . (p) ((((plus) ) (i)) (a)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) ((((plus) ) (i)) (a))))) (((((((bigop) ((nat) )) (b0)) (\lambda i : (nat) . (((andb) ) ((((leb) ) (a)) (i))) ((p) (i)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) (i)))) (((((((eq_f) ((nat) )) ((nat) )) (f)) ((((plus) ) ((((minus) ) (b0)) (a))) (a))) (b0)) (((((((eq_ind) ((nat) )) (b0)) (\lambda x_1 : (nat) . (((eq) ((nat) )) (x_1)) (b0))) (((refl) ((nat) )) (b0))) ((((plus) ) ((((minus) ) (b0)) (a))) (a))) ((((plus_minus_m_m) (b0)) (a)) ((((le_S_S_to_le) (a)) (b0)) (Ha)))))) ((((Hind) (p)) (f)) ((((le_S_S_to_le) (a)) (b0)) (Ha))))) (((((((bigop) ((nat) )) (((S) ) ((((minus) ) (b0)) (a)))) (\lambda i : (nat) . (p) ((((plus) ) (i)) (a)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) ((((plus) ) (i)) (a))))) ((((((((bigop_Strue) ((nat) )) ((((minus) ) (b0)) (a))) (\lambda j__ : (nat) . (p) ((((plus) ) (j__)) (a)))) (((S) ) ((O) ))) ((times) )) (\lambda j__ : (nat) . (f) ((((plus) ) (j__)) (a)))) (((((((eq_ind) ((nat) )) (b0)) (\lambda x_1 : (nat) . (((eq) ((bool) )) ((p) (x_1))) ((true) ))) (((((((rewrite_r) ((bool) )) ((true) )) (\lambda j__ : (bool) . (((eq) ((bool) )) (j__)) ((true) ))) (((refl) ((bool) )) ((true) ))) ((p) (b0))) (Hcase))) ((((plus) ) ((((minus) ) (b0)) (a))) (a))) ((((plus_minus_m_m) (b0)) (a)) ((((le_S_S_to_le) (a)) (b0)) (Ha))))))) ((((minus) ) (((S) ) (b0))) (a))) ((((((match_nat_prop) (\lambda j__ : (nat) . ((((le) ) (j__)) (b0)) -> (((eq) ((nat) )) ((((minus) ) (((S) ) (b0))) (j__))) (((S) ) ((((minus) ) (b0)) (j__))))) (\lambda auto : (((le) ) ((O) )) (b0). (((((((rewrite_l) ((nat) )) (((S) ) (b0))) (\lambda j__ : (nat) . (((eq) ((nat) )) (j__)) (((S) ) ((((minus) ) (b0)) ((O) ))))) (((((((rewrite_l) ((nat) )) (b0)) (\lambda j__ : (nat) . (((eq) ((nat) )) (((S) ) (b0))) (((S) ) (j__)))) (((refl) ((nat) )) (((S) ) (b0)))) ((((minus) ) (b0)) ((O) ))) ((minus_n_O) (b0)))) ((((minus) ) (((S) ) (b0))) ((O) ))) ((minus_n_O) (((S) ) (b0)))))) ((((sym_eq_minus) (((S) ) (b0))) (\lambda y : ((nat) ) -> (nat) . \forall (n:(nat) ). ((((le) ) (((S) ) (n))) (b0)) -> (((eq) ((nat) )) ((y) (((S) ) (n)))) (((S) ) ((((minus) ) (b0)) (((S) ) (n)))))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((minus_body) )) (b0)) (\lambda y : ((nat) ) -> (nat) . \forall (n:(nat) ). ((((le) ) (((S) ) (n))) (b0)) -> (((eq) ((nat) )) ((y) (((S) ) (n)))) (((S) ) ((((minus) ) (b0)) (((S) ) (n)))))) (\lambda a1 : (nat) . (((sym_eq_minus_body_S) (b0)) (\lambda y : ((nat) ) -> (nat) . ((((le) ) (((S) ) (a1))) (b0)) -> (((eq) ((nat) )) ((y) (((S) ) (a1)))) (((S) ) ((((minus) ) (b0)) (((S) ) (a1)))))) (((((((sym_eq_match_nat_type_S) ((nat) )) (((S) ) (b0))) (\lambda q : (nat) . (((minus) ) (b0)) (q))) (a1)) (\lambda y : (nat) . ((((le) ) (((S) ) (a1))) (b0)) -> (((eq) ((nat) )) (y)) (((S) ) ((((minus) ) (b0)) (((S) ) (a1)))))) (\lambda lta1 : (((le) ) (((S) ) (a1))) (b0). (((((((eq_ind_r) ((nat) )) (((pred) ) ((((minus) ) (b0)) (a1)))) (\lambda x : (nat) . (((eq) ((nat) )) ((((minus) ) (b0)) (a1))) (((S) ) (x)))) (((((((eq_ind_r) ((nat) )) ((((minus) ) (b0)) (a1))) (\lambda x : (nat) . (((eq) ((nat) )) ((((minus) ) (b0)) (a1))) (x))) (((refl) ((nat) )) ((((minus) ) (b0)) (a1)))) (((S) ) (((pred) ) ((((minus) ) (b0)) (a1))))) (((S_pred) ((((minus) ) (b0)) (a1))) (((((lt_plus_to_minus_r) ((O) )) (a1)) (b0)) ((((sym_eq_plus) ((O) )) (\lambda y : ((nat) ) -> (nat) . (((le) ) (((S) ) ((y) (a1)))) (b0))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((plus_body) )) (\lambda y : ((nat) ) -> (nat) . (((le) ) (((S) ) ((y) (a1)))) (b0))) (((sym_eq_plus_body_O) (\lambda y : ((nat) ) -> (nat) . (((le) ) (((S) ) ((y) (a1)))) (b0))) (lta1)))))))) ((((minus) ) (b0)) (((S) ) (a1)))) (((eq_minus_S_pred) (b0)) (a1))))))))) (a)) ((((le_S_S_to_le) (a)) (b0)) (Ha))))) (((((((bigop) ((nat) )) (((S) ) (b0))) (\lambda i : (nat) . (((andb) ) ((((leb) ) (a)) (i))) ((p) (i)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) (i)))) ((((((((bigop_Strue) ((nat) )) (b0)) (\lambda j__ : (nat) . (((andb) ) ((((leb) ) (a)) (j__))) ((p) (j__)))) (((S) ) ((O) ))) ((times) )) (f)) (((((((eq_ind_r) ((bool) )) ((true) )) (\lambda x : (bool) . (((eq) ((bool) )) ((((andb) ) ((((leb) ) (a)) (b0))) (x))) ((true) ))) (((((((eq_ind_r) ((bool) )) ((true) )) (\lambda x : (bool) . (((eq) ((bool) )) ((((andb) ) (x)) ((true) ))) ((true) ))) ((((((eq_match_bool_type_true) ((bool) )) ((true) )) ((false) )) (\lambda y : (bool) . (((eq) ((bool) )) (((((match_bool_type) ((bool) )) ((true) )) ((false) )) ((true) ))) (y))) (((refl) ((bool) )) ((((andb) ) ((true) )) ((true) ))))) ((((leb) ) (a)) (b0))) ((((le_to_leb_true) (a)) (b0)) ((((le_S_S_to_le) (a)) (b0)) (Ha))))) ((p) (b0))) (Hcase)))))) (\lambda Hcase : (((eq) ((bool) )) ((p) (b0))) ((false) ). (((((((eq_ind_r) ((nat) )) (((((((bigop) ((nat) )) (b0)) (\lambda i : (nat) . (((andb) ) ((((leb) ) (a)) (i))) ((p) (i)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) (i)))) (\lambda x : (nat) . (((eq) ((nat) )) (((((((bigop) ((nat) )) ((((minus) ) (((S) ) (b0))) (a))) (\lambda i : (nat) . (p) ((((plus) ) (i)) (a)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) ((((plus) ) (i)) (a))))) (x))) (((((((eq_ind_r) ((nat) )) (((S) ) ((((minus) ) (b0)) (a)))) (\lambda x : (nat) . (((eq) ((nat) )) (((((((bigop) ((nat) )) (x)) (\lambda i : (nat) . (p) ((((plus) ) (i)) (a)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) ((((plus) ) (i)) (a))))) (((((((bigop) ((nat) )) (b0)) (\lambda i : (nat) . (((andb) ) ((((leb) ) (a)) (i))) ((p) (i)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) (i))))) (((((((eq_ind_r) ((nat) )) (((((((bigop) ((nat) )) ((((minus) ) (b0)) (a))) (\lambda i : (nat) . (p) ((((plus) ) (i)) (a)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) ((((plus) ) (i)) (a))))) (\lambda x : (nat) . (((eq) ((nat) )) (x)) (((((((bigop) ((nat) )) (b0)) (\lambda i : (nat) . (((andb) ) ((((leb) ) (a)) (i))) ((p) (i)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) (i))))) ((((Hind) (p)) (f)) ((((le_S_S_to_le) (a)) (b0)) (Ha)))) (((((((bigop) ((nat) )) (((S) ) ((((minus) ) (b0)) (a)))) (\lambda i : (nat) . (p) ((((plus) ) (i)) (a)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) ((((plus) ) (i)) (a))))) ((((((((bigop_Sfalse) ((nat) )) ((((minus) ) (b0)) (a))) (\lambda j__ : (nat) . (p) ((((plus) ) (j__)) (a)))) (((S) ) ((O) ))) ((times) )) (\lambda j__ : (nat) . (f) ((((plus) ) (j__)) (a)))) (((((((eq_ind) ((nat) )) (b0)) (\lambda x_1 : (nat) . (((eq) ((bool) )) ((p) (x_1))) ((false) ))) (((((((rewrite_r) ((bool) )) ((false) )) (\lambda j__ : (bool) . (((eq) ((bool) )) (j__)) ((false) ))) (((refl) ((bool) )) ((false) ))) ((p) (b0))) (Hcase))) ((((plus) ) ((((minus) ) (b0)) (a))) (a))) ((((plus_minus_m_m) (b0)) (a)) ((((le_S_S_to_le) (a)) (b0)) (Ha))))))) ((((minus) ) (((S) ) (b0))) (a))) ((((((match_nat_prop) (\lambda j__ : (nat) . ((((le) ) (j__)) (b0)) -> (((eq) ((nat) )) ((((minus) ) (((S) ) (b0))) (j__))) (((S) ) ((((minus) ) (b0)) (j__))))) (\lambda auto : (((le) ) ((O) )) (b0). (((((((rewrite_l) ((nat) )) (((S) ) (b0))) (\lambda j__ : (nat) . (((eq) ((nat) )) (j__)) (((S) ) ((((minus) ) (b0)) ((O) ))))) (((((((rewrite_l) ((nat) )) (b0)) (\lambda j__ : (nat) . (((eq) ((nat) )) (((S) ) (b0))) (((S) ) (j__)))) (((refl) ((nat) )) (((S) ) (b0)))) ((((minus) ) (b0)) ((O) ))) ((minus_n_O) (b0)))) ((((minus) ) (((S) ) (b0))) ((O) ))) ((minus_n_O) (((S) ) (b0)))))) ((((sym_eq_minus) (((S) ) (b0))) (\lambda y : ((nat) ) -> (nat) . \forall (n:(nat) ). ((((le) ) (((S) ) (n))) (b0)) -> (((eq) ((nat) )) ((y) (((S) ) (n)))) (((S) ) ((((minus) ) (b0)) (((S) ) (n)))))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((minus_body) )) (b0)) (\lambda y : ((nat) ) -> (nat) . \forall (n:(nat) ). ((((le) ) (((S) ) (n))) (b0)) -> (((eq) ((nat) )) ((y) (((S) ) (n)))) (((S) ) ((((minus) ) (b0)) (((S) ) (n)))))) (\lambda a1 : (nat) . (((sym_eq_minus_body_S) (b0)) (\lambda y : ((nat) ) -> (nat) . ((((le) ) (((S) ) (a1))) (b0)) -> (((eq) ((nat) )) ((y) (((S) ) (a1)))) (((S) ) ((((minus) ) (b0)) (((S) ) (a1)))))) (((((((sym_eq_match_nat_type_S) ((nat) )) (((S) ) (b0))) (\lambda q : (nat) . (((minus) ) (b0)) (q))) (a1)) (\lambda y : (nat) . ((((le) ) (((S) ) (a1))) (b0)) -> (((eq) ((nat) )) (y)) (((S) ) ((((minus) ) (b0)) (((S) ) (a1)))))) (\lambda lta1 : (((le) ) (((S) ) (a1))) (b0). (((((((eq_ind_r) ((nat) )) (((pred) ) ((((minus) ) (b0)) (a1)))) (\lambda x : (nat) . (((eq) ((nat) )) ((((minus) ) (b0)) (a1))) (((S) ) (x)))) (((((((eq_ind_r) ((nat) )) ((((minus) ) (b0)) (a1))) (\lambda x : (nat) . (((eq) ((nat) )) ((((minus) ) (b0)) (a1))) (x))) (((refl) ((nat) )) ((((minus) ) (b0)) (a1)))) (((S) ) (((pred) ) ((((minus) ) (b0)) (a1))))) (((S_pred) ((((minus) ) (b0)) (a1))) (((((lt_plus_to_minus_r) ((O) )) (a1)) (b0)) ((((sym_eq_plus) ((O) )) (\lambda y : ((nat) ) -> (nat) . (((le) ) (((S) ) ((y) (a1)))) (b0))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((plus_body) )) (\lambda y : ((nat) ) -> (nat) . (((le) ) (((S) ) ((y) (a1)))) (b0))) (((sym_eq_plus_body_O) (\lambda y : ((nat) ) -> (nat) . (((le) ) (((S) ) ((y) (a1)))) (b0))) (lta1)))))))) ((((minus) ) (b0)) (((S) ) (a1)))) (((eq_minus_S_pred) (b0)) (a1))))))))) (a)) ((((le_S_S_to_le) (a)) (b0)) (Ha))))) (((((((bigop) ((nat) )) (((S) ) (b0))) (\lambda i : (nat) . (((andb) ) ((((leb) ) (a)) (i))) ((p) (i)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) (i)))) ((((((((bigop_Sfalse) ((nat) )) (b0)) (\lambda j__ : (nat) . (((andb) ) ((((leb) ) (a)) (j__))) ((p) (j__)))) (((S) ) ((O) ))) ((times) )) (f)) (((((((eq_ind_r) ((bool) )) ((false) )) (\lambda x : (bool) . (((eq) ((bool) )) ((((andb) ) ((((leb) ) (a)) (b0))) (x))) ((false) ))) (((((match_bool_prop) (\lambda j__ : (bool) . (((eq) ((bool) )) ((((andb) ) (j__)) ((false) ))) ((false) ))) ((((((eq_match_bool_type_true) ((bool) )) ((false) )) ((false) )) (\lambda y : (bool) . (((eq) ((bool) )) (((((match_bool_type) ((bool) )) ((false) )) ((false) )) ((true) ))) (y))) (((refl) ((bool) )) ((((andb) ) ((true) )) ((false) ))))) ((((((eq_match_bool_type_false) ((bool) )) ((false) )) ((false) )) (\lambda y : (bool) . (((eq) ((bool) )) (((((match_bool_type) ((bool) )) ((false) )) ((false) )) ((false) ))) (y))) (((refl) ((bool) )) ((((andb) ) ((false) )) ((false) ))))) ((((leb) ) (a)) (b0)))) ((p) (b0))) (Hcase)))))) ((true_or_false) ((p) (b0)))))) (\lambda Ha : (((eq) ((nat) )) (a)) (((S) ) (b0)). (((((((eq_ind) ((nat) )) (a)) (\lambda x_1 : (nat) . (((eq) ((nat) )) (((((((bigop) ((nat) )) ((((minus) ) (x_1)) (a))) (\lambda i : (nat) . (p) ((((plus) ) (i)) (a)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) ((((plus) ) (i)) (a))))) (((((((bigop) ((nat) )) (x_1)) (\lambda i : (nat) . (((andb) ) ((((leb) ) (a)) (i))) ((p) (i)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) (i))))) (((((((eq_ind) ((nat) )) ((O) )) (\lambda x_1 : (nat) . (((eq) ((nat) )) (((((((bigop) ((nat) )) (x_1)) (\lambda i : (nat) . (p) ((((plus) ) (i)) (a)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) ((((plus) ) (i)) (a))))) (((((((bigop) ((nat) )) (a)) (\lambda i : (nat) . (((andb) ) ((((leb) ) (a)) (i))) ((p) (i)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) (i))))) ((((sym_eq_bigop_O) ((nat) )) (\lambda y : (((nat) ) -> (bool) ) -> ((nat) ) -> (((nat) ) -> ((nat) ) -> (nat) ) -> (((nat) ) -> (nat) ) -> (nat) . (((eq) ((nat) )) (((((y) (\lambda i : (nat) . (p) ((((plus) ) (i)) (a)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) ((((plus) ) (i)) (a))))) (((((((bigop) ((nat) )) (a)) (\lambda i : (nat) . (((andb) ) ((((leb) ) (a)) (i))) ((p) (i)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) (i))))) ((((sym_eq_bigop_body_O) ((nat) )) (\lambda y : (((nat) ) -> (bool) ) -> ((nat) ) -> (((nat) ) -> ((nat) ) -> (nat) ) -> (((nat) ) -> (nat) ) -> (nat) . (((eq) ((nat) )) (((((y) (\lambda i : (nat) . (p) ((((plus) ) (i)) (a)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) ((((plus) ) (i)) (a))))) (((((((bigop) ((nat) )) (a)) (\lambda i : (nat) . (((andb) ) ((((leb) ) (a)) (i))) ((p) (i)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) (i))))) (((((((eq_ind) ((nat) )) (((((((bigop) ((nat) )) (a)) (\lambda i : (nat) . (false) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) (i)))) (\lambda x_1 : (nat) . (((eq) ((nat) )) (x_1)) (((((((bigop) ((nat) )) (a)) (\lambda i : (nat) . (((andb) ) ((((leb) ) (a)) (i))) ((p) (i)))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) (i))))) (((((((((((same_bigop) ((nat) )) (a)) (\lambda j__ : (nat) . (false) )) (\lambda j__ : (nat) . (((andb) ) ((((leb) ) (a)) (j__))) ((p) (j__)))) (((S) ) ((O) ))) ((times) )) (f)) (f)) (\lambda i : (nat) . \lambda ltia : (((lt) ) (i)) (a). (((((((eq_ind_r) ((bool) )) ((false) )) (\lambda x : (bool) . (((eq) ((bool) )) ((false) )) ((((andb) ) (x)) ((p) (i))))) ((((((sym_eq_match_bool_type_false) ((bool) )) ((p) (i))) ((false) )) (\lambda y : (bool) . (((eq) ((bool) )) ((false) )) (y))) (((refl) ((bool) )) ((false) )))) ((((leb) ) (a)) (i))) ((((not_le_to_leb_false) (a)) (i)) ((((lt_to_not_le) (i)) (a)) (ltia)))))) (\lambda i : (nat) . \lambda auto : (((lt) ) (i)) (a). (\lambda auto' : (((eq) ((bool) )) ((false) )) ((true) ). (((refl) ((nat) )) ((f) (i))))))) (((S) ) ((O) ))) ((((((bigop_false) ((nat) )) (a)) (((S) ) ((O) ))) ((times) )) (f)))))) ((((minus) ) (a)) (a))) ((minus_n_n) (a)))) (((S) ) (b0))) (Ha)))) ((((le_to_or_lt_eq) (a)) (((S) ) (b0))) (lea)))))) (b).
axiom ACop : \forall A : Type[0] . (A) -> Prop.
axiom mk_ACop : \forall A. \forall (nil:A). \forall (op:(A) -> (A) -> A). (\forall (a:A). (((eq) (A)) (((op) (nil)) (a))) (a)) -> (\forall (a:A). (((eq) (A)) (((op) (a)) (nil))) (a)) -> (\forall (a:A). \forall (b:A). \forall (c:A). (((eq) (A)) (((op) (a)) (((op) (b)) (c)))) (((op) (((op) (a)) (b))) (c))) -> (\forall (a:A). \forall (b:A). (((eq) (A)) (((op) (a)) (b))) (((op) (b)) (a))) -> ((ACop) (A)) (nil).
definition timesAC : ((ACop) ((nat) )) (((S) ) ((O) )) := (((((((mk_ACop) ((nat) )) (((S) ) ((O) ))) ((times) )) (\lambda a : (nat) . (((sym_eq_times) (((S) ) ((O) ))) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((y) (a))) (a))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((times_body) )) ((O) )) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((y) (a))) (a))) ((((sym_eq_times_body_S) ((O) )) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((y) (a))) (a))) ((((sym_eq_times) ((O) )) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((plus) ) (a)) ((y) (a)))) (a))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((times_body) )) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((plus) ) (a)) ((y) (a)))) (a))) (((sym_eq_times_body_O) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((plus) ) (a)) ((y) (a)))) (a))) (((((sym_eq) ((nat) )) (a)) ((((plus) ) (a)) ((O) ))) ((plus_n_O) (a)))))))))) (\lambda n : (nat) . ((((sym_eq) ((nat) )) (n)) ((((times) ) (n)) (((S) ) ((O) )))) ((times_n_1) (n)))) (\lambda a : (nat) . \lambda b : (nat) . \lambda c : (nat) . ((((sym_eq) ((nat) )) ((((times) ) ((((times) ) (a)) (b))) (c))) ((((times) ) (a)) ((((times) ) (b)) (c)))) ((((associative_times) (a)) (b)) (c)))) (commutative_times).
definition bigop_diff : \forall (p:((nat) ) -> (bool) ). \forall (f:((nat) ) -> (nat) ). \forall (i:(nat) ). \forall (n:(nat) ). ((((lt) ) (i)) (n)) -> ((((eq) ((bool) )) ((p) (i))) ((true) )) -> (((eq) ((nat) )) (((((((bigop) ((nat) )) (n)) (\lambda x : (nat) . (p) (x))) (((S) ) ((O) ))) ((times) )) (\lambda x : (nat) . (f) (x)))) ((((times) ) ((f) (i))) (((((((bigop) ((nat) )) (n)) (\lambda x : (nat) . (((andb) ) (((notb) ) ((((eqb) ) (i)) (x)))) ((p) (x)))) (((S) ) ((O) ))) ((times) )) (\lambda x : (nat) . (f) (x)))) := \lambda p : ((nat) ) -> (bool) . \lambda f : ((nat) ) -> (nat) . \lambda i : (nat) . \lambda n : (nat) . ((((nat_ind) (\lambda j_x_365 : (nat) . ((((lt) ) (i)) (j_x_365)) -> ((((eq) ((bool) )) ((p) (i))) ((true) )) -> (((eq) ((nat) )) (((((((bigop) ((nat) )) (j_x_365)) (\lambda x : (nat) . (p) (x))) (((S) ) ((O) ))) ((times) )) (\lambda x : (nat) . (f) (x)))) ((((times) ) ((f) (i))) (((((((bigop) ((nat) )) (j_x_365)) (\lambda x : (nat) . (((andb) ) (((notb) ) ((((eqb) ) (i)) (x)))) ((p) (x)))) (((S) ) ((O) ))) ((times) )) (\lambda x : (nat) . (f) (x)))))) (\lambda ltO : (((lt) ) (i)) ((O) ). (((falsity) (((((eq) ((bool) )) ((p) (i))) ((true) )) -> (((eq) ((nat) )) (((((((bigop) ((nat) )) ((O) )) (\lambda x : (nat) . (p) (x))) (((S) ) ((O) ))) ((times) )) (\lambda x : (nat) . (f) (x)))) ((((times) ) ((f) (i))) (((((((bigop) ((nat) )) ((O) )) (\lambda x : (nat) . (((andb) ) (((notb) ) ((((eqb) ) (i)) (x)))) ((p) (x)))) (((S) ) ((O) ))) ((times) )) (\lambda x : (nat) . (f) (x)))))) ((((absurd) ((((le) ) (((S) ) (i))) ((O) ))) (ltO)) ((not_le_Sn_O) (i)))))) (\lambda n0 : (nat) . \lambda Hind : ((((lt) ) (i)) (n0)) -> ((((eq) ((bool) )) ((p) (i))) ((true) )) -> (((eq) ((nat) )) (((((((bigop) ((nat) )) (n0)) (\lambda x : (nat) . (p) (x))) (((S) ) ((O) ))) ((times) )) (\lambda x : (nat) . (f) (x)))) ((((times) ) ((f) (i))) (((((((bigop) ((nat) )) (n0)) (\lambda x : (nat) . (((andb) ) (((notb) ) ((((eqb) ) (i)) (x)))) ((p) (x)))) (((S) ) ((O) ))) ((times) )) (\lambda x : (nat) . (f) (x)))). (\lambda lein : (((lt) ) (i)) (((S) ) (n0)). (\lambda pi : (((eq) ((bool) )) ((p) (i))) ((true) ). (((((((match_Or_prop) ((((lt) ) (i)) (n0))) ((((eq) ((nat) )) (i)) (n0))) ((((eq) ((nat) )) (((((((bigop) ((nat) )) (((S) ) (n0))) (\lambda x : (nat) . (p) (x))) (((S) ) ((O) ))) ((times) )) (\lambda x : (nat) . (f) (x)))) ((((times) ) ((f) (i))) (((((((bigop) ((nat) )) (((S) ) (n0))) (\lambda x : (nat) . (((andb) ) (((notb) ) ((((eqb) ) (i)) (x)))) ((p) (x)))) (((S) ) ((O) ))) ((times) )) (\lambda x : (nat) . (f) (x)))))) (\lambda Hi : (((lt) ) (i)) (n0). (((((((match_Or_prop) ((((eq) ((bool) )) ((p) (n0))) ((true) ))) ((((eq) ((bool) )) ((p) (n0))) ((false) ))) ((((eq) ((nat) )) (((((((bigop) ((nat) )) (((S) ) (n0))) (\lambda x : (nat) . (p) (x))) (((S) ) ((O) ))) ((times) )) (\lambda x : (nat) . (f) (x)))) ((((times) ) ((f) (i))) (((((((bigop) ((nat) )) (((S) ) (n0))) (\lambda x : (nat) . (((andb) ) (((notb) ) ((((eqb) ) (i)) (x)))) ((p) (x)))) (((S) ) ((O) ))) ((times) )) (\lambda x : (nat) . (f) (x)))))) (\lambda pn : (((eq) ((bool) )) ((p) (n0))) ((true) ). (((((((eq_ind_r) ((nat) )) ((((times) ) ((f) (n0))) (((((((bigop) ((nat) )) (n0)) (\lambda i0 : (nat) . (p) (i0))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f) (i0))))) (\lambda x : (nat) . (((eq) ((nat) )) (x)) ((((times) ) ((f) (i))) (((((((bigop) ((nat) )) (((S) ) (n0))) (\lambda x0 : (nat) . (((andb) ) (((notb) ) ((((eqb) ) (i)) (x0)))) ((p) (x0)))) (((S) ) ((O) ))) ((times) )) (\lambda x0 : (nat) . (f) (x0)))))) (((((((eq_ind_r) ((nat) )) ((((times) ) ((f) (n0))) (((((((bigop) ((nat) )) (n0)) (\lambda i0 : (nat) . (((andb) ) (((notb) ) ((((eqb) ) (i)) (i0)))) ((p) (i0)))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f) (i0))))) (\lambda x : (nat) . (((eq) ((nat) )) ((((times) ) ((f) (n0))) (((((((bigop) ((nat) )) (n0)) (\lambda i0 : (nat) . (p) (i0))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f) (i0))))) ((((times) ) ((f) (i))) (x)))) (((((((eq_ind_r) ((nat) )) ((((times) ) ((((times) ) ((f) (i))) ((f) (n0)))) (((((((bigop) ((nat) )) (n0)) (\lambda i0 : (nat) . ((((match_bool_type) ((bool) )) ((p) (i0))) ((false) )) (((((match_bool_type) ((bool) )) ((false) )) ((true) )) ((((eqb) ) (i)) (i0))))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f) (i0))))) (\lambda x : (nat) . (((eq) ((nat) )) ((((times) ) ((f) (n0))) (((((((bigop) ((nat) )) (n0)) (\lambda i0 : (nat) . (p) (i0))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f) (i0))))) (x))) (((((((eq_ind_r) ((nat) )) ((((times) ) ((f) (n0))) ((f) (i)))) (\lambda x : (nat) . (((eq) ((nat) )) ((((times) ) ((f) (n0))) (((((((bigop) ((nat) )) (n0)) (\lambda i0 : (nat) . (p) (i0))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f) (i0))))) ((((times) ) (x)) (((((((bigop) ((nat) )) (n0)) (\lambda i0 : (nat) . ((((match_bool_type) ((bool) )) ((p) (i0))) ((false) )) (((((match_bool_type) ((bool) )) ((false) )) ((true) )) ((((eqb) ) (i)) (i0))))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f) (i0)))))) (((((((eq_ind) ((nat) )) ((((times) ) ((f) (n0))) ((((times) ) ((f) (i))) (((((((bigop) ((nat) )) (n0)) (\lambda i0 : (nat) . ((((match_bool_type) ((bool) )) ((p) (i0))) ((false) )) (((((match_bool_type) ((bool) )) ((false) )) ((true) )) ((((eqb) ) (i)) (i0))))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f) (i0)))))) (\lambda x_1 : (nat) . (((eq) ((nat) )) ((((times) ) ((f) (n0))) (((((((bigop) ((nat) )) (n0)) (\lambda i0 : (nat) . (p) (i0))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f) (i0))))) (x_1))) (((((((eq_ind_r) ((nat) )) ((((times) ) ((f) (i))) (((((((bigop) ((nat) )) (n0)) (\lambda x : (nat) . (((andb) ) (((notb) ) ((((eqb) ) (i)) (x)))) ((p) (x)))) (((S) ) ((O) ))) ((times) )) (\lambda x : (nat) . (f) (x))))) (\lambda x : (nat) . (((eq) ((nat) )) ((((times) ) ((f) (n0))) (x))) ((((times) ) ((f) (n0))) ((((times) ) ((f) (i))) (((((((bigop) ((nat) )) (n0)) (\lambda i0 : (nat) . ((((match_bool_type) ((bool) )) ((p) (i0))) ((false) )) (((((match_bool_type) ((bool) )) ((false) )) ((true) )) ((((eqb) ) (i)) (i0))))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f) (i0))))))) (((refl) ((nat) )) ((((times) ) ((f) (n0))) ((((times) ) ((f) (i))) (((((((bigop) ((nat) )) (n0)) (\lambda x : (nat) . (((andb) ) (((notb) ) ((((eqb) ) (i)) (x)))) ((p) (x)))) (((S) ) ((O) ))) ((times) )) (\lambda x : (nat) . (f) (x))))))) (((((((bigop) ((nat) )) (n0)) (\lambda x : (nat) . (p) (x))) (((S) ) ((O) ))) ((times) )) (\lambda x : (nat) . (f) (x)))) (((Hind) (Hi)) (((((((rewrite_r) ((bool) )) ((true) )) (\lambda j__ : (bool) . (((eq) ((bool) )) (j__)) ((true) ))) (((refl) ((bool) )) ((true) ))) ((p) (i))) (pi))))) ((((times) ) ((((times) ) ((f) (n0))) ((f) (i)))) (((((((bigop) ((nat) )) (n0)) (\lambda i0 : (nat) . ((((match_bool_type) ((bool) )) ((p) (i0))) ((false) )) (((((match_bool_type) ((bool) )) ((false) )) ((true) )) ((((eqb) ) (i)) (i0))))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f) (i0))))) ((((assoc) ((f) (n0))) ((f) (i))) (((((((bigop) ((nat) )) (n0)) (\lambda i0 : (nat) . ((((match_bool_type) ((bool) )) ((p) (i0))) ((false) )) (((((match_bool_type) ((bool) )) ((false) )) ((true) )) ((((eqb) ) (i)) (i0))))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f) (i0)))))) ((((times) ) ((f) (i))) ((f) (n0)))) (((commutative_times) ((f) (i))) ((f) (n0))))) ((((times) ) ((f) (i))) ((((times) ) ((f) (n0))) (((((((bigop) ((nat) )) (n0)) (\lambda i0 : (nat) . ((((match_bool_type) ((bool) )) ((p) (i0))) ((false) )) (((((match_bool_type) ((bool) )) ((false) )) ((true) )) ((((eqb) ) (i)) (i0))))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f) (i0)))))) ((((assoc) ((f) (i))) ((f) (n0))) (((((((bigop) ((nat) )) (n0)) (\lambda i0 : (nat) . ((((match_bool_type) ((bool) )) ((p) (i0))) ((false) )) (((((match_bool_type) ((bool) )) ((false) )) ((true) )) ((((eqb) ) (i)) (i0))))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f) (i0)))))) (((((((bigop) ((nat) )) (((S) ) (n0))) (\lambda i0 : (nat) . (((andb) ) (((notb) ) ((((eqb) ) (i)) (i0)))) ((p) (i0)))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f) (i0)))) ((((((((bigop_Strue) ((nat) )) (n0)) (\lambda j__ : (nat) . (((andb) ) (((notb) ) ((((eqb) ) (i)) (j__)))) ((p) (j__)))) (((S) ) ((O) ))) ((times) )) (f)) (((((((rewrite_r) ((bool) )) ((true) )) (\lambda j__ : (bool) . (((eq) ((bool) )) ((((andb) ) (((notb) ) ((((eqb) ) (i)) (n0)))) (j__))) ((true) ))) (((((((rewrite_r) ((bool) )) ((true) )) (\lambda j__ : (bool) . (((eq) ((bool) )) (j__)) ((true) ))) (((refl) ((bool) )) ((true) ))) ((((andb) ) (((notb) ) ((((eqb) ) (i)) (n0)))) ((true) ))) (((((((rewrite_l) ((bool) )) ((p) (n0))) (\lambda j__ : (bool) . (((eq) ((bool) )) ((((andb) ) (((notb) ) ((((eqb) ) (i)) (n0)))) ((true) ))) (j__))) (((((((rewrite_l) ((bool) )) ((p) (n0))) (\lambda j__ : (bool) . (((eq) ((bool) )) ((((andb) ) (((notb) ) ((((eqb) ) (i)) (n0)))) (j__))) ((p) (n0)))) (((((((eq_ind_r) ((bool) )) ((false) )) (\lambda x : (bool) . (((eq) ((bool) )) ((((andb) ) (((notb) ) (x))) ((p) (n0)))) ((p) (n0)))) ((((((sym_eq_match_bool_type_false) ((bool) )) ((false) )) ((true) )) (\lambda y : (bool) . (((eq) ((bool) )) (((((match_bool_type) ((bool) )) ((p) (n0))) ((false) )) (y))) ((p) (n0)))) ((((((eq_match_bool_type_true) ((bool) )) ((p) (n0))) ((false) )) (\lambda y : (bool) . (((eq) ((bool) )) (((((match_bool_type) ((bool) )) ((p) (n0))) ((false) )) ((true) ))) (y))) ((((((eq_match_bool_type_false) ((bool) )) ((false) )) ((true) )) (\lambda y : (bool) . (((eq) ((bool) )) (((((match_bool_type) ((bool) )) ((p) (n0))) ((false) )) ((true) ))) (((((match_bool_type) ((bool) )) ((p) (n0))) ((false) )) (y)))) ((((((eq_match_bool_type_false) ((bool) )) ((false) )) ((true) )) (\lambda y : (bool) . (((eq) ((bool) )) (((((match_bool_type) ((bool) )) ((p) (n0))) ((false) )) (y))) (((((match_bool_type) ((bool) )) ((p) (n0))) ((false) )) (((((match_bool_type) ((bool) )) ((false) )) ((true) )) ((false) ))))) (((refl) ((bool) )) ((((andb) ) (((notb) ) ((false) ))) ((p) (n0))))))))) ((((eqb) ) (i)) (n0))) ((((not_eq_to_eqb_false) (i)) (n0)) ((((lt_to_not_eq) (i)) (n0)) (Hi))))) ((true) )) (pn))) ((true) )) (pn)))) ((p) (n0))) (pn))))) (((((((bigop) ((nat) )) (((S) ) (n0))) (\lambda i0 : (nat) . (p) (i0))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f) (i0)))) ((((((((bigop_Strue) ((nat) )) (n0)) (p)) (((S) ) ((O) ))) ((times) )) (f)) (((((((rewrite_r) ((bool) )) ((true) )) (\lambda j__ : (bool) . (((eq) ((bool) )) (j__)) ((true) ))) (((refl) ((bool) )) ((true) ))) ((p) (n0))) (pn)))))) (\lambda pn : (((eq) ((bool) )) ((p) (n0))) ((false) ). (((((((eq_ind_r) ((nat) )) (((((((bigop) ((nat) )) (n0)) (\lambda i0 : (nat) . (p) (i0))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f) (i0)))) (\lambda x : (nat) . (((eq) ((nat) )) (x)) ((((times) ) ((f) (i))) (((((((bigop) ((nat) )) (((S) ) (n0))) (\lambda x0 : (nat) . (((andb) ) (((notb) ) ((((eqb) ) (i)) (x0)))) ((p) (x0)))) (((S) ) ((O) ))) ((times) )) (\lambda x0 : (nat) . (f) (x0)))))) (((((((eq_ind_r) ((nat) )) (((((((bigop) ((nat) )) (n0)) (\lambda i0 : (nat) . (((andb) ) (((notb) ) ((((eqb) ) (i)) (i0)))) ((p) (i0)))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f) (i0)))) (\lambda x : (nat) . (((eq) ((nat) )) (((((((bigop) ((nat) )) (n0)) (\lambda i0 : (nat) . (p) (i0))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f) (i0)))) ((((times) ) ((f) (i))) (x)))) (((((((eq_ind_r) ((nat) )) ((((times) ) ((f) (i))) (((((((bigop) ((nat) )) (n0)) (\lambda x : (nat) . (((andb) ) (((notb) ) ((((eqb) ) (i)) (x)))) ((p) (x)))) (((S) ) ((O) ))) ((times) )) (\lambda x : (nat) . (f) (x))))) (\lambda x : (nat) . (((eq) ((nat) )) (x)) ((((times) ) ((f) (i))) (((((((bigop) ((nat) )) (n0)) (\lambda i0 : (nat) . (((andb) ) (((notb) ) ((((eqb) ) (i)) (i0)))) ((p) (i0)))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f) (i0)))))) (((refl) ((nat) )) ((((times) ) ((f) (i))) (((((((bigop) ((nat) )) (n0)) (\lambda x : (nat) . (((andb) ) (((notb) ) ((((eqb) ) (i)) (x)))) ((p) (x)))) (((S) ) ((O) ))) ((times) )) (\lambda x : (nat) . (f) (x)))))) (((((((bigop) ((nat) )) (n0)) (\lambda x : (nat) . (p) (x))) (((S) ) ((O) ))) ((times) )) (\lambda x : (nat) . (f) (x)))) (((Hind) (Hi)) (((((((rewrite_r) ((bool) )) ((true) )) (\lambda j__ : (bool) . (((eq) ((bool) )) (j__)) ((true) ))) (((refl) ((bool) )) ((true) ))) ((p) (i))) (pi))))) (((((((bigop) ((nat) )) (((S) ) (n0))) (\lambda i0 : (nat) . (((andb) ) (((notb) ) ((((eqb) ) (i)) (i0)))) ((p) (i0)))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f) (i0)))) ((((((((bigop_Sfalse) ((nat) )) (n0)) (\lambda j__ : (nat) . (((andb) ) (((notb) ) ((((eqb) ) (i)) (j__)))) ((p) (j__)))) (((S) ) ((O) ))) ((times) )) (f)) (((((((rewrite_r) ((bool) )) ((false) )) (\lambda j__ : (bool) . (((eq) ((bool) )) ((((andb) ) (((notb) ) ((((eqb) ) (i)) (n0)))) (j__))) ((false) ))) (((((((rewrite_r) ((bool) )) ((false) )) (\lambda j__ : (bool) . (((eq) ((bool) )) (j__)) ((false) ))) (((refl) ((bool) )) ((false) ))) ((((andb) ) (((notb) ) ((((eqb) ) (i)) (n0)))) ((false) ))) (((((((rewrite_l) ((bool) )) ((p) (n0))) (\lambda j__ : (bool) . (((eq) ((bool) )) ((((andb) ) (((notb) ) ((((eqb) ) (i)) (n0)))) ((false) ))) (j__))) (((((((rewrite_l) ((bool) )) ((p) (n0))) (\lambda j__ : (bool) . (((eq) ((bool) )) ((((andb) ) (((notb) ) ((((eqb) ) (i)) (n0)))) (j__))) ((p) (n0)))) (((((((eq_ind_r) ((bool) )) ((false) )) (\lambda x : (bool) . (((eq) ((bool) )) ((((andb) ) (((notb) ) (x))) ((p) (n0)))) ((p) (n0)))) ((((((sym_eq_match_bool_type_false) ((bool) )) ((false) )) ((true) )) (\lambda y : (bool) . (((eq) ((bool) )) (((((match_bool_type) ((bool) )) ((p) (n0))) ((false) )) (y))) ((p) (n0)))) ((((((eq_match_bool_type_true) ((bool) )) ((p) (n0))) ((false) )) (\lambda y : (bool) . (((eq) ((bool) )) (((((match_bool_type) ((bool) )) ((p) (n0))) ((false) )) ((true) ))) (y))) ((((((eq_match_bool_type_false) ((bool) )) ((false) )) ((true) )) (\lambda y : (bool) . (((eq) ((bool) )) (((((match_bool_type) ((bool) )) ((p) (n0))) ((false) )) ((true) ))) (((((match_bool_type) ((bool) )) ((p) (n0))) ((false) )) (y)))) ((((((eq_match_bool_type_false) ((bool) )) ((false) )) ((true) )) (\lambda y : (bool) . (((eq) ((bool) )) (((((match_bool_type) ((bool) )) ((p) (n0))) ((false) )) (y))) (((((match_bool_type) ((bool) )) ((p) (n0))) ((false) )) (((((match_bool_type) ((bool) )) ((false) )) ((true) )) ((false) ))))) (((refl) ((bool) )) ((((andb) ) (((notb) ) ((false) ))) ((p) (n0))))))))) ((((eqb) ) (i)) (n0))) ((((not_eq_to_eqb_false) (i)) (n0)) ((((lt_to_not_eq) (i)) (n0)) (Hi))))) ((false) )) (pn))) ((false) )) (pn)))) ((p) (n0))) (pn))))) (((((((bigop) ((nat) )) (((S) ) (n0))) (\lambda i0 : (nat) . (p) (i0))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f) (i0)))) ((((((((bigop_Sfalse) ((nat) )) (n0)) (p)) (((S) ) ((O) ))) ((times) )) (f)) (((((((rewrite_r) ((bool) )) ((false) )) (\lambda j__ : (bool) . (((eq) ((bool) )) (j__)) ((false) ))) (((refl) ((bool) )) ((false) ))) ((p) (n0))) (pn)))))) ((true_or_false) ((p) (n0)))))) (\lambda Hi : (((eq) ((nat) )) (i)) (n0). (((((((eq_ind) ((nat) )) (i)) (\lambda x_1 : (nat) . (((eq) ((nat) )) (((((((bigop) ((nat) )) (((S) ) (x_1))) (\lambda x : (nat) . (p) (x))) (((S) ) ((O) ))) ((times) )) (\lambda x : (nat) . (f) (x)))) ((((times) ) ((f) (i))) (((((((bigop) ((nat) )) (((S) ) (x_1))) (\lambda x : (nat) . (((andb) ) (((notb) ) ((((eqb) ) (i)) (x)))) ((p) (x)))) (((S) ) ((O) ))) ((times) )) (\lambda x : (nat) . (f) (x)))))) (((((((eq_ind_r) ((nat) )) ((((times) ) ((f) (i))) (((((((bigop) ((nat) )) (i)) (\lambda i0 : (nat) . (p) (i0))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f) (i0))))) (\lambda x : (nat) . (((eq) ((nat) )) (x)) ((((times) ) ((f) (i))) (((((((bigop) ((nat) )) (((S) ) (i))) (\lambda x0 : (nat) . (((andb) ) (((notb) ) ((((eqb) ) (i)) (x0)))) ((p) (x0)))) (((S) ) ((O) ))) ((times) )) (\lambda x0 : (nat) . (f) (x0)))))) (((((((eq_f) ((nat) )) ((nat) )) (((times) ) ((f) (i)))) (((((((bigop) ((nat) )) (i)) (\lambda i0 : (nat) . (p) (i0))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f) (i0)))) (((((((bigop) ((nat) )) (((S) ) (i))) (\lambda x : (nat) . (((andb) ) (((notb) ) ((((eqb) ) (i)) (x)))) ((p) (x)))) (((S) ) ((O) ))) ((times) )) (\lambda x : (nat) . (f) (x)))) (((((((eq_ind_r) ((nat) )) (((((((bigop) ((nat) )) (i)) (\lambda i0 : (nat) . (((andb) ) (((notb) ) ((((eqb) ) (i)) (i0)))) ((p) (i0)))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f) (i0)))) (\lambda x : (nat) . (((eq) ((nat) )) (((((((bigop) ((nat) )) (i)) (\lambda i0 : (nat) . (p) (i0))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f) (i0)))) (x))) (((((((((((same_bigop) ((nat) )) (i)) (p)) (\lambda j__ : (nat) . (((andb) ) (((notb) ) ((((eqb) ) (i)) (j__)))) ((p) (j__)))) (((S) ) ((O) ))) ((times) )) (f)) (f)) (\lambda k : (nat) . \lambda ltki : (((lt) ) (k)) (i). (((((((eq_ind_r) ((bool) )) ((false) )) (\lambda x : (bool) . (((eq) ((bool) )) ((p) (k))) ((((andb) ) (((notb) ) (x))) ((p) (k))))) ((((((sym_eq_match_bool_type_false) ((bool) )) ((false) )) ((true) )) (\lambda y : (bool) . (((eq) ((bool) )) ((p) (k))) (((((match_bool_type) ((bool) )) ((p) (k))) ((false) )) (y)))) ((((((sym_eq_match_bool_type_true) ((bool) )) ((p) (k))) ((false) )) (\lambda y : (bool) . (((eq) ((bool) )) ((p) (k))) (y))) (((refl) ((bool) )) ((p) (k)))))) ((((eqb) ) (i)) (k))) ((((not_eq_to_eqb_false) (i)) (k)) (((((not_to_not) ((((eq) ((nat) )) (i)) (k))) ((((le) ) (((S) ) (i))) (i))) (\lambda auto : (((eq) ((nat) )) (i)) (k). (((((eq_coerc) ((((le) ) (((S) ) (k))) (i))) ((((le) ) (((S) ) (i))) (i))) (ltki)) (((((((rewrite_l) ((nat) )) (i)) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (((S) ) (j__))) (i))) ((((le) ) (((S) ) (i))) (i)))) (((refl) (Prop)) ((((le) ) (((S) ) (i))) (i)))) (k)) (auto))))) ((not_le_Sn_n) (i))))))) (\lambda i0 : (nat) . \lambda auto : (((lt) ) (i0)) (i). (\lambda auto' : (((eq) ((bool) )) ((p) (i0))) ((true) ). (((refl) ((nat) )) ((f) (i0))))))) (((((((bigop) ((nat) )) (((S) ) (i))) (\lambda i0 : (nat) . (((andb) ) (((notb) ) ((((eqb) ) (i)) (i0)))) ((p) (i0)))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f) (i0)))) ((((((((bigop_Sfalse) ((nat) )) (i)) (\lambda j__ : (nat) . (((andb) ) (((notb) ) ((((eqb) ) (i)) (j__)))) ((p) (j__)))) (((S) ) ((O) ))) ((times) )) (f)) (((((((eq_ind_r) ((bool) )) ((true) )) (\lambda x : (bool) . (((eq) ((bool) )) ((((andb) ) (((notb) ) (x))) ((p) (i)))) ((false) ))) ((((((eq_match_bool_type_false) ((bool) )) ((p) (i))) ((false) )) (\lambda y : (bool) . (((eq) ((bool) )) (((((match_bool_type) ((bool) )) ((p) (i))) ((false) )) (((((match_bool_type) ((bool) )) ((false) )) ((true) )) ((true) )))) (y))) ((((((eq_match_bool_type_true) ((bool) )) ((false) )) ((true) )) (\lambda y : (bool) . (((eq) ((bool) )) (((((match_bool_type) ((bool) )) ((p) (i))) ((false) )) (((((match_bool_type) ((bool) )) ((false) )) ((true) )) ((true) )))) (((((match_bool_type) ((bool) )) ((p) (i))) ((false) )) (y)))) (((refl) ((bool) )) ((((andb) ) (((notb) ) ((true) ))) ((p) (i))))))) ((((eqb) ) (i)) (i))) ((((eq_to_eqb_true) (i)) (i)) (((refl) ((nat) )) (i)))))))) (((((((bigop) ((nat) )) (((S) ) (i))) (\lambda i0 : (nat) . (p) (i0))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f) (i0)))) ((((((((bigop_Strue) ((nat) )) (i)) (p)) (((S) ) ((O) ))) ((times) )) (f)) (((((((rewrite_r) ((bool) )) ((true) )) (\lambda j__ : (bool) . (((eq) ((bool) )) (j__)) ((true) ))) (((refl) ((bool) )) ((true) ))) ((p) (i))) (pi))))) (n0)) (Hi)))) ((((le_to_or_lt_eq) (i)) (n0)) ((((le_S_S_to_le) (i)) (n0)) (lein)))))))) (n).
definition sub_hk : (((nat) ) -> (nat) ) -> (((nat) ) -> (nat) ) -> ((nat) ) -> ((nat) ) -> (((nat) ) -> (bool) ) -> (((nat) ) -> (bool) ) -> (((nat) ) -> (nat) ) -> (((nat) ) -> (nat) ) -> Prop := \lambda h : ((nat) ) -> (nat) . \lambda k : ((nat) ) -> (nat) . \lambda n1 : (nat) . \lambda n2 : (nat) . \lambda p1 : ((nat) ) -> (bool) . \lambda p2 : ((nat) ) -> (bool) . \lambda f1 : ((nat) ) -> (nat) . \lambda f2 : ((nat) ) -> (nat) . \forall (i:(nat) ). ((((lt) ) (i)) (n1)) -> ((((eq) ((bool) )) ((p1) (i))) ((true) )) -> (((And) ) ((((And) ) ((((lt) ) ((h) (i))) (n2))) ((((eq) ((bool) )) ((p2) ((h) (i)))) ((true) )))) ((((eq) ((nat) )) ((k) ((h) (i)))) (i)).
definition iso : ((nat) ) -> ((nat) ) -> (((nat) ) -> (bool) ) -> (((nat) ) -> (bool) ) -> (((nat) ) -> (nat) ) -> (((nat) ) -> (nat) ) -> Prop := \lambda n1 : (nat) . \lambda n2 : (nat) . \lambda p1 : ((nat) ) -> (bool) . \lambda p2 : ((nat) ) -> (bool) . \lambda f1 : ((nat) ) -> (nat) . \lambda f2 : ((nat) ) -> (nat) . ((ex) (((nat) ) -> (nat) )) (\lambda h : ((nat) ) -> (nat) . ((ex) (((nat) ) -> (nat) )) (\lambda k : ((nat) ) -> (nat) . (((And) ) ((((And) ) (\forall (i:(nat) ). ((((lt) ) (i)) (n1)) -> ((((eq) ((bool) )) ((p1) (i))) ((true) )) -> (((eq) ((nat) )) ((f1) (i))) ((f2) ((h) (i))))) ((((((((((sub_hk) ) (h)) (k)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)))) ((((((((((sub_hk) ) (k)) (h)) (n2)) (n1)) (p2)) (p1)) (f2)) (f1)))).
definition sub_hkO : \forall (h:((nat) ) -> (nat) ). \forall (k:((nat) ) -> (nat) ). \forall (n1:(nat) ). \forall (n2:(nat) ). \forall (p1:((nat) ) -> (bool) ). \forall (p2:((nat) ) -> (bool) ). \forall (f1:((nat) ) -> (nat) ). \forall (f2:((nat) ) -> (nat) ). ((((eq) ((nat) )) (n1)) ((O) )) -> (((((((((sub_hk) ) (h)) (k)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2) := \lambda h : ((nat) ) -> (nat) . \lambda k : ((nat) ) -> (nat) . \lambda n1 : (nat) . \lambda n2 : (nat) . \lambda p1 : ((nat) ) -> (bool) . \lambda p2 : ((nat) ) -> (bool) . \lambda f1 : ((nat) ) -> (nat) . \lambda f2 : ((nat) ) -> (nat) . \lambda up0 : (((eq) ((nat) )) (n1)) ((O) ). (\lambda i : (nat) . \lambda lti : (((lt) ) (i)) (n1). (((((((eq_ind_r) ((nat) )) ((O) )) (\lambda x : (nat) . ((((eq) ((bool) )) ((p1) (i))) ((true) )) -> (((And) ) ((((And) ) ((((lt) ) ((h) (i))) (n2))) ((((eq) ((bool) )) ((p2) ((h) (i)))) ((true) )))) ((((eq) ((nat) )) ((k) ((h) (i)))) (i)))) (((falsity) (((((eq) ((bool) )) ((p1) (i))) ((true) )) -> (((And) ) ((((And) ) ((((lt) ) ((h) (i))) (n2))) ((((eq) ((bool) )) ((p2) ((h) (i)))) ((true) )))) ((((eq) ((nat) )) ((k) ((h) (i)))) (i)))) ((((absurd) ((((le) ) (((S) ) (i))) ((O) ))) (((((eq_coerc) ((((le) ) (((S) ) (i))) (n1))) ((((le) ) (((S) ) (i))) ((O) ))) (lti)) (((((((rewrite_r) ((nat) )) ((O) )) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (((S) ) (i))) (j__))) ((((le) ) (((S) ) (i))) ((O) )))) (((refl) (Prop)) ((((le) ) (((S) ) (i))) ((O) )))) (n1)) (up0)))) ((not_le_Sn_O) (i))))) (n1)) (up0))).
definition sub0_to_false : \forall (h:((nat) ) -> (nat) ). \forall (k:((nat) ) -> (nat) ). \forall (n1:(nat) ). \forall (n2:(nat) ). \forall (p1:((nat) ) -> (bool) ). \forall (p2:((nat) ) -> (bool) ). \forall (f1:((nat) ) -> (nat) ). \forall (f2:((nat) ) -> (nat) ). ((((eq) ((nat) )) (n1)) ((O) )) -> ((((((((((sub_hk) ) (h)) (k)) (n2)) (n1)) (p2)) (p1)) (f2)) (f1)) -> \forall (i:(nat) ). ((((lt) ) (i)) (n2)) -> (((eq) ((bool) )) ((p2) (i))) ((false) ) := \lambda h : ((nat) ) -> (nat) . \lambda k : ((nat) ) -> (nat) . \lambda n1 : (nat) . \lambda n2 : (nat) . \lambda p1 : ((nat) ) -> (bool) . \lambda p2 : ((nat) ) -> (bool) . \lambda f1 : ((nat) ) -> (nat) . \lambda f2 : ((nat) ) -> (nat) . \lambda up0 : (((eq) ((nat) )) (n1)) ((O) ). (\lambda sub : (((((((((sub_hk) ) (h)) (k)) (n2)) (n1)) (p2)) (p1)) (f2)) (f1). (\lambda i : (nat) . \lambda lti : (((lt) ) (i)) (n2). (((((((match_Or_prop) ((((eq) ((bool) )) ((p2) (i))) ((true) ))) ((((eq) ((bool) )) ((p2) (i))) ((false) ))) ((((eq) ((bool) )) ((p2) (i))) ((false) ))) (\lambda ptrue : (((eq) ((bool) )) ((p2) (i))) ((true) ). ((((((match_And_prop) ((((And) ) ((((lt) ) ((h) (i))) (n1))) ((((eq) ((bool) )) ((p1) ((h) (i)))) ((true) )))) ((((eq) ((nat) )) ((k) ((h) (i)))) (i))) ((((eq) ((bool) )) ((p2) (i))) ((false) ))) (\lambda j_clearme : (((And) ) ((((lt) ) ((h) (i))) (n1))) ((((eq) ((bool) )) ((p1) ((h) (i)))) ((true) )). ((((((match_And_prop) ((((lt) ) ((h) (i))) (n1))) ((((eq) ((bool) )) ((p1) ((h) (i)))) ((true) ))) (((((eq) ((nat) )) ((k) ((h) (i)))) (i)) -> (((eq) ((bool) )) ((p2) (i))) ((false) ))) (\lambda hi : (((lt) ) ((h) (i))) (n1). (((falsity) (((((eq) ((bool) )) ((p1) ((h) (i)))) ((true) )) -> ((((eq) ((nat) )) ((k) ((h) (i)))) (i)) -> (((eq) ((bool) )) ((p2) (i))) ((false) ))) ((((absurd) ((((le) ) (((S) ) ((h) (i)))) ((O) ))) (((((eq_coerc) ((((le) ) (((S) ) ((h) (i)))) (n1))) ((((le) ) (((S) ) ((h) (i)))) ((O) ))) (hi)) (((((((rewrite_r) ((nat) )) ((O) )) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (((S) ) ((h) (i)))) (j__))) ((((le) ) (((S) ) ((h) (i)))) ((O) )))) (((refl) (Prop)) ((((le) ) (((S) ) ((h) (i)))) ((O) )))) (n1)) (up0)))) ((not_le_Sn_O) ((h) (i))))))) (j_clearme)))) ((((sub) (i)) (lti)) (ptrue))))) (\lambda auto : (((eq) ((bool) )) ((p2) (i))) ((false) ). (((((((rewrite_r) ((bool) )) ((false) )) (\lambda j__ : (bool) . (((eq) ((bool) )) (j__)) ((false) ))) (((refl) ((bool) )) ((false) ))) ((p2) (i))) (auto)))) ((true_or_false) ((p2) (i)))))).
definition sub_lt : \forall (e:((nat) ) -> (nat) ). \forall (p:((nat) ) -> (bool) ). \forall (n:(nat) ). \forall (m:(nat) ). ((((le) ) (n)) (m)) -> (((((((((sub_hk) ) (\lambda x : (nat) . x)) (\lambda x : (nat) . x)) (n)) (m)) (p)) (p)) (e)) (e) := \lambda e : ((nat) ) -> (nat) . \lambda f : ((nat) ) -> (bool) . \lambda n : (nat) . \lambda m : (nat) . \lambda lenm : (((le) ) (n)) (m). (\lambda i : (nat) . \lambda lti : (((lt) ) (i)) (n). (\lambda fi : (((eq) ((bool) )) ((f) (i))) ((true) ). (((((conj) ((((And) ) ((((lt) ) (i)) (m))) ((((eq) ((bool) )) ((f) (i))) ((true) )))) ((((eq) ((nat) )) (i)) (i))) (((((conj) ((((lt) ) (i)) (m))) ((((eq) ((bool) )) ((f) (i))) ((true) ))) ((((((lt_to_le_to_lt) (i)) (n)) (m)) (lti)) (lenm))) (((((((rewrite_r) ((bool) )) ((true) )) (\lambda j__ : (bool) . (((eq) ((bool) )) (j__)) ((true) ))) (((refl) ((bool) )) ((true) ))) ((f) (i))) (fi)))) (((refl) ((nat) )) (i))))).
definition transitive_sub : \forall (h1:((nat) ) -> (nat) ). \forall (k1:((nat) ) -> (nat) ). \forall (h2:((nat) ) -> (nat) ). \forall (k2:((nat) ) -> (nat) ). \forall (n1:(nat) ). \forall (n2:(nat) ). \forall (n3:(nat) ). \forall (p1:((nat) ) -> (bool) ). \forall (p2:((nat) ) -> (bool) ). \forall (p3:((nat) ) -> (bool) ). \forall (f1:((nat) ) -> (nat) ). \forall (f2:((nat) ) -> (nat) ). \forall (f3:((nat) ) -> (nat) ). ((((((((((sub_hk) ) (h1)) (k1)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)) -> ((((((((((sub_hk) ) (h2)) (k2)) (n2)) (n3)) (p2)) (p3)) (f2)) (f3)) -> (((((((((sub_hk) ) (\lambda x : (nat) . (h2) ((h1) (x)))) (\lambda x : (nat) . (k1) ((k2) (x)))) (n1)) (n3)) (p1)) (p3)) (f1)) (f3) := \lambda h1 : ((nat) ) -> (nat) . \lambda k1 : ((nat) ) -> (nat) . \lambda h2 : ((nat) ) -> (nat) . \lambda k2 : ((nat) ) -> (nat) . \lambda n1 : (nat) . \lambda n2 : (nat) . \lambda n3 : (nat) . \lambda p1 : ((nat) ) -> (bool) . \lambda p2 : ((nat) ) -> (bool) . \lambda p3 : ((nat) ) -> (bool) . \lambda f1 : ((nat) ) -> (nat) . \lambda f2 : ((nat) ) -> (nat) . \lambda f3 : ((nat) ) -> (nat) . \lambda sub1 : (((((((((sub_hk) ) (h1)) (k1)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2). (\lambda sub2 : (((((((((sub_hk) ) (h2)) (k2)) (n2)) (n3)) (p2)) (p3)) (f2)) (f3). (\lambda i : (nat) . \lambda lti : (((lt) ) (i)) (n1). (\lambda fi : (((eq) ((bool) )) ((p1) (i))) ((true) ). ((((((match_And_prop) ((((And) ) ((((lt) ) ((h1) (i))) (n2))) ((((eq) ((bool) )) ((p2) ((h1) (i)))) ((true) )))) ((((eq) ((nat) )) ((k1) ((h1) (i)))) (i))) ((((And) ) ((((And) ) ((((lt) ) ((h2) ((h1) (i)))) (n3))) ((((eq) ((bool) )) ((p3) ((h2) ((h1) (i))))) ((true) )))) ((((eq) ((nat) )) ((k1) ((k2) ((h2) ((h1) (i)))))) (i)))) (\lambda j_clearme : (((And) ) ((((lt) ) ((h1) (i))) (n2))) ((((eq) ((bool) )) ((p2) ((h1) (i)))) ((true) )). ((((((match_And_prop) ((((lt) ) ((h1) (i))) (n2))) ((((eq) ((bool) )) ((p2) ((h1) (i)))) ((true) ))) (((((eq) ((nat) )) ((k1) ((h1) (i)))) (i)) -> (((And) ) ((((And) ) ((((lt) ) ((h2) ((h1) (i)))) (n3))) ((((eq) ((bool) )) ((p3) ((h2) ((h1) (i))))) ((true) )))) ((((eq) ((nat) )) ((k1) ((k2) ((h2) ((h1) (i)))))) (i)))) (\lambda lth1i : (((lt) ) ((h1) (i))) (n2). (\lambda fh1i : (((eq) ((bool) )) ((p2) ((h1) (i)))) ((true) ). (\lambda ei : (((eq) ((nat) )) ((k1) ((h1) (i)))) (i). ((((((match_And_prop) ((((And) ) ((((lt) ) ((h2) ((h1) (i)))) (n3))) ((((eq) ((bool) )) ((p3) ((h2) ((h1) (i))))) ((true) )))) ((((eq) ((nat) )) ((k2) ((h2) ((h1) (i))))) ((h1) (i)))) ((((And) ) ((((And) ) ((((lt) ) ((h2) ((h1) (i)))) (n3))) ((((eq) ((bool) )) ((p3) ((h2) ((h1) (i))))) ((true) )))) ((((eq) ((nat) )) ((k1) ((k2) ((h2) ((h1) (i)))))) (i)))) (\lambda j_clearme0 : (((And) ) ((((lt) ) ((h2) ((h1) (i)))) (n3))) ((((eq) ((bool) )) ((p3) ((h2) ((h1) (i))))) ((true) )). ((((((match_And_prop) ((((lt) ) ((h2) ((h1) (i)))) (n3))) ((((eq) ((bool) )) ((p3) ((h2) ((h1) (i))))) ((true) ))) (((((eq) ((nat) )) ((k2) ((h2) ((h1) (i))))) ((h1) (i))) -> (((And) ) ((((And) ) ((((lt) ) ((h2) ((h1) (i)))) (n3))) ((((eq) ((bool) )) ((p3) ((h2) ((h1) (i))))) ((true) )))) ((((eq) ((nat) )) ((k1) ((k2) ((h2) ((h1) (i)))))) (i)))) (\lambda H1 : (((lt) ) ((h2) ((h1) (i)))) (n3). (\lambda H2 : (((eq) ((bool) )) ((p3) ((h2) ((h1) (i))))) ((true) ). (\lambda H3 : (((eq) ((nat) )) ((k2) ((h2) ((h1) (i))))) ((h1) (i)). (((((conj) ((((And) ) ((((lt) ) ((h2) ((h1) (i)))) (n3))) ((((eq) ((bool) )) ((p3) ((h2) ((h1) (i))))) ((true) )))) ((((eq) ((nat) )) ((k1) ((k2) ((h2) ((h1) (i)))))) (i))) (((((conj) ((((lt) ) ((h2) ((h1) (i)))) (n3))) ((((eq) ((bool) )) ((p3) ((h2) ((h1) (i))))) ((true) ))) (H1)) (((((((rewrite_r) ((bool) )) ((true) )) (\lambda j__ : (bool) . (((eq) ((bool) )) (j__)) ((true) ))) (((refl) ((bool) )) ((true) ))) ((p3) ((h2) ((h1) (i))))) (H2)))) (((((((rewrite_r) ((nat) )) ((h1) (i))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((k1) (j__))) (i))) (((((((rewrite_r) ((nat) )) (i)) (\lambda j__ : (nat) . (((eq) ((nat) )) (j__)) (i))) (((refl) ((nat) )) (i))) ((k1) ((h1) (i)))) (ei))) ((k2) ((h2) ((h1) (i))))) (H3))))))) (j_clearme0)))) ((((sub2) ((h1) (i))) (lth1i)) (fh1i))))))) (j_clearme)))) ((((sub1) (i)) (lti)) (fi)))))).
definition let_clause_10471 : \forall (n1:(nat) ). \forall (n2:(nat) ). \forall (p1:((nat) ) -> (bool) ). \forall (p2:((nat) ) -> (bool) ). \forall (f1:((nat) ) -> (nat) ). \forall (f2:((nat) ) -> (nat) ). ((((((((iso) ) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)) -> \forall (h:((nat) ) -> (nat) ). (((ex) (((nat) ) -> (nat) )) (\lambda k : ((nat) ) -> (nat) . (((And) ) ((((And) ) (\forall (i:(nat) ). ((((lt) ) (i)) (n1)) -> ((((eq) ((bool) )) ((p1) (i))) ((true) )) -> (((eq) ((nat) )) ((f1) (i))) ((f2) ((h) (i))))) ((((((((((sub_hk) ) (h)) (k)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)))) ((((((((((sub_hk) ) (k)) (h)) (n2)) (n1)) (p2)) (p1)) (f2)) (f1)))) -> \forall (k:((nat) ) -> (nat) ). ((((And) ) ((((And) ) (\forall (i:(nat) ). ((((lt) ) (i)) (n1)) -> ((((eq) ((bool) )) ((p1) (i))) ((true) )) -> (((eq) ((nat) )) ((f1) (i))) ((f2) ((h) (i))))) ((((((((((sub_hk) ) (h)) (k)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)))) ((((((((((sub_hk) ) (k)) (h)) (n2)) (n1)) (p2)) (p1)) (f2)) (f1))) -> ((((And) ) (\forall (i:(nat) ). ((((lt) ) (i)) (n1)) -> ((((eq) ((bool) )) ((p1) (i))) ((true) )) -> (((eq) ((nat) )) ((f1) (i))) ((f2) ((h) (i))))) ((((((((((sub_hk) ) (h)) (k)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2))) -> (\forall (i:(nat) ). ((((lt) ) (i)) (n1)) -> ((((eq) ((bool) )) ((p1) (i))) ((true) )) -> (((eq) ((nat) )) ((f1) (i))) ((f2) ((h) (i)))) -> \forall (i:(nat) ). \forall (m:(nat) ). (\forall (f:((nat) ) -> (bool) ). ((((le) ) ((O) )) (n1)) -> ((((((((((sub_hk) ) (h)) (k)) ((O) )) (m)) (p1)) (f)) (f1)) (f2)) -> ((((((((((sub_hk) ) (k)) (h)) (m)) ((O) )) (f)) (p1)) (f2)) (f1)) -> (((eq) ((nat) )) (((((((bigop) ((nat) )) ((O) )) (\lambda i0 : (nat) . (p1) (i0))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f1) (i0)))) (((((((bigop) ((nat) )) (m)) (\lambda i0 : (nat) . (f) (i0))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f2) (i0)))) -> \forall (p20:((nat) ) -> (bool) ). ((((le) ) ((O) )) (n1)) -> ((((((((((sub_hk) ) (h)) (k)) ((O) )) (((S) ) (m))) (p1)) (p20)) (f1)) (f2)) -> ((((((((((sub_hk) ) (k)) (h)) (((S) ) (m))) ((O) )) (p20)) (p1)) (f2)) (f1)) -> \forall (x2571:(nat) ). \forall (x2572:(nat) ). (((eq) ((nat) )) (x2571)) ((((plus) ) ((((times) ) (x2572)) ((((div) ) (x2571)) (x2572)))) ((((mod) ) (x2571)) (x2572))) := \lambda n1 : (nat) . \lambda n2 : (nat) . \lambda p1 : ((nat) ) -> (bool) . \lambda p2 : ((nat) ) -> (bool) . \lambda f1 : ((nat) ) -> (nat) . \lambda f2 : ((nat) ) -> (nat) . \lambda j_clearme : (((((((iso) ) (n1)) (n2)) (p1)) (p2)) (f1)) (f2). (\lambda h : ((nat) ) -> (nat) . \lambda j_clearme0 : ((ex) (((nat) ) -> (nat) )) (\lambda k : ((nat) ) -> (nat) . (((And) ) ((((And) ) (\forall (i:(nat) ). ((((lt) ) (i)) (n1)) -> ((((eq) ((bool) )) ((p1) (i))) ((true) )) -> (((eq) ((nat) )) ((f1) (i))) ((f2) ((h) (i))))) ((((((((((sub_hk) ) (h)) (k)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)))) ((((((((((sub_hk) ) (k)) (h)) (n2)) (n1)) (p2)) (p1)) (f2)) (f1))). (\lambda k : ((nat) ) -> (nat) . \lambda j_clearme1 : (((And) ) ((((And) ) (\forall (i:(nat) ). ((((lt) ) (i)) (n1)) -> ((((eq) ((bool) )) ((p1) (i))) ((true) )) -> (((eq) ((nat) )) ((f1) (i))) ((f2) ((h) (i))))) ((((((((((sub_hk) ) (h)) (k)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)))) ((((((((((sub_hk) ) (k)) (h)) (n2)) (n1)) (p2)) (p1)) (f2)) (f1)). (\lambda j_clearme2 : (((And) ) (\forall (i:(nat) ). ((((lt) ) (i)) (n1)) -> ((((eq) ((bool) )) ((p1) (i))) ((true) )) -> (((eq) ((nat) )) ((f1) (i))) ((f2) ((h) (i))))) ((((((((((sub_hk) ) (h)) (k)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)). (\lambda same : \forall (i:(nat) ). ((((lt) ) (i)) (n1)) -> ((((eq) ((bool) )) ((p1) (i))) ((true) )) -> (((eq) ((nat) )) ((f1) (i))) ((f2) ((h) (i))). (\lambda i : (nat) . \lambda m : (nat) . \lambda Hind : \forall (f:((nat) ) -> (bool) ). ((((le) ) ((O) )) (n1)) -> ((((((((((sub_hk) ) (h)) (k)) ((O) )) (m)) (p1)) (f)) (f1)) (f2)) -> ((((((((((sub_hk) ) (k)) (h)) (m)) ((O) )) (f)) (p1)) (f2)) (f1)) -> (((eq) ((nat) )) (((((((bigop) ((nat) )) ((O) )) (\lambda i0 : (nat) . (p1) (i0))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f1) (i0)))) (((((((bigop) ((nat) )) (m)) (\lambda i0 : (nat) . (f) (i0))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f2) (i0))). (\lambda p20 : ((nat) ) -> (bool) . \lambda j__ : (((le) ) ((O) )) (n1). (\lambda sub1 : (((((((((sub_hk) ) (h)) (k)) ((O) )) (((S) ) (m))) (p1)) (p20)) (f1)) (f2). (\lambda sub2 : (((((((((sub_hk) ) (k)) (h)) (((S) ) (m))) ((O) )) (p20)) (p1)) (f2)) (f1). (\lambda x2571 : (nat) . \lambda x2572 : (nat) . ((((((rewrite_l) ((nat) )) ((((times) ) ((((div) ) (x2571)) (x2572))) (x2572))) (\lambda j__1 : (nat) . (((eq) ((nat) )) (x2571)) ((((plus) ) (j__1)) ((((mod) ) (x2571)) (x2572))))) (((div_mod) (x2571)) (x2572))) ((((times) ) (x2572)) ((((div) ) (x2571)) (x2572)))) (((commutative_times) ((((div) ) (x2571)) (x2572))) (x2572))))))))))).
definition bigop_iso : \forall (n1:(nat) ). \forall (n2:(nat) ). \forall (p1:((nat) ) -> (bool) ). \forall (p2:((nat) ) -> (bool) ). \forall (f1:((nat) ) -> (nat) ). \forall (f2:((nat) ) -> (nat) ). ((((((((iso) ) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)) -> (((eq) ((nat) )) (((((((bigop) ((nat) )) (n1)) (\lambda i : (nat) . (p1) (i))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f1) (i)))) (((((((bigop) ((nat) )) (n2)) (\lambda i : (nat) . (p2) (i))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f2) (i))) := \lambda n1 : (nat) . \lambda n2 : (nat) . \lambda p1 : ((nat) ) -> (bool) . \lambda p2 : ((nat) ) -> (bool) . \lambda f1 : ((nat) ) -> (nat) . \lambda f2 : ((nat) ) -> (nat) . \lambda j_clearme : (((((((iso) ) (n1)) (n2)) (p1)) (p2)) (f1)) (f2). ((((((match_ex_prop) (((nat) ) -> (nat) )) (\lambda h : ((nat) ) -> (nat) . ((ex) (((nat) ) -> (nat) )) (\lambda k : ((nat) ) -> (nat) . (((And) ) ((((And) ) (\forall (i:(nat) ). ((((lt) ) (i)) (n1)) -> ((((eq) ((bool) )) ((p1) (i))) ((true) )) -> (((eq) ((nat) )) ((f1) (i))) ((f2) ((h) (i))))) ((((((((((sub_hk) ) (h)) (k)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)))) ((((((((((sub_hk) ) (k)) (h)) (n2)) (n1)) (p2)) (p1)) (f2)) (f1))))) ((((eq) ((nat) )) (((((((bigop) ((nat) )) (n1)) (\lambda i : (nat) . (p1) (i))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f1) (i)))) (((((((bigop) ((nat) )) (n2)) (\lambda i : (nat) . (p2) (i))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f2) (i))))) (\lambda h : ((nat) ) -> (nat) . \lambda j_clearme0 : ((ex) (((nat) ) -> (nat) )) (\lambda k : ((nat) ) -> (nat) . (((And) ) ((((And) ) (\forall (i:(nat) ). ((((lt) ) (i)) (n1)) -> ((((eq) ((bool) )) ((p1) (i))) ((true) )) -> (((eq) ((nat) )) ((f1) (i))) ((f2) ((h) (i))))) ((((((((((sub_hk) ) (h)) (k)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)))) ((((((((((sub_hk) ) (k)) (h)) (n2)) (n1)) (p2)) (p1)) (f2)) (f1))). ((((((match_ex_prop) (((nat) ) -> (nat) )) (\lambda k : ((nat) ) -> (nat) . (((And) ) ((((And) ) (\forall (i:(nat) ). ((((lt) ) (i)) (n1)) -> ((((eq) ((bool) )) ((p1) (i))) ((true) )) -> (((eq) ((nat) )) ((f1) (i))) ((f2) ((h) (i))))) ((((((((((sub_hk) ) (h)) (k)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)))) ((((((((((sub_hk) ) (k)) (h)) (n2)) (n1)) (p2)) (p1)) (f2)) (f1)))) ((((eq) ((nat) )) (((((((bigop) ((nat) )) (n1)) (\lambda i : (nat) . (p1) (i))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f1) (i)))) (((((((bigop) ((nat) )) (n2)) (\lambda i : (nat) . (p2) (i))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f2) (i))))) (\lambda k : ((nat) ) -> (nat) . \lambda j_clearme1 : (((And) ) ((((And) ) (\forall (i:(nat) ). ((((lt) ) (i)) (n1)) -> ((((eq) ((bool) )) ((p1) (i))) ((true) )) -> (((eq) ((nat) )) ((f1) (i))) ((f2) ((h) (i))))) ((((((((((sub_hk) ) (h)) (k)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)))) ((((((((((sub_hk) ) (k)) (h)) (n2)) (n1)) (p2)) (p1)) (f2)) (f1)). ((((((match_And_prop) ((((And) ) (\forall (i:(nat) ). ((((lt) ) (i)) (n1)) -> ((((eq) ((bool) )) ((p1) (i))) ((true) )) -> (((eq) ((nat) )) ((f1) (i))) ((f2) ((h) (i))))) ((((((((((sub_hk) ) (h)) (k)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)))) ((((((((((sub_hk) ) (k)) (h)) (n2)) (n1)) (p2)) (p1)) (f2)) (f1))) ((((eq) ((nat) )) (((((((bigop) ((nat) )) (n1)) (\lambda i : (nat) . (p1) (i))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f1) (i)))) (((((((bigop) ((nat) )) (n2)) (\lambda i : (nat) . (p2) (i))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f2) (i))))) (\lambda j_clearme2 : (((And) ) (\forall (i:(nat) ). ((((lt) ) (i)) (n1)) -> ((((eq) ((bool) )) ((p1) (i))) ((true) )) -> (((eq) ((nat) )) ((f1) (i))) ((f2) ((h) (i))))) ((((((((((sub_hk) ) (h)) (k)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)). ((((((match_And_prop) (\forall (i:(nat) ). ((((lt) ) (i)) (n1)) -> ((((eq) ((bool) )) ((p1) (i))) ((true) )) -> (((eq) ((nat) )) ((f1) (i))) ((f2) ((h) (i))))) ((((((((((sub_hk) ) (h)) (k)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2))) (((((((((((sub_hk) ) (k)) (h)) (n2)) (n1)) (p2)) (p1)) (f2)) (f1)) -> (((eq) ((nat) )) (((((((bigop) ((nat) )) (n1)) (\lambda i : (nat) . (p1) (i))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f1) (i)))) (((((((bigop) ((nat) )) (n2)) (\lambda i : (nat) . (p2) (i))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f2) (i))))) (\lambda same : \forall (i:(nat) ). ((((lt) ) (i)) (n1)) -> ((((eq) ((bool) )) ((p1) (i))) ((true) )) -> (((eq) ((nat) )) ((f1) (i))) ((f2) ((h) (i))). ((((le_gen) (\lambda j__ : (nat) . ((((((((((sub_hk) ) (h)) (k)) (j__)) (n2)) (p1)) (p2)) (f1)) (f2)) -> ((((((((((sub_hk) ) (k)) (h)) (n2)) (j__)) (p2)) (p1)) (f2)) (f1)) -> (((eq) ((nat) )) (((((((bigop) ((nat) )) (j__)) (\lambda i : (nat) . (p1) (i))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f1) (i)))) (((((((bigop) ((nat) )) (n2)) (\lambda i : (nat) . (p2) (i))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f2) (i))))) (n1)) (\lambda i : (nat) . (((((nat_ind) (\lambda j_x_365 : (nat) . \forall (f:((nat) ) -> (bool) ). ((((le) ) (j_x_365)) (n1)) -> ((((((((((sub_hk) ) (h)) (k)) (j_x_365)) (n2)) (p1)) (f)) (f1)) (f2)) -> ((((((((((sub_hk) ) (k)) (h)) (n2)) (j_x_365)) (f)) (p1)) (f2)) (f1)) -> (((eq) ((nat) )) (((((((bigop) ((nat) )) (j_x_365)) (\lambda i0 : (nat) . (p1) (i0))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f1) (i0)))) (((((((bigop) ((nat) )) (n2)) (\lambda i0 : (nat) . (f) (i0))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f2) (i0))))) (((((nat_ind) (\lambda j_x_365 : (nat) . \forall (f:((nat) ) -> (bool) ). ((((le) ) ((O) )) (n1)) -> ((((((((((sub_hk) ) (h)) (k)) ((O) )) (j_x_365)) (p1)) (f)) (f1)) (f2)) -> ((((((((((sub_hk) ) (k)) (h)) (j_x_365)) ((O) )) (f)) (p1)) (f2)) (f1)) -> (((eq) ((nat) )) (((((((bigop) ((nat) )) ((O) )) (\lambda i0 : (nat) . (p1) (i0))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f1) (i0)))) (((((((bigop) ((nat) )) (j_x_365)) (\lambda i0 : (nat) . (f) (i0))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f2) (i0))))) (\lambda f : ((nat) ) -> (bool) . (((sym_eq_bigop_O) ((nat) )) (\lambda y : (((nat) ) -> (bool) ) -> ((nat) ) -> (((nat) ) -> ((nat) ) -> (nat) ) -> (((nat) ) -> (nat) ) -> (nat) . ((((le) ) ((O) )) (n1)) -> ((((((((((sub_hk) ) (h)) (k)) ((O) )) ((O) )) (p1)) (f)) (f1)) (f2)) -> ((((((((((sub_hk) ) (k)) (h)) ((O) )) ((O) )) (f)) (p1)) (f2)) (f1)) -> (((eq) ((nat) )) (((((((bigop) ((nat) )) ((O) )) (\lambda iO : (nat) . (p1) (iO))) (((S) ) ((O) ))) ((times) )) (\lambda iO : (nat) . (f1) (iO)))) (((((y) (\lambda iO : (nat) . (f) (iO))) (((S) ) ((O) ))) ((times) )) (\lambda iO : (nat) . (f2) (iO))))) ((((sym_eq_bigop_body_O) ((nat) )) (\lambda y : (((nat) ) -> (bool) ) -> ((nat) ) -> (((nat) ) -> ((nat) ) -> (nat) ) -> (((nat) ) -> (nat) ) -> (nat) . ((((le) ) ((O) )) (n1)) -> ((((((((((sub_hk) ) (h)) (k)) ((O) )) ((O) )) (p1)) (f)) (f1)) (f2)) -> ((((((((((sub_hk) ) (k)) (h)) ((O) )) ((O) )) (f)) (p1)) (f2)) (f1)) -> (((eq) ((nat) )) (((((((bigop) ((nat) )) ((O) )) (\lambda iO : (nat) . (p1) (iO))) (((S) ) ((O) ))) ((times) )) (\lambda iO : (nat) . (f1) (iO)))) (((((y) (\lambda iO : (nat) . (f) (iO))) (((S) ) ((O) ))) ((times) )) (\lambda iO : (nat) . (f2) (iO))))) ((((eq_bigop_body_O) ((nat) )) (\lambda y : (((nat) ) -> (bool) ) -> ((nat) ) -> (((nat) ) -> ((nat) ) -> (nat) ) -> (((nat) ) -> (nat) ) -> (nat) . ((((le) ) ((O) )) (n1)) -> ((((((((((sub_hk) ) (h)) (k)) ((O) )) ((O) )) (p1)) (f)) (f1)) (f2)) -> ((((((((((sub_hk) ) (k)) (h)) ((O) )) ((O) )) (f)) (p1)) (f2)) (f1)) -> (((eq) ((nat) )) (((((((bigop) ((nat) )) ((O) )) (\lambda iO : (nat) . (p1) (iO))) (((S) ) ((O) ))) ((times) )) (\lambda iO : (nat) . (f1) (iO)))) (((((y) (\lambda iO : (nat) . (p1) (iO))) (((S) ) ((O) ))) ((times) )) (\lambda iO : (nat) . (f1) (iO))))) ((((eq_bigop_O) ((nat) )) (\lambda y : (((nat) ) -> (bool) ) -> ((nat) ) -> (((nat) ) -> ((nat) ) -> (nat) ) -> (((nat) ) -> (nat) ) -> (nat) . ((((le) ) ((O) )) (n1)) -> ((((((((((sub_hk) ) (h)) (k)) ((O) )) ((O) )) (p1)) (f)) (f1)) (f2)) -> ((((((((((sub_hk) ) (k)) (h)) ((O) )) ((O) )) (f)) (p1)) (f2)) (f1)) -> (((eq) ((nat) )) (((((((bigop) ((nat) )) ((O) )) (\lambda iO : (nat) . (p1) (iO))) (((S) ) ((O) ))) ((times) )) (\lambda iO : (nat) . (f1) (iO)))) (((((y) (\lambda iO : (nat) . (p1) (iO))) (((S) ) ((O) ))) ((times) )) (\lambda iO : (nat) . (f1) (iO))))) (\lambda auto : (((le) ) ((O) )) (n1). (\lambda auto' : (((((((((sub_hk) ) (h)) (k)) ((O) )) ((O) )) (p1)) (f)) (f1)) (f2). (\lambda auto'' : (((((((((sub_hk) ) (k)) (h)) ((O) )) ((O) )) (f)) (p1)) (f2)) (f1). (((refl) ((nat) )) (((((((bigop) ((nat) )) ((O) )) (\lambda i0 : (nat) . (p1) (i0))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f1) (i0)))))))))))) (\lambda m : (nat) . \lambda Hind : \forall (f:((nat) ) -> (bool) ). ((((le) ) ((O) )) (n1)) -> ((((((((((sub_hk) ) (h)) (k)) ((O) )) (m)) (p1)) (f)) (f1)) (f2)) -> ((((((((((sub_hk) ) (k)) (h)) (m)) ((O) )) (f)) (p1)) (f2)) (f1)) -> (((eq) ((nat) )) (((((((bigop) ((nat) )) ((O) )) (\lambda i0 : (nat) . (p1) (i0))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f1) (i0)))) (((((((bigop) ((nat) )) (m)) (\lambda i0 : (nat) . (f) (i0))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f2) (i0))). (\lambda p20 : ((nat) ) -> (bool) . \lambda j__ : (((le) ) ((O) )) (n1). (\lambda sub1 : (((((((((sub_hk) ) (h)) (k)) ((O) )) (((S) ) (m))) (p1)) (p20)) (f1)) (f2). (\lambda sub2 : (((((((((sub_hk) ) (k)) (h)) (((S) ) (m))) ((O) )) (p20)) (p1)) (f2)) (f1). (((((((eq_ind_r) ((nat) )) (((((((bigop) ((nat) )) (m)) (\lambda i0 : (nat) . (p20) (i0))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f2) (i0)))) (\lambda x : (nat) . (((eq) ((nat) )) (((((((bigop) ((nat) )) ((O) )) (\lambda i0 : (nat) . (p1) (i0))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f1) (i0)))) (x))) (((((Hind) (p20)) ((le_O_n) (n1))) ((((((((((sub_hkO) (h)) (k)) ((O) )) (m)) (p1)) (p20)) (f1)) (f2)) (((refl) ((nat) )) ((O) )))) ((((((((((((((((transitive_sub) (\lambda x : (nat) . x)) (\lambda x : (nat) . x)) (k)) (h)) (m)) (((S) ) (m))) ((O) )) (p20)) (p20)) (p1)) (f2)) (f2)) (f1)) ((((((sub_lt) (f2)) (p20)) (m)) (((S) ) (m))) ((le_n_Sn) (m)))) (sub2)))) (((((((bigop) ((nat) )) (((S) ) (m))) (\lambda i0 : (nat) . (p20) (i0))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f2) (i0)))) ((((((((bigop_Sfalse) ((nat) )) (m)) (p20)) (((S) ) ((O) ))) ((times) )) (f2)) (((((((((((((sub0_to_false) (k)) (h)) ((O) )) (((S) ) (m))) (p1)) (p20)) (f1)) (f2)) (((refl) ((nat) )) ((O) ))) (sub2)) (m)) (((((eq_coerc) ((((lt) ) ((((mod) ) (m)) ((O) ))) ((((plus) ) ((((plus) ) ((((mod) ) (m)) ((O) ))) ((((times) ) ((O) )) ((((div) ) (m)) ((O) ))))) (((S) ) ((O) ))))) ((((lt) ) (m)) (((S) ) (m)))) ((((lt_plus_Sn_r) ((((mod) ) (m)) ((O) ))) ((((times) ) ((O) )) ((((div) ) (m)) ((O) )))) ((O) ))) (((((((rewrite_l) ((nat) )) (m)) (\lambda j__1 : (nat) . (((eq) (Prop)) ((((lt) ) ((((mod) ) (m)) ((O) ))) ((((plus) ) (j__1)) (((S) ) ((O) ))))) ((((lt) ) (m)) (((S) ) (m))))) (((((((rewrite_l) ((nat) )) (m)) (\lambda j__1 : (nat) . (((eq) (Prop)) ((((lt) ) (j__1)) ((((plus) ) (m)) (((S) ) ((O) ))))) ((((lt) ) (m)) (((S) ) (m))))) (((((((rewrite_l) ((nat) )) (((S) ) (m))) (\lambda j__1 : (nat) . (((eq) (Prop)) ((((lt) ) (m)) (j__1))) ((((lt) ) (m)) (((S) ) (m))))) (((refl) (Prop)) ((((lt) ) (m)) (((S) ) (m))))) ((((plus) ) (m)) (((S) ) ((O) )))) (((((((rewrite_r) ((nat) )) ((((plus) ) (m)) ((O) ))) (\lambda j__1 : (nat) . (((eq) ((nat) )) (((S) ) (j__1))) ((((plus) ) (m)) (((S) ) ((O) ))))) (((plus_n_Sm) (m)) ((O) ))) (m)) ((plus_n_O) (m))))) ((((mod) ) (m)) ((O) ))) (((((((rewrite_r) ((nat) )) ((((plus) ) ((O) )) ((((mod) ) (m)) ((O) )))) (\lambda j__1 : (nat) . (((eq) ((nat) )) (m)) (j__1))) (((((((rewrite_l) ((nat) )) ((((plus) ) ((((mod) ) (m)) ((O) ))) ((O) ))) (\lambda j__1 : (nat) . (((eq) ((nat) )) (m)) (j__1))) (((((((rewrite_r) ((nat) )) ((((times) ) ((O) )) ((((div) ) (m)) ((O) )))) (\lambda j__1 : (nat) . (((eq) ((nat) )) (m)) ((((plus) ) ((((mod) ) (m)) ((O) ))) (j__1)))) (((((((rewrite_l) ((nat) )) ((((plus) ) ((((times) ) ((O) )) ((((div) ) (m)) ((O) )))) ((((mod) ) (m)) ((O) )))) (\lambda j__1 : (nat) . (((eq) ((nat) )) (m)) (j__1))) (((((((((((((((((((((((let_clause_10471) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)) (j_clearme)) (h)) (j_clearme0)) (k)) (j_clearme1)) (j_clearme2)) (same)) (i)) (m)) (Hind)) (p20)) (j__)) (sub1)) (sub2)) (m)) ((O) ))) ((((plus) ) ((((mod) ) (m)) ((O) ))) ((((times) ) ((O) )) ((((div) ) (m)) ((O) ))))) (((commutative_plus) ((((times) ) ((O) )) ((((div) ) (m)) ((O) )))) ((((mod) ) (m)) ((O) ))))) ((O) )) ((times_O_n) ((((div) ) (m)) ((O) ))))) ((((plus) ) ((O) )) ((((mod) ) (m)) ((O) )))) (((commutative_plus) ((((mod) ) (m)) ((O) ))) ((O) )))) ((((mod) ) (m)) ((O) ))) ((plus_O_n) ((((mod) ) (m)) ((O) )))))) ((((plus) ) ((((mod) ) (m)) ((O) ))) ((((times) ) ((O) )) ((((div) ) (m)) ((O) ))))) (((((((rewrite_l) ((nat) )) ((((plus) ) ((((times) ) ((O) )) ((((div) ) (m)) ((O) )))) ((((mod) ) (m)) ((O) )))) (\lambda j__1 : (nat) . (((eq) ((nat) )) (m)) (j__1))) (((((((((((((((((((((((let_clause_10471) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)) (j_clearme)) (h)) (j_clearme0)) (k)) (j_clearme1)) (j_clearme2)) (same)) (i)) (m)) (Hind)) (p20)) (j__)) (sub1)) (sub2)) (m)) ((O) ))) ((((plus) ) ((((mod) ) (m)) ((O) ))) ((((times) ) ((O) )) ((((div) ) (m)) ((O) ))))) (((commutative_plus) ((((times) ) ((O) )) ((((div) ) (m)) ((O) )))) ((((mod) ) (m)) ((O) )))))))))))))) (n2))) (\lambda n : (nat) . \lambda Hind : \forall (f:((nat) ) -> (bool) ). ((((le) ) (n)) (n1)) -> ((((((((((sub_hk) ) (h)) (k)) (n)) (n2)) (p1)) (f)) (f1)) (f2)) -> ((((((((((sub_hk) ) (k)) (h)) (n2)) (n)) (f)) (p1)) (f2)) (f1)) -> (((eq) ((nat) )) (((((((bigop) ((nat) )) (n)) (\lambda i0 : (nat) . (p1) (i0))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f1) (i0)))) (((((((bigop) ((nat) )) (n2)) (\lambda i0 : (nat) . (f) (i0))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f2) (i0))). (\lambda p20 : ((nat) ) -> (bool) . \lambda ltn : (((le) ) (((S) ) (n))) (n1). (\lambda sub1 : (((((((((sub_hk) ) (h)) (k)) (((S) ) (n))) (n2)) (p1)) (p20)) (f1)) (f2). (\lambda sub2 : (((((((((sub_hk) ) (k)) (h)) (n2)) (((S) ) (n))) (p20)) (p1)) (f2)) (f1). (((((((match_Or_prop) ((((eq) ((bool) )) ((p1) (n))) ((true) ))) ((((eq) ((bool) )) ((p1) (n))) ((false) ))) ((((eq) ((nat) )) (((((((bigop) ((nat) )) (((S) ) (n))) (\lambda i0 : (nat) . (p1) (i0))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f1) (i0)))) (((((((bigop) ((nat) )) (n2)) (\lambda i0 : (nat) . (p20) (i0))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f2) (i0))))) (\lambda p1n : (((eq) ((bool) )) ((p1) (n))) ((true) ). (((((((eq_ind_r) ((nat) )) ((((times) ) ((f1) (n))) (((((((bigop) ((nat) )) (n)) (\lambda i0 : (nat) . (p1) (i0))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f1) (i0))))) (\lambda x : (nat) . (((eq) ((nat) )) (x)) (((((((bigop) ((nat) )) (n2)) (\lambda i0 : (nat) . (p20) (i0))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f2) (i0))))) ((((((match_And_prop) ((((And) ) ((((lt) ) ((h) (n))) (n2))) ((((eq) ((bool) )) ((p20) ((h) (n)))) ((true) )))) ((((eq) ((nat) )) ((k) ((h) (n)))) (n))) ((((eq) ((nat) )) ((((times) ) ((f1) (n))) (((((((bigop) ((nat) )) (n)) (\lambda i0 : (nat) . (p1) (i0))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f1) (i0))))) (((((((bigop) ((nat) )) (n2)) (\lambda i0 : (nat) . (p20) (i0))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f2) (i0))))) (\lambda j_clearme3 : (((And) ) ((((lt) ) ((h) (n))) (n2))) ((((eq) ((bool) )) ((p20) ((h) (n)))) ((true) )). ((((((match_And_prop) ((((lt) ) ((h) (n))) (n2))) ((((eq) ((bool) )) ((p20) ((h) (n)))) ((true) ))) (((((eq) ((nat) )) ((k) ((h) (n)))) (n)) -> (((eq) ((nat) )) ((((times) ) ((f1) (n))) (((((((bigop) ((nat) )) (n)) (\lambda i0 : (nat) . (p1) (i0))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f1) (i0))))) (((((((bigop) ((nat) )) (n2)) (\lambda i0 : (nat) . (p20) (i0))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f2) (i0))))) (\lambda hn : (((lt) ) ((h) (n))) (n2). (\lambda p2hn : (((eq) ((bool) )) ((p20) ((h) (n)))) ((true) ). (\lambda eqn : (((eq) ((nat) )) ((k) ((h) (n)))) (n). (((((((eq_ind_r) ((nat) )) ((((times) ) ((f2) ((h) (n)))) (((((((bigop) ((nat) )) (n2)) (\lambda x : (nat) . (((andb) ) (((notb) ) ((((eqb) ) ((h) (n))) (x)))) ((p20) (x)))) (((S) ) ((O) ))) ((times) )) (\lambda x : (nat) . (f2) (x))))) (\lambda x : (nat) . (((eq) ((nat) )) ((((times) ) ((f1) (n))) (((((((bigop) ((nat) )) (n)) (\lambda i0 : (nat) . (p1) (i0))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f1) (i0))))) (x))) (((((((eq_ind_r) ((nat) )) ((f2) ((h) (n)))) (\lambda x : (nat) . (((eq) ((nat) )) ((((times) ) (x)) (((((((bigop) ((nat) )) (n)) (\lambda i0 : (nat) . (p1) (i0))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f1) (i0))))) ((((times) ) ((f2) ((h) (n)))) (((((((bigop) ((nat) )) (n2)) (\lambda x0 : (nat) . (((andb) ) (((notb) ) ((((eqb) ) ((h) (n))) (x0)))) ((p20) (x0)))) (((S) ) ((O) ))) ((times) )) (\lambda x0 : (nat) . (f2) (x0)))))) (((((((eq_f) ((nat) )) ((nat) )) (((times) ) ((f2) ((h) (n))))) (((((((bigop) ((nat) )) (n)) (\lambda i0 : (nat) . (p1) (i0))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f1) (i0)))) (((((((bigop) ((nat) )) (n2)) (\lambda x : (nat) . (((andb) ) (((notb) ) ((((eqb) ) ((h) (n))) (x)))) ((p20) (x)))) (((S) ) ((O) ))) ((times) )) (\lambda x : (nat) . (f2) (x)))) (((((Hind) (\lambda j__ : (nat) . (((andb) ) (((notb) ) ((((eqb) ) ((h) (n))) (j__)))) ((p20) (j__)))) ((((lt_to_le) (n)) (n1)) (ltn))) (\lambda i0 : (nat) . \lambda ltin : (((lt) ) (i0)) (n). (\lambda p1i : (((eq) ((bool) )) ((p1) (i0))) ((true) ). ((((((match_And_prop) ((((And) ) ((((lt) ) ((h) (i0))) (n2))) ((((eq) ((bool) )) ((p20) ((h) (i0)))) ((true) )))) ((((eq) ((nat) )) ((k) ((h) (i0)))) (i0))) ((((And) ) ((((And) ) ((((lt) ) ((h) (i0))) (n2))) ((((eq) ((bool) )) ((((andb) ) (((notb) ) ((((eqb) ) ((h) (n))) ((h) (i0))))) ((p20) ((h) (i0))))) ((true) )))) ((((eq) ((nat) )) ((k) ((h) (i0)))) (i0)))) (\lambda j_clearme4 : (((And) ) ((((lt) ) ((h) (i0))) (n2))) ((((eq) ((bool) )) ((p20) ((h) (i0)))) ((true) )). ((((((match_And_prop) ((((lt) ) ((h) (i0))) (n2))) ((((eq) ((bool) )) ((p20) ((h) (i0)))) ((true) ))) (((((eq) ((nat) )) ((k) ((h) (i0)))) (i0)) -> (((And) ) ((((And) ) ((((lt) ) ((h) (i0))) (n2))) ((((eq) ((bool) )) ((((andb) ) (((notb) ) ((((eqb) ) ((h) (n))) ((h) (i0))))) ((p20) ((h) (i0))))) ((true) )))) ((((eq) ((nat) )) ((k) ((h) (i0)))) (i0)))) (\lambda h1i : (((lt) ) ((h) (i0))) (n2). (\lambda p2h1i : (((eq) ((bool) )) ((p20) ((h) (i0)))) ((true) ). (\lambda eqi : (((eq) ((nat) )) ((k) ((h) (i0)))) (i0). (((((conj) ((((And) ) ((((lt) ) ((h) (i0))) (n2))) ((((eq) ((bool) )) ((((andb) ) (((notb) ) ((((eqb) ) ((h) (n))) ((h) (i0))))) ((p20) ((h) (i0))))) ((true) )))) ((((eq) ((nat) )) ((k) ((h) (i0)))) (i0))) (((((conj) ((((lt) ) ((h) (i0))) (n2))) ((((eq) ((bool) )) ((((andb) ) (((notb) ) ((((eqb) ) ((h) (n))) ((h) (i0))))) ((p20) ((h) (i0))))) ((true) ))) (h1i)) (((((((eq_ind_r) ((bool) )) ((false) )) (\lambda x : (bool) . (((eq) ((bool) )) ((((andb) ) (((notb) ) (x))) ((p20) ((h) (i0))))) ((true) ))) ((((((sym_eq_match_bool_type_false) ((bool) )) ((false) )) ((true) )) (\lambda y : (bool) . (((eq) ((bool) )) (((((match_bool_type) ((bool) )) ((p20) ((h) (i0)))) ((false) )) (y))) ((true) ))) ((((((sym_eq_match_bool_type_true) ((bool) )) ((p20) ((h) (i0)))) ((false) )) (\lambda y : (bool) . (((eq) ((bool) )) (y)) ((true) ))) (((((((rewrite_r) ((bool) )) ((true) )) (\lambda j__ : (bool) . (((eq) ((bool) )) (j__)) ((true) ))) (((refl) ((bool) )) ((true) ))) ((p20) ((h) (i0)))) (p2h1i))))) ((((eqb) ) ((h) (n))) ((h) (i0)))) ((((not_eq_to_eqb_false) ((h) (n))) ((h) (i0))) (((((not_to_not) ((((eq) ((nat) )) ((h) (n))) ((h) (i0)))) ((((eq) ((nat) )) (i0)) (n))) (\lambda auto : (((eq) ((nat) )) ((h) (n))) ((h) (i0)). (((((((rewrite_r) ((nat) )) (n)) (\lambda j__ : (nat) . (((eq) ((nat) )) (j__)) (n))) (((refl) ((nat) )) (n))) (i0)) (((((((rewrite_l) ((nat) )) ((k) ((h) (n)))) (\lambda j__ : (nat) . (((eq) ((nat) )) (j__)) (n))) (eqn)) (i0)) (((((((rewrite_r) ((nat) )) ((h) (i0))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((k) (j__))) (i0))) (eqi)) ((h) (n))) (auto)))))) ((((lt_to_not_eq) (i0)) (n)) (ltin))))))) (((((((rewrite_r) ((nat) )) (i0)) (\lambda j__ : (nat) . (((eq) ((nat) )) (j__)) (i0))) (((refl) ((nat) )) (i0))) ((k) ((h) (i0)))) (eqi))))))) (j_clearme4)))) ((((sub1) (i0)) ((((le_S) (((S) ) (i0))) (n)) (ltin))) (p1i)))))) (\lambda j : (nat) . \lambda ltj : (((lt) ) (j)) (n2). (\lambda p2j : (((eq) ((bool) )) ((((andb) ) (((notb) ) ((((eqb) ) ((h) (n))) (j)))) ((p20) (j)))) ((true) ). ((((((match_And_prop) ((((And) ) ((((lt) ) ((k) (j))) (((S) ) (n)))) ((((eq) ((bool) )) ((p1) ((k) (j)))) ((true) )))) ((((eq) ((nat) )) ((h) ((k) (j)))) (j))) ((((And) ) ((((And) ) ((((lt) ) ((k) (j))) (n))) ((((eq) ((bool) )) ((p1) ((k) (j)))) ((true) )))) ((((eq) ((nat) )) ((h) ((k) (j)))) (j)))) (\lambda j_clearme4 : (((And) ) ((((lt) ) ((k) (j))) (((S) ) (n)))) ((((eq) ((bool) )) ((p1) ((k) (j)))) ((true) )). ((((((match_And_prop) ((((lt) ) ((k) (j))) (((S) ) (n)))) ((((eq) ((bool) )) ((p1) ((k) (j)))) ((true) ))) (((((eq) ((nat) )) ((h) ((k) (j)))) (j)) -> (((And) ) ((((And) ) ((((lt) ) ((k) (j))) (n))) ((((eq) ((bool) )) ((p1) ((k) (j)))) ((true) )))) ((((eq) ((nat) )) ((h) ((k) (j)))) (j)))) (\lambda ltkj : (((lt) ) ((k) (j))) (((S) ) (n)). (\lambda p1kj : (((eq) ((bool) )) ((p1) ((k) (j)))) ((true) ). (\lambda eqj : (((eq) ((nat) )) ((h) ((k) (j)))) (j). (((((conj) ((((And) ) ((((lt) ) ((k) (j))) (n))) ((((eq) ((bool) )) ((p1) ((k) (j)))) ((true) )))) ((((eq) ((nat) )) ((h) ((k) (j)))) (j))) (((((conj) ((((lt) ) ((k) (j))) (n))) ((((eq) ((bool) )) ((p1) ((k) (j)))) ((true) ))) (((((((match_Or_prop) ((((lt) ) ((k) (j))) (n))) ((((eq) ((nat) )) ((k) (j))) (n))) ((((lt) ) ((k) (j))) (n))) (\lambda auto : (((lt) ) ((k) (j))) (n). (auto))) (\lambda eqkj : (((eq) ((nat) )) ((k) (j))) (n). (((falsity) ((((lt) ) ((k) (j))) (n))) (((((((eqb_elim) ((h) (n))) (j)) (\lambda j__ : (bool) . ((((eq) ((bool) )) ((((andb) ) (((notb) ) (j__))) ((p20) (j)))) ((true) )) -> (False) )) ((((((sym_eq_match_bool_type_true) ((bool) )) ((false) )) ((true) )) (\lambda y : (bool) . ((((eq) ((nat) )) ((h) (n))) (j)) -> ((((eq) ((bool) )) (((((match_bool_type) ((bool) )) ((p20) (j))) ((false) )) (y))) ((true) )) -> (False) )) ((((((sym_eq_match_bool_type_false) ((bool) )) ((p20) (j))) ((false) )) (\lambda y : (bool) . ((((eq) ((nat) )) ((h) (n))) (j)) -> ((((eq) ((bool) )) (y)) ((true) )) -> (False) )) (\lambda auto : (((eq) ((nat) )) ((h) (n))) (j). (\lambda auto' : (((eq) ((bool) )) ((false) )) ((true) ). ((((absurd) ((((eq) ((bool) )) ((true) )) ((false) ))) (((((((rewrite_r) ((bool) )) ((true) )) (\lambda j__ : (bool) . (((eq) ((bool) )) ((true) )) (j__))) (((refl) ((bool) )) ((true) ))) ((false) )) (auto'))) (not_eq_true_false))))))) ((((((sym_eq_match_bool_type_false) ((bool) )) ((false) )) ((true) )) (\lambda y : (bool) . (((Not) ) ((((eq) ((nat) )) ((h) (n))) (j))) -> ((((eq) ((bool) )) (((((match_bool_type) ((bool) )) ((p20) (j))) ((false) )) (y))) ((true) )) -> (False) )) ((((((sym_eq_match_bool_type_true) ((bool) )) ((p20) (j))) ((false) )) (\lambda y : (bool) . (((Not) ) ((((eq) ((nat) )) ((h) (n))) (j))) -> ((((eq) ((bool) )) (y)) ((true) )) -> (False) )) (\lambda auto : ((Not) ) ((((eq) ((nat) )) ((h) (n))) (j)). (\lambda auto' : (((eq) ((bool) )) ((p20) (j))) ((true) ). ((((absurd) ((((eq) ((nat) )) ((h) (n))) (j))) (((((((rewrite_r) ((nat) )) (j)) (\lambda j__ : (nat) . (((eq) ((nat) )) (j__)) (j))) (((refl) ((nat) )) (j))) ((h) (n))) (((((((rewrite_l) ((nat) )) ((k) (j))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((h) (j__))) (j))) (eqj)) (n)) (eqkj)))) (auto))))))) (p2j))))) ((((le_to_or_lt_eq) ((k) (j))) (n)) ((((le_S_S_to_le) ((k) (j))) (n)) (ltkj))))) (((((((rewrite_r) ((bool) )) ((true) )) (\lambda j__ : (bool) . (((eq) ((bool) )) (j__)) ((true) ))) (((refl) ((bool) )) ((true) ))) ((p1) ((k) (j)))) (p1kj)))) (((((((rewrite_r) ((nat) )) (j)) (\lambda j__ : (nat) . (((eq) ((nat) )) (j__)) (j))) (((refl) ((nat) )) (j))) ((h) ((k) (j)))) (eqj))))))) (j_clearme4)))) ((((sub2) (j)) (ltj)) ((((andb_true_r) (((notb) ) ((((eqb) ) ((h) (n))) (j)))) ((p20) (j))) (p2j))))))))) ((f1) (n))) ((((same) (n)) (ltn)) (((((((rewrite_r) ((bool) )) ((true) )) (\lambda j__ : (bool) . (((eq) ((bool) )) (j__)) ((true) ))) (((refl) ((bool) )) ((true) ))) ((p1) (n))) (p1n))))) (((((((bigop) ((nat) )) (n2)) (\lambda x : (nat) . (p20) (x))) (((S) ) ((O) ))) ((times) )) (\lambda x : (nat) . (f2) (x)))) (((((((bigop_diff) (p20)) (f2)) ((h) (n))) (n2)) (hn)) (((((((rewrite_r) ((bool) )) ((true) )) (\lambda j__ : (bool) . (((eq) ((bool) )) (j__)) ((true) ))) (((refl) ((bool) )) ((true) ))) ((p20) ((h) (n)))) (p2hn)))))))) (j_clearme3)))) ((((sub1) (n)) ((le_n) (((S) ) (n)))) (p1n)))) (((((((bigop) ((nat) )) (((S) ) (n))) (\lambda i0 : (nat) . (p1) (i0))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f1) (i0)))) ((((((((bigop_Strue) ((nat) )) (n)) (p1)) (((S) ) ((O) ))) ((times) )) (f1)) (((((((rewrite_r) ((bool) )) ((true) )) (\lambda j__ : (bool) . (((eq) ((bool) )) (j__)) ((true) ))) (((refl) ((bool) )) ((true) ))) ((p1) (n))) (p1n)))))) (\lambda p1n : (((eq) ((bool) )) ((p1) (n))) ((false) ). (((((((eq_ind_r) ((nat) )) (((((((bigop) ((nat) )) (n)) (\lambda i0 : (nat) . (p1) (i0))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f1) (i0)))) (\lambda x : (nat) . (((eq) ((nat) )) (x)) (((((((bigop) ((nat) )) (n2)) (\lambda i0 : (nat) . (p20) (i0))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f2) (i0))))) (((((Hind) (p20)) ((((lt_to_le) (n)) (n1)) (ltn))) ((((((((((((((((transitive_sub) (\lambda x : (nat) . x)) (\lambda x : (nat) . x)) (h)) (k)) (n)) (((S) ) (n))) (n2)) (p1)) (p1)) (p20)) (f1)) (f1)) (f2)) ((((((sub_lt) (f1)) (p1)) (n)) (((S) ) (n))) ((le_n_Sn) (n)))) (sub1))) (\lambda i0 : (nat) . \lambda lti : (((lt) ) (i0)) (n2). (\lambda p2i : (((eq) ((bool) )) ((p20) (i0))) ((true) ). ((((((match_And_prop) ((((And) ) ((((lt) ) ((k) (i0))) (((S) ) (n)))) ((((eq) ((bool) )) ((p1) ((k) (i0)))) ((true) )))) ((((eq) ((nat) )) ((h) ((k) (i0)))) (i0))) ((((And) ) ((((And) ) ((((lt) ) ((k) (i0))) (n))) ((((eq) ((bool) )) ((p1) ((k) (i0)))) ((true) )))) ((((eq) ((nat) )) ((h) ((k) (i0)))) (i0)))) (\lambda j_clearme3 : (((And) ) ((((lt) ) ((k) (i0))) (((S) ) (n)))) ((((eq) ((bool) )) ((p1) ((k) (i0)))) ((true) )). ((((((match_And_prop) ((((lt) ) ((k) (i0))) (((S) ) (n)))) ((((eq) ((bool) )) ((p1) ((k) (i0)))) ((true) ))) (((((eq) ((nat) )) ((h) ((k) (i0)))) (i0)) -> (((And) ) ((((And) ) ((((lt) ) ((k) (i0))) (n))) ((((eq) ((bool) )) ((p1) ((k) (i0)))) ((true) )))) ((((eq) ((nat) )) ((h) ((k) (i0)))) (i0)))) (\lambda ltki : (((lt) ) ((k) (i0))) (((S) ) (n)). (\lambda p1ki : (((eq) ((bool) )) ((p1) ((k) (i0)))) ((true) ). (\lambda eqi : (((eq) ((nat) )) ((h) ((k) (i0)))) (i0). (((((conj) ((((And) ) ((((lt) ) ((k) (i0))) (n))) ((((eq) ((bool) )) ((p1) ((k) (i0)))) ((true) )))) ((((eq) ((nat) )) ((h) ((k) (i0)))) (i0))) (((((conj) ((((lt) ) ((k) (i0))) (n))) ((((eq) ((bool) )) ((p1) ((k) (i0)))) ((true) ))) (((((((match_Or_prop) ((((lt) ) ((k) (i0))) (n))) ((((eq) ((nat) )) ((k) (i0))) (n))) ((((lt) ) ((k) (i0))) (n))) (\lambda auto : (((lt) ) ((k) (i0))) (n). (auto))) (\lambda eqki : (((eq) ((nat) )) ((k) (i0))) (n). (((falsity) ((((lt) ) ((k) (i0))) (n))) ((((absurd) ((((eq) ((bool) )) ((true) )) ((false) ))) (((((((rewrite_l) ((bool) )) ((true) )) (\lambda j__ : (bool) . (((eq) ((bool) )) ((true) )) (j__))) (((refl) ((bool) )) ((true) ))) ((false) )) (((((((rewrite_l) ((bool) )) ((p1) (n))) (\lambda j__ : (bool) . (((eq) ((bool) )) (j__)) ((false) ))) (p1n)) ((true) )) (((((((rewrite_l) ((nat) )) ((k) (i0))) (\lambda j__ : (nat) . (((eq) ((bool) )) ((p1) (j__))) ((true) ))) (p1ki)) (n)) (eqki))))) (not_eq_true_false))))) ((((le_to_or_lt_eq) ((k) (i0))) (n)) ((((le_S_S_to_le) ((k) (i0))) (n)) (ltki))))) (((((((rewrite_r) ((bool) )) ((true) )) (\lambda j__ : (bool) . (((eq) ((bool) )) (j__)) ((true) ))) (((refl) ((bool) )) ((true) ))) ((p1) ((k) (i0)))) (p1ki)))) (((((((rewrite_r) ((nat) )) (i0)) (\lambda j__ : (nat) . (((eq) ((nat) )) (j__)) (i0))) (((refl) ((nat) )) (i0))) ((h) ((k) (i0)))) (eqi))))))) (j_clearme3)))) ((((sub2) (i0)) (lti)) (p2i))))))) (((((((bigop) ((nat) )) (((S) ) (n))) (\lambda i0 : (nat) . (p1) (i0))) (((S) ) ((O) ))) ((times) )) (\lambda i0 : (nat) . (f1) (i0)))) ((((((((bigop_Sfalse) ((nat) )) (n)) (p1)) (((S) ) ((O) ))) ((times) )) (f1)) (((((((rewrite_r) ((bool) )) ((false) )) (\lambda j__ : (bool) . (((eq) ((bool) )) (j__)) ((false) ))) (((refl) ((bool) )) ((false) ))) ((p1) (n))) (p1n)))))) ((true_or_false) ((p1) (n))))))))) (i)) (p2))))) (j_clearme2)))) (j_clearme1)))) (j_clearme0)))) (j_clearme)).

primes_sttfa : THEORY
BEGIN
IMPORTING bool_sttfa,connectives_sttfa,div_mod_sttfa,logic_sttfa,nat_sttfa,relations_sttfa

sttfa_divides : [nat_sttfa.sttfa_nat -> [nat_sttfa.sttfa_nat -> bool]]

quotient  : AXIOM (FORALL(n:nat_sttfa.sttfa_nat):(FORALL(m:nat_sttfa.sttfa_nat):(FORALL(q:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(q)) => primes_sttfa.sttfa_divides(n)(m)))))

match_divides_prop  : AXIOM (FORALL(n:nat_sttfa.sttfa_nat):(FORALL(m:nat_sttfa.sttfa_nat):(FORALL(return_type:bool):((FORALL(q:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(q)) => return_type)) => (primes_sttfa.sttfa_divides(n)(m) => return_type)))))

reflexive_divides  : LEMMA relations_sttfa.reflexive[nat_sttfa.sttfa_nat](primes_sttfa.sttfa_divides)

%|- reflexive_divides : PROOF
%|- (sttfa-conv "(FORALL(x:nat_sttfa.sttfa_nat):primes_sttfa.sttfa_divides(x)(x))" () ("relations_sttfa.reflexive")
%|- (then@ (sttfa-forall-i "x")
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.times(x)(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))) => primes_sttfa.sttfa_divides(x)(x))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.times(x)(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O)))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.times(x)(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.times(x)(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.times(x)(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O)))"
%|- (sttfa-conv "logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.times(x)(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O)))" () ()
%|- (sttfa-forall-e "(FORALL(n:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](n)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))))" "x"
%|- (sttfa-lemma "nat_sttfa.times_n_1")))
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.times(x)(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.times(x)(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))))" () ()
%|- (sttfa-forall-e "(FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.times(x)(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.times(x)(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O)))))" "x"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(x)(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O)))(nat_sttfa.times(x)(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.times(x)(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.times(x)(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(x)(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O)))(nat_sttfa.times(x)(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O)))"
%|- (sttfa-conv "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(x)(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O)))(nat_sttfa.times(x)(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O)))" () ()
%|- (sttfa-forall-e "(FORALL(x0:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](x0)(x0))" "nat_sttfa.times(x)(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))"
%|- (sttfa-lemma "logic_sttfa.refl[nat_sttfa.sttfa_nat]")))
%|- (sttfa-conv "((LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](sttfa___)(nat_sttfa.times(x)(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))))(nat_sttfa.times(x)(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.times(x)(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))) => (LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](sttfa___)(nat_sttfa.times(x)(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))))(y))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.times(x)(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.times(x)(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))) => P(y)))))" "(LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](sttfa___)(nat_sttfa.times(x)(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))))"
%|- (sttfa-conv "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.times(x)(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.times(x)(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))) => P(y)))))" () ()
%|- (sttfa-forall-e "(FORALL(x0:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(x0) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(x0) => P(y))))))" "nat_sttfa.times(x)(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))"
%|- (sttfa-lemma "logic_sttfa.rewrite_r[nat_sttfa.sttfa_nat]")))))))))
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.times(x)(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))) => primes_sttfa.sttfa_divides(x)(x))" () ()
%|- (sttfa-forall-e "(FORALL(q:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.times(x)(q)) => primes_sttfa.sttfa_divides(x)(x)))" "nat_sttfa.sttfa_S(nat_sttfa.sttfa_O)"
%|- (sttfa-conv "(FORALL(q:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.times(x)(q)) => primes_sttfa.sttfa_divides(x)(x)))" () ()
%|- (sttfa-forall-e "(FORALL(m:nat_sttfa.sttfa_nat):(FORALL(q:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(x)(q)) => primes_sttfa.sttfa_divides(x)(m))))" "x"
%|- (sttfa-conv "(FORALL(m:nat_sttfa.sttfa_nat):(FORALL(q:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(x)(q)) => primes_sttfa.sttfa_divides(x)(m))))" () ()
%|- (sttfa-forall-e "(FORALL(n:nat_sttfa.sttfa_nat):(FORALL(m:nat_sttfa.sttfa_nat):(FORALL(q:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(q)) => primes_sttfa.sttfa_divides(n)(m)))))" "x"
%|- (sttfa-lemma "primes_sttfa.quotient"))))))))))
%|- QED

divides_to_div_mod_spec  : LEMMA (FORALL(n:nat_sttfa.sttfa_nat):(FORALL(m:nat_sttfa.sttfa_nat):(nat_sttfa.lt(nat_sttfa.sttfa_O)(n) => (primes_sttfa.sttfa_divides(n)(m) => div_mod_sttfa.div_mod_spec(m)(n)(div_mod_sttfa.div(m)(n))(nat_sttfa.sttfa_O)))))

%|- divides_to_div_mod_spec : PROOF
%|- (then@ (sttfa-forall-i "n")
%|- (then@ (sttfa-forall-i "m")
%|- (sttfa-impl-i "nat_sttfa.lt(nat_sttfa.sttfa_O)(n)" "(primes_sttfa.sttfa_divides(n)(m) => div_mod_sttfa.div_mod_spec(m)(n)(div_mod_sttfa.div(m)(n))(nat_sttfa.sttfa_O))"
%|- (sttfa-impl-i "primes_sttfa.sttfa_divides(n)(m)" "div_mod_sttfa.div_mod_spec(m)(n)(div_mod_sttfa.div(m)(n))(nat_sttfa.sttfa_O)"
%|- (sttfa-impl-e "(primes_sttfa.sttfa_divides(n)(m) => div_mod_sttfa.div_mod_spec(m)(n)(div_mod_sttfa.div(m)(n))(nat_sttfa.sttfa_O))" "primes_sttfa.sttfa_divides(n)(m)"
%|- (propax)
%|- (sttfa-impl-e "((FORALL(q:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(q)) => div_mod_sttfa.div_mod_spec(m)(n)(div_mod_sttfa.div(m)(n))(nat_sttfa.sttfa_O))) => (primes_sttfa.sttfa_divides(n)(m) => div_mod_sttfa.div_mod_spec(m)(n)(div_mod_sttfa.div(m)(n))(nat_sttfa.sttfa_O)))" "(FORALL(q:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(q)) => div_mod_sttfa.div_mod_spec(m)(n)(div_mod_sttfa.div(m)(n))(nat_sttfa.sttfa_O)))"
%|- (then@ (sttfa-forall-i "q")
%|- (sttfa-impl-i "logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(q))" "div_mod_sttfa.div_mod_spec(m)(n)(div_mod_sttfa.div(m)(n))(nat_sttfa.sttfa_O)"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(m)(n))(n))(nat_sttfa.sttfa_O)) => div_mod_sttfa.div_mod_spec(m)(n)(div_mod_sttfa.div(m)(n))(nat_sttfa.sttfa_O))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(m)(n))(n))(nat_sttfa.sttfa_O))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(q)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(m)(n))(n))(nat_sttfa.sttfa_O)))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(q))"
%|- (propax)
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(q)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(m)(n))(n))(nat_sttfa.sttfa_O)))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.times(n)(q)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(x)(n))(n))(nat_sttfa.sttfa_O))))" "m"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(n)(q))(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(nat_sttfa.times(n)(q))(n))(n))(nat_sttfa.sttfa_O)) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.times(n)(q)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(x)(n))(n))(nat_sttfa.sttfa_O)))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(n)(q))(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(nat_sttfa.times(n)(q))(n))(n))(nat_sttfa.sttfa_O))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(n)(q))(nat_sttfa.times(q)(n)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(n)(q))(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(nat_sttfa.times(n)(q))(n))(n))(nat_sttfa.sttfa_O)))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(n)(q))(nat_sttfa.times(q)(n))"
%|- (sttfa-conv "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(n)(q))(nat_sttfa.times(q)(n))" () ()
%|- (sttfa-forall-e "(FORALL(y:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(n)(y))(nat_sttfa.times(y)(n)))" "q"
%|- (sttfa-conv "(FORALL(y:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(n)(y))(nat_sttfa.times(y)(n)))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(y:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(x)(y))(nat_sttfa.times(y)(x))))" "n"
%|- (sttfa-conv "(LAMBDA(f:[nat_sttfa.sttfa_nat -> [nat_sttfa.sttfa_nat -> nat_sttfa.sttfa_nat]]):(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(y:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](f(x)(y))(f(y)(x)))))(nat_sttfa.times)" () ()
%|- (sttfa-conv "relations_sttfa.commutative[nat_sttfa.sttfa_nat](nat_sttfa.times)" ("relations_sttfa.commutative") ()
%|- (sttfa-lemma "nat_sttfa.commutative_times")))))))
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(n)(q))(nat_sttfa.times(q)(n)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(n)(q))(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(nat_sttfa.times(n)(q))(n))(n))(nat_sttfa.sttfa_O)))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.times(q)(n)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(x)(n))(n))(nat_sttfa.sttfa_O))))" "nat_sttfa.times(n)(q)"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(n))(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(nat_sttfa.times(q)(n))(n))(n))(nat_sttfa.sttfa_O)) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.times(q)(n)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(x)(n))(n))(nat_sttfa.sttfa_O)))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(n))(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(nat_sttfa.times(q)(n))(n))(n))(nat_sttfa.sttfa_O))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.div(nat_sttfa.times(q)(n))(n))(q) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(n))(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(nat_sttfa.times(q)(n))(n))(n))(nat_sttfa.sttfa_O)))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.div(nat_sttfa.times(q)(n))(n))(q)"
%|- (sttfa-impl-e "(nat_sttfa.lt(nat_sttfa.sttfa_O)(n) => logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.div(nat_sttfa.times(q)(n))(n))(q))" "nat_sttfa.lt(nat_sttfa.sttfa_O)(n)"
%|- (propax)
%|- (sttfa-conv "(nat_sttfa.lt(nat_sttfa.sttfa_O)(n) => logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.div(nat_sttfa.times(q)(n))(n))(q))" () ()
%|- (sttfa-forall-e "(FORALL(b:nat_sttfa.sttfa_nat):(nat_sttfa.lt(nat_sttfa.sttfa_O)(b) => logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.div(nat_sttfa.times(q)(b))(b))(q)))" "n"
%|- (sttfa-conv "(FORALL(b:nat_sttfa.sttfa_nat):(nat_sttfa.lt(nat_sttfa.sttfa_O)(b) => logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.div(nat_sttfa.times(q)(b))(b))(q)))" () ()
%|- (sttfa-forall-e "(FORALL(a:nat_sttfa.sttfa_nat):(FORALL(b:nat_sttfa.sttfa_nat):(nat_sttfa.lt(nat_sttfa.sttfa_O)(b) => logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.div(nat_sttfa.times(a)(b))(b))(a))))" "q"
%|- (sttfa-lemma "div_mod_sttfa.div_times"))))))
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.div(nat_sttfa.times(q)(n))(n))(q) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(n))(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(nat_sttfa.times(q)(n))(n))(n))(nat_sttfa.sttfa_O)))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(q) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(n))(nat_sttfa.plus(nat_sttfa.times(x)(n))(nat_sttfa.sttfa_O))))" "div_mod_sttfa.div(nat_sttfa.times(q)(n))(n)"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(n))(nat_sttfa.plus(nat_sttfa.times(q)(n))(nat_sttfa.sttfa_O)) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(q) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(n))(nat_sttfa.plus(nat_sttfa.times(x)(n))(nat_sttfa.sttfa_O)))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(n))(nat_sttfa.plus(nat_sttfa.times(q)(n))(nat_sttfa.sttfa_O))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(n))(nat_sttfa.times(n)(q)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(n))(nat_sttfa.plus(nat_sttfa.times(q)(n))(nat_sttfa.sttfa_O)))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(n))(nat_sttfa.times(n)(q))"
%|- (sttfa-conv "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(n))(nat_sttfa.times(n)(q))" () ()
%|- (sttfa-forall-e "(FORALL(y:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(y))(nat_sttfa.times(y)(q)))" "n"
%|- (sttfa-conv "(FORALL(y:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(y))(nat_sttfa.times(y)(q)))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(y:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(x)(y))(nat_sttfa.times(y)(x))))" "q"
%|- (sttfa-conv "(LAMBDA(f:[nat_sttfa.sttfa_nat -> [nat_sttfa.sttfa_nat -> nat_sttfa.sttfa_nat]]):(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(y:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](f(x)(y))(f(y)(x)))))(nat_sttfa.times)" () ()
%|- (sttfa-conv "relations_sttfa.commutative[nat_sttfa.sttfa_nat](nat_sttfa.times)" ("relations_sttfa.commutative") ()
%|- (sttfa-lemma "nat_sttfa.commutative_times")))))))
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(n))(nat_sttfa.times(n)(q)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(n))(nat_sttfa.plus(nat_sttfa.times(q)(n))(nat_sttfa.sttfa_O)))" () ()
%|- (sttfa-forall-e "(FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.times(n)(q)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.plus(nat_sttfa.times(q)(n))(nat_sttfa.sttfa_O))))" "nat_sttfa.times(q)(n)"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(n)(q))(nat_sttfa.plus(nat_sttfa.times(q)(n))(nat_sttfa.sttfa_O)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.times(n)(q)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.plus(nat_sttfa.times(q)(n))(nat_sttfa.sttfa_O)))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(n)(q))(nat_sttfa.plus(nat_sttfa.times(q)(n))(nat_sttfa.sttfa_O))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(q)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(n)(q))(nat_sttfa.plus(nat_sttfa.times(q)(n))(nat_sttfa.sttfa_O)))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(q))"
%|- (propax)
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(q)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(n)(q))(nat_sttfa.plus(nat_sttfa.times(q)(n))(nat_sttfa.sttfa_O)))" () ()
%|- (sttfa-forall-e "(FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(y) => logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.plus(nat_sttfa.times(q)(n))(nat_sttfa.sttfa_O))))" "nat_sttfa.times(n)(q)"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(nat_sttfa.times(q)(n))(nat_sttfa.sttfa_O)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(y) => logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.plus(nat_sttfa.times(q)(n))(nat_sttfa.sttfa_O)))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(nat_sttfa.times(q)(n))(nat_sttfa.sttfa_O))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(n))(nat_sttfa.times(n)(q)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(nat_sttfa.times(q)(n))(nat_sttfa.sttfa_O)))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(n))(nat_sttfa.times(n)(q))"
%|- (sttfa-conv "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(n))(nat_sttfa.times(n)(q))" () ()
%|- (sttfa-forall-e "(FORALL(y:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(y))(nat_sttfa.times(y)(q)))" "n"
%|- (sttfa-conv "(FORALL(y:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(y))(nat_sttfa.times(y)(q)))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(y:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(x)(y))(nat_sttfa.times(y)(x))))" "q"
%|- (sttfa-conv "(LAMBDA(f:[nat_sttfa.sttfa_nat -> [nat_sttfa.sttfa_nat -> nat_sttfa.sttfa_nat]]):(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(y:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](f(x)(y))(f(y)(x)))))(nat_sttfa.times)" () ()
%|- (sttfa-conv "relations_sttfa.commutative[nat_sttfa.sttfa_nat](nat_sttfa.times)" ("relations_sttfa.commutative") ()
%|- (sttfa-lemma "nat_sttfa.commutative_times")))))))
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(n))(nat_sttfa.times(n)(q)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(nat_sttfa.times(q)(n))(nat_sttfa.sttfa_O)))" () ()
%|- (sttfa-forall-e "(FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.times(n)(q)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(y)(nat_sttfa.sttfa_O))))" "nat_sttfa.times(q)(n)"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(nat_sttfa.times(n)(q))(nat_sttfa.sttfa_O)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.times(n)(q)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(y)(nat_sttfa.sttfa_O)))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(nat_sttfa.times(n)(q))(nat_sttfa.sttfa_O))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(q)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(nat_sttfa.times(n)(q))(nat_sttfa.sttfa_O)))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(q))"
%|- (propax)
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(q)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(nat_sttfa.times(n)(q))(nat_sttfa.sttfa_O)))" () ()
%|- (sttfa-forall-e "(FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(y) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(y)(nat_sttfa.sttfa_O))))" "nat_sttfa.times(n)(q)"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(m)(nat_sttfa.sttfa_O)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(y) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(y)(nat_sttfa.sttfa_O)))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(m)(nat_sttfa.sttfa_O))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(m)(nat_sttfa.sttfa_O)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(m)(nat_sttfa.sttfa_O)))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(m)(nat_sttfa.sttfa_O))"
%|- (sttfa-conv "logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(m)(nat_sttfa.sttfa_O))" () ()
%|- (sttfa-forall-e "(FORALL(n:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](n)(nat_sttfa.plus(n)(nat_sttfa.sttfa_O)))" "m"
%|- (sttfa-lemma "nat_sttfa.plus_n_O")))
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(m)(nat_sttfa.sttfa_O)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(m)(nat_sttfa.sttfa_O)))" () ()
%|- (sttfa-forall-e "(FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(y) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(y)))" "nat_sttfa.plus(m)(nat_sttfa.sttfa_O)"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(m) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(y) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(y))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(m)"
%|- (sttfa-conv "logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(m)" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(x))" "m"
%|- (sttfa-lemma "logic_sttfa.refl[nat_sttfa.sttfa_nat]")))
%|- (sttfa-conv "((LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(sttfa___))(m) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(y) => (LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(sttfa___))(y))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(m) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(y) => P(y)))))" "(LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(sttfa___))"
%|- (sttfa-conv "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(m) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(y) => P(y)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(x) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(y) => P(y))))))" "m"
%|- (sttfa-lemma "logic_sttfa.rewrite_l[nat_sttfa.sttfa_nat]")))))))))
%|- (sttfa-conv "((LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(sttfa___)(nat_sttfa.sttfa_O)))(m) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(y) => (LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(sttfa___)(nat_sttfa.sttfa_O)))(y))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(m) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(y) => P(y)))))" "(LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(sttfa___)(nat_sttfa.sttfa_O)))"
%|- (sttfa-conv "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(m) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(y) => P(y)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(x) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(y) => P(y))))))" "m"
%|- (sttfa-lemma "logic_sttfa.rewrite_l[nat_sttfa.sttfa_nat]")))))))))
%|- (sttfa-conv "((LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(sttfa___)(nat_sttfa.sttfa_O)))(nat_sttfa.times(n)(q)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.times(n)(q)) => (LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(sttfa___)(nat_sttfa.sttfa_O)))(y))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.times(n)(q)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.times(n)(q)) => P(y)))))" "(LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(sttfa___)(nat_sttfa.sttfa_O)))"
%|- (sttfa-conv "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.times(n)(q)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.times(n)(q)) => P(y)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(x) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(x) => P(y))))))" "nat_sttfa.times(n)(q)"
%|- (sttfa-lemma "logic_sttfa.rewrite_r[nat_sttfa.sttfa_nat]")))))))))
%|- (sttfa-conv "((LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](sttfa___)(nat_sttfa.plus(nat_sttfa.times(q)(n))(nat_sttfa.sttfa_O)))(m) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(y) => (LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](sttfa___)(nat_sttfa.plus(nat_sttfa.times(q)(n))(nat_sttfa.sttfa_O)))(y))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(m) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(y) => P(y)))))" "(LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](sttfa___)(nat_sttfa.plus(nat_sttfa.times(q)(n))(nat_sttfa.sttfa_O)))"
%|- (sttfa-conv "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(m) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(y) => P(y)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(x) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(y) => P(y))))))" "m"
%|- (sttfa-lemma "logic_sttfa.rewrite_l[nat_sttfa.sttfa_nat]")))))))))
%|- (sttfa-conv "((LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](sttfa___)(nat_sttfa.plus(nat_sttfa.times(q)(n))(nat_sttfa.sttfa_O)))(nat_sttfa.times(n)(q)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.times(n)(q)) => (LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](sttfa___)(nat_sttfa.plus(nat_sttfa.times(q)(n))(nat_sttfa.sttfa_O)))(y))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.times(n)(q)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.times(n)(q)) => P(y)))))" "(LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](sttfa___)(nat_sttfa.plus(nat_sttfa.times(q)(n))(nat_sttfa.sttfa_O)))"
%|- (sttfa-conv "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.times(n)(q)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.times(n)(q)) => P(y)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(x) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(x) => P(y))))))" "nat_sttfa.times(n)(q)"
%|- (sttfa-lemma "logic_sttfa.rewrite_r[nat_sttfa.sttfa_nat]")))))))))
%|- (sttfa-conv "((LAMBDA(x:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(n))(nat_sttfa.plus(nat_sttfa.times(x)(n))(nat_sttfa.sttfa_O)))(q) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(q) => (LAMBDA(x0:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(n))(nat_sttfa.plus(nat_sttfa.times(x0)(n))(nat_sttfa.sttfa_O)))(x))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(q) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(q) => P(x)))))" "(LAMBDA(x:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(n))(nat_sttfa.plus(nat_sttfa.times(x)(n))(nat_sttfa.sttfa_O)))"
%|- (sttfa-conv "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(q) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(q) => P(x)))))" () ()
%|- (sttfa-forall-e "(FORALL(a:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(a) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(a) => P(x))))))" "q"
%|- (sttfa-lemma "logic_sttfa.eq_ind_r[nat_sttfa.sttfa_nat]")))))))))
%|- (sttfa-conv "((LAMBDA(x:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(x)(n))(n))(nat_sttfa.sttfa_O)))(nat_sttfa.times(q)(n)) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.times(q)(n)) => (LAMBDA(x0:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](x0)(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(x0)(n))(n))(nat_sttfa.sttfa_O)))(x))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.times(q)(n)) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.times(q)(n)) => P(x)))))" "(LAMBDA(x:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(x)(n))(n))(nat_sttfa.sttfa_O)))"
%|- (sttfa-conv "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.times(q)(n)) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.times(q)(n)) => P(x)))))" () ()
%|- (sttfa-forall-e "(FORALL(a:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(a) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(a) => P(x))))))" "nat_sttfa.times(q)(n)"
%|- (sttfa-lemma "logic_sttfa.eq_ind_r[nat_sttfa.sttfa_nat]")))))))))
%|- (sttfa-conv "((LAMBDA(x:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(x)(n))(n))(nat_sttfa.sttfa_O)))(nat_sttfa.times(n)(q)) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.times(n)(q)) => (LAMBDA(x0:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](x0)(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(x0)(n))(n))(nat_sttfa.sttfa_O)))(x))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.times(n)(q)) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.times(n)(q)) => P(x)))))" "(LAMBDA(x:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(x)(n))(n))(nat_sttfa.sttfa_O)))"
%|- (sttfa-conv "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.times(n)(q)) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.times(n)(q)) => P(x)))))" () ()
%|- (sttfa-forall-e "(FORALL(a:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(a) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(a) => P(x))))))" "nat_sttfa.times(n)(q)"
%|- (sttfa-lemma "logic_sttfa.eq_ind_r[nat_sttfa.sttfa_nat]")))))))))
%|- (sttfa-impl-e "(nat_sttfa.lt(nat_sttfa.sttfa_O)(n) => (logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(m)(n))(n))(nat_sttfa.sttfa_O)) => div_mod_sttfa.div_mod_spec(m)(n)(div_mod_sttfa.div(m)(n))(nat_sttfa.sttfa_O)))" "nat_sttfa.lt(nat_sttfa.sttfa_O)(n)"
%|- (propax)
%|- (sttfa-conv "(nat_sttfa.lt(nat_sttfa.sttfa_O)(n) => (logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(m)(n))(n))(nat_sttfa.sttfa_O)) => div_mod_sttfa.div_mod_spec(m)(n)(div_mod_sttfa.div(m)(n))(nat_sttfa.sttfa_O)))" () ()
%|- (sttfa-forall-e "(FORALL(r:nat_sttfa.sttfa_nat):(nat_sttfa.lt(r)(n) => (logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(m)(n))(n))(r)) => div_mod_sttfa.div_mod_spec(m)(n)(div_mod_sttfa.div(m)(n))(r))))" "nat_sttfa.sttfa_O"
%|- (sttfa-conv "(FORALL(r:nat_sttfa.sttfa_nat):(nat_sttfa.lt(r)(n) => (logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(m)(n))(n))(r)) => div_mod_sttfa.div_mod_spec(m)(n)(div_mod_sttfa.div(m)(n))(r))))" () ()
%|- (sttfa-forall-e "(FORALL(q0:nat_sttfa.sttfa_nat):(FORALL(r:nat_sttfa.sttfa_nat):(nat_sttfa.lt(r)(n) => (logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(nat_sttfa.times(q0)(n))(r)) => div_mod_sttfa.div_mod_spec(m)(n)(q0)(r)))))" "div_mod_sttfa.div(m)(n)"
%|- (sttfa-conv "(FORALL(q0:nat_sttfa.sttfa_nat):(FORALL(r:nat_sttfa.sttfa_nat):(nat_sttfa.lt(r)(n) => (logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(nat_sttfa.times(q0)(n))(r)) => div_mod_sttfa.div_mod_spec(m)(n)(q0)(r)))))" () ()
%|- (sttfa-forall-e "(FORALL(m0:nat_sttfa.sttfa_nat):(FORALL(q0:nat_sttfa.sttfa_nat):(FORALL(r:nat_sttfa.sttfa_nat):(nat_sttfa.lt(r)(m0) => (logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(nat_sttfa.times(q0)(m0))(r)) => div_mod_sttfa.div_mod_spec(m)(m0)(q0)(r))))))" "n"
%|- (sttfa-conv "(FORALL(m0:nat_sttfa.sttfa_nat):(FORALL(q0:nat_sttfa.sttfa_nat):(FORALL(r:nat_sttfa.sttfa_nat):(nat_sttfa.lt(r)(m0) => (logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(nat_sttfa.times(q0)(m0))(r)) => div_mod_sttfa.div_mod_spec(m)(m0)(q0)(r))))))" () ()
%|- (sttfa-forall-e "(FORALL(n:nat_sttfa.sttfa_nat):(FORALL(m:nat_sttfa.sttfa_nat):(FORALL(q:nat_sttfa.sttfa_nat):(FORALL(r:nat_sttfa.sttfa_nat):(nat_sttfa.lt(r)(m) => (logic_sttfa.eq[nat_sttfa.sttfa_nat](n)(nat_sttfa.plus(nat_sttfa.times(q)(m))(r)) => div_mod_sttfa.div_mod_spec(n)(m)(q)(r)))))))" "m"
%|- (sttfa-lemma "div_mod_sttfa.div_mod_spec_intro")))))))))))))
%|- (sttfa-conv "((FORALL(q:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(q)) => div_mod_sttfa.div_mod_spec(m)(n)(div_mod_sttfa.div(m)(n))(nat_sttfa.sttfa_O))) => (primes_sttfa.sttfa_divides(n)(m) => div_mod_sttfa.div_mod_spec(m)(n)(div_mod_sttfa.div(m)(n))(nat_sttfa.sttfa_O)))" () ()
%|- (sttfa-forall-e "(FORALL(return_type:bool):((FORALL(q:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(q)) => return_type)) => (primes_sttfa.sttfa_divides(n)(m) => return_type)))" "div_mod_sttfa.div_mod_spec(m)(n)(div_mod_sttfa.div(m)(n))(nat_sttfa.sttfa_O)"
%|- (sttfa-conv "(FORALL(return_type:bool):((FORALL(q:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(q)) => return_type)) => (primes_sttfa.sttfa_divides(n)(m) => return_type)))" () ()
%|- (sttfa-forall-e "(FORALL(m0:nat_sttfa.sttfa_nat):(FORALL(return_type:bool):((FORALL(q:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m0)(nat_sttfa.times(n)(q)) => return_type)) => (primes_sttfa.sttfa_divides(n)(m0) => return_type))))" "m"
%|- (sttfa-conv "(FORALL(m0:nat_sttfa.sttfa_nat):(FORALL(return_type:bool):((FORALL(q:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m0)(nat_sttfa.times(n)(q)) => return_type)) => (primes_sttfa.sttfa_divides(n)(m0) => return_type))))" () ()
%|- (sttfa-forall-e "(FORALL(n:nat_sttfa.sttfa_nat):(FORALL(m:nat_sttfa.sttfa_nat):(FORALL(return_type:bool):((FORALL(q:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(q)) => return_type)) => (primes_sttfa.sttfa_divides(n)(m) => return_type)))))" "n"
%|- (sttfa-lemma "primes_sttfa.match_divides_prop")))))))))))))
%|- QED

divides_to_mod_O  : LEMMA (FORALL(n:nat_sttfa.sttfa_nat):(FORALL(m:nat_sttfa.sttfa_nat):(nat_sttfa.lt(nat_sttfa.sttfa_O)(n) => (primes_sttfa.sttfa_divides(n)(m) => logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m)(n))(nat_sttfa.sttfa_O)))))

%|- divides_to_mod_O : PROOF
%|- (then@ (sttfa-forall-i "n")
%|- (then@ (sttfa-forall-i "m")
%|- (sttfa-impl-i "nat_sttfa.lt(nat_sttfa.sttfa_O)(n)" "(primes_sttfa.sttfa_divides(n)(m) => logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m)(n))(nat_sttfa.sttfa_O))"
%|- (sttfa-impl-i "primes_sttfa.sttfa_divides(n)(m)" "logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m)(n))(nat_sttfa.sttfa_O)"
%|- (sttfa-impl-e "(div_mod_sttfa.div_mod_spec(m)(n)(div_mod_sttfa.div(m)(n))(nat_sttfa.sttfa_O) => logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m)(n))(nat_sttfa.sttfa_O))" "div_mod_sttfa.div_mod_spec(m)(n)(div_mod_sttfa.div(m)(n))(nat_sttfa.sttfa_O)"
%|- (sttfa-impl-e "(primes_sttfa.sttfa_divides(n)(m) => div_mod_sttfa.div_mod_spec(m)(n)(div_mod_sttfa.div(m)(n))(nat_sttfa.sttfa_O))" "primes_sttfa.sttfa_divides(n)(m)"
%|- (propax)
%|- (sttfa-impl-e "(nat_sttfa.lt(nat_sttfa.sttfa_O)(n) => (primes_sttfa.sttfa_divides(n)(m) => div_mod_sttfa.div_mod_spec(m)(n)(div_mod_sttfa.div(m)(n))(nat_sttfa.sttfa_O)))" "nat_sttfa.lt(nat_sttfa.sttfa_O)(n)"
%|- (propax)
%|- (sttfa-conv "(nat_sttfa.lt(nat_sttfa.sttfa_O)(n) => (primes_sttfa.sttfa_divides(n)(m) => div_mod_sttfa.div_mod_spec(m)(n)(div_mod_sttfa.div(m)(n))(nat_sttfa.sttfa_O)))" () ()
%|- (sttfa-forall-e "(FORALL(m0:nat_sttfa.sttfa_nat):(nat_sttfa.lt(nat_sttfa.sttfa_O)(n) => (primes_sttfa.sttfa_divides(n)(m0) => div_mod_sttfa.div_mod_spec(m0)(n)(div_mod_sttfa.div(m0)(n))(nat_sttfa.sttfa_O))))" "m"
%|- (sttfa-conv "(FORALL(m0:nat_sttfa.sttfa_nat):(nat_sttfa.lt(nat_sttfa.sttfa_O)(n) => (primes_sttfa.sttfa_divides(n)(m0) => div_mod_sttfa.div_mod_spec(m0)(n)(div_mod_sttfa.div(m0)(n))(nat_sttfa.sttfa_O))))" () ()
%|- (sttfa-forall-e "(FORALL(n:nat_sttfa.sttfa_nat):(FORALL(m:nat_sttfa.sttfa_nat):(nat_sttfa.lt(nat_sttfa.sttfa_O)(n) => (primes_sttfa.sttfa_divides(n)(m) => div_mod_sttfa.div_mod_spec(m)(n)(div_mod_sttfa.div(m)(n))(nat_sttfa.sttfa_O)))))" "n"
%|- (sttfa-lemma "primes_sttfa.divides_to_div_mod_spec")))))))
%|- (sttfa-impl-e "(div_mod_sttfa.div_mod_spec(m)(n)(div_mod_sttfa.div(m)(n))(div_mod_sttfa.mod(m)(n)) => (div_mod_sttfa.div_mod_spec(m)(n)(div_mod_sttfa.div(m)(n))(nat_sttfa.sttfa_O) => logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m)(n))(nat_sttfa.sttfa_O)))" "div_mod_sttfa.div_mod_spec(m)(n)(div_mod_sttfa.div(m)(n))(div_mod_sttfa.mod(m)(n))"
%|- (sttfa-impl-e "(nat_sttfa.lt(nat_sttfa.sttfa_O)(n) => div_mod_sttfa.div_mod_spec(m)(n)(div_mod_sttfa.div(m)(n))(div_mod_sttfa.mod(m)(n)))" "nat_sttfa.lt(nat_sttfa.sttfa_O)(n)"
%|- (propax)
%|- (sttfa-conv "(nat_sttfa.lt(nat_sttfa.sttfa_O)(n) => div_mod_sttfa.div_mod_spec(m)(n)(div_mod_sttfa.div(m)(n))(div_mod_sttfa.mod(m)(n)))" () ()
%|- (sttfa-forall-e "(FORALL(m0:nat_sttfa.sttfa_nat):(nat_sttfa.lt(nat_sttfa.sttfa_O)(m0) => div_mod_sttfa.div_mod_spec(m)(m0)(div_mod_sttfa.div(m)(m0))(div_mod_sttfa.mod(m)(m0))))" "n"
%|- (sttfa-conv "(FORALL(m0:nat_sttfa.sttfa_nat):(nat_sttfa.lt(nat_sttfa.sttfa_O)(m0) => div_mod_sttfa.div_mod_spec(m)(m0)(div_mod_sttfa.div(m)(m0))(div_mod_sttfa.mod(m)(m0))))" () ()
%|- (sttfa-forall-e "(FORALL(n:nat_sttfa.sttfa_nat):(FORALL(m:nat_sttfa.sttfa_nat):(nat_sttfa.lt(nat_sttfa.sttfa_O)(m) => div_mod_sttfa.div_mod_spec(n)(m)(div_mod_sttfa.div(n)(m))(div_mod_sttfa.mod(n)(m)))))" "m"
%|- (sttfa-lemma "div_mod_sttfa.div_mod_spec_div_mod"))))))
%|- (sttfa-conv "(div_mod_sttfa.div_mod_spec(m)(n)(div_mod_sttfa.div(m)(n))(div_mod_sttfa.mod(m)(n)) => (div_mod_sttfa.div_mod_spec(m)(n)(div_mod_sttfa.div(m)(n))(nat_sttfa.sttfa_O) => logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m)(n))(nat_sttfa.sttfa_O)))" () ()
%|- (sttfa-forall-e "(FORALL(r1:nat_sttfa.sttfa_nat):(div_mod_sttfa.div_mod_spec(m)(n)(div_mod_sttfa.div(m)(n))(div_mod_sttfa.mod(m)(n)) => (div_mod_sttfa.div_mod_spec(m)(n)(div_mod_sttfa.div(m)(n))(r1) => logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m)(n))(r1))))" "nat_sttfa.sttfa_O"
%|- (sttfa-conv "(FORALL(r1:nat_sttfa.sttfa_nat):(div_mod_sttfa.div_mod_spec(m)(n)(div_mod_sttfa.div(m)(n))(div_mod_sttfa.mod(m)(n)) => (div_mod_sttfa.div_mod_spec(m)(n)(div_mod_sttfa.div(m)(n))(r1) => logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m)(n))(r1))))" () ()
%|- (sttfa-forall-e "(FORALL(q1:nat_sttfa.sttfa_nat):(FORALL(r1:nat_sttfa.sttfa_nat):(div_mod_sttfa.div_mod_spec(m)(n)(div_mod_sttfa.div(m)(n))(div_mod_sttfa.mod(m)(n)) => (div_mod_sttfa.div_mod_spec(m)(n)(q1)(r1) => logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m)(n))(r1)))))" "div_mod_sttfa.div(m)(n)"
%|- (sttfa-conv "(FORALL(q1:nat_sttfa.sttfa_nat):(FORALL(r1:nat_sttfa.sttfa_nat):(div_mod_sttfa.div_mod_spec(m)(n)(div_mod_sttfa.div(m)(n))(div_mod_sttfa.mod(m)(n)) => (div_mod_sttfa.div_mod_spec(m)(n)(q1)(r1) => logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m)(n))(r1)))))" () ()
%|- (sttfa-forall-e "(FORALL(r:nat_sttfa.sttfa_nat):(FORALL(q1:nat_sttfa.sttfa_nat):(FORALL(r1:nat_sttfa.sttfa_nat):(div_mod_sttfa.div_mod_spec(m)(n)(div_mod_sttfa.div(m)(n))(r) => (div_mod_sttfa.div_mod_spec(m)(n)(q1)(r1) => logic_sttfa.eq[nat_sttfa.sttfa_nat](r)(r1))))))" "div_mod_sttfa.mod(m)(n)"
%|- (sttfa-conv "(FORALL(r:nat_sttfa.sttfa_nat):(FORALL(q1:nat_sttfa.sttfa_nat):(FORALL(r1:nat_sttfa.sttfa_nat):(div_mod_sttfa.div_mod_spec(m)(n)(div_mod_sttfa.div(m)(n))(r) => (div_mod_sttfa.div_mod_spec(m)(n)(q1)(r1) => logic_sttfa.eq[nat_sttfa.sttfa_nat](r)(r1))))))" () ()
%|- (sttfa-forall-e "(FORALL(q:nat_sttfa.sttfa_nat):(FORALL(r:nat_sttfa.sttfa_nat):(FORALL(q1:nat_sttfa.sttfa_nat):(FORALL(r1:nat_sttfa.sttfa_nat):(div_mod_sttfa.div_mod_spec(m)(n)(q)(r) => (div_mod_sttfa.div_mod_spec(m)(n)(q1)(r1) => logic_sttfa.eq[nat_sttfa.sttfa_nat](r)(r1)))))))" "div_mod_sttfa.div(m)(n)"
%|- (sttfa-conv "(FORALL(q:nat_sttfa.sttfa_nat):(FORALL(r:nat_sttfa.sttfa_nat):(FORALL(q1:nat_sttfa.sttfa_nat):(FORALL(r1:nat_sttfa.sttfa_nat):(div_mod_sttfa.div_mod_spec(m)(n)(q)(r) => (div_mod_sttfa.div_mod_spec(m)(n)(q1)(r1) => logic_sttfa.eq[nat_sttfa.sttfa_nat](r)(r1)))))))" () ()
%|- (sttfa-forall-e "(FORALL(b:nat_sttfa.sttfa_nat):(FORALL(q:nat_sttfa.sttfa_nat):(FORALL(r:nat_sttfa.sttfa_nat):(FORALL(q1:nat_sttfa.sttfa_nat):(FORALL(r1:nat_sttfa.sttfa_nat):(div_mod_sttfa.div_mod_spec(m)(b)(q)(r) => (div_mod_sttfa.div_mod_spec(m)(b)(q1)(r1) => logic_sttfa.eq[nat_sttfa.sttfa_nat](r)(r1))))))))" "n"
%|- (sttfa-conv "(FORALL(b:nat_sttfa.sttfa_nat):(FORALL(q:nat_sttfa.sttfa_nat):(FORALL(r:nat_sttfa.sttfa_nat):(FORALL(q1:nat_sttfa.sttfa_nat):(FORALL(r1:nat_sttfa.sttfa_nat):(div_mod_sttfa.div_mod_spec(m)(b)(q)(r) => (div_mod_sttfa.div_mod_spec(m)(b)(q1)(r1) => logic_sttfa.eq[nat_sttfa.sttfa_nat](r)(r1))))))))" () ()
%|- (sttfa-forall-e "(FORALL(a:nat_sttfa.sttfa_nat):(FORALL(b:nat_sttfa.sttfa_nat):(FORALL(q:nat_sttfa.sttfa_nat):(FORALL(r:nat_sttfa.sttfa_nat):(FORALL(q1:nat_sttfa.sttfa_nat):(FORALL(r1:nat_sttfa.sttfa_nat):(div_mod_sttfa.div_mod_spec(a)(b)(q)(r) => (div_mod_sttfa.div_mod_spec(a)(b)(q1)(r1) => logic_sttfa.eq[nat_sttfa.sttfa_nat](r)(r1)))))))))" "m"
%|- (sttfa-lemma "div_mod_sttfa.div_mod_spec_to_eq2")))))))))))))))))))
%|- QED

mod_O_to_divides  : LEMMA (FORALL(n:nat_sttfa.sttfa_nat):(FORALL(m:nat_sttfa.sttfa_nat):(nat_sttfa.lt(nat_sttfa.sttfa_O)(n) => (logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m)(n))(nat_sttfa.sttfa_O) => primes_sttfa.sttfa_divides(n)(m)))))

%|- mod_O_to_divides : PROOF
%|- (then@ (sttfa-forall-i "n")
%|- (then@ (sttfa-forall-i "m")
%|- (sttfa-impl-i "nat_sttfa.lt(nat_sttfa.sttfa_O)(n)" "(logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m)(n))(nat_sttfa.sttfa_O) => primes_sttfa.sttfa_divides(n)(m))"
%|- (sttfa-impl-i "logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m)(n))(nat_sttfa.sttfa_O)" "primes_sttfa.sttfa_divides(n)(m)"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(div_mod_sttfa.div(m)(n))) => primes_sttfa.sttfa_divides(n)(m))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(div_mod_sttfa.div(m)(n)))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(n)(div_mod_sttfa.div(m)(n)))(m) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(div_mod_sttfa.div(m)(n))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(n)(div_mod_sttfa.div(m)(n)))(m)"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.minus(m)(nat_sttfa.sttfa_O)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(n)(div_mod_sttfa.div(m)(n)))(m))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.minus(m)(nat_sttfa.sttfa_O))"
%|- (sttfa-conv "logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.minus(m)(nat_sttfa.sttfa_O))" () ()
%|- (sttfa-forall-e "(FORALL(n:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](n)(nat_sttfa.minus(n)(nat_sttfa.sttfa_O)))" "m"
%|- (sttfa-lemma "nat_sttfa.minus_n_O")))
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.minus(m)(nat_sttfa.sttfa_O)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(n)(div_mod_sttfa.div(m)(n)))(m))" () ()
%|- (sttfa-forall-e "(FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.minus(m)(nat_sttfa.sttfa_O)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(n)(div_mod_sttfa.div(m)(n)))(y)))" "m"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(n)(div_mod_sttfa.div(m)(n)))(nat_sttfa.minus(m)(nat_sttfa.sttfa_O)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.minus(m)(nat_sttfa.sttfa_O)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(n)(div_mod_sttfa.div(m)(n)))(y))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(n)(div_mod_sttfa.div(m)(n)))(nat_sttfa.minus(m)(nat_sttfa.sttfa_O))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m)(n))(nat_sttfa.sttfa_O) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(n)(div_mod_sttfa.div(m)(n)))(nat_sttfa.minus(m)(nat_sttfa.sttfa_O)))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m)(n))(nat_sttfa.sttfa_O)"
%|- (propax)
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m)(n))(nat_sttfa.sttfa_O) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(n)(div_mod_sttfa.div(m)(n)))(nat_sttfa.minus(m)(nat_sttfa.sttfa_O)))" () ()
%|- (sttfa-forall-e "(FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m)(n))(y) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(n)(div_mod_sttfa.div(m)(n)))(nat_sttfa.minus(m)(y))))" "nat_sttfa.sttfa_O"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(n)(div_mod_sttfa.div(m)(n)))(nat_sttfa.minus(m)(div_mod_sttfa.mod(m)(n))) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m)(n))(y) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(n)(div_mod_sttfa.div(m)(n)))(nat_sttfa.minus(m)(y)))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(n)(div_mod_sttfa.div(m)(n)))(nat_sttfa.minus(m)(div_mod_sttfa.mod(m)(n)))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(div_mod_sttfa.div(m)(n))(n))(nat_sttfa.times(n)(div_mod_sttfa.div(m)(n))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(n)(div_mod_sttfa.div(m)(n)))(nat_sttfa.minus(m)(div_mod_sttfa.mod(m)(n))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(div_mod_sttfa.div(m)(n))(n))(nat_sttfa.times(n)(div_mod_sttfa.div(m)(n)))"
%|- (sttfa-conv "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(div_mod_sttfa.div(m)(n))(n))(nat_sttfa.times(n)(div_mod_sttfa.div(m)(n)))" () ()
%|- (sttfa-forall-e "(FORALL(y:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(div_mod_sttfa.div(m)(n))(y))(nat_sttfa.times(y)(div_mod_sttfa.div(m)(n))))" "n"
%|- (sttfa-conv "(FORALL(y:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(div_mod_sttfa.div(m)(n))(y))(nat_sttfa.times(y)(div_mod_sttfa.div(m)(n))))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(y:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(x)(y))(nat_sttfa.times(y)(x))))" "div_mod_sttfa.div(m)(n)"
%|- (sttfa-conv "(LAMBDA(f:[nat_sttfa.sttfa_nat -> [nat_sttfa.sttfa_nat -> nat_sttfa.sttfa_nat]]):(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(y:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](f(x)(y))(f(y)(x)))))(nat_sttfa.times)" () ()
%|- (sttfa-conv "relations_sttfa.commutative[nat_sttfa.sttfa_nat](nat_sttfa.times)" ("relations_sttfa.commutative") ()
%|- (sttfa-lemma "nat_sttfa.commutative_times")))))))
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(div_mod_sttfa.div(m)(n))(n))(nat_sttfa.times(n)(div_mod_sttfa.div(m)(n))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(n)(div_mod_sttfa.div(m)(n)))(nat_sttfa.minus(m)(div_mod_sttfa.mod(m)(n))))" () ()
%|- (sttfa-forall-e "(FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(div_mod_sttfa.div(m)(n))(n))(y) => logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.minus(m)(div_mod_sttfa.mod(m)(n)))))" "nat_sttfa.times(n)(div_mod_sttfa.div(m)(n))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(div_mod_sttfa.div(m)(n))(n))(nat_sttfa.minus(m)(div_mod_sttfa.mod(m)(n))) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(div_mod_sttfa.div(m)(n))(n))(y) => logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.minus(m)(div_mod_sttfa.mod(m)(n))))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(div_mod_sttfa.div(m)(n))(n))(nat_sttfa.minus(m)(div_mod_sttfa.mod(m)(n)))"
%|- (sttfa-conv "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(div_mod_sttfa.div(m)(n))(n))(nat_sttfa.minus(m)(div_mod_sttfa.mod(m)(n)))" () ()
%|- (sttfa-forall-e "(FORALL(b:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(div_mod_sttfa.div(m)(b))(b))(nat_sttfa.minus(m)(div_mod_sttfa.mod(m)(b))))" "n"
%|- (sttfa-conv "(FORALL(b:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(div_mod_sttfa.div(m)(b))(b))(nat_sttfa.minus(m)(div_mod_sttfa.mod(m)(b))))" () ()
%|- (sttfa-forall-e "(FORALL(a:nat_sttfa.sttfa_nat):(FORALL(b:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(div_mod_sttfa.div(a)(b))(b))(nat_sttfa.minus(a)(div_mod_sttfa.mod(a)(b)))))" "m"
%|- (sttfa-lemma "div_mod_sttfa.eq_times_div_minus_mod")))))
%|- (sttfa-conv "((LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](sttfa___)(nat_sttfa.minus(m)(div_mod_sttfa.mod(m)(n))))(nat_sttfa.times(div_mod_sttfa.div(m)(n))(n)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(div_mod_sttfa.div(m)(n))(n))(y) => (LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](sttfa___)(nat_sttfa.minus(m)(div_mod_sttfa.mod(m)(n))))(y))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.times(div_mod_sttfa.div(m)(n))(n)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(div_mod_sttfa.div(m)(n))(n))(y) => P(y)))))" "(LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](sttfa___)(nat_sttfa.minus(m)(div_mod_sttfa.mod(m)(n))))"
%|- (sttfa-conv "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.times(div_mod_sttfa.div(m)(n))(n)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(div_mod_sttfa.div(m)(n))(n))(y) => P(y)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(x) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(y) => P(y))))))" "nat_sttfa.times(div_mod_sttfa.div(m)(n))(n)"
%|- (sttfa-lemma "logic_sttfa.rewrite_l[nat_sttfa.sttfa_nat]")))))))))
%|- (sttfa-conv "((LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(n)(div_mod_sttfa.div(m)(n)))(nat_sttfa.minus(m)(sttfa___)))(div_mod_sttfa.mod(m)(n)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m)(n))(y) => (LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(n)(div_mod_sttfa.div(m)(n)))(nat_sttfa.minus(m)(sttfa___)))(y))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(div_mod_sttfa.mod(m)(n)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m)(n))(y) => P(y)))))" "(LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(n)(div_mod_sttfa.div(m)(n)))(nat_sttfa.minus(m)(sttfa___)))"
%|- (sttfa-conv "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(div_mod_sttfa.mod(m)(n)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m)(n))(y) => P(y)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(x) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(y) => P(y))))))" "div_mod_sttfa.mod(m)(n)"
%|- (sttfa-lemma "logic_sttfa.rewrite_l[nat_sttfa.sttfa_nat]")))))))))
%|- (sttfa-conv "((LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(n)(div_mod_sttfa.div(m)(n)))(sttfa___))(nat_sttfa.minus(m)(nat_sttfa.sttfa_O)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.minus(m)(nat_sttfa.sttfa_O)) => (LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(n)(div_mod_sttfa.div(m)(n)))(sttfa___))(y))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.minus(m)(nat_sttfa.sttfa_O)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.minus(m)(nat_sttfa.sttfa_O)) => P(y)))))" "(LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(n)(div_mod_sttfa.div(m)(n)))(sttfa___))"
%|- (sttfa-conv "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.minus(m)(nat_sttfa.sttfa_O)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.minus(m)(nat_sttfa.sttfa_O)) => P(y)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(x) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(x) => P(y))))))" "nat_sttfa.minus(m)(nat_sttfa.sttfa_O)"
%|- (sttfa-lemma "logic_sttfa.rewrite_r[nat_sttfa.sttfa_nat]")))))))))
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(n)(div_mod_sttfa.div(m)(n)))(m) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(div_mod_sttfa.div(m)(n))))" () ()
%|- (sttfa-forall-e "(FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(n)(div_mod_sttfa.div(m)(n)))(y) => logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.times(n)(div_mod_sttfa.div(m)(n)))))" "m"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(n)(div_mod_sttfa.div(m)(n)))(nat_sttfa.times(n)(div_mod_sttfa.div(m)(n))) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(n)(div_mod_sttfa.div(m)(n)))(y) => logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.times(n)(div_mod_sttfa.div(m)(n))))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(n)(div_mod_sttfa.div(m)(n)))(nat_sttfa.times(n)(div_mod_sttfa.div(m)(n)))"
%|- (sttfa-conv "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(n)(div_mod_sttfa.div(m)(n)))(nat_sttfa.times(n)(div_mod_sttfa.div(m)(n)))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(x))" "nat_sttfa.times(n)(div_mod_sttfa.div(m)(n))"
%|- (sttfa-lemma "logic_sttfa.refl[nat_sttfa.sttfa_nat]")))
%|- (sttfa-conv "((LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](sttfa___)(nat_sttfa.times(n)(div_mod_sttfa.div(m)(n))))(nat_sttfa.times(n)(div_mod_sttfa.div(m)(n))) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(n)(div_mod_sttfa.div(m)(n)))(y) => (LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](sttfa___)(nat_sttfa.times(n)(div_mod_sttfa.div(m)(n))))(y))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.times(n)(div_mod_sttfa.div(m)(n))) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(n)(div_mod_sttfa.div(m)(n)))(y) => P(y)))))" "(LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](sttfa___)(nat_sttfa.times(n)(div_mod_sttfa.div(m)(n))))"
%|- (sttfa-conv "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.times(n)(div_mod_sttfa.div(m)(n))) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(n)(div_mod_sttfa.div(m)(n)))(y) => P(y)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(x) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(y) => P(y))))))" "nat_sttfa.times(n)(div_mod_sttfa.div(m)(n))"
%|- (sttfa-lemma "logic_sttfa.rewrite_l[nat_sttfa.sttfa_nat]")))))))))
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(div_mod_sttfa.div(m)(n))) => primes_sttfa.sttfa_divides(n)(m))" () ()
%|- (sttfa-forall-e "(FORALL(q:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(q)) => primes_sttfa.sttfa_divides(n)(m)))" "div_mod_sttfa.div(m)(n)"
%|- (sttfa-conv "(FORALL(q:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(q)) => primes_sttfa.sttfa_divides(n)(m)))" () ()
%|- (sttfa-forall-e "(FORALL(m0:nat_sttfa.sttfa_nat):(FORALL(q:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m0)(nat_sttfa.times(n)(q)) => primes_sttfa.sttfa_divides(n)(m0))))" "m"
%|- (sttfa-conv "(FORALL(m0:nat_sttfa.sttfa_nat):(FORALL(q:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m0)(nat_sttfa.times(n)(q)) => primes_sttfa.sttfa_divides(n)(m0))))" () ()
%|- (sttfa-forall-e "(FORALL(n:nat_sttfa.sttfa_nat):(FORALL(m:nat_sttfa.sttfa_nat):(FORALL(q:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(q)) => primes_sttfa.sttfa_divides(n)(m)))))" "n"
%|- (sttfa-lemma "primes_sttfa.quotient"))))))))))))
%|- QED

divides_n_O  : LEMMA (FORALL(n:nat_sttfa.sttfa_nat):primes_sttfa.sttfa_divides(n)(nat_sttfa.sttfa_O))

%|- divides_n_O : PROOF
%|- (then@ (sttfa-forall-i "n")
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)) => primes_sttfa.sttfa_divides(n)(nat_sttfa.sttfa_O))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.times(n)(nat_sttfa.sttfa_O))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.times(n)(nat_sttfa.sttfa_O))"
%|- (sttfa-conv "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.times(n)(nat_sttfa.sttfa_O))" () ()
%|- (sttfa-forall-e "(FORALL(n:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)))" "n"
%|- (sttfa-lemma "nat_sttfa.times_n_O")))
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)))" () ()
%|- (sttfa-forall-e "(FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.times(n)(nat_sttfa.sttfa_O))))" "nat_sttfa.sttfa_O"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(n)(nat_sttfa.sttfa_O))(nat_sttfa.times(n)(nat_sttfa.sttfa_O)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(n)(nat_sttfa.sttfa_O))(nat_sttfa.times(n)(nat_sttfa.sttfa_O))"
%|- (sttfa-conv "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(n)(nat_sttfa.sttfa_O))(nat_sttfa.times(n)(nat_sttfa.sttfa_O))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(x))" "nat_sttfa.times(n)(nat_sttfa.sttfa_O)"
%|- (sttfa-lemma "logic_sttfa.refl[nat_sttfa.sttfa_nat]")))
%|- (sttfa-conv "((LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](sttfa___)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)))(nat_sttfa.times(n)(nat_sttfa.sttfa_O)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)) => (LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](sttfa___)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)))(y))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.times(n)(nat_sttfa.sttfa_O)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)) => P(y)))))" "(LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](sttfa___)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)))"
%|- (sttfa-conv "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.times(n)(nat_sttfa.sttfa_O)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)) => P(y)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(x) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(x) => P(y))))))" "nat_sttfa.times(n)(nat_sttfa.sttfa_O)"
%|- (sttfa-lemma "logic_sttfa.rewrite_r[nat_sttfa.sttfa_nat]")))))))))
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)) => primes_sttfa.sttfa_divides(n)(nat_sttfa.sttfa_O))" () ()
%|- (sttfa-forall-e "(FORALL(q:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.times(n)(q)) => primes_sttfa.sttfa_divides(n)(nat_sttfa.sttfa_O)))" "nat_sttfa.sttfa_O"
%|- (sttfa-conv "(FORALL(q:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.times(n)(q)) => primes_sttfa.sttfa_divides(n)(nat_sttfa.sttfa_O)))" () ()
%|- (sttfa-forall-e "(FORALL(m:nat_sttfa.sttfa_nat):(FORALL(q:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(q)) => primes_sttfa.sttfa_divides(n)(m))))" "nat_sttfa.sttfa_O"
%|- (sttfa-conv "(FORALL(m:nat_sttfa.sttfa_nat):(FORALL(q:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(q)) => primes_sttfa.sttfa_divides(n)(m))))" () ()
%|- (sttfa-forall-e "(FORALL(n:nat_sttfa.sttfa_nat):(FORALL(m:nat_sttfa.sttfa_nat):(FORALL(q:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(q)) => primes_sttfa.sttfa_divides(n)(m)))))" "n"
%|- (sttfa-lemma "primes_sttfa.quotient")))))))))
%|- QED

divides_n_n  : LEMMA (FORALL(n:nat_sttfa.sttfa_nat):primes_sttfa.sttfa_divides(n)(n))

%|- divides_n_n : PROOF
%|- (then@ (sttfa-forall-i "n")
%|- (sttfa-conv "primes_sttfa.sttfa_divides(n)(n)" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):primes_sttfa.sttfa_divides(x)(x))" "n"
%|- (sttfa-conv "(LAMBDA(R:[nat_sttfa.sttfa_nat -> [nat_sttfa.sttfa_nat -> bool]]):(FORALL(x:nat_sttfa.sttfa_nat):R(x)(x)))(primes_sttfa.sttfa_divides)" () ()
%|- (sttfa-conv "relations_sttfa.reflexive[nat_sttfa.sttfa_nat](primes_sttfa.sttfa_divides)" ("relations_sttfa.reflexive") ()
%|- (sttfa-lemma "primes_sttfa.reflexive_divides"))))))
%|- QED

eq_mod_to_divides  : LEMMA (FORALL(n:nat_sttfa.sttfa_nat):(FORALL(m:nat_sttfa.sttfa_nat):(FORALL(q:nat_sttfa.sttfa_nat):(nat_sttfa.lt(nat_sttfa.sttfa_O)(q) => (logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(n)(q))(div_mod_sttfa.mod(m)(q)) => primes_sttfa.sttfa_divides(q)(nat_sttfa.minus(n)(m)))))))

%|- eq_mod_to_divides : PROOF
%|- (then@ (sttfa-forall-i "n")
%|- (then@ (sttfa-forall-i "m")
%|- (then@ (sttfa-forall-i "q")
%|- (sttfa-impl-i "nat_sttfa.lt(nat_sttfa.sttfa_O)(q)" "(logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(n)(q))(div_mod_sttfa.mod(m)(q)) => primes_sttfa.sttfa_divides(q)(nat_sttfa.minus(n)(m)))"
%|- (sttfa-impl-i "logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(n)(q))(div_mod_sttfa.mod(m)(q))" "primes_sttfa.sttfa_divides(q)(nat_sttfa.minus(n)(m))"
%|- (sttfa-impl-e "((connectives_sttfa.sttfa_Not(nat_sttfa.le(n)(m)) => primes_sttfa.sttfa_divides(q)(nat_sttfa.minus(n)(m))) => primes_sttfa.sttfa_divides(q)(nat_sttfa.minus(n)(m)))" "(connectives_sttfa.sttfa_Not(nat_sttfa.le(n)(m)) => primes_sttfa.sttfa_divides(q)(nat_sttfa.minus(n)(m)))"
%|- (sttfa-impl-i "connectives_sttfa.sttfa_Not(nat_sttfa.le(n)(m))" "primes_sttfa.sttfa_divides(q)(nat_sttfa.minus(n)(m))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.times(q)(nat_sttfa.minus(div_mod_sttfa.div(n)(q))(div_mod_sttfa.div(m)(q)))) => primes_sttfa.sttfa_divides(q)(nat_sttfa.minus(n)(m)))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.times(q)(nat_sttfa.minus(div_mod_sttfa.div(n)(q))(div_mod_sttfa.div(m)(q))))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(nat_sttfa.minus(div_mod_sttfa.div(n)(q))(div_mod_sttfa.div(m)(q))))(nat_sttfa.minus(nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))(nat_sttfa.times(q)(div_mod_sttfa.div(m)(q)))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.times(q)(nat_sttfa.minus(div_mod_sttfa.div(n)(q))(div_mod_sttfa.div(m)(q)))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(nat_sttfa.minus(div_mod_sttfa.div(n)(q))(div_mod_sttfa.div(m)(q))))(nat_sttfa.minus(nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))(nat_sttfa.times(q)(div_mod_sttfa.div(m)(q))))"
%|- (sttfa-conv "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(nat_sttfa.minus(div_mod_sttfa.div(n)(q))(div_mod_sttfa.div(m)(q))))(nat_sttfa.minus(nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))(nat_sttfa.times(q)(div_mod_sttfa.div(m)(q))))" () ()
%|- (sttfa-forall-e "(FORALL(z:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(nat_sttfa.minus(div_mod_sttfa.div(n)(q))(z)))(nat_sttfa.minus(nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))(nat_sttfa.times(q)(z))))" "div_mod_sttfa.div(m)(q)"
%|- (sttfa-conv "(FORALL(z:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(nat_sttfa.minus(div_mod_sttfa.div(n)(q))(z)))(nat_sttfa.minus(nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))(nat_sttfa.times(q)(z))))" () ()
%|- (sttfa-forall-e "(FORALL(y:nat_sttfa.sttfa_nat):(FORALL(z:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(nat_sttfa.minus(y)(z)))(nat_sttfa.minus(nat_sttfa.times(q)(y))(nat_sttfa.times(q)(z)))))" "div_mod_sttfa.div(n)(q)"
%|- (sttfa-conv "(FORALL(y:nat_sttfa.sttfa_nat):(FORALL(z:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(nat_sttfa.minus(y)(z)))(nat_sttfa.minus(nat_sttfa.times(q)(y))(nat_sttfa.times(q)(z)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(y:nat_sttfa.sttfa_nat):(FORALL(z:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(x)(nat_sttfa.minus(y)(z)))(nat_sttfa.minus(nat_sttfa.times(x)(y))(nat_sttfa.times(x)(z))))))" "q"
%|- (sttfa-conv "(LAMBDA(g:[nat_sttfa.sttfa_nat -> [nat_sttfa.sttfa_nat -> nat_sttfa.sttfa_nat]]):(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(y:nat_sttfa.sttfa_nat):(FORALL(z:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(x)(g(y)(z)))(g(nat_sttfa.times(x)(y))(nat_sttfa.times(x)(z)))))))(nat_sttfa.minus)" () ()
%|- (sttfa-conv "(LAMBDA(f:[nat_sttfa.sttfa_nat -> [nat_sttfa.sttfa_nat -> nat_sttfa.sttfa_nat]]):(LAMBDA(g:[nat_sttfa.sttfa_nat -> [nat_sttfa.sttfa_nat -> nat_sttfa.sttfa_nat]]):(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(y:nat_sttfa.sttfa_nat):(FORALL(z:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](f(x)(g(y)(z)))(g(f(x)(y))(f(x)(z))))))))(nat_sttfa.times)(nat_sttfa.minus)" () ()
%|- (sttfa-conv "relations_sttfa.distributive[nat_sttfa.sttfa_nat](nat_sttfa.times)(nat_sttfa.minus)" ("relations_sttfa.distributive") ()
%|- (sttfa-lemma "nat_sttfa.distributive_times_minus"))))))))))
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(nat_sttfa.minus(div_mod_sttfa.div(n)(q))(div_mod_sttfa.div(m)(q))))(nat_sttfa.minus(nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))(nat_sttfa.times(q)(div_mod_sttfa.div(m)(q)))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.times(q)(nat_sttfa.minus(div_mod_sttfa.div(n)(q))(div_mod_sttfa.div(m)(q)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.minus(nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))(nat_sttfa.times(q)(div_mod_sttfa.div(m)(q)))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(x)))" "nat_sttfa.times(q)(nat_sttfa.minus(div_mod_sttfa.div(n)(q))(div_mod_sttfa.div(m)(q)))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))(nat_sttfa.times(q)(div_mod_sttfa.div(m)(q)))) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.minus(nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))(nat_sttfa.times(q)(div_mod_sttfa.div(m)(q)))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(x))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))(nat_sttfa.times(q)(div_mod_sttfa.div(m)(q))))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))(nat_sttfa.times(div_mod_sttfa.div(n)(q))(q)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))(nat_sttfa.times(q)(div_mod_sttfa.div(m)(q)))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))(nat_sttfa.times(div_mod_sttfa.div(n)(q))(q))"
%|- (sttfa-conv "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))(nat_sttfa.times(div_mod_sttfa.div(n)(q))(q))" () ()
%|- (sttfa-forall-e "(FORALL(y:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(y))(nat_sttfa.times(y)(q)))" "div_mod_sttfa.div(n)(q)"
%|- (sttfa-conv "(FORALL(y:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(y))(nat_sttfa.times(y)(q)))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(y:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(x)(y))(nat_sttfa.times(y)(x))))" "q"
%|- (sttfa-conv "(LAMBDA(f:[nat_sttfa.sttfa_nat -> [nat_sttfa.sttfa_nat -> nat_sttfa.sttfa_nat]]):(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(y:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](f(x)(y))(f(y)(x)))))(nat_sttfa.times)" () ()
%|- (sttfa-conv "relations_sttfa.commutative[nat_sttfa.sttfa_nat](nat_sttfa.times)" ("relations_sttfa.commutative") ()
%|- (sttfa-lemma "nat_sttfa.commutative_times")))))))
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))(nat_sttfa.times(div_mod_sttfa.div(n)(q))(q)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))(nat_sttfa.times(q)(div_mod_sttfa.div(m)(q)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.times(div_mod_sttfa.div(n)(q))(q)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(x)(nat_sttfa.times(q)(div_mod_sttfa.div(m)(q))))))" "nat_sttfa.times(q)(div_mod_sttfa.div(n)(q))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(nat_sttfa.times(div_mod_sttfa.div(n)(q))(q))(nat_sttfa.times(q)(div_mod_sttfa.div(m)(q)))) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.times(div_mod_sttfa.div(n)(q))(q)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(x)(nat_sttfa.times(q)(div_mod_sttfa.div(m)(q)))))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(nat_sttfa.times(div_mod_sttfa.div(n)(q))(q))(nat_sttfa.times(q)(div_mod_sttfa.div(m)(q))))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(div_mod_sttfa.div(m)(q)))(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(nat_sttfa.times(div_mod_sttfa.div(n)(q))(q))(nat_sttfa.times(q)(div_mod_sttfa.div(m)(q)))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(div_mod_sttfa.div(m)(q)))(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q))"
%|- (sttfa-conv "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(div_mod_sttfa.div(m)(q)))(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q))" () ()
%|- (sttfa-forall-e "(FORALL(y:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(y))(nat_sttfa.times(y)(q)))" "div_mod_sttfa.div(m)(q)"
%|- (sttfa-conv "(FORALL(y:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(y))(nat_sttfa.times(y)(q)))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(y:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(x)(y))(nat_sttfa.times(y)(x))))" "q"
%|- (sttfa-conv "(LAMBDA(f:[nat_sttfa.sttfa_nat -> [nat_sttfa.sttfa_nat -> nat_sttfa.sttfa_nat]]):(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(y:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](f(x)(y))(f(y)(x)))))(nat_sttfa.times)" () ()
%|- (sttfa-conv "relations_sttfa.commutative[nat_sttfa.sttfa_nat](nat_sttfa.times)" ("relations_sttfa.commutative") ()
%|- (sttfa-lemma "nat_sttfa.commutative_times")))))))
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(div_mod_sttfa.div(m)(q)))(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(nat_sttfa.times(div_mod_sttfa.div(n)(q))(q))(nat_sttfa.times(q)(div_mod_sttfa.div(m)(q)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(nat_sttfa.times(div_mod_sttfa.div(n)(q))(q))(x))))" "nat_sttfa.times(q)(div_mod_sttfa.div(m)(q))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(nat_sttfa.times(div_mod_sttfa.div(n)(q))(q))(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q))) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(nat_sttfa.times(div_mod_sttfa.div(n)(q))(q))(x)))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(nat_sttfa.times(div_mod_sttfa.div(n)(q))(q))(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q)))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(div_mod_sttfa.div(n)(q))(q))(nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(q))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(nat_sttfa.times(div_mod_sttfa.div(n)(q))(q))(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(div_mod_sttfa.div(n)(q))(q))(nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(q)))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(div_mod_sttfa.div(n)(q))(q))(nat_sttfa.times(q)(div_mod_sttfa.div(n)(q))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(div_mod_sttfa.div(n)(q))(q))(nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(q))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(div_mod_sttfa.div(n)(q))(q))(nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))"
%|- (sttfa-conv "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(div_mod_sttfa.div(n)(q))(q))(nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))" () ()
%|- (sttfa-forall-e "(FORALL(y:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(div_mod_sttfa.div(n)(q))(y))(nat_sttfa.times(y)(div_mod_sttfa.div(n)(q))))" "q"
%|- (sttfa-conv "(FORALL(y:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(div_mod_sttfa.div(n)(q))(y))(nat_sttfa.times(y)(div_mod_sttfa.div(n)(q))))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(y:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(x)(y))(nat_sttfa.times(y)(x))))" "div_mod_sttfa.div(n)(q)"
%|- (sttfa-conv "(LAMBDA(f:[nat_sttfa.sttfa_nat -> [nat_sttfa.sttfa_nat -> nat_sttfa.sttfa_nat]]):(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(y:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](f(x)(y))(f(y)(x)))))(nat_sttfa.times)" () ()
%|- (sttfa-conv "relations_sttfa.commutative[nat_sttfa.sttfa_nat](nat_sttfa.times)" ("relations_sttfa.commutative") ()
%|- (sttfa-lemma "nat_sttfa.commutative_times")))))))
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(div_mod_sttfa.div(n)(q))(q))(nat_sttfa.times(q)(div_mod_sttfa.div(n)(q))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(div_mod_sttfa.div(n)(q))(q))(nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(q))))" () ()
%|- (sttfa-forall-e "(FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.times(q)(div_mod_sttfa.div(n)(q))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(q)))))" "nat_sttfa.times(div_mod_sttfa.div(n)(q))(q)"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))(nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(q))) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.times(q)(div_mod_sttfa.div(n)(q))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(q))))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))(nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(q)))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))(nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(q))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))(nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(q))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))(nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(q)))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(div_mod_sttfa.div(n)(q))(q))(nat_sttfa.times(q)(div_mod_sttfa.div(n)(q))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))(nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(q))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(div_mod_sttfa.div(n)(q))(q))(nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))"
%|- (sttfa-conv "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(div_mod_sttfa.div(n)(q))(q))(nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))" () ()
%|- (sttfa-forall-e "(FORALL(y:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(div_mod_sttfa.div(n)(q))(y))(nat_sttfa.times(y)(div_mod_sttfa.div(n)(q))))" "q"
%|- (sttfa-conv "(FORALL(y:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(div_mod_sttfa.div(n)(q))(y))(nat_sttfa.times(y)(div_mod_sttfa.div(n)(q))))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(y:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(x)(y))(nat_sttfa.times(y)(x))))" "div_mod_sttfa.div(n)(q)"
%|- (sttfa-conv "(LAMBDA(f:[nat_sttfa.sttfa_nat -> [nat_sttfa.sttfa_nat -> nat_sttfa.sttfa_nat]]):(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(y:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](f(x)(y))(f(y)(x)))))(nat_sttfa.times)" () ()
%|- (sttfa-conv "relations_sttfa.commutative[nat_sttfa.sttfa_nat](nat_sttfa.times)" ("relations_sttfa.commutative") ()
%|- (sttfa-lemma "nat_sttfa.commutative_times")))))))
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(div_mod_sttfa.div(n)(q))(q))(nat_sttfa.times(q)(div_mod_sttfa.div(n)(q))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))(nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(q))))" () ()
%|- (sttfa-forall-e "(FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(div_mod_sttfa.div(n)(q))(q))(y) => logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(q)))))" "nat_sttfa.times(q)(div_mod_sttfa.div(n)(q))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(div_mod_sttfa.div(n)(q))(q))(nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(q))) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(div_mod_sttfa.div(n)(q))(q))(y) => logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(q))))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(div_mod_sttfa.div(n)(q))(q))(nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(q)))"
%|- (sttfa-conv "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(div_mod_sttfa.div(n)(q))(q))(nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(q)))" () ()
%|- (sttfa-forall-e "(FORALL(b:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(div_mod_sttfa.div(n)(b))(b))(nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(b))))" "q"
%|- (sttfa-conv "(FORALL(b:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(div_mod_sttfa.div(n)(b))(b))(nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(b))))" () ()
%|- (sttfa-forall-e "(FORALL(a:nat_sttfa.sttfa_nat):(FORALL(b:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(div_mod_sttfa.div(a)(b))(b))(nat_sttfa.minus(a)(div_mod_sttfa.mod(a)(b)))))" "n"
%|- (sttfa-lemma "div_mod_sttfa.eq_times_div_minus_mod")))))
%|- (sttfa-conv "((LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](sttfa___)(nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(q))))(nat_sttfa.times(div_mod_sttfa.div(n)(q))(q)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(div_mod_sttfa.div(n)(q))(q))(y) => (LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](sttfa___)(nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(q))))(y))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.times(div_mod_sttfa.div(n)(q))(q)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(div_mod_sttfa.div(n)(q))(q))(y) => P(y)))))" "(LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](sttfa___)(nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(q))))"
%|- (sttfa-conv "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.times(div_mod_sttfa.div(n)(q))(q)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(div_mod_sttfa.div(n)(q))(q))(y) => P(y)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(x) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(y) => P(y))))))" "nat_sttfa.times(div_mod_sttfa.div(n)(q))(q)"
%|- (sttfa-lemma "logic_sttfa.rewrite_l[nat_sttfa.sttfa_nat]")))))))))
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))(nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(q))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))(nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(q))))" () ()
%|- (sttfa-forall-e "(FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))(y) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))(y)))" "nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(q))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))(nat_sttfa.times(q)(div_mod_sttfa.div(n)(q))) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))(y) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))(y))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))(nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))"
%|- (sttfa-conv "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))(nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(x))" "nat_sttfa.times(q)(div_mod_sttfa.div(n)(q))"
%|- (sttfa-lemma "logic_sttfa.refl[nat_sttfa.sttfa_nat]")))
%|- (sttfa-conv "((LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))(sttfa___))(nat_sttfa.times(q)(div_mod_sttfa.div(n)(q))) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))(y) => (LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))(sttfa___))(y))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.times(q)(div_mod_sttfa.div(n)(q))) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))(y) => P(y)))))" "(LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))(sttfa___))"
%|- (sttfa-conv "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.times(q)(div_mod_sttfa.div(n)(q))) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))(y) => P(y)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(x) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(y) => P(y))))))" "nat_sttfa.times(q)(div_mod_sttfa.div(n)(q))"
%|- (sttfa-lemma "logic_sttfa.rewrite_l[nat_sttfa.sttfa_nat]")))))))))
%|- (sttfa-conv "((LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](sttfa___)(nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(q))))(nat_sttfa.times(q)(div_mod_sttfa.div(n)(q))) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.times(q)(div_mod_sttfa.div(n)(q))) => (LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](sttfa___)(nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(q))))(y))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.times(q)(div_mod_sttfa.div(n)(q))) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.times(q)(div_mod_sttfa.div(n)(q))) => P(y)))))" "(LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](sttfa___)(nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(q))))"
%|- (sttfa-conv "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.times(q)(div_mod_sttfa.div(n)(q))) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.times(q)(div_mod_sttfa.div(n)(q))) => P(y)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(x) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(x) => P(y))))))" "nat_sttfa.times(q)(div_mod_sttfa.div(n)(q))"
%|- (sttfa-lemma "logic_sttfa.rewrite_r[nat_sttfa.sttfa_nat]")))))))))
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(div_mod_sttfa.div(n)(q))(q))(nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(q))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(nat_sttfa.times(div_mod_sttfa.div(n)(q))(q))(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q))))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(q))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(x)(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q)))))" "nat_sttfa.times(div_mod_sttfa.div(n)(q))(q)"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(q)))(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q))) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(q))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(x)(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q))))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(q)))(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q)))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(q)))(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q)))(nat_sttfa.minus(n)(nat_sttfa.plus(div_mod_sttfa.mod(n)(q))(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q)))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(q)))(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(q)))(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q)))(nat_sttfa.minus(n)(nat_sttfa.plus(div_mod_sttfa.mod(n)(q))(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q))))"
%|- (sttfa-conv "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(q)))(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q)))(nat_sttfa.minus(n)(nat_sttfa.plus(div_mod_sttfa.mod(n)(q))(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q))))" () ()
%|- (sttfa-forall-e "(FORALL(p:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(q)))(p))(nat_sttfa.minus(n)(nat_sttfa.plus(div_mod_sttfa.mod(n)(q))(p))))" "nat_sttfa.times(div_mod_sttfa.div(m)(q))(q)"
%|- (sttfa-conv "(FORALL(p:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(q)))(p))(nat_sttfa.minus(n)(nat_sttfa.plus(div_mod_sttfa.mod(n)(q))(p))))" () ()
%|- (sttfa-forall-e "(FORALL(m0:nat_sttfa.sttfa_nat):(FORALL(p:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(nat_sttfa.minus(n)(m0))(p))(nat_sttfa.minus(n)(nat_sttfa.plus(m0)(p)))))" "div_mod_sttfa.mod(n)(q)"
%|- (sttfa-conv "(FORALL(m0:nat_sttfa.sttfa_nat):(FORALL(p:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(nat_sttfa.minus(n)(m0))(p))(nat_sttfa.minus(n)(nat_sttfa.plus(m0)(p)))))" () ()
%|- (sttfa-forall-e "(FORALL(n:nat_sttfa.sttfa_nat):(FORALL(m:nat_sttfa.sttfa_nat):(FORALL(p:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(nat_sttfa.minus(n)(m))(p))(nat_sttfa.minus(n)(nat_sttfa.plus(m)(p))))))" "n"
%|- (sttfa-lemma "nat_sttfa.minus_plus")))))))
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(q)))(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q)))(nat_sttfa.minus(n)(nat_sttfa.plus(div_mod_sttfa.mod(n)(q))(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q)))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(q)))(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q))))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.minus(n)(nat_sttfa.plus(div_mod_sttfa.mod(n)(q))(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q)))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(x)))" "nat_sttfa.minus(nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(q)))(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(n)(nat_sttfa.plus(div_mod_sttfa.mod(n)(q))(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q)))) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.minus(n)(nat_sttfa.plus(div_mod_sttfa.mod(n)(q))(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q)))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(x))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(n)(nat_sttfa.plus(div_mod_sttfa.mod(n)(q))(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q))))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(n)(q))(div_mod_sttfa.mod(m)(q)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(n)(nat_sttfa.plus(div_mod_sttfa.mod(n)(q))(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q)))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(n)(q))(div_mod_sttfa.mod(m)(q))"
%|- (propax)
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(n)(q))(div_mod_sttfa.mod(m)(q)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(n)(nat_sttfa.plus(div_mod_sttfa.mod(n)(q))(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(div_mod_sttfa.mod(m)(q)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(n)(nat_sttfa.plus(x)(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q))))))" "div_mod_sttfa.mod(n)(q)"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(n)(nat_sttfa.plus(div_mod_sttfa.mod(m)(q))(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q)))) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(div_mod_sttfa.mod(m)(q)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(n)(nat_sttfa.plus(x)(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q)))))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(n)(nat_sttfa.plus(div_mod_sttfa.mod(m)(q))(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q))))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.plus(div_mod_sttfa.mod(m)(q))(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q)))(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q))(div_mod_sttfa.mod(m)(q))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(n)(nat_sttfa.plus(div_mod_sttfa.mod(m)(q))(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q)))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.plus(div_mod_sttfa.mod(m)(q))(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q)))(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q))(div_mod_sttfa.mod(m)(q)))"
%|- (sttfa-conv "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.plus(div_mod_sttfa.mod(m)(q))(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q)))(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q))(div_mod_sttfa.mod(m)(q)))" () ()
%|- (sttfa-forall-e "(FORALL(y:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.plus(div_mod_sttfa.mod(m)(q))(y))(nat_sttfa.plus(y)(div_mod_sttfa.mod(m)(q))))" "nat_sttfa.times(div_mod_sttfa.div(m)(q))(q)"
%|- (sttfa-conv "(FORALL(y:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.plus(div_mod_sttfa.mod(m)(q))(y))(nat_sttfa.plus(y)(div_mod_sttfa.mod(m)(q))))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(y:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.plus(x)(y))(nat_sttfa.plus(y)(x))))" "div_mod_sttfa.mod(m)(q)"
%|- (sttfa-conv "(LAMBDA(f:[nat_sttfa.sttfa_nat -> [nat_sttfa.sttfa_nat -> nat_sttfa.sttfa_nat]]):(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(y:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](f(x)(y))(f(y)(x)))))(nat_sttfa.plus)" () ()
%|- (sttfa-conv "relations_sttfa.commutative[nat_sttfa.sttfa_nat](nat_sttfa.plus)" ("relations_sttfa.commutative") ()
%|- (sttfa-lemma "nat_sttfa.commutative_plus")))))))
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.plus(div_mod_sttfa.mod(m)(q))(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q)))(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q))(div_mod_sttfa.mod(m)(q))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(n)(nat_sttfa.plus(div_mod_sttfa.mod(m)(q))(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q))(div_mod_sttfa.mod(m)(q))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(n)(x))))" "nat_sttfa.plus(div_mod_sttfa.mod(m)(q))(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(n)(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q))(div_mod_sttfa.mod(m)(q)))) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q))(div_mod_sttfa.mod(m)(q))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(n)(x)))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(n)(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q))(div_mod_sttfa.mod(m)(q))))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q))(div_mod_sttfa.mod(m)(q))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(n)(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q))(div_mod_sttfa.mod(m)(q)))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q))(div_mod_sttfa.mod(m)(q)))"
%|- (sttfa-conv "logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q))(div_mod_sttfa.mod(m)(q)))" () ()
%|- (sttfa-forall-e "(FORALL(m0:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(m)(m0))(m0))(div_mod_sttfa.mod(m)(m0))))" "q"
%|- (sttfa-conv "(FORALL(m0:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(m)(m0))(m0))(div_mod_sttfa.mod(m)(m0))))" () ()
%|- (sttfa-forall-e "(FORALL(n:nat_sttfa.sttfa_nat):(FORALL(m:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](n)(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(n)(m))(m))(div_mod_sttfa.mod(n)(m)))))" "m"
%|- (sttfa-lemma "div_mod_sttfa.div_mod")))))
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q))(div_mod_sttfa.mod(m)(q))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(n)(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q))(div_mod_sttfa.mod(m)(q)))))" () ()
%|- (sttfa-forall-e "(FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(y) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(n)(y))))" "nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q))(div_mod_sttfa.mod(m)(q))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(n)(m)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(y) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(n)(y)))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(n)(m))"
%|- (sttfa-conv "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(n)(m))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(x))" "nat_sttfa.minus(n)(m)"
%|- (sttfa-lemma "logic_sttfa.refl[nat_sttfa.sttfa_nat]")))
%|- (sttfa-conv "((LAMBDA(x_1:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(n)(x_1)))(m) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(y) => (LAMBDA(x_1:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(n)(x_1)))(y))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(m) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(y) => P(y)))))" "(LAMBDA(x_1:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(n)(x_1)))"
%|- (sttfa-conv "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(m) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(y) => P(y)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(x) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(y) => P(y))))))" "m"
%|- (sttfa-lemma "logic_sttfa.eq_ind[nat_sttfa.sttfa_nat]")))))))))
%|- (sttfa-conv "((LAMBDA(x:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(n)(x)))(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q))(div_mod_sttfa.mod(m)(q))) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q))(div_mod_sttfa.mod(m)(q))) => (LAMBDA(x0:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(n)(x0)))(x))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q))(div_mod_sttfa.mod(m)(q))) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q))(div_mod_sttfa.mod(m)(q))) => P(x)))))" "(LAMBDA(x:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(n)(x)))"
%|- (sttfa-conv "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q))(div_mod_sttfa.mod(m)(q))) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q))(div_mod_sttfa.mod(m)(q))) => P(x)))))" () ()
%|- (sttfa-forall-e "(FORALL(a:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(a) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(a) => P(x))))))" "nat_sttfa.plus(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q))(div_mod_sttfa.mod(m)(q))"
%|- (sttfa-lemma "logic_sttfa.eq_ind_r[nat_sttfa.sttfa_nat]")))))))))
%|- (sttfa-conv "((LAMBDA(x:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(n)(nat_sttfa.plus(x)(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q)))))(div_mod_sttfa.mod(m)(q)) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(div_mod_sttfa.mod(m)(q)) => (LAMBDA(x0:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(n)(nat_sttfa.plus(x0)(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q)))))(x))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(div_mod_sttfa.mod(m)(q)) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(div_mod_sttfa.mod(m)(q)) => P(x)))))" "(LAMBDA(x:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(n)(nat_sttfa.plus(x)(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q)))))"
%|- (sttfa-conv "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(div_mod_sttfa.mod(m)(q)) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(div_mod_sttfa.mod(m)(q)) => P(x)))))" () ()
%|- (sttfa-forall-e "(FORALL(a:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(a) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(a) => P(x))))))" "div_mod_sttfa.mod(m)(q)"
%|- (sttfa-lemma "logic_sttfa.eq_ind_r[nat_sttfa.sttfa_nat]")))))))))
%|- (sttfa-conv "((LAMBDA(x:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(x))(nat_sttfa.minus(n)(nat_sttfa.plus(div_mod_sttfa.mod(n)(q))(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q)))) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.minus(n)(nat_sttfa.plus(div_mod_sttfa.mod(n)(q))(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q)))) => (LAMBDA(x0:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(x0))(x))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.minus(n)(nat_sttfa.plus(div_mod_sttfa.mod(n)(q))(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q)))) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.minus(n)(nat_sttfa.plus(div_mod_sttfa.mod(n)(q))(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q)))) => P(x)))))" "(LAMBDA(x:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(x))"
%|- (sttfa-conv "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.minus(n)(nat_sttfa.plus(div_mod_sttfa.mod(n)(q))(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q)))) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.minus(n)(nat_sttfa.plus(div_mod_sttfa.mod(n)(q))(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q)))) => P(x)))))" () ()
%|- (sttfa-forall-e "(FORALL(a:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(a) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(a) => P(x))))))" "nat_sttfa.minus(n)(nat_sttfa.plus(div_mod_sttfa.mod(n)(q))(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q)))"
%|- (sttfa-lemma "logic_sttfa.eq_ind_r[nat_sttfa.sttfa_nat]")))))))))
%|- (sttfa-conv "((LAMBDA(x:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(x)(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q))))(nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(q))) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(q))) => (LAMBDA(x0:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(x0)(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q))))(x))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(q))) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(q))) => P(x)))))" "(LAMBDA(x:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(x)(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q))))"
%|- (sttfa-conv "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(q))) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(q))) => P(x)))))" () ()
%|- (sttfa-forall-e "(FORALL(a:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(a) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(a) => P(x))))))" "nat_sttfa.minus(n)(div_mod_sttfa.mod(n)(q))"
%|- (sttfa-lemma "logic_sttfa.eq_ind_r[nat_sttfa.sttfa_nat]")))))))))
%|- (sttfa-conv "((LAMBDA(x:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(nat_sttfa.times(div_mod_sttfa.div(n)(q))(q))(x)))(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q)) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q)) => (LAMBDA(x0:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(nat_sttfa.times(div_mod_sttfa.div(n)(q))(q))(x0)))(x))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q)) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q)) => P(x)))))" "(LAMBDA(x:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(nat_sttfa.times(div_mod_sttfa.div(n)(q))(q))(x)))"
%|- (sttfa-conv "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q)) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.times(div_mod_sttfa.div(m)(q))(q)) => P(x)))))" () ()
%|- (sttfa-forall-e "(FORALL(a:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(a) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(a) => P(x))))))" "nat_sttfa.times(div_mod_sttfa.div(m)(q))(q)"
%|- (sttfa-lemma "logic_sttfa.eq_ind_r[nat_sttfa.sttfa_nat]")))))))))
%|- (sttfa-conv "((LAMBDA(x:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(x)(nat_sttfa.times(q)(div_mod_sttfa.div(m)(q)))))(nat_sttfa.times(div_mod_sttfa.div(n)(q))(q)) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.times(div_mod_sttfa.div(n)(q))(q)) => (LAMBDA(x0:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(x0)(nat_sttfa.times(q)(div_mod_sttfa.div(m)(q)))))(x))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.times(div_mod_sttfa.div(n)(q))(q)) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.times(div_mod_sttfa.div(n)(q))(q)) => P(x)))))" "(LAMBDA(x:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.minus(x)(nat_sttfa.times(q)(div_mod_sttfa.div(m)(q)))))"
%|- (sttfa-conv "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.times(div_mod_sttfa.div(n)(q))(q)) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.times(div_mod_sttfa.div(n)(q))(q)) => P(x)))))" () ()
%|- (sttfa-forall-e "(FORALL(a:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(a) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(a) => P(x))))))" "nat_sttfa.times(div_mod_sttfa.div(n)(q))(q)"
%|- (sttfa-lemma "logic_sttfa.eq_ind_r[nat_sttfa.sttfa_nat]")))))))))
%|- (sttfa-conv "((LAMBDA(x:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(x))(nat_sttfa.minus(nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))(nat_sttfa.times(q)(div_mod_sttfa.div(m)(q)))) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.minus(nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))(nat_sttfa.times(q)(div_mod_sttfa.div(m)(q)))) => (LAMBDA(x0:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(x0))(x))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.minus(nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))(nat_sttfa.times(q)(div_mod_sttfa.div(m)(q)))) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.minus(nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))(nat_sttfa.times(q)(div_mod_sttfa.div(m)(q)))) => P(x)))))" "(LAMBDA(x:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(x))"
%|- (sttfa-conv "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.minus(nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))(nat_sttfa.times(q)(div_mod_sttfa.div(m)(q)))) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.minus(nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))(nat_sttfa.times(q)(div_mod_sttfa.div(m)(q)))) => P(x)))))" () ()
%|- (sttfa-forall-e "(FORALL(a:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(a) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(a) => P(x))))))" "nat_sttfa.minus(nat_sttfa.times(q)(div_mod_sttfa.div(n)(q)))(nat_sttfa.times(q)(div_mod_sttfa.div(m)(q)))"
%|- (sttfa-lemma "logic_sttfa.eq_ind_r[nat_sttfa.sttfa_nat]")))))))))
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.times(q)(nat_sttfa.minus(div_mod_sttfa.div(n)(q))(div_mod_sttfa.div(m)(q)))) => primes_sttfa.sttfa_divides(q)(nat_sttfa.minus(n)(m)))" () ()
%|- (sttfa-forall-e "(FORALL(q0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.times(q)(q0)) => primes_sttfa.sttfa_divides(q)(nat_sttfa.minus(n)(m))))" "nat_sttfa.minus(div_mod_sttfa.div(n)(q))(div_mod_sttfa.div(m)(q))"
%|- (sttfa-conv "(FORALL(q0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.times(q)(q0)) => primes_sttfa.sttfa_divides(q)(nat_sttfa.minus(n)(m))))" () ()
%|- (sttfa-forall-e "(FORALL(m0:nat_sttfa.sttfa_nat):(FORALL(q0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m0)(nat_sttfa.times(q)(q0)) => primes_sttfa.sttfa_divides(q)(m0))))" "nat_sttfa.minus(n)(m)"
%|- (sttfa-conv "(FORALL(m0:nat_sttfa.sttfa_nat):(FORALL(q0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m0)(nat_sttfa.times(q)(q0)) => primes_sttfa.sttfa_divides(q)(m0))))" () ()
%|- (sttfa-forall-e "(FORALL(n:nat_sttfa.sttfa_nat):(FORALL(m:nat_sttfa.sttfa_nat):(FORALL(q:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(q)) => primes_sttfa.sttfa_divides(n)(m)))))" "q"
%|- (sttfa-lemma "primes_sttfa.quotient")))))))))
%|- (sttfa-impl-e "((nat_sttfa.le(n)(m) => primes_sttfa.sttfa_divides(q)(nat_sttfa.minus(n)(m))) => ((connectives_sttfa.sttfa_Not(nat_sttfa.le(n)(m)) => primes_sttfa.sttfa_divides(q)(nat_sttfa.minus(n)(m))) => primes_sttfa.sttfa_divides(q)(nat_sttfa.minus(n)(m))))" "(nat_sttfa.le(n)(m) => primes_sttfa.sttfa_divides(q)(nat_sttfa.minus(n)(m)))"
%|- (sttfa-impl-i "nat_sttfa.le(n)(m)" "primes_sttfa.sttfa_divides(q)(nat_sttfa.minus(n)(m))"
%|- (sttfa-impl-e "(logic_sttfa.eq[bool](primes_sttfa.sttfa_divides(q)(nat_sttfa.sttfa_O))(primes_sttfa.sttfa_divides(q)(nat_sttfa.minus(n)(m))) => primes_sttfa.sttfa_divides(q)(nat_sttfa.minus(n)(m)))" "logic_sttfa.eq[bool](primes_sttfa.sttfa_divides(q)(nat_sttfa.sttfa_O))(primes_sttfa.sttfa_divides(q)(nat_sttfa.minus(n)(m)))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.sttfa_O) => logic_sttfa.eq[bool](primes_sttfa.sttfa_divides(q)(nat_sttfa.sttfa_O))(primes_sttfa.sttfa_divides(q)(nat_sttfa.minus(n)(m))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.sttfa_O)"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.minus(n)(m)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.sttfa_O))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.minus(n)(m))"
%|- (sttfa-impl-e "(logic_sttfa.eq[bool](logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(nat_sttfa.sttfa_O)(nat_sttfa.minus(m)(n)))(nat_sttfa.minus(nat_sttfa.plus(nat_sttfa.sttfa_O)(n))(m)))(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.minus(n)(m))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.minus(n)(m)))" "logic_sttfa.eq[bool](logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(nat_sttfa.sttfa_O)(nat_sttfa.minus(m)(n)))(nat_sttfa.minus(nat_sttfa.plus(nat_sttfa.sttfa_O)(n))(m)))(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.minus(n)(m)))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.minus(nat_sttfa.sttfa_O)(nat_sttfa.minus(m)(n))) => logic_sttfa.eq[bool](logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(nat_sttfa.sttfa_O)(nat_sttfa.minus(m)(n)))(nat_sttfa.minus(nat_sttfa.plus(nat_sttfa.sttfa_O)(n))(m)))(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.minus(n)(m))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.minus(nat_sttfa.sttfa_O)(nat_sttfa.minus(m)(n)))"
%|- (sttfa-conv "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.minus(nat_sttfa.sttfa_O)(nat_sttfa.minus(m)(n)))" () ()
%|- (sttfa-forall-e "(FORALL(n:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.minus(nat_sttfa.sttfa_O)(n)))" "nat_sttfa.minus(m)(n)"
%|- (sttfa-lemma "nat_sttfa.minus_O_n")))
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.minus(nat_sttfa.sttfa_O)(nat_sttfa.minus(m)(n))) => logic_sttfa.eq[bool](logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(nat_sttfa.sttfa_O)(nat_sttfa.minus(m)(n)))(nat_sttfa.minus(nat_sttfa.plus(nat_sttfa.sttfa_O)(n))(m)))(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.minus(n)(m))))" () ()
%|- (sttfa-forall-e "(FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(y) => logic_sttfa.eq[bool](logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.minus(nat_sttfa.plus(nat_sttfa.sttfa_O)(n))(m)))(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.minus(n)(m)))))" "nat_sttfa.minus(nat_sttfa.sttfa_O)(nat_sttfa.minus(m)(n))"
%|- (sttfa-impl-e "(logic_sttfa.eq[bool](logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.minus(nat_sttfa.plus(nat_sttfa.sttfa_O)(n))(m)))(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.minus(n)(m))) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(y) => logic_sttfa.eq[bool](logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.minus(nat_sttfa.plus(nat_sttfa.sttfa_O)(n))(m)))(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.minus(n)(m))))))" "logic_sttfa.eq[bool](logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.minus(nat_sttfa.plus(nat_sttfa.sttfa_O)(n))(m)))(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.minus(n)(m)))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](n)(nat_sttfa.plus(nat_sttfa.sttfa_O)(n)) => logic_sttfa.eq[bool](logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.minus(nat_sttfa.plus(nat_sttfa.sttfa_O)(n))(m)))(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.minus(n)(m))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](n)(nat_sttfa.plus(nat_sttfa.sttfa_O)(n))"
%|- (sttfa-conv "logic_sttfa.eq[nat_sttfa.sttfa_nat](n)(nat_sttfa.plus(nat_sttfa.sttfa_O)(n))" () ()
%|- (sttfa-forall-e "(FORALL(n:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](n)(nat_sttfa.plus(nat_sttfa.sttfa_O)(n)))" "n"
%|- (sttfa-lemma "nat_sttfa.plus_O_n")))
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](n)(nat_sttfa.plus(nat_sttfa.sttfa_O)(n)) => logic_sttfa.eq[bool](logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.minus(nat_sttfa.plus(nat_sttfa.sttfa_O)(n))(m)))(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.minus(n)(m))))" () ()
%|- (sttfa-forall-e "(FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](n)(y) => logic_sttfa.eq[bool](logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.minus(y)(m)))(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.minus(n)(m)))))" "nat_sttfa.plus(nat_sttfa.sttfa_O)(n)"
%|- (sttfa-impl-e "(logic_sttfa.eq[bool](logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.minus(n)(m)))(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.minus(n)(m))) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](n)(y) => logic_sttfa.eq[bool](logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.minus(y)(m)))(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.minus(n)(m))))))" "logic_sttfa.eq[bool](logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.minus(n)(m)))(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.minus(n)(m)))"
%|- (sttfa-conv "logic_sttfa.eq[bool](logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.minus(n)(m)))(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.minus(n)(m)))" () ()
%|- (sttfa-forall-e "(FORALL(x:bool):logic_sttfa.eq[bool](x)(x))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.minus(n)(m))"
%|- (sttfa-lemma "logic_sttfa.refl[bool]")))
%|- (sttfa-conv "((LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[bool](logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.minus(sttfa___)(m)))(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.minus(n)(m))))(n) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](n)(y) => (LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[bool](logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.minus(sttfa___)(m)))(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.minus(n)(m))))(y))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(n) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](n)(y) => P(y)))))" "(LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[bool](logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.minus(sttfa___)(m)))(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.minus(n)(m))))"
%|- (sttfa-conv "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(n) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](n)(y) => P(y)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(x) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(y) => P(y))))))" "n"
%|- (sttfa-lemma "logic_sttfa.rewrite_l[nat_sttfa.sttfa_nat]")))))))))
%|- (sttfa-conv "((LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[bool](logic_sttfa.eq[nat_sttfa.sttfa_nat](sttfa___)(nat_sttfa.minus(nat_sttfa.plus(nat_sttfa.sttfa_O)(n))(m)))(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.minus(n)(m))))(nat_sttfa.sttfa_O) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(y) => (LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[bool](logic_sttfa.eq[nat_sttfa.sttfa_nat](sttfa___)(nat_sttfa.minus(nat_sttfa.plus(nat_sttfa.sttfa_O)(n))(m)))(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.minus(n)(m))))(y))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.sttfa_O) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(y) => P(y)))))" "(LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[bool](logic_sttfa.eq[nat_sttfa.sttfa_nat](sttfa___)(nat_sttfa.minus(nat_sttfa.plus(nat_sttfa.sttfa_O)(n))(m)))(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.minus(n)(m))))"
%|- (sttfa-conv "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.sttfa_O) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(y) => P(y)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(x) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(y) => P(y))))))" "nat_sttfa.sttfa_O"
%|- (sttfa-lemma "logic_sttfa.rewrite_l[nat_sttfa.sttfa_nat]")))))))))
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(nat_sttfa.sttfa_O)(nat_sttfa.minus(m)(n)))(nat_sttfa.minus(nat_sttfa.plus(nat_sttfa.sttfa_O)(n))(m)) => (logic_sttfa.eq[bool](logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(nat_sttfa.sttfa_O)(nat_sttfa.minus(m)(n)))(nat_sttfa.minus(nat_sttfa.plus(nat_sttfa.sttfa_O)(n))(m)))(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.minus(n)(m))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.minus(n)(m))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(nat_sttfa.sttfa_O)(nat_sttfa.minus(m)(n)))(nat_sttfa.minus(nat_sttfa.plus(nat_sttfa.sttfa_O)(n))(m))"
%|- (sttfa-impl-e "(nat_sttfa.le(n)(m) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(nat_sttfa.sttfa_O)(nat_sttfa.minus(m)(n)))(nat_sttfa.minus(nat_sttfa.plus(nat_sttfa.sttfa_O)(n))(m)))" "nat_sttfa.le(n)(m)"
%|- (propax)
%|- (sttfa-conv "(nat_sttfa.le(n)(m) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(nat_sttfa.sttfa_O)(nat_sttfa.minus(m)(n)))(nat_sttfa.minus(nat_sttfa.plus(nat_sttfa.sttfa_O)(n))(m)))" () ()
%|- (sttfa-forall-e "(FORALL(a:nat_sttfa.sttfa_nat):(nat_sttfa.le(n)(m) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(a)(nat_sttfa.minus(m)(n)))(nat_sttfa.minus(nat_sttfa.plus(a)(n))(m))))" "nat_sttfa.sttfa_O"
%|- (sttfa-conv "(FORALL(a:nat_sttfa.sttfa_nat):(nat_sttfa.le(n)(m) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(a)(nat_sttfa.minus(m)(n)))(nat_sttfa.minus(nat_sttfa.plus(a)(n))(m))))" () ()
%|- (sttfa-forall-e "(FORALL(c:nat_sttfa.sttfa_nat):(FORALL(a:nat_sttfa.sttfa_nat):(nat_sttfa.le(c)(m) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(a)(nat_sttfa.minus(m)(c)))(nat_sttfa.minus(nat_sttfa.plus(a)(c))(m)))))" "n"
%|- (sttfa-conv "(FORALL(c:nat_sttfa.sttfa_nat):(FORALL(a:nat_sttfa.sttfa_nat):(nat_sttfa.le(c)(m) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(a)(nat_sttfa.minus(m)(c)))(nat_sttfa.minus(nat_sttfa.plus(a)(c))(m)))))" () ()
%|- (sttfa-forall-e "(FORALL(b:nat_sttfa.sttfa_nat):(FORALL(c:nat_sttfa.sttfa_nat):(FORALL(a:nat_sttfa.sttfa_nat):(nat_sttfa.le(c)(b) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(a)(nat_sttfa.minus(b)(c)))(nat_sttfa.minus(nat_sttfa.plus(a)(c))(b))))))" "m"
%|- (sttfa-lemma "nat_sttfa.minus_le_minus_minus_comm"))))))))
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(nat_sttfa.sttfa_O)(nat_sttfa.minus(m)(n)))(nat_sttfa.minus(nat_sttfa.plus(nat_sttfa.sttfa_O)(n))(m)) => (logic_sttfa.eq[bool](logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(nat_sttfa.sttfa_O)(nat_sttfa.minus(m)(n)))(nat_sttfa.minus(nat_sttfa.plus(nat_sttfa.sttfa_O)(n))(m)))(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.minus(n)(m))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.minus(n)(m))))" () ()
%|- (sttfa-forall-e "(FORALL(B:bool):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(nat_sttfa.sttfa_O)(nat_sttfa.minus(m)(n)))(nat_sttfa.minus(nat_sttfa.plus(nat_sttfa.sttfa_O)(n))(m)) => (logic_sttfa.eq[bool](logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(nat_sttfa.sttfa_O)(nat_sttfa.minus(m)(n)))(nat_sttfa.minus(nat_sttfa.plus(nat_sttfa.sttfa_O)(n))(m)))(B) => B)))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.minus(n)(m))"
%|- (sttfa-conv "(FORALL(B:bool):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(nat_sttfa.sttfa_O)(nat_sttfa.minus(m)(n)))(nat_sttfa.minus(nat_sttfa.plus(nat_sttfa.sttfa_O)(n))(m)) => (logic_sttfa.eq[bool](logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(nat_sttfa.sttfa_O)(nat_sttfa.minus(m)(n)))(nat_sttfa.minus(nat_sttfa.plus(nat_sttfa.sttfa_O)(n))(m)))(B) => B)))" () ()
%|- (sttfa-forall-e "(FORALL(A:bool):(FORALL(B:bool):(A => (logic_sttfa.eq[bool](A)(B) => B))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(nat_sttfa.sttfa_O)(nat_sttfa.minus(m)(n)))(nat_sttfa.minus(nat_sttfa.plus(nat_sttfa.sttfa_O)(n))(m))"
%|- (sttfa-lemma "logic_sttfa.eq_coerc")))))))
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.minus(n)(m)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.sttfa_O))" () ()
%|- (sttfa-forall-e "(FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(y) => logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.sttfa_O)))" "nat_sttfa.minus(n)(m)"
%|- (sttfa-conv "(FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(y) => logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.sttfa_O)))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(y) => logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(x))))" "nat_sttfa.sttfa_O"
%|- (sttfa-lemma "logic_sttfa.sym_eq[nat_sttfa.sttfa_nat]"))))))
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.minus(n)(m))(nat_sttfa.sttfa_O) => logic_sttfa.eq[bool](primes_sttfa.sttfa_divides(q)(nat_sttfa.sttfa_O))(primes_sttfa.sttfa_divides(q)(nat_sttfa.minus(n)(m))))" () ()
%|- (sttfa-forall-e "(FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.sttfa_O) => logic_sttfa.eq[bool](primes_sttfa.sttfa_divides(q)(nat_sttfa.sttfa_O))(primes_sttfa.sttfa_divides(q)(y))))" "nat_sttfa.minus(n)(m)"
%|- (sttfa-impl-e "(logic_sttfa.eq[bool](primes_sttfa.sttfa_divides(q)(nat_sttfa.sttfa_O))(primes_sttfa.sttfa_divides(q)(nat_sttfa.sttfa_O)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.sttfa_O) => logic_sttfa.eq[bool](primes_sttfa.sttfa_divides(q)(nat_sttfa.sttfa_O))(primes_sttfa.sttfa_divides(q)(y)))))" "logic_sttfa.eq[bool](primes_sttfa.sttfa_divides(q)(nat_sttfa.sttfa_O))(primes_sttfa.sttfa_divides(q)(nat_sttfa.sttfa_O))"
%|- (sttfa-conv "logic_sttfa.eq[bool](primes_sttfa.sttfa_divides(q)(nat_sttfa.sttfa_O))(primes_sttfa.sttfa_divides(q)(nat_sttfa.sttfa_O))" () ()
%|- (sttfa-forall-e "(FORALL(x:bool):logic_sttfa.eq[bool](x)(x))" "primes_sttfa.sttfa_divides(q)(nat_sttfa.sttfa_O)"
%|- (sttfa-lemma "logic_sttfa.refl[bool]")))
%|- (sttfa-conv "((LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[bool](primes_sttfa.sttfa_divides(q)(nat_sttfa.sttfa_O))(primes_sttfa.sttfa_divides(q)(sttfa___)))(nat_sttfa.sttfa_O) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.sttfa_O) => (LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[bool](primes_sttfa.sttfa_divides(q)(nat_sttfa.sttfa_O))(primes_sttfa.sttfa_divides(q)(sttfa___)))(y))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.sttfa_O) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.sttfa_O) => P(y)))))" "(LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[bool](primes_sttfa.sttfa_divides(q)(nat_sttfa.sttfa_O))(primes_sttfa.sttfa_divides(q)(sttfa___)))"
%|- (sttfa-conv "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.sttfa_O) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.sttfa_O) => P(y)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(x) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(x) => P(y))))))" "nat_sttfa.sttfa_O"
%|- (sttfa-lemma "logic_sttfa.rewrite_r[nat_sttfa.sttfa_nat]")))))))))
%|- (sttfa-impl-e "(primes_sttfa.sttfa_divides(q)(nat_sttfa.sttfa_O) => (logic_sttfa.eq[bool](primes_sttfa.sttfa_divides(q)(nat_sttfa.sttfa_O))(primes_sttfa.sttfa_divides(q)(nat_sttfa.minus(n)(m))) => primes_sttfa.sttfa_divides(q)(nat_sttfa.minus(n)(m))))" "primes_sttfa.sttfa_divides(q)(nat_sttfa.sttfa_O)"
%|- (sttfa-conv "primes_sttfa.sttfa_divides(q)(nat_sttfa.sttfa_O)" () ()
%|- (sttfa-forall-e "(FORALL(n:nat_sttfa.sttfa_nat):primes_sttfa.sttfa_divides(n)(nat_sttfa.sttfa_O))" "q"
%|- (sttfa-lemma "primes_sttfa.divides_n_O")))
%|- (sttfa-conv "(primes_sttfa.sttfa_divides(q)(nat_sttfa.sttfa_O) => (logic_sttfa.eq[bool](primes_sttfa.sttfa_divides(q)(nat_sttfa.sttfa_O))(primes_sttfa.sttfa_divides(q)(nat_sttfa.minus(n)(m))) => primes_sttfa.sttfa_divides(q)(nat_sttfa.minus(n)(m))))" () ()
%|- (sttfa-forall-e "(FORALL(B:bool):(primes_sttfa.sttfa_divides(q)(nat_sttfa.sttfa_O) => (logic_sttfa.eq[bool](primes_sttfa.sttfa_divides(q)(nat_sttfa.sttfa_O))(B) => B)))" "primes_sttfa.sttfa_divides(q)(nat_sttfa.minus(n)(m))"
%|- (sttfa-conv "(FORALL(B:bool):(primes_sttfa.sttfa_divides(q)(nat_sttfa.sttfa_O) => (logic_sttfa.eq[bool](primes_sttfa.sttfa_divides(q)(nat_sttfa.sttfa_O))(B) => B)))" () ()
%|- (sttfa-forall-e "(FORALL(A:bool):(FORALL(B:bool):(A => (logic_sttfa.eq[bool](A)(B) => B))))" "primes_sttfa.sttfa_divides(q)(nat_sttfa.sttfa_O)"
%|- (sttfa-lemma "logic_sttfa.eq_coerc"))))))))
%|- (sttfa-conv "((nat_sttfa.le(n)(m) => (LAMBDA(sttfa___:bool_sttfa.sttfa_bool):primes_sttfa.sttfa_divides(q)(nat_sttfa.minus(n)(m)))(bool_sttfa.sttfa_true)) => ((connectives_sttfa.sttfa_Not(nat_sttfa.le(n)(m)) => (LAMBDA(sttfa___:bool_sttfa.sttfa_bool):primes_sttfa.sttfa_divides(q)(nat_sttfa.minus(n)(m)))(bool_sttfa.sttfa_false)) => (LAMBDA(sttfa___:bool_sttfa.sttfa_bool):primes_sttfa.sttfa_divides(q)(nat_sttfa.minus(n)(m)))(nat_sttfa.leb(n)(m))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):((nat_sttfa.le(n)(m) => P(bool_sttfa.sttfa_true)) => ((connectives_sttfa.sttfa_Not(nat_sttfa.le(n)(m)) => P(bool_sttfa.sttfa_false)) => P(nat_sttfa.leb(n)(m)))))" "(LAMBDA(sttfa___:bool_sttfa.sttfa_bool):primes_sttfa.sttfa_divides(q)(nat_sttfa.minus(n)(m)))"
%|- (sttfa-conv "(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):((nat_sttfa.le(n)(m) => P(bool_sttfa.sttfa_true)) => ((connectives_sttfa.sttfa_Not(nat_sttfa.le(n)(m)) => P(bool_sttfa.sttfa_false)) => P(nat_sttfa.leb(n)(m)))))" () ()
%|- (sttfa-forall-e "(FORALL(m0:nat_sttfa.sttfa_nat):(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):((nat_sttfa.le(n)(m0) => P(bool_sttfa.sttfa_true)) => ((connectives_sttfa.sttfa_Not(nat_sttfa.le(n)(m0)) => P(bool_sttfa.sttfa_false)) => P(nat_sttfa.leb(n)(m0))))))" "m"
%|- (sttfa-conv "(FORALL(m0:nat_sttfa.sttfa_nat):(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):((nat_sttfa.le(n)(m0) => P(bool_sttfa.sttfa_true)) => ((connectives_sttfa.sttfa_Not(nat_sttfa.le(n)(m0)) => P(bool_sttfa.sttfa_false)) => P(nat_sttfa.leb(n)(m0))))))" () ()
%|- (sttfa-forall-e "(FORALL(n:nat_sttfa.sttfa_nat):(FORALL(m:nat_sttfa.sttfa_nat):(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):((nat_sttfa.le(n)(m) => P(bool_sttfa.sttfa_true)) => ((connectives_sttfa.sttfa_Not(nat_sttfa.le(n)(m)) => P(bool_sttfa.sttfa_false)) => P(nat_sttfa.leb(n)(m)))))))" "n"
%|- (sttfa-lemma "nat_sttfa.leb_elim"))))))))))))))
%|- QED

let_clause_1531  : LEMMA (FORALL(n:nat_sttfa.sttfa_nat):(FORALL(m:nat_sttfa.sttfa_nat):(nat_sttfa.lt(nat_sttfa.sttfa_O)(m) => (primes_sttfa.sttfa_divides(n)(m) => (FORALL(d:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O)))))))

%|- let_clause_1531 : PROOF
%|- (then@ (sttfa-forall-i "n")
%|- (then@ (sttfa-forall-i "m")
%|- (sttfa-impl-i "nat_sttfa.lt(nat_sttfa.sttfa_O)(m)" "(primes_sttfa.sttfa_divides(n)(m) => (FORALL(d:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O))))"
%|- (sttfa-impl-i "primes_sttfa.sttfa_divides(n)(m)" "(FORALL(d:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O)))"
%|- (then@ (sttfa-forall-i "d")
%|- (sttfa-impl-i "logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_O))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O)"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.times(n)(nat_sttfa.sttfa_O))"
%|- (sttfa-conv "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.times(n)(nat_sttfa.sttfa_O))" () ()
%|- (sttfa-forall-e "(FORALL(n:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)))" "n"
%|- (sttfa-lemma "nat_sttfa.times_n_O")))
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O))" () ()
%|- (sttfa-forall-e "(FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(y)))" "nat_sttfa.sttfa_O"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(y))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_O))"
%|- (propax)
%|- (sttfa-conv "((LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(sttfa___))(nat_sttfa.times(n)(nat_sttfa.sttfa_O)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)) => (LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(sttfa___))(y))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.times(n)(nat_sttfa.sttfa_O)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)) => P(y)))))" "(LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(sttfa___))"
%|- (sttfa-conv "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.times(n)(nat_sttfa.sttfa_O)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)) => P(y)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(x) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(x) => P(y))))))" "nat_sttfa.times(n)(nat_sttfa.sttfa_O)"
%|- (sttfa-lemma "logic_sttfa.rewrite_r[nat_sttfa.sttfa_nat]")))))))))))))))
%|- QED

let_clause_15311  : LEMMA (FORALL(n:nat_sttfa.sttfa_nat):(FORALL(m:nat_sttfa.sttfa_nat):(nat_sttfa.lt(nat_sttfa.sttfa_O)(m) => (primes_sttfa.sttfa_divides(n)(m) => (FORALL(d:nat_sttfa.sttfa_nat):(FORALL(p:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p))))))))))

%|- let_clause_15311 : PROOF
%|- (then@ (sttfa-forall-i "n")
%|- (then@ (sttfa-forall-i "m")
%|- (sttfa-impl-i "nat_sttfa.lt(nat_sttfa.sttfa_O)(m)" "(primes_sttfa.sttfa_divides(n)(m) => (FORALL(d:nat_sttfa.sttfa_nat):(FORALL(p:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p)))))))"
%|- (sttfa-impl-i "primes_sttfa.sttfa_divides(n)(m)" "(FORALL(d:nat_sttfa.sttfa_nat):(FORALL(p:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p))))))"
%|- (then@ (sttfa-forall-i "d")
%|- (then@ (sttfa-forall-i "p")
%|- (sttfa-impl-i "logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p)))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p)))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.plus(n)(nat_sttfa.times(n)(p)))(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.plus(n)(nat_sttfa.times(n)(p)))(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p)))"
%|- (sttfa-conv "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.plus(n)(nat_sttfa.times(n)(p)))(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p)))" () ()
%|- (sttfa-forall-e "(FORALL(m0:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.plus(n)(nat_sttfa.times(n)(m0)))(nat_sttfa.times(n)(nat_sttfa.sttfa_S(m0))))" "p"
%|- (sttfa-conv "(FORALL(m0:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.plus(n)(nat_sttfa.times(n)(m0)))(nat_sttfa.times(n)(nat_sttfa.sttfa_S(m0))))" () ()
%|- (sttfa-forall-e "(FORALL(n:nat_sttfa.sttfa_nat):(FORALL(m:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.plus(n)(nat_sttfa.times(n)(m)))(nat_sttfa.times(n)(nat_sttfa.sttfa_S(m)))))" "n"
%|- (sttfa-lemma "nat_sttfa.times_n_Sm")))))
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.plus(n)(nat_sttfa.times(n)(p)))(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p))))" () ()
%|- (sttfa-forall-e "(FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(y)))" "nat_sttfa.plus(n)(nat_sttfa.times(n)(p))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p))) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(y))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p)))"
%|- (propax)
%|- (sttfa-conv "((LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(sttfa___))(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p))) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p))) => (LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(sttfa___))(y))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p))) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p))) => P(y)))))" "(LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(sttfa___))"
%|- (sttfa-conv "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p))) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p))) => P(y)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(x) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(x) => P(y))))))" "nat_sttfa.times(n)(nat_sttfa.sttfa_S(p))"
%|- (sttfa-lemma "logic_sttfa.rewrite_r[nat_sttfa.sttfa_nat]"))))))))))))))))
%|- QED

divides_to_le  : LEMMA (FORALL(n:nat_sttfa.sttfa_nat):(FORALL(m:nat_sttfa.sttfa_nat):(nat_sttfa.lt(nat_sttfa.sttfa_O)(m) => (primes_sttfa.sttfa_divides(n)(m) => nat_sttfa.le(n)(m)))))

%|- divides_to_le : PROOF
%|- (then@ (sttfa-forall-i "n")
%|- (then@ (sttfa-forall-i "m")
%|- (sttfa-impl-i "nat_sttfa.lt(nat_sttfa.sttfa_O)(m)" "(primes_sttfa.sttfa_divides(n)(m) => nat_sttfa.le(n)(m))"
%|- (sttfa-impl-i "primes_sttfa.sttfa_divides(n)(m)" "nat_sttfa.le(n)(m)"
%|- (sttfa-impl-e "(primes_sttfa.sttfa_divides(n)(m) => nat_sttfa.le(n)(m))" "primes_sttfa.sttfa_divides(n)(m)"
%|- (propax)
%|- (sttfa-impl-e "((FORALL(q:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(q)) => nat_sttfa.le(n)(m))) => (primes_sttfa.sttfa_divides(n)(m) => nat_sttfa.le(n)(m)))" "(FORALL(d:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(d)) => nat_sttfa.le(n)(m)))"
%|- (then@ (sttfa-forall-i "d")
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(d)) => nat_sttfa.le(n)(m))" () ()
%|- (sttfa-forall-e "(FORALL(z:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(z)) => nat_sttfa.le(n)(m)))" "d"
%|- (sttfa-impl-e "((FORALL(n0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(n0))) => nat_sttfa.le(n)(m))) => (FORALL(z:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(z)) => nat_sttfa.le(n)(m))))" "(FORALL(p:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p))) => nat_sttfa.le(n)(m)))"
%|- (then@ (sttfa-forall-i "p")
%|- (sttfa-impl-i "logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p)))" "nat_sttfa.le(n)(m)"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p))) => nat_sttfa.le(n)(m))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p)))"
%|- (propax)
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p))) => nat_sttfa.le(n)(m))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p))) => nat_sttfa.le(n)(x)))" "m"
%|- (sttfa-impl-e "(nat_sttfa.le(n)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p))) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p))) => nat_sttfa.le(n)(x))))" "nat_sttfa.le(n)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p)))"
%|- (sttfa-impl-e "(logic_sttfa.eq[bool](nat_sttfa.le(n)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p))))(nat_sttfa.le(n)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p)))) => nat_sttfa.le(n)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p))))" "logic_sttfa.eq[bool](nat_sttfa.le(n)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p))))(nat_sttfa.le(n)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p))))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.plus(n)(nat_sttfa.times(n)(p)))(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p))) => logic_sttfa.eq[bool](nat_sttfa.le(n)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p))))(nat_sttfa.le(n)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p)))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.plus(n)(nat_sttfa.times(n)(p)))(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p)))"
%|- (sttfa-conv "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.plus(n)(nat_sttfa.times(n)(p)))(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p)))" () ()
%|- (sttfa-forall-e "(FORALL(m0:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.plus(n)(nat_sttfa.times(n)(m0)))(nat_sttfa.times(n)(nat_sttfa.sttfa_S(m0))))" "p"
%|- (sttfa-conv "(FORALL(m0:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.plus(n)(nat_sttfa.times(n)(m0)))(nat_sttfa.times(n)(nat_sttfa.sttfa_S(m0))))" () ()
%|- (sttfa-forall-e "(FORALL(n:nat_sttfa.sttfa_nat):(FORALL(m:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.plus(n)(nat_sttfa.times(n)(m)))(nat_sttfa.times(n)(nat_sttfa.sttfa_S(m)))))" "n"
%|- (sttfa-lemma "nat_sttfa.times_n_Sm")))))
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.plus(n)(nat_sttfa.times(n)(p)))(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p))) => logic_sttfa.eq[bool](nat_sttfa.le(n)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p))))(nat_sttfa.le(n)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p)))))" () ()
%|- (sttfa-forall-e "(FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.plus(n)(nat_sttfa.times(n)(p)))(y) => logic_sttfa.eq[bool](nat_sttfa.le(n)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p))))(nat_sttfa.le(n)(y))))" "nat_sttfa.times(n)(nat_sttfa.sttfa_S(p))"
%|- (sttfa-impl-e "(logic_sttfa.eq[bool](nat_sttfa.le(n)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p))))(nat_sttfa.le(n)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p)))) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.plus(n)(nat_sttfa.times(n)(p)))(y) => logic_sttfa.eq[bool](nat_sttfa.le(n)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p))))(nat_sttfa.le(n)(y)))))" "logic_sttfa.eq[bool](nat_sttfa.le(n)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p))))(nat_sttfa.le(n)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p))))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p))) => logic_sttfa.eq[bool](nat_sttfa.le(n)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p))))(nat_sttfa.le(n)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p)))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p)))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p)))"
%|- (propax)
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p))))" () ()
%|- (sttfa-forall-e "(FORALL(p0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p0))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p0)))))" "p"
%|- (sttfa-conv "(FORALL(p0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p0))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p0)))))" () ()
%|- (sttfa-forall-e "(FORALL(d0:nat_sttfa.sttfa_nat):(FORALL(p0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p0))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p0))))))" "d"
%|- (sttfa-impl-e "(primes_sttfa.sttfa_divides(n)(m) => (FORALL(d0:nat_sttfa.sttfa_nat):(FORALL(p0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p0))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p0)))))))" "primes_sttfa.sttfa_divides(n)(m)"
%|- (propax)
%|- (sttfa-impl-e "(nat_sttfa.lt(nat_sttfa.sttfa_O)(m) => (primes_sttfa.sttfa_divides(n)(m) => (FORALL(d0:nat_sttfa.sttfa_nat):(FORALL(p0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p0))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p0))))))))" "nat_sttfa.lt(nat_sttfa.sttfa_O)(m)"
%|- (propax)
%|- (sttfa-conv "(nat_sttfa.lt(nat_sttfa.sttfa_O)(m) => (primes_sttfa.sttfa_divides(n)(m) => (FORALL(d0:nat_sttfa.sttfa_nat):(FORALL(p0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p0))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p0))))))))" () ()
%|- (sttfa-forall-e "(FORALL(m0:nat_sttfa.sttfa_nat):(nat_sttfa.lt(nat_sttfa.sttfa_O)(m0) => (primes_sttfa.sttfa_divides(n)(m0) => (FORALL(d0:nat_sttfa.sttfa_nat):(FORALL(p0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m0)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p0))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m0)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p0)))))))))" "m"
%|- (sttfa-conv "(FORALL(m0:nat_sttfa.sttfa_nat):(nat_sttfa.lt(nat_sttfa.sttfa_O)(m0) => (primes_sttfa.sttfa_divides(n)(m0) => (FORALL(d0:nat_sttfa.sttfa_nat):(FORALL(p0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m0)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p0))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m0)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p0)))))))))" () ()
%|- (sttfa-forall-e "(FORALL(n:nat_sttfa.sttfa_nat):(FORALL(m:nat_sttfa.sttfa_nat):(nat_sttfa.lt(nat_sttfa.sttfa_O)(m) => (primes_sttfa.sttfa_divides(n)(m) => (FORALL(d:nat_sttfa.sttfa_nat):(FORALL(p:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p))))))))))" "n"
%|- (sttfa-lemma "primes_sttfa.let_clause_15311"))))))))))))
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p))) => logic_sttfa.eq[bool](nat_sttfa.le(n)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p))))(nat_sttfa.le(n)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p)))))" () ()
%|- (sttfa-forall-e "(FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(y) => logic_sttfa.eq[bool](nat_sttfa.le(n)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p))))(nat_sttfa.le(n)(y))))" "nat_sttfa.plus(n)(nat_sttfa.times(n)(p))"
%|- (sttfa-impl-e "(logic_sttfa.eq[bool](nat_sttfa.le(n)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p))))(nat_sttfa.le(n)(m)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(y) => logic_sttfa.eq[bool](nat_sttfa.le(n)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p))))(nat_sttfa.le(n)(y)))))" "logic_sttfa.eq[bool](nat_sttfa.le(n)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p))))(nat_sttfa.le(n)(m))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p))) => logic_sttfa.eq[bool](nat_sttfa.le(n)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p))))(nat_sttfa.le(n)(m)))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p)))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p)))"
%|- (propax)
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p))))" () ()
%|- (sttfa-forall-e "(FORALL(p0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p0))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p0)))))" "p"
%|- (sttfa-conv "(FORALL(p0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p0))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p0)))))" () ()
%|- (sttfa-forall-e "(FORALL(d0:nat_sttfa.sttfa_nat):(FORALL(p0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p0))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p0))))))" "d"
%|- (sttfa-impl-e "(primes_sttfa.sttfa_divides(n)(m) => (FORALL(d0:nat_sttfa.sttfa_nat):(FORALL(p0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p0))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p0)))))))" "primes_sttfa.sttfa_divides(n)(m)"
%|- (propax)
%|- (sttfa-impl-e "(nat_sttfa.lt(nat_sttfa.sttfa_O)(m) => (primes_sttfa.sttfa_divides(n)(m) => (FORALL(d0:nat_sttfa.sttfa_nat):(FORALL(p0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p0))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p0))))))))" "nat_sttfa.lt(nat_sttfa.sttfa_O)(m)"
%|- (propax)
%|- (sttfa-conv "(nat_sttfa.lt(nat_sttfa.sttfa_O)(m) => (primes_sttfa.sttfa_divides(n)(m) => (FORALL(d0:nat_sttfa.sttfa_nat):(FORALL(p0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p0))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p0))))))))" () ()
%|- (sttfa-forall-e "(FORALL(m0:nat_sttfa.sttfa_nat):(nat_sttfa.lt(nat_sttfa.sttfa_O)(m0) => (primes_sttfa.sttfa_divides(n)(m0) => (FORALL(d0:nat_sttfa.sttfa_nat):(FORALL(p0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m0)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p0))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m0)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p0)))))))))" "m"
%|- (sttfa-conv "(FORALL(m0:nat_sttfa.sttfa_nat):(nat_sttfa.lt(nat_sttfa.sttfa_O)(m0) => (primes_sttfa.sttfa_divides(n)(m0) => (FORALL(d0:nat_sttfa.sttfa_nat):(FORALL(p0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m0)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p0))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m0)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p0)))))))))" () ()
%|- (sttfa-forall-e "(FORALL(n:nat_sttfa.sttfa_nat):(FORALL(m:nat_sttfa.sttfa_nat):(nat_sttfa.lt(nat_sttfa.sttfa_O)(m) => (primes_sttfa.sttfa_divides(n)(m) => (FORALL(d:nat_sttfa.sttfa_nat):(FORALL(p:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p))) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p))))))))))" "n"
%|- (sttfa-lemma "primes_sttfa.let_clause_15311"))))))))))))
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p))) => logic_sttfa.eq[bool](nat_sttfa.le(n)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p))))(nat_sttfa.le(n)(m)))" () ()
%|- (sttfa-forall-e "(FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(y) => logic_sttfa.eq[bool](nat_sttfa.le(n)(y))(nat_sttfa.le(n)(m))))" "nat_sttfa.plus(n)(nat_sttfa.times(n)(p))"
%|- (sttfa-impl-e "(logic_sttfa.eq[bool](nat_sttfa.le(n)(m))(nat_sttfa.le(n)(m)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(y) => logic_sttfa.eq[bool](nat_sttfa.le(n)(y))(nat_sttfa.le(n)(m)))))" "logic_sttfa.eq[bool](nat_sttfa.le(n)(m))(nat_sttfa.le(n)(m))"
%|- (sttfa-conv "logic_sttfa.eq[bool](nat_sttfa.le(n)(m))(nat_sttfa.le(n)(m))" () ()
%|- (sttfa-forall-e "(FORALL(x:bool):logic_sttfa.eq[bool](x)(x))" "nat_sttfa.le(n)(m)"
%|- (sttfa-lemma "logic_sttfa.refl[bool]")))
%|- (sttfa-conv "((LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[bool](nat_sttfa.le(n)(sttfa___))(nat_sttfa.le(n)(m)))(m) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(y) => (LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[bool](nat_sttfa.le(n)(sttfa___))(nat_sttfa.le(n)(m)))(y))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(m) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(y) => P(y)))))" "(LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[bool](nat_sttfa.le(n)(sttfa___))(nat_sttfa.le(n)(m)))"
%|- (sttfa-conv "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(m) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(y) => P(y)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(x) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(y) => P(y))))))" "m"
%|- (sttfa-lemma "logic_sttfa.rewrite_l[nat_sttfa.sttfa_nat]")))))))))
%|- (sttfa-conv "((LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[bool](nat_sttfa.le(n)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p))))(nat_sttfa.le(n)(sttfa___)))(m) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(y) => (LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[bool](nat_sttfa.le(n)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p))))(nat_sttfa.le(n)(sttfa___)))(y))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(m) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(y) => P(y)))))" "(LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[bool](nat_sttfa.le(n)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p))))(nat_sttfa.le(n)(sttfa___)))"
%|- (sttfa-conv "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(m) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(y) => P(y)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(x) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(y) => P(y))))))" "m"
%|- (sttfa-lemma "logic_sttfa.rewrite_l[nat_sttfa.sttfa_nat]")))))))))
%|- (sttfa-conv "((LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[bool](nat_sttfa.le(n)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p))))(nat_sttfa.le(n)(sttfa___)))(nat_sttfa.plus(n)(nat_sttfa.times(n)(p))) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.plus(n)(nat_sttfa.times(n)(p)))(y) => (LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[bool](nat_sttfa.le(n)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p))))(nat_sttfa.le(n)(sttfa___)))(y))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.plus(n)(nat_sttfa.times(n)(p))) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.plus(n)(nat_sttfa.times(n)(p)))(y) => P(y)))))" "(LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[bool](nat_sttfa.le(n)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p))))(nat_sttfa.le(n)(sttfa___)))"
%|- (sttfa-conv "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.plus(n)(nat_sttfa.times(n)(p))) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.plus(n)(nat_sttfa.times(n)(p)))(y) => P(y)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(x) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(y) => P(y))))))" "nat_sttfa.plus(n)(nat_sttfa.times(n)(p))"
%|- (sttfa-lemma "logic_sttfa.rewrite_l[nat_sttfa.sttfa_nat]")))))))))
%|- (sttfa-impl-e "(nat_sttfa.le(n)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p))) => (logic_sttfa.eq[bool](nat_sttfa.le(n)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p))))(nat_sttfa.le(n)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p)))) => nat_sttfa.le(n)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p)))))" "nat_sttfa.le(n)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p)))"
%|- (sttfa-conv "nat_sttfa.le(n)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p)))" () ()
%|- (sttfa-forall-e "(FORALL(m0:nat_sttfa.sttfa_nat):nat_sttfa.le(m0)(nat_sttfa.plus(m0)(nat_sttfa.times(n)(p))))" "n"
%|- (sttfa-conv "(FORALL(m0:nat_sttfa.sttfa_nat):nat_sttfa.le(m0)(nat_sttfa.plus(m0)(nat_sttfa.times(n)(p))))" () ()
%|- (sttfa-forall-e "(FORALL(n:nat_sttfa.sttfa_nat):(FORALL(m:nat_sttfa.sttfa_nat):nat_sttfa.le(m)(nat_sttfa.plus(m)(n))))" "nat_sttfa.times(n)(p)"
%|- (sttfa-lemma "nat_sttfa.le_plus_n_r")))))
%|- (sttfa-conv "(nat_sttfa.le(n)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p))) => (logic_sttfa.eq[bool](nat_sttfa.le(n)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p))))(nat_sttfa.le(n)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p)))) => nat_sttfa.le(n)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p)))))" () ()
%|- (sttfa-forall-e "(FORALL(B:bool):(nat_sttfa.le(n)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p))) => (logic_sttfa.eq[bool](nat_sttfa.le(n)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p))))(B) => B)))" "nat_sttfa.le(n)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p)))"
%|- (sttfa-conv "(FORALL(B:bool):(nat_sttfa.le(n)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p))) => (logic_sttfa.eq[bool](nat_sttfa.le(n)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p))))(B) => B)))" () ()
%|- (sttfa-forall-e "(FORALL(A:bool):(FORALL(B:bool):(A => (logic_sttfa.eq[bool](A)(B) => B))))" "nat_sttfa.le(n)(nat_sttfa.plus(n)(nat_sttfa.times(n)(p)))"
%|- (sttfa-lemma "logic_sttfa.eq_coerc")))))))
%|- (sttfa-conv "((LAMBDA(x:nat_sttfa.sttfa_nat):nat_sttfa.le(n)(x))(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p))) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p))) => (LAMBDA(x0:nat_sttfa.sttfa_nat):nat_sttfa.le(n)(x0))(x))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p))) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p))) => P(x)))))" "(LAMBDA(x:nat_sttfa.sttfa_nat):nat_sttfa.le(n)(x))"
%|- (sttfa-conv "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p))) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(p))) => P(x)))))" () ()
%|- (sttfa-forall-e "(FORALL(a:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(a) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(a) => P(x))))))" "nat_sttfa.times(n)(nat_sttfa.sttfa_S(p))"
%|- (sttfa-lemma "logic_sttfa.eq_ind_r[nat_sttfa.sttfa_nat]")))))))))))
%|- (sttfa-impl-e "((logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)) => nat_sttfa.le(n)(m)) => ((FORALL(n0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_S(n0))) => nat_sttfa.le(n)(m))) => (FORALL(z:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(z)) => nat_sttfa.le(n)(m)))))" "(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)) => nat_sttfa.le(n)(m))"
%|- (sttfa-impl-i "logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_O))" "nat_sttfa.le(n)(m)"
%|- (sttfa-impl-e "(connectives_sttfa.sttfa_False => nat_sttfa.le(n)(m))" "connectives_sttfa.sttfa_False"
%|- (sttfa-impl-e "(connectives_sttfa.sttfa_Not(nat_sttfa.le(nat_sttfa.sttfa_S(m))(nat_sttfa.sttfa_O)) => connectives_sttfa.sttfa_False)" "connectives_sttfa.sttfa_Not(nat_sttfa.le(nat_sttfa.sttfa_S(m))(nat_sttfa.sttfa_O))"
%|- (sttfa-conv "connectives_sttfa.sttfa_Not(nat_sttfa.le(nat_sttfa.sttfa_S(m))(nat_sttfa.sttfa_O))" () ()
%|- (sttfa-forall-e "(FORALL(n:nat_sttfa.sttfa_nat):connectives_sttfa.sttfa_Not(nat_sttfa.le(nat_sttfa.sttfa_S(n))(nat_sttfa.sttfa_O)))" "m"
%|- (sttfa-lemma "nat_sttfa.not_le_Sn_O")))
%|- (sttfa-impl-e "(nat_sttfa.le(nat_sttfa.sttfa_S(m))(nat_sttfa.sttfa_O) => (connectives_sttfa.sttfa_Not(nat_sttfa.le(nat_sttfa.sttfa_S(m))(nat_sttfa.sttfa_O)) => connectives_sttfa.sttfa_False))" "nat_sttfa.le(nat_sttfa.sttfa_S(m))(nat_sttfa.sttfa_O)"
%|- (sttfa-impl-e "(logic_sttfa.eq[bool](nat_sttfa.le(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(m))(nat_sttfa.le(nat_sttfa.sttfa_S(m))(nat_sttfa.sttfa_O)) => nat_sttfa.le(nat_sttfa.sttfa_S(m))(nat_sttfa.sttfa_O))" "logic_sttfa.eq[bool](nat_sttfa.le(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(m))(nat_sttfa.le(nat_sttfa.sttfa_S(m))(nat_sttfa.sttfa_O))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O) => logic_sttfa.eq[bool](nat_sttfa.le(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(m))(nat_sttfa.le(nat_sttfa.sttfa_S(m))(nat_sttfa.sttfa_O)))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O)"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_O))"
%|- (propax)
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O))" () ()
%|- (sttfa-forall-e "(FORALL(d0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O)))" "d"
%|- (sttfa-impl-e "(primes_sttfa.sttfa_divides(n)(m) => (FORALL(d0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O))))" "primes_sttfa.sttfa_divides(n)(m)"
%|- (propax)
%|- (sttfa-impl-e "(nat_sttfa.lt(nat_sttfa.sttfa_O)(m) => (primes_sttfa.sttfa_divides(n)(m) => (FORALL(d0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O)))))" "nat_sttfa.lt(nat_sttfa.sttfa_O)(m)"
%|- (propax)
%|- (sttfa-conv "(nat_sttfa.lt(nat_sttfa.sttfa_O)(m) => (primes_sttfa.sttfa_divides(n)(m) => (FORALL(d0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O)))))" () ()
%|- (sttfa-forall-e "(FORALL(m0:nat_sttfa.sttfa_nat):(nat_sttfa.lt(nat_sttfa.sttfa_O)(m0) => (primes_sttfa.sttfa_divides(n)(m0) => (FORALL(d0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m0)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m0)(nat_sttfa.sttfa_O))))))" "m"
%|- (sttfa-conv "(FORALL(m0:nat_sttfa.sttfa_nat):(nat_sttfa.lt(nat_sttfa.sttfa_O)(m0) => (primes_sttfa.sttfa_divides(n)(m0) => (FORALL(d0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m0)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m0)(nat_sttfa.sttfa_O))))))" () ()
%|- (sttfa-forall-e "(FORALL(n:nat_sttfa.sttfa_nat):(FORALL(m:nat_sttfa.sttfa_nat):(nat_sttfa.lt(nat_sttfa.sttfa_O)(m) => (primes_sttfa.sttfa_divides(n)(m) => (FORALL(d:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O)))))))" "n"
%|- (sttfa-lemma "primes_sttfa.let_clause_1531"))))))))))
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O) => logic_sttfa.eq[bool](nat_sttfa.le(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(m))(nat_sttfa.le(nat_sttfa.sttfa_S(m))(nat_sttfa.sttfa_O)))" () ()
%|- (sttfa-forall-e "(FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(y) => logic_sttfa.eq[bool](nat_sttfa.le(nat_sttfa.sttfa_S(y))(m))(nat_sttfa.le(nat_sttfa.sttfa_S(m))(nat_sttfa.sttfa_O))))" "nat_sttfa.sttfa_O"
%|- (sttfa-impl-e "(logic_sttfa.eq[bool](nat_sttfa.le(nat_sttfa.sttfa_S(m))(m))(nat_sttfa.le(nat_sttfa.sttfa_S(m))(nat_sttfa.sttfa_O)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(y) => logic_sttfa.eq[bool](nat_sttfa.le(nat_sttfa.sttfa_S(y))(m))(nat_sttfa.le(nat_sttfa.sttfa_S(m))(nat_sttfa.sttfa_O)))))" "logic_sttfa.eq[bool](nat_sttfa.le(nat_sttfa.sttfa_S(m))(m))(nat_sttfa.le(nat_sttfa.sttfa_S(m))(nat_sttfa.sttfa_O))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O) => logic_sttfa.eq[bool](nat_sttfa.le(nat_sttfa.sttfa_S(m))(m))(nat_sttfa.le(nat_sttfa.sttfa_S(m))(nat_sttfa.sttfa_O)))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O)"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_O))"
%|- (propax)
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O))" () ()
%|- (sttfa-forall-e "(FORALL(d0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O)))" "d"
%|- (sttfa-impl-e "(primes_sttfa.sttfa_divides(n)(m) => (FORALL(d0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O))))" "primes_sttfa.sttfa_divides(n)(m)"
%|- (propax)
%|- (sttfa-impl-e "(nat_sttfa.lt(nat_sttfa.sttfa_O)(m) => (primes_sttfa.sttfa_divides(n)(m) => (FORALL(d0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O)))))" "nat_sttfa.lt(nat_sttfa.sttfa_O)(m)"
%|- (propax)
%|- (sttfa-conv "(nat_sttfa.lt(nat_sttfa.sttfa_O)(m) => (primes_sttfa.sttfa_divides(n)(m) => (FORALL(d0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O)))))" () ()
%|- (sttfa-forall-e "(FORALL(m0:nat_sttfa.sttfa_nat):(nat_sttfa.lt(nat_sttfa.sttfa_O)(m0) => (primes_sttfa.sttfa_divides(n)(m0) => (FORALL(d0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m0)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m0)(nat_sttfa.sttfa_O))))))" "m"
%|- (sttfa-conv "(FORALL(m0:nat_sttfa.sttfa_nat):(nat_sttfa.lt(nat_sttfa.sttfa_O)(m0) => (primes_sttfa.sttfa_divides(n)(m0) => (FORALL(d0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m0)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m0)(nat_sttfa.sttfa_O))))))" () ()
%|- (sttfa-forall-e "(FORALL(n:nat_sttfa.sttfa_nat):(FORALL(m:nat_sttfa.sttfa_nat):(nat_sttfa.lt(nat_sttfa.sttfa_O)(m) => (primes_sttfa.sttfa_divides(n)(m) => (FORALL(d:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O)))))))" "n"
%|- (sttfa-lemma "primes_sttfa.let_clause_1531"))))))))))
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O) => logic_sttfa.eq[bool](nat_sttfa.le(nat_sttfa.sttfa_S(m))(m))(nat_sttfa.le(nat_sttfa.sttfa_S(m))(nat_sttfa.sttfa_O)))" () ()
%|- (sttfa-forall-e "(FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(y) => logic_sttfa.eq[bool](nat_sttfa.le(nat_sttfa.sttfa_S(m))(m))(nat_sttfa.le(nat_sttfa.sttfa_S(m))(y))))" "nat_sttfa.sttfa_O"
%|- (sttfa-impl-e "(logic_sttfa.eq[bool](nat_sttfa.le(nat_sttfa.sttfa_S(m))(m))(nat_sttfa.le(nat_sttfa.sttfa_S(m))(m)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(y) => logic_sttfa.eq[bool](nat_sttfa.le(nat_sttfa.sttfa_S(m))(m))(nat_sttfa.le(nat_sttfa.sttfa_S(m))(y)))))" "logic_sttfa.eq[bool](nat_sttfa.le(nat_sttfa.sttfa_S(m))(m))(nat_sttfa.le(nat_sttfa.sttfa_S(m))(m))"
%|- (sttfa-conv "logic_sttfa.eq[bool](nat_sttfa.le(nat_sttfa.sttfa_S(m))(m))(nat_sttfa.le(nat_sttfa.sttfa_S(m))(m))" () ()
%|- (sttfa-forall-e "(FORALL(x:bool):logic_sttfa.eq[bool](x)(x))" "nat_sttfa.le(nat_sttfa.sttfa_S(m))(m)"
%|- (sttfa-lemma "logic_sttfa.refl[bool]")))
%|- (sttfa-conv "((LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[bool](nat_sttfa.le(nat_sttfa.sttfa_S(m))(m))(nat_sttfa.le(nat_sttfa.sttfa_S(m))(sttfa___)))(m) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(y) => (LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[bool](nat_sttfa.le(nat_sttfa.sttfa_S(m))(m))(nat_sttfa.le(nat_sttfa.sttfa_S(m))(sttfa___)))(y))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(m) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(y) => P(y)))))" "(LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[bool](nat_sttfa.le(nat_sttfa.sttfa_S(m))(m))(nat_sttfa.le(nat_sttfa.sttfa_S(m))(sttfa___)))"
%|- (sttfa-conv "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(m) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(y) => P(y)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(x) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(y) => P(y))))))" "m"
%|- (sttfa-lemma "logic_sttfa.rewrite_l[nat_sttfa.sttfa_nat]")))))))))
%|- (sttfa-conv "((LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[bool](nat_sttfa.le(nat_sttfa.sttfa_S(sttfa___))(m))(nat_sttfa.le(nat_sttfa.sttfa_S(m))(nat_sttfa.sttfa_O)))(m) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(y) => (LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[bool](nat_sttfa.le(nat_sttfa.sttfa_S(sttfa___))(m))(nat_sttfa.le(nat_sttfa.sttfa_S(m))(nat_sttfa.sttfa_O)))(y))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(m) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(y) => P(y)))))" "(LAMBDA(sttfa___:nat_sttfa.sttfa_nat):logic_sttfa.eq[bool](nat_sttfa.le(nat_sttfa.sttfa_S(sttfa___))(m))(nat_sttfa.le(nat_sttfa.sttfa_S(m))(nat_sttfa.sttfa_O)))"
%|- (sttfa-conv "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(m) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(y) => P(y)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(x) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(y) => P(y))))))" "m"
%|- (sttfa-lemma "logic_sttfa.rewrite_l[nat_sttfa.sttfa_nat]")))))))))
%|- (sttfa-impl-e "(nat_sttfa.lt(nat_sttfa.sttfa_O)(m) => (logic_sttfa.eq[bool](nat_sttfa.le(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(m))(nat_sttfa.le(nat_sttfa.sttfa_S(m))(nat_sttfa.sttfa_O)) => nat_sttfa.le(nat_sttfa.sttfa_S(m))(nat_sttfa.sttfa_O)))" "nat_sttfa.lt(nat_sttfa.sttfa_O)(m)"
%|- (propax)
%|- (sttfa-conv "(nat_sttfa.le(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(m) => (logic_sttfa.eq[bool](nat_sttfa.le(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(m))(nat_sttfa.le(nat_sttfa.sttfa_S(m))(nat_sttfa.sttfa_O)) => nat_sttfa.le(nat_sttfa.sttfa_S(m))(nat_sttfa.sttfa_O)))" () ("nat_sttfa.lt")
%|- (sttfa-conv "(nat_sttfa.le(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(m) => (logic_sttfa.eq[bool](nat_sttfa.le(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(m))(nat_sttfa.le(nat_sttfa.sttfa_S(m))(nat_sttfa.sttfa_O)) => nat_sttfa.le(nat_sttfa.sttfa_S(m))(nat_sttfa.sttfa_O)))" () ()
%|- (sttfa-forall-e "(FORALL(B:bool):(nat_sttfa.le(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(m) => (logic_sttfa.eq[bool](nat_sttfa.le(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(m))(B) => B)))" "nat_sttfa.le(nat_sttfa.sttfa_S(m))(nat_sttfa.sttfa_O)"
%|- (sttfa-conv "(FORALL(B:bool):(nat_sttfa.le(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(m) => (logic_sttfa.eq[bool](nat_sttfa.le(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(m))(B) => B)))" () ()
%|- (sttfa-forall-e "(FORALL(A:bool):(FORALL(B:bool):(A => (logic_sttfa.eq[bool](A)(B) => B))))" "nat_sttfa.le(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(m)"
%|- (sttfa-lemma "logic_sttfa.eq_coerc"))))))))
%|- (sttfa-conv "(nat_sttfa.le(nat_sttfa.sttfa_S(m))(nat_sttfa.sttfa_O) => (connectives_sttfa.sttfa_Not(nat_sttfa.le(nat_sttfa.sttfa_S(m))(nat_sttfa.sttfa_O)) => connectives_sttfa.sttfa_False))" () ()
%|- (sttfa-forall-e "(FORALL(A:bool):(A => (connectives_sttfa.sttfa_Not(A) => connectives_sttfa.sttfa_False)))" "nat_sttfa.le(nat_sttfa.sttfa_S(m))(nat_sttfa.sttfa_O)"
%|- (sttfa-lemma "logic_sttfa.absurd")))))
%|- (sttfa-conv "(connectives_sttfa.sttfa_False => nat_sttfa.le(n)(m))" () ()
%|- (sttfa-forall-e "(FORALL(t:bool):(connectives_sttfa.sttfa_False => t))" "nat_sttfa.le(n)(m)"
%|- (sttfa-lemma "connectives_sttfa.falsity")))))
%|- (sttfa-conv "((LAMBDA(sttfa___:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(sttfa___)) => nat_sttfa.le(n)(m)))(nat_sttfa.sttfa_O) => ((FORALL(n0:nat_sttfa.sttfa_nat):(LAMBDA(sttfa___:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(sttfa___)) => nat_sttfa.le(n)(m)))(nat_sttfa.sttfa_S(n0))) => (FORALL(z:nat_sttfa.sttfa_nat):(LAMBDA(sttfa___:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(sttfa___)) => nat_sttfa.le(n)(m)))(z))))" () ()
%|- (sttfa-forall-e "(FORALL(return:[nat_sttfa.sttfa_nat -> bool]):(return(nat_sttfa.sttfa_O) => ((FORALL(n:nat_sttfa.sttfa_nat):return(nat_sttfa.sttfa_S(n))) => (FORALL(z:nat_sttfa.sttfa_nat):return(z)))))" "(LAMBDA(sttfa___:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(sttfa___)) => nat_sttfa.le(n)(m)))"
%|- (sttfa-lemma "nat_sttfa.match_nat_prop"))))))))
%|- (sttfa-conv "((FORALL(q:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(q)) => nat_sttfa.le(n)(m))) => (primes_sttfa.sttfa_divides(n)(m) => nat_sttfa.le(n)(m)))" () ()
%|- (sttfa-forall-e "(FORALL(return_type:bool):((FORALL(q:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(q)) => return_type)) => (primes_sttfa.sttfa_divides(n)(m) => return_type)))" "nat_sttfa.le(n)(m)"
%|- (sttfa-conv "(FORALL(return_type:bool):((FORALL(q:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(q)) => return_type)) => (primes_sttfa.sttfa_divides(n)(m) => return_type)))" () ()
%|- (sttfa-forall-e "(FORALL(m0:nat_sttfa.sttfa_nat):(FORALL(return_type:bool):((FORALL(q:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m0)(nat_sttfa.times(n)(q)) => return_type)) => (primes_sttfa.sttfa_divides(n)(m0) => return_type))))" "m"
%|- (sttfa-conv "(FORALL(m0:nat_sttfa.sttfa_nat):(FORALL(return_type:bool):((FORALL(q:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m0)(nat_sttfa.times(n)(q)) => return_type)) => (primes_sttfa.sttfa_divides(n)(m0) => return_type))))" () ()
%|- (sttfa-forall-e "(FORALL(n:nat_sttfa.sttfa_nat):(FORALL(m:nat_sttfa.sttfa_nat):(FORALL(return_type:bool):((FORALL(q:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(q)) => return_type)) => (primes_sttfa.sttfa_divides(n)(m) => return_type)))))" "n"
%|- (sttfa-lemma "primes_sttfa.match_divides_prop")))))))))))))
%|- QED

dividesb  : [nat_sttfa.sttfa_nat -> [nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool]] = (LAMBDA(n:nat_sttfa.sttfa_nat):(LAMBDA(m:nat_sttfa.sttfa_nat):nat_sttfa.eqb(div_mod_sttfa.mod(m)(n))(nat_sttfa.sttfa_O)))

dividesb_true_to_divides  : LEMMA (FORALL(n:nat_sttfa.sttfa_nat):(FORALL(m:nat_sttfa.sttfa_nat):(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => primes_sttfa.sttfa_divides(n)(m))))

%|- dividesb_true_to_divides : PROOF
%|- (then@ (sttfa-forall-i "n")
%|- (then@ (sttfa-forall-i "m")
%|- (sttfa-impl-e "(connectives_sttfa.sttfa_Or(nat_sttfa.lt(nat_sttfa.sttfa_O)(n))(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(n)) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => primes_sttfa.sttfa_divides(n)(m)))" "connectives_sttfa.sttfa_Or(nat_sttfa.lt(nat_sttfa.sttfa_O)(n))(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(n))"
%|- (sttfa-impl-e "(nat_sttfa.le(nat_sttfa.sttfa_O)(n) => connectives_sttfa.sttfa_Or(nat_sttfa.lt(nat_sttfa.sttfa_O)(n))(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(n)))" "nat_sttfa.le(nat_sttfa.sttfa_O)(n)"
%|- (sttfa-conv "nat_sttfa.le(nat_sttfa.sttfa_O)(n)" () ()
%|- (sttfa-forall-e "(FORALL(n:nat_sttfa.sttfa_nat):nat_sttfa.le(nat_sttfa.sttfa_O)(n))" "n"
%|- (sttfa-lemma "nat_sttfa.le_O_n")))
%|- (sttfa-conv "(nat_sttfa.le(nat_sttfa.sttfa_O)(n) => connectives_sttfa.sttfa_Or(nat_sttfa.lt(nat_sttfa.sttfa_O)(n))(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(n)))" () ()
%|- (sttfa-forall-e "(FORALL(m0:nat_sttfa.sttfa_nat):(nat_sttfa.le(nat_sttfa.sttfa_O)(m0) => connectives_sttfa.sttfa_Or(nat_sttfa.lt(nat_sttfa.sttfa_O)(m0))(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(m0))))" "n"
%|- (sttfa-conv "(FORALL(m0:nat_sttfa.sttfa_nat):(nat_sttfa.le(nat_sttfa.sttfa_O)(m0) => connectives_sttfa.sttfa_Or(nat_sttfa.lt(nat_sttfa.sttfa_O)(m0))(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(m0))))" () ()
%|- (sttfa-forall-e "(FORALL(n:nat_sttfa.sttfa_nat):(FORALL(m:nat_sttfa.sttfa_nat):(nat_sttfa.le(n)(m) => connectives_sttfa.sttfa_Or(nat_sttfa.lt(n)(m))(logic_sttfa.eq[nat_sttfa.sttfa_nat](n)(m)))))" "nat_sttfa.sttfa_O"
%|- (sttfa-lemma "nat_sttfa.le_to_or_lt_eq"))))))
%|- (sttfa-impl-e "((logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(n) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => primes_sttfa.sttfa_divides(n)(m))) => (connectives_sttfa.sttfa_Or(nat_sttfa.lt(nat_sttfa.sttfa_O)(n))(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(n)) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => primes_sttfa.sttfa_divides(n)(m))))" "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(n) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => primes_sttfa.sttfa_divides(n)(m)))"
%|- (sttfa-impl-i "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(n)" "(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => primes_sttfa.sttfa_divides(n)(m))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(n) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => primes_sttfa.sttfa_divides(n)(m)))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(n)"
%|- (propax)
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(n) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => primes_sttfa.sttfa_divides(n)(m)))" () ()
%|- (sttfa-forall-e "(FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(y) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(y)(m))(bool_sttfa.sttfa_true) => primes_sttfa.sttfa_divides(y)(m))))" "n"
%|- (sttfa-impl-e "((logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb(nat_sttfa.match_nat_type[nat_sttfa.sttfa_nat](m)((LAMBDA(p:nat_sttfa.sttfa_nat):div_mod_sttfa.mod_aux(m)(m)(p)))(nat_sttfa.sttfa_O))(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_true) => primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(m)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(y) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(y)(m))(bool_sttfa.sttfa_true) => primes_sttfa.sttfa_divides(y)(m)))))" "(logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb(nat_sttfa.match_nat_type[nat_sttfa.sttfa_nat](m)((LAMBDA(p:nat_sttfa.sttfa_nat):div_mod_sttfa.mod_aux(m)(m)(p)))(nat_sttfa.sttfa_O))(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_true) => primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(m))"
%|- (sttfa-impl-e "((logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb(m)(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_true) => primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(m)) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb(nat_sttfa.match_nat_type[nat_sttfa.sttfa_nat](m)((LAMBDA(p:nat_sttfa.sttfa_nat):div_mod_sttfa.mod_aux(m)(m)(p)))(nat_sttfa.sttfa_O))(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_true) => primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(m)))" "(logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb(m)(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_true) => primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(m))"
%|- (sttfa-impl-i "logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb(m)(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_true)" "primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(m)"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O) => primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(m))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O)"
%|- (sttfa-impl-e "(logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb(m)(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_true) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb(m)(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_true)"
%|- (propax)
%|- (sttfa-conv "(logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb(m)(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_true) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O))" () ()
%|- (sttfa-forall-e "(FORALL(m0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb(m)(m0))(bool_sttfa.sttfa_true) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(m0)))" "nat_sttfa.sttfa_O"
%|- (sttfa-conv "(FORALL(m0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb(m)(m0))(bool_sttfa.sttfa_true) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(m0)))" () ()
%|- (sttfa-forall-e "(FORALL(n:nat_sttfa.sttfa_nat):(FORALL(m:nat_sttfa.sttfa_nat):(logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb(n)(m))(bool_sttfa.sttfa_true) => logic_sttfa.eq[nat_sttfa.sttfa_nat](n)(m))))" "m"
%|- (sttfa-lemma "nat_sttfa.eqb_true_to_eq"))))))
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O) => primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(m))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.sttfa_O) => primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(x)))" "m"
%|- (sttfa-impl-e "(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.sttfa_O) => primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(x))))" "primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O)"
%|- (sttfa-conv "primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O)" () ()
%|- (sttfa-forall-e "(FORALL(n:nat_sttfa.sttfa_nat):primes_sttfa.sttfa_divides(n)(n))" "nat_sttfa.sttfa_O"
%|- (sttfa-lemma "primes_sttfa.divides_n_n")))
%|- (sttfa-conv "((LAMBDA(x:nat_sttfa.sttfa_nat):primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(x))(nat_sttfa.sttfa_O) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.sttfa_O) => (LAMBDA(x0:nat_sttfa.sttfa_nat):primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(x0))(x))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.sttfa_O) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.sttfa_O) => P(x)))))" "(LAMBDA(x:nat_sttfa.sttfa_nat):primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(x))"
%|- (sttfa-conv "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.sttfa_O) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(nat_sttfa.sttfa_O) => P(x)))))" () ()
%|- (sttfa-forall-e "(FORALL(a:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(a) => (FORALL(x:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(a) => P(x))))))" "nat_sttfa.sttfa_O"
%|- (sttfa-lemma "logic_sttfa.eq_ind_r[nat_sttfa.sttfa_nat]"))))))))))
%|- (sttfa-conv "((LAMBDA(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb(y)(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_true) => primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(m)))(m) => (LAMBDA(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb(y)(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_true) => primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(m)))(nat_sttfa.match_nat_type[nat_sttfa.sttfa_nat](m)((LAMBDA(p:nat_sttfa.sttfa_nat):div_mod_sttfa.mod_aux(m)(m)(p)))(nat_sttfa.sttfa_O)))" () ()
%|- (sttfa-forall-e "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(m) => P(nat_sttfa.match_nat_type[nat_sttfa.sttfa_nat](m)((LAMBDA(p:nat_sttfa.sttfa_nat):div_mod_sttfa.mod_aux(m)(m)(p)))(nat_sttfa.sttfa_O))))" "(LAMBDA(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb(y)(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_true) => primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(m)))"
%|- (sttfa-conv "(LAMBDA(y:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(m) => P(y))))(nat_sttfa.match_nat_type[nat_sttfa.sttfa_nat](m)((LAMBDA(p:nat_sttfa.sttfa_nat):div_mod_sttfa.mod_aux(m)(m)(p)))(nat_sttfa.sttfa_O))" () ()
%|- (sttfa-conv "(LAMBDA(x:nat_sttfa.sttfa_nat):(LAMBDA(y:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(x) => P(y)))))(m)(nat_sttfa.match_nat_type[nat_sttfa.sttfa_nat](m)((LAMBDA(p:nat_sttfa.sttfa_nat):div_mod_sttfa.mod_aux(m)(m)(p)))(nat_sttfa.sttfa_O))" () ()
%|- (sttfa-conv "leibniz_sttfa.leibniz[nat_sttfa.sttfa_nat](m)(nat_sttfa.match_nat_type[nat_sttfa.sttfa_nat](m)((LAMBDA(p:nat_sttfa.sttfa_nat):div_mod_sttfa.mod_aux(m)(m)(p)))(nat_sttfa.sttfa_O))" ("leibniz_sttfa.leibniz") ()
%|- (sttfa-conv "leibniz_sttfa.leibniz[nat_sttfa.sttfa_nat](m)(nat_sttfa.match_nat_type[nat_sttfa.sttfa_nat](m)((LAMBDA(p:nat_sttfa.sttfa_nat):div_mod_sttfa.mod_aux(m)(m)(p)))(nat_sttfa.sttfa_O))" () ()
%|- (sttfa-forall-e "(FORALL(case_S:[nat_sttfa.sttfa_nat -> nat_sttfa.sttfa_nat]):leibniz_sttfa.leibniz[nat_sttfa.sttfa_nat](m)(nat_sttfa.match_nat_type[nat_sttfa.sttfa_nat](m)(case_S)(nat_sttfa.sttfa_O)))" "(LAMBDA(p:nat_sttfa.sttfa_nat):div_mod_sttfa.mod_aux(m)(m)(p))"
%|- (sttfa-conv "(FORALL(case_S:[nat_sttfa.sttfa_nat -> nat_sttfa.sttfa_nat]):leibniz_sttfa.leibniz[nat_sttfa.sttfa_nat](m)(nat_sttfa.match_nat_type[nat_sttfa.sttfa_nat](m)(case_S)(nat_sttfa.sttfa_O)))" () ()
%|- (sttfa-forall-e "(FORALL(case_O:nat_sttfa.sttfa_nat):(FORALL(case_S:[nat_sttfa.sttfa_nat -> nat_sttfa.sttfa_nat]):leibniz_sttfa.leibniz[nat_sttfa.sttfa_nat](case_O)(nat_sttfa.match_nat_type[nat_sttfa.sttfa_nat](case_O)(case_S)(nat_sttfa.sttfa_O))))" "m"
%|- (sttfa-lemma "nat_sttfa.sym_eq_match_nat_type_O[nat_sttfa.sttfa_nat]")))))))))))
%|- (sttfa-conv "((logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(nat_sttfa.sttfa_O)(m))(bool_sttfa.sttfa_true) => primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(m)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(y) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(y)(m))(bool_sttfa.sttfa_true) => primes_sttfa.sttfa_divides(y)(m)))))" ("primes_sttfa.dividesb" "div_mod_sttfa.mod") ()
%|- (sttfa-conv "((LAMBDA(x_1:nat_sttfa.sttfa_nat):(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(x_1)(m))(bool_sttfa.sttfa_true) => primes_sttfa.sttfa_divides(x_1)(m)))(nat_sttfa.sttfa_O) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(y) => (LAMBDA(x_1:nat_sttfa.sttfa_nat):(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(x_1)(m))(bool_sttfa.sttfa_true) => primes_sttfa.sttfa_divides(x_1)(m)))(y))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.sttfa_O) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(y) => P(y)))))" "(LAMBDA(x_1:nat_sttfa.sttfa_nat):(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(x_1)(m))(bool_sttfa.sttfa_true) => primes_sttfa.sttfa_divides(x_1)(m)))"
%|- (sttfa-conv "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.sttfa_O) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(y) => P(y)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(x) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(y) => P(y))))))" "nat_sttfa.sttfa_O"
%|- (sttfa-lemma "logic_sttfa.eq_ind[nat_sttfa.sttfa_nat]")))))))))))
%|- (sttfa-impl-e "((nat_sttfa.lt(nat_sttfa.sttfa_O)(n) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => primes_sttfa.sttfa_divides(n)(m))) => ((logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(n) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => primes_sttfa.sttfa_divides(n)(m))) => (connectives_sttfa.sttfa_Or(nat_sttfa.lt(nat_sttfa.sttfa_O)(n))(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(n)) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => primes_sttfa.sttfa_divides(n)(m)))))" "(nat_sttfa.lt(nat_sttfa.sttfa_O)(n) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => primes_sttfa.sttfa_divides(n)(m)))"
%|- (sttfa-impl-i "nat_sttfa.lt(nat_sttfa.sttfa_O)(n)" "(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => primes_sttfa.sttfa_divides(n)(m))"
%|- (sttfa-impl-i "logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true)" "primes_sttfa.sttfa_divides(n)(m)"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m)(n))(nat_sttfa.sttfa_O) => primes_sttfa.sttfa_divides(n)(m))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m)(n))(nat_sttfa.sttfa_O)"
%|- (sttfa-impl-e "(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m)(n))(nat_sttfa.sttfa_O))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true)"
%|- (propax)
%|- (sttfa-conv "(logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb(div_mod_sttfa.mod(m)(n))(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_true) => logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m)(n))(nat_sttfa.sttfa_O))" () ("primes_sttfa.dividesb")
%|- (sttfa-conv "(logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb(div_mod_sttfa.mod(m)(n))(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_true) => logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m)(n))(nat_sttfa.sttfa_O))" () ()
%|- (sttfa-forall-e "(FORALL(m0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb(div_mod_sttfa.mod(m)(n))(m0))(bool_sttfa.sttfa_true) => logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m)(n))(m0)))" "nat_sttfa.sttfa_O"
%|- (sttfa-conv "(FORALL(m0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb(div_mod_sttfa.mod(m)(n))(m0))(bool_sttfa.sttfa_true) => logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m)(n))(m0)))" () ()
%|- (sttfa-forall-e "(FORALL(n:nat_sttfa.sttfa_nat):(FORALL(m:nat_sttfa.sttfa_nat):(logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb(n)(m))(bool_sttfa.sttfa_true) => logic_sttfa.eq[nat_sttfa.sttfa_nat](n)(m))))" "div_mod_sttfa.mod(m)(n)"
%|- (sttfa-lemma "nat_sttfa.eqb_true_to_eq")))))))
%|- (sttfa-impl-e "(nat_sttfa.lt(nat_sttfa.sttfa_O)(n) => (logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m)(n))(nat_sttfa.sttfa_O) => primes_sttfa.sttfa_divides(n)(m)))" "nat_sttfa.lt(nat_sttfa.sttfa_O)(n)"
%|- (propax)
%|- (sttfa-conv "(nat_sttfa.lt(nat_sttfa.sttfa_O)(n) => (logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m)(n))(nat_sttfa.sttfa_O) => primes_sttfa.sttfa_divides(n)(m)))" () ()
%|- (sttfa-forall-e "(FORALL(m0:nat_sttfa.sttfa_nat):(nat_sttfa.lt(nat_sttfa.sttfa_O)(n) => (logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m0)(n))(nat_sttfa.sttfa_O) => primes_sttfa.sttfa_divides(n)(m0))))" "m"
%|- (sttfa-conv "(FORALL(m0:nat_sttfa.sttfa_nat):(nat_sttfa.lt(nat_sttfa.sttfa_O)(n) => (logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m0)(n))(nat_sttfa.sttfa_O) => primes_sttfa.sttfa_divides(n)(m0))))" () ()
%|- (sttfa-forall-e "(FORALL(n:nat_sttfa.sttfa_nat):(FORALL(m:nat_sttfa.sttfa_nat):(nat_sttfa.lt(nat_sttfa.sttfa_O)(n) => (logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m)(n))(nat_sttfa.sttfa_O) => primes_sttfa.sttfa_divides(n)(m)))))" "n"
%|- (sttfa-lemma "primes_sttfa.mod_O_to_divides")))))))))
%|- (sttfa-conv "((nat_sttfa.lt(nat_sttfa.sttfa_O)(n) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => primes_sttfa.sttfa_divides(n)(m))) => ((logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(n) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => primes_sttfa.sttfa_divides(n)(m))) => (connectives_sttfa.sttfa_Or(nat_sttfa.lt(nat_sttfa.sttfa_O)(n))(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(n)) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => primes_sttfa.sttfa_divides(n)(m)))))" () ()
%|- (sttfa-forall-e "(FORALL(return:bool):((nat_sttfa.lt(nat_sttfa.sttfa_O)(n) => return) => ((logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(n) => return) => (connectives_sttfa.sttfa_Or(nat_sttfa.lt(nat_sttfa.sttfa_O)(n))(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(n)) => return))))" "(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => primes_sttfa.sttfa_divides(n)(m))"
%|- (sttfa-conv "(FORALL(return:bool):((nat_sttfa.lt(nat_sttfa.sttfa_O)(n) => return) => ((logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(n) => return) => (connectives_sttfa.sttfa_Or(nat_sttfa.lt(nat_sttfa.sttfa_O)(n))(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(n)) => return))))" () ()
%|- (sttfa-forall-e "(FORALL(B:bool):(FORALL(return:bool):((nat_sttfa.lt(nat_sttfa.sttfa_O)(n) => return) => ((B => return) => (connectives_sttfa.sttfa_Or(nat_sttfa.lt(nat_sttfa.sttfa_O)(n))(B) => return)))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(n)"
%|- (sttfa-conv "(FORALL(B:bool):(FORALL(return:bool):((nat_sttfa.lt(nat_sttfa.sttfa_O)(n) => return) => ((B => return) => (connectives_sttfa.sttfa_Or(nat_sttfa.lt(nat_sttfa.sttfa_O)(n))(B) => return)))))" () ()
%|- (sttfa-forall-e "(FORALL(A:bool):(FORALL(B:bool):(FORALL(return:bool):((A => return) => ((B => return) => (connectives_sttfa.sttfa_Or(A)(B) => return))))))" "nat_sttfa.lt(nat_sttfa.sttfa_O)(n)"
%|- (sttfa-lemma "connectives_sttfa.match_Or_prop"))))))))))))
%|- QED

dividesb_false_to_not_divides  : LEMMA (FORALL(n:nat_sttfa.sttfa_nat):(FORALL(m:nat_sttfa.sttfa_nat):(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m)))))

%|- dividesb_false_to_not_divides : PROOF
%|- (then@ (sttfa-forall-i "n")
%|- (then@ (sttfa-forall-i "m")
%|- (sttfa-impl-e "(connectives_sttfa.sttfa_Or(nat_sttfa.lt(nat_sttfa.sttfa_O)(n))(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(n)) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m))))" "connectives_sttfa.sttfa_Or(nat_sttfa.lt(nat_sttfa.sttfa_O)(n))(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(n))"
%|- (sttfa-impl-e "(nat_sttfa.le(nat_sttfa.sttfa_O)(n) => connectives_sttfa.sttfa_Or(nat_sttfa.lt(nat_sttfa.sttfa_O)(n))(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(n)))" "nat_sttfa.le(nat_sttfa.sttfa_O)(n)"
%|- (sttfa-conv "nat_sttfa.le(nat_sttfa.sttfa_O)(n)" () ()
%|- (sttfa-forall-e "(FORALL(n:nat_sttfa.sttfa_nat):nat_sttfa.le(nat_sttfa.sttfa_O)(n))" "n"
%|- (sttfa-lemma "nat_sttfa.le_O_n")))
%|- (sttfa-conv "(nat_sttfa.le(nat_sttfa.sttfa_O)(n) => connectives_sttfa.sttfa_Or(nat_sttfa.lt(nat_sttfa.sttfa_O)(n))(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(n)))" () ()
%|- (sttfa-forall-e "(FORALL(m0:nat_sttfa.sttfa_nat):(nat_sttfa.le(nat_sttfa.sttfa_O)(m0) => connectives_sttfa.sttfa_Or(nat_sttfa.lt(nat_sttfa.sttfa_O)(m0))(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(m0))))" "n"
%|- (sttfa-conv "(FORALL(m0:nat_sttfa.sttfa_nat):(nat_sttfa.le(nat_sttfa.sttfa_O)(m0) => connectives_sttfa.sttfa_Or(nat_sttfa.lt(nat_sttfa.sttfa_O)(m0))(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(m0))))" () ()
%|- (sttfa-forall-e "(FORALL(n:nat_sttfa.sttfa_nat):(FORALL(m:nat_sttfa.sttfa_nat):(nat_sttfa.le(n)(m) => connectives_sttfa.sttfa_Or(nat_sttfa.lt(n)(m))(logic_sttfa.eq[nat_sttfa.sttfa_nat](n)(m)))))" "nat_sttfa.sttfa_O"
%|- (sttfa-lemma "nat_sttfa.le_to_or_lt_eq"))))))
%|- (sttfa-impl-e "((logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(n) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m)))) => (connectives_sttfa.sttfa_Or(nat_sttfa.lt(nat_sttfa.sttfa_O)(n))(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(n)) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m)))))" "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(n) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m))))"
%|- (sttfa-impl-i "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(n)" "(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m)))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(n) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(n)"
%|- (propax)
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(n) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m))))" () ()
%|- (sttfa-forall-e "(FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(y) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(y)(m))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(y)(m)))))" "n"
%|- (sttfa-impl-e "((logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb(nat_sttfa.match_nat_type[nat_sttfa.sttfa_nat](m)((LAMBDA(p:nat_sttfa.sttfa_nat):div_mod_sttfa.mod_aux(m)(m)(p)))(nat_sttfa.sttfa_O))(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(m))) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(y) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(y)(m))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(y)(m))))))" "(logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb(nat_sttfa.match_nat_type[nat_sttfa.sttfa_nat](m)((LAMBDA(p:nat_sttfa.sttfa_nat):div_mod_sttfa.mod_aux(m)(m)(p)))(nat_sttfa.sttfa_O))(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(m)))"
%|- (sttfa-impl-e "((logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb(m)(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(m))) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb(nat_sttfa.match_nat_type[nat_sttfa.sttfa_nat](m)((LAMBDA(p:nat_sttfa.sttfa_nat):div_mod_sttfa.mod_aux(m)(m)(p)))(nat_sttfa.sttfa_O))(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(m))))" "(logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb(m)(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(m)))"
%|- (sttfa-impl-e "((FORALL(m0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_S(m0)) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb(nat_sttfa.sttfa_S(m0))(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_S(m0)))))) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb(m)(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(m))))" "(FORALL(a:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_S(a)) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb(nat_sttfa.sttfa_S(a))(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_S(a))))))"
%|- (then@ (sttfa-forall-i "a")
%|- (sttfa-impl-i "logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_S(a))" "(logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb(nat_sttfa.sttfa_S(a))(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_S(a))))"
%|- (sttfa-impl-i "logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb(nat_sttfa.sttfa_S(a))(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_false)" "connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_S(a)))"
%|- (sttfa-impl-e "((primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_S(a)) => connectives_sttfa.sttfa_False) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_S(a))))" "(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_S(a)) => connectives_sttfa.sttfa_False)"
%|- (sttfa-impl-i "primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_S(a))" "connectives_sttfa.sttfa_False"
%|- (sttfa-impl-e "(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_S(a)) => connectives_sttfa.sttfa_False)" "primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_S(a))"
%|- (propax)
%|- (sttfa-impl-e "((FORALL(q:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_S(a))(nat_sttfa.times(nat_sttfa.sttfa_O)(q)) => connectives_sttfa.sttfa_False)) => (primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_S(a)) => connectives_sttfa.sttfa_False))" "(FORALL(q:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_S(a))(nat_sttfa.times(nat_sttfa.sttfa_O)(q)) => connectives_sttfa.sttfa_False))"
%|- (then@ (sttfa-forall-i "q")
%|- (sttfa-impl-i "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_S(a))(nat_sttfa.times(nat_sttfa.sttfa_O)(q))" "connectives_sttfa.sttfa_False"
%|- (sttfa-impl-e "(connectives_sttfa.sttfa_Not(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.sttfa_S(a))) => connectives_sttfa.sttfa_False)" "connectives_sttfa.sttfa_Not(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.sttfa_S(a)))"
%|- (sttfa-conv "connectives_sttfa.sttfa_Not(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.sttfa_S(a)))" () ()
%|- (sttfa-forall-e "(FORALL(n:nat_sttfa.sttfa_nat):connectives_sttfa.sttfa_Not(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.sttfa_S(n))))" "a"
%|- (sttfa-lemma "nat_sttfa.not_eq_O_S")))
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.sttfa_S(a)) => (connectives_sttfa.sttfa_Not(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.sttfa_S(a))) => connectives_sttfa.sttfa_False))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.sttfa_S(a))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(n) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.sttfa_S(a)))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(n)"
%|- (propax)
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(n) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.sttfa_S(a)))" () ()
%|- (sttfa-forall-e "(FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(n) => logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.sttfa_S(a))))" "nat_sttfa.sttfa_O"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](n)(nat_sttfa.sttfa_S(a)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(n) => logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.sttfa_S(a)))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](n)(nat_sttfa.sttfa_S(a))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_S(a))(n) => logic_sttfa.eq[nat_sttfa.sttfa_nat](n)(nat_sttfa.sttfa_S(a)))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_S(a))(n)"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(n) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_S(a))(n))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(n)"
%|- (propax)
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(n) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_S(a))(n))" () ()
%|- (sttfa-forall-e "(FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(y) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_S(a))(y)))" "n"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_S(a))(nat_sttfa.sttfa_O) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(y) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_S(a))(y))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_S(a))(nat_sttfa.sttfa_O)"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.times(q)(nat_sttfa.sttfa_O)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_S(a))(nat_sttfa.sttfa_O))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.times(q)(nat_sttfa.sttfa_O))"
%|- (sttfa-conv "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.times(q)(nat_sttfa.sttfa_O))" () ()
%|- (sttfa-forall-e "(FORALL(n:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.times(n)(nat_sttfa.sttfa_O)))" "q"
%|- (sttfa-lemma "nat_sttfa.times_n_O")))
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.times(q)(nat_sttfa.sttfa_O)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_S(a))(nat_sttfa.sttfa_O))" () ()
%|- (sttfa-forall-e "(FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.times(q)(nat_sttfa.sttfa_O)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_S(a))(y)))" "nat_sttfa.sttfa_O"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_S(a))(nat_sttfa.times(q)(nat_sttfa.sttfa_O)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.times(q)(nat_sttfa.sttfa_O)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_S(a))(y))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_S(a))(nat_sttfa.times(q)(nat_sttfa.sttfa_O))"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(nat_sttfa.sttfa_O)(q))(nat_sttfa.times(q)(nat_sttfa.sttfa_O)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_S(a))(nat_sttfa.times(q)(nat_sttfa.sttfa_O)))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(nat_sttfa.sttfa_O)(q))(nat_sttfa.times(q)(nat_sttfa.sttfa_O))"
%|- (sttfa-conv "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(nat_sttfa.sttfa_O)(q))(nat_sttfa.times(q)(nat_sttfa.sttfa_O))" () ()
%|- (sttfa-forall-e "(FORALL(y:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(nat_sttfa.sttfa_O)(y))(nat_sttfa.times(y)(nat_sttfa.sttfa_O)))" "q"
%|- (sttfa-conv "(FORALL(y:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(nat_sttfa.sttfa_O)(y))(nat_sttfa.times(y)(nat_sttfa.sttfa_O)))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(y:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(x)(y))(nat_sttfa.times(y)(x))))" "nat_sttfa.sttfa_O"
%|- (sttfa-conv "(LAMBDA(f:[nat_sttfa.sttfa_nat -> [nat_sttfa.sttfa_nat -> nat_sttfa.sttfa_nat]]):(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(y:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](f(x)(y))(f(y)(x)))))(nat_sttfa.times)" () ()
%|- (sttfa-conv "relations_sttfa.commutative[nat_sttfa.sttfa_nat](nat_sttfa.times)" ("relations_sttfa.commutative") ()
%|- (sttfa-lemma "nat_sttfa.commutative_times")))))))
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(nat_sttfa.sttfa_O)(q))(nat_sttfa.times(q)(nat_sttfa.sttfa_O)) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_S(a))(nat_sttfa.times(q)(nat_sttfa.sttfa_O)))" () ()
%|- (sttfa-forall-e "(FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(nat_sttfa.sttfa_O)(q))(y) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_S(a))(y)))" "nat_sttfa.times(q)(nat_sttfa.sttfa_O)"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_S(a))(nat_sttfa.times(nat_sttfa.sttfa_O)(q)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(nat_sttfa.sttfa_O)(q))(y) => logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_S(a))(y))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_S(a))(nat_sttfa.times(nat_sttfa.sttfa_O)(q))"
%|- (propax)
%|- (sttfa-conv "((LAMBDA(sttfa___1:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_S(a))(sttfa___1))(nat_sttfa.times(nat_sttfa.sttfa_O)(q)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(nat_sttfa.sttfa_O)(q))(y) => (LAMBDA(sttfa___1:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_S(a))(sttfa___1))(y))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.times(nat_sttfa.sttfa_O)(q)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(nat_sttfa.sttfa_O)(q))(y) => P(y)))))" "(LAMBDA(sttfa___1:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_S(a))(sttfa___1))"
%|- (sttfa-conv "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.times(nat_sttfa.sttfa_O)(q)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.times(nat_sttfa.sttfa_O)(q))(y) => P(y)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(x) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(y) => P(y))))))" "nat_sttfa.times(nat_sttfa.sttfa_O)(q)"
%|- (sttfa-lemma "logic_sttfa.rewrite_l[nat_sttfa.sttfa_nat]")))))))))
%|- (sttfa-conv "((LAMBDA(sttfa___1:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_S(a))(sttfa___1))(nat_sttfa.times(q)(nat_sttfa.sttfa_O)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.times(q)(nat_sttfa.sttfa_O)) => (LAMBDA(sttfa___1:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_S(a))(sttfa___1))(y))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.times(q)(nat_sttfa.sttfa_O)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.times(q)(nat_sttfa.sttfa_O)) => P(y)))))" "(LAMBDA(sttfa___1:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_S(a))(sttfa___1))"
%|- (sttfa-conv "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.times(q)(nat_sttfa.sttfa_O)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.times(q)(nat_sttfa.sttfa_O)) => P(y)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(x) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(x) => P(y))))))" "nat_sttfa.times(q)(nat_sttfa.sttfa_O)"
%|- (sttfa-lemma "logic_sttfa.rewrite_r[nat_sttfa.sttfa_nat]")))))))))
%|- (sttfa-conv "((LAMBDA(sttfa___1:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_S(a))(sttfa___1))(nat_sttfa.sttfa_O) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(y) => (LAMBDA(sttfa___1:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_S(a))(sttfa___1))(y))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.sttfa_O) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(y) => P(y)))))" "(LAMBDA(sttfa___1:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_S(a))(sttfa___1))"
%|- (sttfa-conv "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.sttfa_O) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(y) => P(y)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(x) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(y) => P(y))))))" "nat_sttfa.sttfa_O"
%|- (sttfa-lemma "logic_sttfa.rewrite_l[nat_sttfa.sttfa_nat]")))))))))
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_S(a))(n) => logic_sttfa.eq[nat_sttfa.sttfa_nat](n)(nat_sttfa.sttfa_S(a)))" () ()
%|- (sttfa-forall-e "(FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_S(a))(y) => logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.sttfa_S(a))))" "n"
%|- (sttfa-impl-e "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_S(a))(nat_sttfa.sttfa_S(a)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_S(a))(y) => logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(nat_sttfa.sttfa_S(a)))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_S(a))(nat_sttfa.sttfa_S(a))"
%|- (sttfa-conv "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_S(a))(nat_sttfa.sttfa_S(a))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(x))" "nat_sttfa.sttfa_S(a)"
%|- (sttfa-lemma "logic_sttfa.refl[nat_sttfa.sttfa_nat]")))
%|- (sttfa-conv "((LAMBDA(sttfa___1:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](sttfa___1)(nat_sttfa.sttfa_S(a)))(nat_sttfa.sttfa_S(a)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_S(a))(y) => (LAMBDA(sttfa___1:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](sttfa___1)(nat_sttfa.sttfa_S(a)))(y))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.sttfa_S(a)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_S(a))(y) => P(y)))))" "(LAMBDA(sttfa___1:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](sttfa___1)(nat_sttfa.sttfa_S(a)))"
%|- (sttfa-conv "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.sttfa_S(a)) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_S(a))(y) => P(y)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(x) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(y) => P(y))))))" "nat_sttfa.sttfa_S(a)"
%|- (sttfa-lemma "logic_sttfa.rewrite_l[nat_sttfa.sttfa_nat]")))))))))
%|- (sttfa-conv "((LAMBDA(sttfa___1:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](sttfa___1)(nat_sttfa.sttfa_S(a)))(n) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(n) => (LAMBDA(sttfa___1:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](sttfa___1)(nat_sttfa.sttfa_S(a)))(y))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(n) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(n) => P(y)))))" "(LAMBDA(sttfa___1:nat_sttfa.sttfa_nat):logic_sttfa.eq[nat_sttfa.sttfa_nat](sttfa___1)(nat_sttfa.sttfa_S(a)))"
%|- (sttfa-conv "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(n) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(n) => P(y)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(x) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](y)(x) => P(y))))))" "n"
%|- (sttfa-lemma "logic_sttfa.rewrite_r[nat_sttfa.sttfa_nat]")))))))))
%|- (sttfa-conv "(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.sttfa_S(a)) => (connectives_sttfa.sttfa_Not(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.sttfa_S(a))) => connectives_sttfa.sttfa_False))" () ()
%|- (sttfa-forall-e "(FORALL(A:bool):(A => (connectives_sttfa.sttfa_Not(A) => connectives_sttfa.sttfa_False)))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(nat_sttfa.sttfa_S(a))"
%|- (sttfa-lemma "logic_sttfa.absurd")))))))
%|- (sttfa-conv "((FORALL(q:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_S(a))(nat_sttfa.times(nat_sttfa.sttfa_O)(q)) => connectives_sttfa.sttfa_False)) => (primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_S(a)) => connectives_sttfa.sttfa_False))" () ()
%|- (sttfa-forall-e "(FORALL(return_type:bool):((FORALL(q:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_S(a))(nat_sttfa.times(nat_sttfa.sttfa_O)(q)) => return_type)) => (primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_S(a)) => return_type)))" "connectives_sttfa.sttfa_False"
%|- (sttfa-conv "(FORALL(return_type:bool):((FORALL(q:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_S(a))(nat_sttfa.times(nat_sttfa.sttfa_O)(q)) => return_type)) => (primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_S(a)) => return_type)))" () ()
%|- (sttfa-forall-e "(FORALL(m0:nat_sttfa.sttfa_nat):(FORALL(return_type:bool):((FORALL(q:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m0)(nat_sttfa.times(nat_sttfa.sttfa_O)(q)) => return_type)) => (primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(m0) => return_type))))" "nat_sttfa.sttfa_S(a)"
%|- (sttfa-conv "(FORALL(m0:nat_sttfa.sttfa_nat):(FORALL(return_type:bool):((FORALL(q:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m0)(nat_sttfa.times(nat_sttfa.sttfa_O)(q)) => return_type)) => (primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(m0) => return_type))))" () ()
%|- (sttfa-forall-e "(FORALL(n:nat_sttfa.sttfa_nat):(FORALL(m:nat_sttfa.sttfa_nat):(FORALL(return_type:bool):((FORALL(q:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.times(n)(q)) => return_type)) => (primes_sttfa.sttfa_divides(n)(m) => return_type)))))" "nat_sttfa.sttfa_O"
%|- (sttfa-lemma "primes_sttfa.match_divides_prop"))))))))))
%|- (sttfa-conv "((primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_S(a)) => connectives_sttfa.sttfa_False) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_S(a))))" () ()
%|- (sttfa-forall-e "(FORALL(A:bool):((A => connectives_sttfa.sttfa_False) => connectives_sttfa.sttfa_Not(A)))" "primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_S(a))"
%|- (sttfa-lemma "connectives_sttfa.nmk")))))))
%|- (sttfa-impl-e "((logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O)))) => ((FORALL(m0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_S(m0)) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb(nat_sttfa.sttfa_S(m0))(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_S(m0)))))) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb(m)(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(m)))))" "(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O))))"
%|- (sttfa-impl-e "((logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.filter_nat_type[[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool]](nat_sttfa.eqb_body)(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O)))) => (logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O)))))" "(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.filter_nat_type[[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool]](nat_sttfa.eqb_body)(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O))))"
%|- (sttfa-impl-e "((logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb_body(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O)))) => (logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.filter_nat_type[[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool]](nat_sttfa.eqb_body)(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O)))))" "(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb_body(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O))))"
%|- (sttfa-impl-e "((logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.match_nat_type[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)((LAMBDA(q:nat_sttfa.sttfa_nat):bool_sttfa.sttfa_false))(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O)))) => (logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb_body(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O)))))" "(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.match_nat_type[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)((LAMBDA(q:nat_sttfa.sttfa_nat):bool_sttfa.sttfa_false))(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O))))"
%|- (sttfa-impl-e "((logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O)))) => (logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.match_nat_type[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)((LAMBDA(q:nat_sttfa.sttfa_nat):bool_sttfa.sttfa_false))(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O)))))" "(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O))))"
%|- (sttfa-impl-i "logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O)" "(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O)))"
%|- (sttfa-impl-i "logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_false)" "connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O))"
%|- (sttfa-impl-e "(connectives_sttfa.sttfa_Not(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_false)) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O)))" "connectives_sttfa.sttfa_Not(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_false))"
%|- (sttfa-lemma "bool_sttfa.not_eq_true_false")
%|- (sttfa-impl-e "((primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O) => logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_false)) => (connectives_sttfa.sttfa_Not(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_false)) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O))))" "(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O) => logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_false))"
%|- (sttfa-impl-i "primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O)" "logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_false)"
%|- (sttfa-impl-e "(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_false) => logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_false))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_false)"
%|- (propax)
%|- (sttfa-conv "(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_false) => logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_false))" () ()
%|- (sttfa-forall-e "(FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(y) => logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(y)))" "bool_sttfa.sttfa_false"
%|- (sttfa-impl-e "(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_true) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(y) => logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(y))))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_true)"
%|- (sttfa-conv "logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_true)" () ()
%|- (sttfa-forall-e "(FORALL(x:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](x)(x))" "bool_sttfa.sttfa_true"
%|- (sttfa-lemma "logic_sttfa.refl[bool_sttfa.sttfa_bool]")))
%|- (sttfa-conv "((LAMBDA(sttfa___:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(sttfa___))(bool_sttfa.sttfa_true) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(y) => (LAMBDA(sttfa___:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(sttfa___))(y))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(bool_sttfa.sttfa_true) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(y) => P(y)))))" "(LAMBDA(sttfa___:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(sttfa___))"
%|- (sttfa-conv "(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(bool_sttfa.sttfa_true) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(y) => P(y)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:bool_sttfa.sttfa_bool):(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(x) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](x)(y) => P(y))))))" "bool_sttfa.sttfa_true"
%|- (sttfa-lemma "logic_sttfa.rewrite_l[bool_sttfa.sttfa_bool]"))))))))))
%|- (sttfa-conv "((primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O) => logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_false)) => (connectives_sttfa.sttfa_Not(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_false)) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O))))" () ()
%|- (sttfa-forall-e "(FORALL(B:bool):((primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O) => B) => (connectives_sttfa.sttfa_Not(B) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O)))))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_false)"
%|- (sttfa-conv "(FORALL(B:bool):((primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O) => B) => (connectives_sttfa.sttfa_Not(B) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O)))))" () ()
%|- (sttfa-forall-e "(FORALL(A:bool):(FORALL(B:bool):((A => B) => (connectives_sttfa.sttfa_Not(B) => connectives_sttfa.sttfa_Not(A)))))" "primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O)"
%|- (sttfa-lemma "logic_sttfa.not_to_not")))))))))
%|- (sttfa-conv "((LAMBDA(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O)))))(bool_sttfa.sttfa_true) => (LAMBDA(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O)))))(nat_sttfa.match_nat_type[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)((LAMBDA(q:nat_sttfa.sttfa_nat):bool_sttfa.sttfa_false))(nat_sttfa.sttfa_O)))" () ()
%|- (sttfa-forall-e "(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(bool_sttfa.sttfa_true) => P(nat_sttfa.match_nat_type[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)((LAMBDA(q:nat_sttfa.sttfa_nat):bool_sttfa.sttfa_false))(nat_sttfa.sttfa_O))))" "(LAMBDA(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O)))))"
%|- (sttfa-conv "(LAMBDA(y:bool_sttfa.sttfa_bool):(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(bool_sttfa.sttfa_true) => P(y))))(nat_sttfa.match_nat_type[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)((LAMBDA(q:nat_sttfa.sttfa_nat):bool_sttfa.sttfa_false))(nat_sttfa.sttfa_O))" () ()
%|- (sttfa-conv "(LAMBDA(x:bool_sttfa.sttfa_bool):(LAMBDA(y:bool_sttfa.sttfa_bool):(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(x) => P(y)))))(bool_sttfa.sttfa_true)(nat_sttfa.match_nat_type[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)((LAMBDA(q:nat_sttfa.sttfa_nat):bool_sttfa.sttfa_false))(nat_sttfa.sttfa_O))" () ()
%|- (sttfa-conv "leibniz_sttfa.leibniz[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(nat_sttfa.match_nat_type[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)((LAMBDA(q:nat_sttfa.sttfa_nat):bool_sttfa.sttfa_false))(nat_sttfa.sttfa_O))" ("leibniz_sttfa.leibniz") ()
%|- (sttfa-conv "leibniz_sttfa.leibniz[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(nat_sttfa.match_nat_type[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)((LAMBDA(q:nat_sttfa.sttfa_nat):bool_sttfa.sttfa_false))(nat_sttfa.sttfa_O))" () ()
%|- (sttfa-forall-e "(FORALL(case_S:[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool]):leibniz_sttfa.leibniz[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(nat_sttfa.match_nat_type[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(case_S)(nat_sttfa.sttfa_O)))" "(LAMBDA(q:nat_sttfa.sttfa_nat):bool_sttfa.sttfa_false)"
%|- (sttfa-conv "(FORALL(case_S:[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool]):leibniz_sttfa.leibniz[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(nat_sttfa.match_nat_type[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(case_S)(nat_sttfa.sttfa_O)))" () ()
%|- (sttfa-forall-e "(FORALL(case_O:bool_sttfa.sttfa_bool):(FORALL(case_S:[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool]):leibniz_sttfa.leibniz[bool_sttfa.sttfa_bool](case_O)(nat_sttfa.match_nat_type[bool_sttfa.sttfa_bool](case_O)(case_S)(nat_sttfa.sttfa_O))))" "bool_sttfa.sttfa_true"
%|- (sttfa-lemma "nat_sttfa.sym_eq_match_nat_type_O[bool_sttfa.sttfa_bool]")))))))))))
%|- (sttfa-conv "((LAMBDA(y:[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool]):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](y(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O)))))((LAMBDA(m0:nat_sttfa.sttfa_nat):nat_sttfa.match_nat_type[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)((LAMBDA(q:nat_sttfa.sttfa_nat):bool_sttfa.sttfa_false))(m0))) => (LAMBDA(y:[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool]):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](y(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O)))))(nat_sttfa.eqb_body(nat_sttfa.sttfa_O)))" () ()
%|- (sttfa-forall-e "(FORALL(P:[[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool] -> bool]):(P((LAMBDA(m0:nat_sttfa.sttfa_nat):nat_sttfa.match_nat_type[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)((LAMBDA(q:nat_sttfa.sttfa_nat):bool_sttfa.sttfa_false))(m0))) => P(nat_sttfa.eqb_body(nat_sttfa.sttfa_O))))" "(LAMBDA(y:[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool]):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](y(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O)))))"
%|- (sttfa-conv "(LAMBDA(y:[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool]):(FORALL(P:[[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool] -> bool]):(P((LAMBDA(m0:nat_sttfa.sttfa_nat):nat_sttfa.match_nat_type[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)((LAMBDA(q:nat_sttfa.sttfa_nat):bool_sttfa.sttfa_false))(m0))) => P(y))))(nat_sttfa.eqb_body(nat_sttfa.sttfa_O))" () ()
%|- (sttfa-conv "(LAMBDA(x:[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool]):(LAMBDA(y:[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool]):(FORALL(P:[[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool] -> bool]):(P(x) => P(y)))))((LAMBDA(m:nat_sttfa.sttfa_nat):nat_sttfa.match_nat_type[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)((LAMBDA(q:nat_sttfa.sttfa_nat):bool_sttfa.sttfa_false))(m)))(nat_sttfa.eqb_body(nat_sttfa.sttfa_O))" () ()
%|- (sttfa-conv "leibniz_sttfa.leibniz[[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool]]((LAMBDA(m:nat_sttfa.sttfa_nat):nat_sttfa.match_nat_type[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)((LAMBDA(q:nat_sttfa.sttfa_nat):bool_sttfa.sttfa_false))(m)))(nat_sttfa.eqb_body(nat_sttfa.sttfa_O))" ("leibniz_sttfa.leibniz") ()
%|- (sttfa-lemma "nat_sttfa.sym_eq_eqb_body_O")))))))
%|- (sttfa-conv "((LAMBDA(y:[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool]):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](y(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O)))))(nat_sttfa.eqb_body(nat_sttfa.sttfa_O)) => (LAMBDA(y:[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool]):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](y(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O)))))(nat_sttfa.filter_nat_type[[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool]](nat_sttfa.eqb_body)(nat_sttfa.sttfa_O)))" () ()
%|- (sttfa-forall-e "(FORALL(P:[[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool] -> bool]):(P(nat_sttfa.eqb_body(nat_sttfa.sttfa_O)) => P(nat_sttfa.filter_nat_type[[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool]](nat_sttfa.eqb_body)(nat_sttfa.sttfa_O))))" "(LAMBDA(y:[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool]):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](y(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O)))))"
%|- (sttfa-conv "(LAMBDA(y:[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool]):(FORALL(P:[[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool] -> bool]):(P(nat_sttfa.eqb_body(nat_sttfa.sttfa_O)) => P(y))))(nat_sttfa.filter_nat_type[[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool]](nat_sttfa.eqb_body)(nat_sttfa.sttfa_O))" () ()
%|- (sttfa-conv "(LAMBDA(x:[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool]):(LAMBDA(y:[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool]):(FORALL(P:[[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool] -> bool]):(P(x) => P(y)))))(nat_sttfa.eqb_body(nat_sttfa.sttfa_O))(nat_sttfa.filter_nat_type[[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool]](nat_sttfa.eqb_body)(nat_sttfa.sttfa_O))" () ()
%|- (sttfa-conv "leibniz_sttfa.leibniz[[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool]](nat_sttfa.eqb_body(nat_sttfa.sttfa_O))(nat_sttfa.filter_nat_type[[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool]](nat_sttfa.eqb_body)(nat_sttfa.sttfa_O))" ("leibniz_sttfa.leibniz") ()
%|- (sttfa-conv "leibniz_sttfa.leibniz[[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool]](nat_sttfa.eqb_body(nat_sttfa.sttfa_O))(nat_sttfa.filter_nat_type[[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool]](nat_sttfa.eqb_body)(nat_sttfa.sttfa_O))" () ()
%|- (sttfa-forall-e "(FORALL(return:[nat_sttfa.sttfa_nat -> [nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool]]):leibniz_sttfa.leibniz[[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool]](return(nat_sttfa.sttfa_O))(nat_sttfa.filter_nat_type[[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool]](return)(nat_sttfa.sttfa_O)))" "nat_sttfa.eqb_body"
%|- (sttfa-lemma "nat_sttfa.sym_eq_filter_nat_type_O[[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool]]")))))))))
%|- (sttfa-conv "((LAMBDA(y:[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool]):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](y(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O)))))(nat_sttfa.filter_nat_type[[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool]](nat_sttfa.eqb_body)(nat_sttfa.sttfa_O)) => (LAMBDA(y:[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool]):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](y(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O)))))(nat_sttfa.eqb(nat_sttfa.sttfa_O)))" () ()
%|- (sttfa-forall-e "(FORALL(P:[[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool] -> bool]):(P(nat_sttfa.filter_nat_type[[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool]](nat_sttfa.eqb_body)(nat_sttfa.sttfa_O)) => P(nat_sttfa.eqb(nat_sttfa.sttfa_O))))" "(LAMBDA(y:[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool]):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](y(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(nat_sttfa.sttfa_O)))))"
%|- (sttfa-conv "(LAMBDA(y:[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool]):(FORALL(P:[[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool] -> bool]):(P(nat_sttfa.filter_nat_type[[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool]](nat_sttfa.eqb_body)(nat_sttfa.sttfa_O)) => P(y))))(nat_sttfa.eqb(nat_sttfa.sttfa_O))" () ()
%|- (sttfa-conv "(LAMBDA(x:[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool]):(LAMBDA(y:[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool]):(FORALL(P:[[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool] -> bool]):(P(x) => P(y)))))(nat_sttfa.filter_nat_type[[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool]](nat_sttfa.eqb_body)(nat_sttfa.sttfa_O))(nat_sttfa.eqb(nat_sttfa.sttfa_O))" () ()
%|- (sttfa-conv "leibniz_sttfa.leibniz[[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool]](nat_sttfa.filter_nat_type[[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool]](nat_sttfa.eqb_body)(nat_sttfa.sttfa_O))(nat_sttfa.eqb(nat_sttfa.sttfa_O))" ("leibniz_sttfa.leibniz") ()
%|- (sttfa-conv "leibniz_sttfa.leibniz[[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool]](nat_sttfa.filter_nat_type[[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool]](nat_sttfa.eqb_body)(nat_sttfa.sttfa_O))(nat_sttfa.eqb(nat_sttfa.sttfa_O))" () ()
%|- (sttfa-forall-e "(FORALL(n:nat_sttfa.sttfa_nat):leibniz_sttfa.leibniz[[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool]](nat_sttfa.filter_nat_type[[nat_sttfa.sttfa_nat -> bool_sttfa.sttfa_bool]](nat_sttfa.eqb_body)(n))(nat_sttfa.eqb(n)))" "nat_sttfa.sttfa_O"
%|- (sttfa-lemma "nat_sttfa.sym_eq_eqb")))))))))
%|- (sttfa-conv "((logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O) => (LAMBDA(sttfa___:nat_sttfa.sttfa_nat):(logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb(sttfa___)(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(sttfa___))))(nat_sttfa.sttfa_O)) => ((FORALL(m0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_S(m0)) => (LAMBDA(sttfa___:nat_sttfa.sttfa_nat):(logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb(sttfa___)(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(sttfa___))))(nat_sttfa.sttfa_S(m0)))) => (LAMBDA(sttfa___:nat_sttfa.sttfa_nat):(logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb(sttfa___)(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(sttfa___))))(m)))" () ()
%|- (sttfa-forall-e "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):((logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O) => P(nat_sttfa.sttfa_O)) => ((FORALL(m0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_S(m0)) => P(nat_sttfa.sttfa_S(m0)))) => P(m))))" "(LAMBDA(sttfa___:nat_sttfa.sttfa_nat):(logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb(sttfa___)(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(sttfa___))))"
%|- (sttfa-conv "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):((logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_O) => P(nat_sttfa.sttfa_O)) => ((FORALL(m0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(nat_sttfa.sttfa_S(m0)) => P(nat_sttfa.sttfa_S(m0)))) => P(m))))" () ()
%|- (sttfa-forall-e "(FORALL(n:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):((logic_sttfa.eq[nat_sttfa.sttfa_nat](n)(nat_sttfa.sttfa_O) => P(nat_sttfa.sttfa_O)) => ((FORALL(m:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](n)(nat_sttfa.sttfa_S(m)) => P(nat_sttfa.sttfa_S(m)))) => P(n)))))" "m"
%|- (sttfa-lemma "nat_sttfa.nat_case")))))))
%|- (sttfa-conv "((LAMBDA(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb(y)(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(m))))(m) => (LAMBDA(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb(y)(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(m))))(nat_sttfa.match_nat_type[nat_sttfa.sttfa_nat](m)((LAMBDA(p:nat_sttfa.sttfa_nat):div_mod_sttfa.mod_aux(m)(m)(p)))(nat_sttfa.sttfa_O)))" () ()
%|- (sttfa-forall-e "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(m) => P(nat_sttfa.match_nat_type[nat_sttfa.sttfa_nat](m)((LAMBDA(p:nat_sttfa.sttfa_nat):div_mod_sttfa.mod_aux(m)(m)(p)))(nat_sttfa.sttfa_O))))" "(LAMBDA(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb(y)(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(m))))"
%|- (sttfa-conv "(LAMBDA(y:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(m) => P(y))))(nat_sttfa.match_nat_type[nat_sttfa.sttfa_nat](m)((LAMBDA(p:nat_sttfa.sttfa_nat):div_mod_sttfa.mod_aux(m)(m)(p)))(nat_sttfa.sttfa_O))" () ()
%|- (sttfa-conv "(LAMBDA(x:nat_sttfa.sttfa_nat):(LAMBDA(y:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(x) => P(y)))))(m)(nat_sttfa.match_nat_type[nat_sttfa.sttfa_nat](m)((LAMBDA(p:nat_sttfa.sttfa_nat):div_mod_sttfa.mod_aux(m)(m)(p)))(nat_sttfa.sttfa_O))" () ()
%|- (sttfa-conv "leibniz_sttfa.leibniz[nat_sttfa.sttfa_nat](m)(nat_sttfa.match_nat_type[nat_sttfa.sttfa_nat](m)((LAMBDA(p:nat_sttfa.sttfa_nat):div_mod_sttfa.mod_aux(m)(m)(p)))(nat_sttfa.sttfa_O))" ("leibniz_sttfa.leibniz") ()
%|- (sttfa-conv "leibniz_sttfa.leibniz[nat_sttfa.sttfa_nat](m)(nat_sttfa.match_nat_type[nat_sttfa.sttfa_nat](m)((LAMBDA(p:nat_sttfa.sttfa_nat):div_mod_sttfa.mod_aux(m)(m)(p)))(nat_sttfa.sttfa_O))" () ()
%|- (sttfa-forall-e "(FORALL(case_S:[nat_sttfa.sttfa_nat -> nat_sttfa.sttfa_nat]):leibniz_sttfa.leibniz[nat_sttfa.sttfa_nat](m)(nat_sttfa.match_nat_type[nat_sttfa.sttfa_nat](m)(case_S)(nat_sttfa.sttfa_O)))" "(LAMBDA(p:nat_sttfa.sttfa_nat):div_mod_sttfa.mod_aux(m)(m)(p))"
%|- (sttfa-conv "(FORALL(case_S:[nat_sttfa.sttfa_nat -> nat_sttfa.sttfa_nat]):leibniz_sttfa.leibniz[nat_sttfa.sttfa_nat](m)(nat_sttfa.match_nat_type[nat_sttfa.sttfa_nat](m)(case_S)(nat_sttfa.sttfa_O)))" () ()
%|- (sttfa-forall-e "(FORALL(case_O:nat_sttfa.sttfa_nat):(FORALL(case_S:[nat_sttfa.sttfa_nat -> nat_sttfa.sttfa_nat]):leibniz_sttfa.leibniz[nat_sttfa.sttfa_nat](case_O)(nat_sttfa.match_nat_type[nat_sttfa.sttfa_nat](case_O)(case_S)(nat_sttfa.sttfa_O))))" "m"
%|- (sttfa-lemma "nat_sttfa.sym_eq_match_nat_type_O[nat_sttfa.sttfa_nat]")))))))))))
%|- (sttfa-conv "((logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(nat_sttfa.sttfa_O)(m))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(nat_sttfa.sttfa_O)(m))) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(y) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(y)(m))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(y)(m))))))" ("primes_sttfa.dividesb" "div_mod_sttfa.mod") ()
%|- (sttfa-conv "((LAMBDA(x_1:nat_sttfa.sttfa_nat):(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(x_1)(m))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(x_1)(m))))(nat_sttfa.sttfa_O) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(y) => (LAMBDA(x_1:nat_sttfa.sttfa_nat):(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(x_1)(m))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(x_1)(m))))(y))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.sttfa_O) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(y) => P(y)))))" "(LAMBDA(x_1:nat_sttfa.sttfa_nat):(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(x_1)(m))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(x_1)(m))))"
%|- (sttfa-conv "(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(nat_sttfa.sttfa_O) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(y) => P(y)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:nat_sttfa.sttfa_nat):(FORALL(P:[nat_sttfa.sttfa_nat -> bool]):(P(x) => (FORALL(y:nat_sttfa.sttfa_nat):(logic_sttfa.eq[nat_sttfa.sttfa_nat](x)(y) => P(y))))))" "nat_sttfa.sttfa_O"
%|- (sttfa-lemma "logic_sttfa.eq_ind[nat_sttfa.sttfa_nat]")))))))))))
%|- (sttfa-impl-e "((nat_sttfa.lt(nat_sttfa.sttfa_O)(n) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m)))) => ((logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(n) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m)))) => (connectives_sttfa.sttfa_Or(nat_sttfa.lt(nat_sttfa.sttfa_O)(n))(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(n)) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m))))))" "(nat_sttfa.lt(nat_sttfa.sttfa_O)(n) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m))))"
%|- (sttfa-impl-i "nat_sttfa.lt(nat_sttfa.sttfa_O)(n)" "(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m)))"
%|- (sttfa-impl-i "logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false)" "connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m))"
%|- (sttfa-impl-e "(connectives_sttfa.sttfa_Not(logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m)(n))(nat_sttfa.sttfa_O)) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m)))" "connectives_sttfa.sttfa_Not(logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m)(n))(nat_sttfa.sttfa_O))"
%|- (sttfa-impl-e "(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m)(n))(nat_sttfa.sttfa_O)))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false)"
%|- (propax)
%|- (sttfa-conv "(logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb(div_mod_sttfa.mod(m)(n))(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m)(n))(nat_sttfa.sttfa_O)))" () ("primes_sttfa.dividesb")
%|- (sttfa-conv "(logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb(div_mod_sttfa.mod(m)(n))(nat_sttfa.sttfa_O))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m)(n))(nat_sttfa.sttfa_O)))" () ()
%|- (sttfa-forall-e "(FORALL(m0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb(div_mod_sttfa.mod(m)(n))(m0))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m)(n))(m0))))" "nat_sttfa.sttfa_O"
%|- (sttfa-conv "(FORALL(m0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb(div_mod_sttfa.mod(m)(n))(m0))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m)(n))(m0))))" () ()
%|- (sttfa-forall-e "(FORALL(n:nat_sttfa.sttfa_nat):(FORALL(m:nat_sttfa.sttfa_nat):(logic_sttfa.eq[bool_sttfa.sttfa_bool](nat_sttfa.eqb(n)(m))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(logic_sttfa.eq[nat_sttfa.sttfa_nat](n)(m)))))" "div_mod_sttfa.mod(m)(n)"
%|- (sttfa-lemma "nat_sttfa.eqb_false_to_not_eq")))))))
%|- (sttfa-impl-e "((primes_sttfa.sttfa_divides(n)(m) => logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m)(n))(nat_sttfa.sttfa_O)) => (connectives_sttfa.sttfa_Not(logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m)(n))(nat_sttfa.sttfa_O)) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m))))" "(primes_sttfa.sttfa_divides(n)(m) => logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m)(n))(nat_sttfa.sttfa_O))"
%|- (sttfa-impl-e "(nat_sttfa.lt(nat_sttfa.sttfa_O)(n) => (primes_sttfa.sttfa_divides(n)(m) => logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m)(n))(nat_sttfa.sttfa_O)))" "nat_sttfa.lt(nat_sttfa.sttfa_O)(n)"
%|- (propax)
%|- (sttfa-conv "(nat_sttfa.lt(nat_sttfa.sttfa_O)(n) => (primes_sttfa.sttfa_divides(n)(m) => logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m)(n))(nat_sttfa.sttfa_O)))" () ()
%|- (sttfa-forall-e "(FORALL(m0:nat_sttfa.sttfa_nat):(nat_sttfa.lt(nat_sttfa.sttfa_O)(n) => (primes_sttfa.sttfa_divides(n)(m0) => logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m0)(n))(nat_sttfa.sttfa_O))))" "m"
%|- (sttfa-conv "(FORALL(m0:nat_sttfa.sttfa_nat):(nat_sttfa.lt(nat_sttfa.sttfa_O)(n) => (primes_sttfa.sttfa_divides(n)(m0) => logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m0)(n))(nat_sttfa.sttfa_O))))" () ()
%|- (sttfa-forall-e "(FORALL(n:nat_sttfa.sttfa_nat):(FORALL(m:nat_sttfa.sttfa_nat):(nat_sttfa.lt(nat_sttfa.sttfa_O)(n) => (primes_sttfa.sttfa_divides(n)(m) => logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m)(n))(nat_sttfa.sttfa_O)))))" "n"
%|- (sttfa-lemma "primes_sttfa.divides_to_mod_O"))))))
%|- (sttfa-conv "((primes_sttfa.sttfa_divides(n)(m) => logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m)(n))(nat_sttfa.sttfa_O)) => (connectives_sttfa.sttfa_Not(logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m)(n))(nat_sttfa.sttfa_O)) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m))))" () ()
%|- (sttfa-forall-e "(FORALL(B:bool):((primes_sttfa.sttfa_divides(n)(m) => B) => (connectives_sttfa.sttfa_Not(B) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m)))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](div_mod_sttfa.mod(m)(n))(nat_sttfa.sttfa_O)"
%|- (sttfa-conv "(FORALL(B:bool):((primes_sttfa.sttfa_divides(n)(m) => B) => (connectives_sttfa.sttfa_Not(B) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m)))))" () ()
%|- (sttfa-forall-e "(FORALL(A:bool):(FORALL(B:bool):((A => B) => (connectives_sttfa.sttfa_Not(B) => connectives_sttfa.sttfa_Not(A)))))" "primes_sttfa.sttfa_divides(n)(m)"
%|- (sttfa-lemma "logic_sttfa.not_to_not")))))))))
%|- (sttfa-conv "((nat_sttfa.lt(nat_sttfa.sttfa_O)(n) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m)))) => ((logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(n) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m)))) => (connectives_sttfa.sttfa_Or(nat_sttfa.lt(nat_sttfa.sttfa_O)(n))(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(n)) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m))))))" () ()
%|- (sttfa-forall-e "(FORALL(return:bool):((nat_sttfa.lt(nat_sttfa.sttfa_O)(n) => return) => ((logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(n) => return) => (connectives_sttfa.sttfa_Or(nat_sttfa.lt(nat_sttfa.sttfa_O)(n))(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(n)) => return))))" "(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m)))"
%|- (sttfa-conv "(FORALL(return:bool):((nat_sttfa.lt(nat_sttfa.sttfa_O)(n) => return) => ((logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(n) => return) => (connectives_sttfa.sttfa_Or(nat_sttfa.lt(nat_sttfa.sttfa_O)(n))(logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(n)) => return))))" () ()
%|- (sttfa-forall-e "(FORALL(B:bool):(FORALL(return:bool):((nat_sttfa.lt(nat_sttfa.sttfa_O)(n) => return) => ((B => return) => (connectives_sttfa.sttfa_Or(nat_sttfa.lt(nat_sttfa.sttfa_O)(n))(B) => return)))))" "logic_sttfa.eq[nat_sttfa.sttfa_nat](nat_sttfa.sttfa_O)(n)"
%|- (sttfa-conv "(FORALL(B:bool):(FORALL(return:bool):((nat_sttfa.lt(nat_sttfa.sttfa_O)(n) => return) => ((B => return) => (connectives_sttfa.sttfa_Or(nat_sttfa.lt(nat_sttfa.sttfa_O)(n))(B) => return)))))" () ()
%|- (sttfa-forall-e "(FORALL(A:bool):(FORALL(B:bool):(FORALL(return:bool):((A => return) => ((B => return) => (connectives_sttfa.sttfa_Or(A)(B) => return))))))" "nat_sttfa.lt(nat_sttfa.sttfa_O)(n)"
%|- (sttfa-lemma "connectives_sttfa.match_Or_prop"))))))))))))
%|- QED

decidable_divides  : LEMMA (FORALL(n:nat_sttfa.sttfa_nat):(FORALL(m:nat_sttfa.sttfa_nat):logic_sttfa.decidable(primes_sttfa.sttfa_divides(n)(m))))

%|- decidable_divides : PROOF
%|- (then@ (sttfa-forall-i "n")
%|- (then@ (sttfa-forall-i "m")
%|- (sttfa-impl-e "(connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true))(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false)) => logic_sttfa.decidable(primes_sttfa.sttfa_divides(n)(m)))" "connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true))(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false))"
%|- (sttfa-conv "connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true))(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false))" () ()
%|- (sttfa-forall-e "(FORALL(b:bool_sttfa.sttfa_bool):connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](b)(bool_sttfa.sttfa_true))(logic_sttfa.eq[bool_sttfa.sttfa_bool](b)(bool_sttfa.sttfa_false)))" "primes_sttfa.dividesb(n)(m)"
%|- (sttfa-lemma "bool_sttfa.true_or_false")))
%|- (sttfa-impl-e "((logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Or(primes_sttfa.sttfa_divides(n)(m))(connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m)))) => (connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true))(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false)) => logic_sttfa.decidable(primes_sttfa.sttfa_divides(n)(m))))" "(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Or(primes_sttfa.sttfa_divides(n)(m))(connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m))))"
%|- (sttfa-impl-i "logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false)" "connectives_sttfa.sttfa_Or(primes_sttfa.sttfa_divides(n)(m))(connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m)))"
%|- (sttfa-impl-e "(connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m)) => connectives_sttfa.sttfa_Or(primes_sttfa.sttfa_divides(n)(m))(connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m))))" "connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m))"
%|- (sttfa-impl-e "(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m)))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false)"
%|- (sttfa-impl-e "(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false)"
%|- (propax)
%|- (sttfa-conv "(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false))" () ()
%|- (sttfa-forall-e "(FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_false) => logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_false)))" "primes_sttfa.dividesb(n)(m)"
%|- (sttfa-impl-e "(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_false) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_false) => logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_false))))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_false)"
%|- (sttfa-conv "logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_false)" () ()
%|- (sttfa-forall-e "(FORALL(x:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](x)(x))" "bool_sttfa.sttfa_false"
%|- (sttfa-lemma "logic_sttfa.refl[bool_sttfa.sttfa_bool]")))
%|- (sttfa-conv "((LAMBDA(sttfa___:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](sttfa___)(bool_sttfa.sttfa_false))(bool_sttfa.sttfa_false) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_false) => (LAMBDA(sttfa___:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](sttfa___)(bool_sttfa.sttfa_false))(y))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(bool_sttfa.sttfa_false) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_false) => P(y)))))" "(LAMBDA(sttfa___:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](sttfa___)(bool_sttfa.sttfa_false))"
%|- (sttfa-conv "(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(bool_sttfa.sttfa_false) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_false) => P(y)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:bool_sttfa.sttfa_bool):(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(x) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(x) => P(y))))))" "bool_sttfa.sttfa_false"
%|- (sttfa-lemma "logic_sttfa.rewrite_r[bool_sttfa.sttfa_bool]")))))))))
%|- (sttfa-conv "(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m)))" () ()
%|- (sttfa-forall-e "(FORALL(m0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m0))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m0))))" "m"
%|- (sttfa-conv "(FORALL(m0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m0))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m0))))" () ()
%|- (sttfa-forall-e "(FORALL(n:nat_sttfa.sttfa_nat):(FORALL(m:nat_sttfa.sttfa_nat):(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m)))))" "n"
%|- (sttfa-lemma "primes_sttfa.dividesb_false_to_not_divides"))))))
%|- (sttfa-conv "(connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m)) => connectives_sttfa.sttfa_Or(primes_sttfa.sttfa_divides(n)(m))(connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m))))" () ()
%|- (sttfa-forall-e "(FORALL(B:bool):(B => connectives_sttfa.sttfa_Or(primes_sttfa.sttfa_divides(n)(m))(B)))" "connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m))"
%|- (sttfa-conv "(FORALL(B:bool):(B => connectives_sttfa.sttfa_Or(primes_sttfa.sttfa_divides(n)(m))(B)))" () ()
%|- (sttfa-forall-e "(FORALL(A:bool):(FORALL(B:bool):(B => connectives_sttfa.sttfa_Or(A)(B))))" "primes_sttfa.sttfa_divides(n)(m)"
%|- (sttfa-lemma "connectives_sttfa.or_intror")))))))
%|- (sttfa-conv "((logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => logic_sttfa.decidable(primes_sttfa.sttfa_divides(n)(m))) => (connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true))(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false)) => logic_sttfa.decidable(primes_sttfa.sttfa_divides(n)(m))))" ("logic_sttfa.decidable") ()
%|- (sttfa-impl-e "((logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => connectives_sttfa.sttfa_Or(primes_sttfa.sttfa_divides(n)(m))(connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m)))) => ((logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => logic_sttfa.decidable(primes_sttfa.sttfa_divides(n)(m))) => (connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true))(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false)) => logic_sttfa.decidable(primes_sttfa.sttfa_divides(n)(m)))))" "(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => connectives_sttfa.sttfa_Or(primes_sttfa.sttfa_divides(n)(m))(connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m))))"
%|- (sttfa-impl-i "logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true)" "connectives_sttfa.sttfa_Or(primes_sttfa.sttfa_divides(n)(m))(connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m)))"
%|- (sttfa-impl-e "(primes_sttfa.sttfa_divides(n)(m) => connectives_sttfa.sttfa_Or(primes_sttfa.sttfa_divides(n)(m))(connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m))))" "primes_sttfa.sttfa_divides(n)(m)"
%|- (sttfa-impl-e "(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => primes_sttfa.sttfa_divides(n)(m))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true)"
%|- (sttfa-impl-e "(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true)"
%|- (propax)
%|- (sttfa-conv "(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true))" () ()
%|- (sttfa-forall-e "(FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_true)))" "primes_sttfa.dividesb(n)(m)"
%|- (sttfa-impl-e "(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_true) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_true))))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_true)"
%|- (sttfa-conv "logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_true)" () ()
%|- (sttfa-forall-e "(FORALL(x:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](x)(x))" "bool_sttfa.sttfa_true"
%|- (sttfa-lemma "logic_sttfa.refl[bool_sttfa.sttfa_bool]")))
%|- (sttfa-conv "((LAMBDA(sttfa___:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](sttfa___)(bool_sttfa.sttfa_true))(bool_sttfa.sttfa_true) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_true) => (LAMBDA(sttfa___:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](sttfa___)(bool_sttfa.sttfa_true))(y))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(bool_sttfa.sttfa_true) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_true) => P(y)))))" "(LAMBDA(sttfa___:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](sttfa___)(bool_sttfa.sttfa_true))"
%|- (sttfa-conv "(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(bool_sttfa.sttfa_true) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_true) => P(y)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:bool_sttfa.sttfa_bool):(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(x) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(x) => P(y))))))" "bool_sttfa.sttfa_true"
%|- (sttfa-lemma "logic_sttfa.rewrite_r[bool_sttfa.sttfa_bool]")))))))))
%|- (sttfa-conv "(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => primes_sttfa.sttfa_divides(n)(m))" () ()
%|- (sttfa-forall-e "(FORALL(m0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m0))(bool_sttfa.sttfa_true) => primes_sttfa.sttfa_divides(n)(m0)))" "m"
%|- (sttfa-conv "(FORALL(m0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m0))(bool_sttfa.sttfa_true) => primes_sttfa.sttfa_divides(n)(m0)))" () ()
%|- (sttfa-forall-e "(FORALL(n:nat_sttfa.sttfa_nat):(FORALL(m:nat_sttfa.sttfa_nat):(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => primes_sttfa.sttfa_divides(n)(m))))" "n"
%|- (sttfa-lemma "primes_sttfa.dividesb_true_to_divides"))))))
%|- (sttfa-conv "(primes_sttfa.sttfa_divides(n)(m) => connectives_sttfa.sttfa_Or(primes_sttfa.sttfa_divides(n)(m))(connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m))))" () ()
%|- (sttfa-forall-e "(FORALL(B:bool):(primes_sttfa.sttfa_divides(n)(m) => connectives_sttfa.sttfa_Or(primes_sttfa.sttfa_divides(n)(m))(B)))" "connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m))"
%|- (sttfa-conv "(FORALL(B:bool):(primes_sttfa.sttfa_divides(n)(m) => connectives_sttfa.sttfa_Or(primes_sttfa.sttfa_divides(n)(m))(B)))" () ()
%|- (sttfa-forall-e "(FORALL(A:bool):(FORALL(B:bool):(A => connectives_sttfa.sttfa_Or(A)(B))))" "primes_sttfa.sttfa_divides(n)(m)"
%|- (sttfa-lemma "connectives_sttfa.or_introl")))))))
%|- (sttfa-conv "((logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => logic_sttfa.decidable(primes_sttfa.sttfa_divides(n)(m))) => ((logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => logic_sttfa.decidable(primes_sttfa.sttfa_divides(n)(m))) => (connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true))(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false)) => logic_sttfa.decidable(primes_sttfa.sttfa_divides(n)(m)))))" ("logic_sttfa.decidable") ()
%|- (sttfa-conv "((logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => logic_sttfa.decidable(primes_sttfa.sttfa_divides(n)(m))) => ((logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => logic_sttfa.decidable(primes_sttfa.sttfa_divides(n)(m))) => (connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true))(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false)) => logic_sttfa.decidable(primes_sttfa.sttfa_divides(n)(m)))))" () ()
%|- (sttfa-forall-e "(FORALL(return:bool):((logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => return) => ((logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => return) => (connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true))(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false)) => return))))" "logic_sttfa.decidable(primes_sttfa.sttfa_divides(n)(m))"
%|- (sttfa-conv "(FORALL(return:bool):((logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => return) => ((logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => return) => (connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true))(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false)) => return))))" () ()
%|- (sttfa-forall-e "(FORALL(B:bool):(FORALL(return:bool):((logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => return) => ((B => return) => (connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true))(B) => return)))))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false)"
%|- (sttfa-conv "(FORALL(B:bool):(FORALL(return:bool):((logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => return) => ((B => return) => (connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true))(B) => return)))))" () ()
%|- (sttfa-forall-e "(FORALL(A:bool):(FORALL(B:bool):(FORALL(return:bool):((A => return) => ((B => return) => (connectives_sttfa.sttfa_Or(A)(B) => return))))))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true)"
%|- (sttfa-lemma "connectives_sttfa.match_Or_prop"))))))))))))))
%|- QED

divides_to_dividesb_true  : LEMMA (FORALL(n:nat_sttfa.sttfa_nat):(FORALL(m:nat_sttfa.sttfa_nat):(nat_sttfa.lt(nat_sttfa.sttfa_O)(n) => (primes_sttfa.sttfa_divides(n)(m) => logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true)))))

%|- divides_to_dividesb_true : PROOF
%|- (then@ (sttfa-forall-i "n")
%|- (then@ (sttfa-forall-i "m")
%|- (sttfa-impl-i "nat_sttfa.lt(nat_sttfa.sttfa_O)(n)" "(primes_sttfa.sttfa_divides(n)(m) => logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true))"
%|- (sttfa-impl-i "primes_sttfa.sttfa_divides(n)(m)" "logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true)"
%|- (sttfa-impl-e "(connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true))(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false)) => logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true))" "connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true))(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false))"
%|- (sttfa-conv "connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true))(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false))" () ()
%|- (sttfa-forall-e "(FORALL(b:bool_sttfa.sttfa_bool):connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](b)(bool_sttfa.sttfa_true))(logic_sttfa.eq[bool_sttfa.sttfa_bool](b)(bool_sttfa.sttfa_false)))" "primes_sttfa.dividesb(n)(m)"
%|- (sttfa-lemma "bool_sttfa.true_or_false")))
%|- (sttfa-impl-e "((logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true)) => (connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true))(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false)) => logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true)))" "(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true))"
%|- (sttfa-impl-i "logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false)" "logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true)"
%|- (sttfa-impl-e "(connectives_sttfa.sttfa_False => logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true))" "connectives_sttfa.sttfa_False"
%|- (sttfa-impl-e "(connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m)) => connectives_sttfa.sttfa_False)" "connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m))"
%|- (sttfa-impl-e "(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m)))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false)"
%|- (sttfa-impl-e "(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false)"
%|- (propax)
%|- (sttfa-conv "(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false))" () ()
%|- (sttfa-forall-e "(FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_false) => logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_false)))" "primes_sttfa.dividesb(n)(m)"
%|- (sttfa-impl-e "(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_false) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_false) => logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_false))))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_false)"
%|- (sttfa-conv "logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_false)" () ()
%|- (sttfa-forall-e "(FORALL(x:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](x)(x))" "bool_sttfa.sttfa_false"
%|- (sttfa-lemma "logic_sttfa.refl[bool_sttfa.sttfa_bool]")))
%|- (sttfa-conv "((LAMBDA(sttfa___:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](sttfa___)(bool_sttfa.sttfa_false))(bool_sttfa.sttfa_false) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_false) => (LAMBDA(sttfa___:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](sttfa___)(bool_sttfa.sttfa_false))(y))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(bool_sttfa.sttfa_false) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_false) => P(y)))))" "(LAMBDA(sttfa___:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](sttfa___)(bool_sttfa.sttfa_false))"
%|- (sttfa-conv "(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(bool_sttfa.sttfa_false) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_false) => P(y)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:bool_sttfa.sttfa_bool):(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(x) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(x) => P(y))))))" "bool_sttfa.sttfa_false"
%|- (sttfa-lemma "logic_sttfa.rewrite_r[bool_sttfa.sttfa_bool]")))))))))
%|- (sttfa-conv "(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m)))" () ()
%|- (sttfa-forall-e "(FORALL(m0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m0))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m0))))" "m"
%|- (sttfa-conv "(FORALL(m0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m0))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m0))))" () ()
%|- (sttfa-forall-e "(FORALL(n:nat_sttfa.sttfa_nat):(FORALL(m:nat_sttfa.sttfa_nat):(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m)))))" "n"
%|- (sttfa-lemma "primes_sttfa.dividesb_false_to_not_divides"))))))
%|- (sttfa-impl-e "(primes_sttfa.sttfa_divides(n)(m) => (connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m)) => connectives_sttfa.sttfa_False))" "primes_sttfa.sttfa_divides(n)(m)"
%|- (propax)
%|- (sttfa-conv "(primes_sttfa.sttfa_divides(n)(m) => (connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m)) => connectives_sttfa.sttfa_False))" () ()
%|- (sttfa-forall-e "(FORALL(A:bool):(A => (connectives_sttfa.sttfa_Not(A) => connectives_sttfa.sttfa_False)))" "primes_sttfa.sttfa_divides(n)(m)"
%|- (sttfa-lemma "logic_sttfa.absurd")))))
%|- (sttfa-conv "(connectives_sttfa.sttfa_False => logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true))" () ()
%|- (sttfa-forall-e "(FORALL(t:bool):(connectives_sttfa.sttfa_False => t))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true)"
%|- (sttfa-lemma "connectives_sttfa.falsity")))))
%|- (sttfa-impl-e "((logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true)) => ((logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true)) => (connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true))(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false)) => logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true))))" "(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true))"
%|- (sttfa-impl-i "logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true)" "logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true)"
%|- (sttfa-impl-e "(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true)"
%|- (propax)
%|- (sttfa-conv "(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true))" () ()
%|- (sttfa-forall-e "(FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_true)))" "primes_sttfa.dividesb(n)(m)"
%|- (sttfa-impl-e "(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_true) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_true))))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_true)"
%|- (sttfa-conv "logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_true)" () ()
%|- (sttfa-forall-e "(FORALL(x:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](x)(x))" "bool_sttfa.sttfa_true"
%|- (sttfa-lemma "logic_sttfa.refl[bool_sttfa.sttfa_bool]")))
%|- (sttfa-conv "((LAMBDA(sttfa___:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](sttfa___)(bool_sttfa.sttfa_true))(bool_sttfa.sttfa_true) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_true) => (LAMBDA(sttfa___:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](sttfa___)(bool_sttfa.sttfa_true))(y))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(bool_sttfa.sttfa_true) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_true) => P(y)))))" "(LAMBDA(sttfa___:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](sttfa___)(bool_sttfa.sttfa_true))"
%|- (sttfa-conv "(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(bool_sttfa.sttfa_true) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_true) => P(y)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:bool_sttfa.sttfa_bool):(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(x) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(x) => P(y))))))" "bool_sttfa.sttfa_true"
%|- (sttfa-lemma "logic_sttfa.rewrite_r[bool_sttfa.sttfa_bool]"))))))))))
%|- (sttfa-conv "((logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true)) => ((logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true)) => (connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true))(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false)) => logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true))))" () ()
%|- (sttfa-forall-e "(FORALL(return:bool):((logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => return) => ((logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => return) => (connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true))(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false)) => return))))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true)"
%|- (sttfa-conv "(FORALL(return:bool):((logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => return) => ((logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => return) => (connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true))(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false)) => return))))" () ()
%|- (sttfa-forall-e "(FORALL(B:bool):(FORALL(return:bool):((logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => return) => ((B => return) => (connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true))(B) => return)))))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false)"
%|- (sttfa-conv "(FORALL(B:bool):(FORALL(return:bool):((logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => return) => ((B => return) => (connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true))(B) => return)))))" () ()
%|- (sttfa-forall-e "(FORALL(A:bool):(FORALL(B:bool):(FORALL(return:bool):((A => return) => ((B => return) => (connectives_sttfa.sttfa_Or(A)(B) => return))))))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true)"
%|- (sttfa-lemma "connectives_sttfa.match_Or_prop"))))))))))))))
%|- QED

not_divides_to_dividesb_false  : LEMMA (FORALL(n:nat_sttfa.sttfa_nat):(FORALL(m:nat_sttfa.sttfa_nat):(nat_sttfa.lt(nat_sttfa.sttfa_O)(n) => (connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m)) => logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false)))))

%|- not_divides_to_dividesb_false : PROOF
%|- (then@ (sttfa-forall-i "n")
%|- (then@ (sttfa-forall-i "m")
%|- (sttfa-impl-i "nat_sttfa.lt(nat_sttfa.sttfa_O)(n)" "(connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m)) => logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false))"
%|- (sttfa-impl-e "(connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true))(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false)) => (connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m)) => logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false)))" "connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true))(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false))"
%|- (sttfa-conv "connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true))(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false))" () ()
%|- (sttfa-forall-e "(FORALL(b:bool_sttfa.sttfa_bool):connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](b)(bool_sttfa.sttfa_true))(logic_sttfa.eq[bool_sttfa.sttfa_bool](b)(bool_sttfa.sttfa_false)))" "primes_sttfa.dividesb(n)(m)"
%|- (sttfa-lemma "bool_sttfa.true_or_false")))
%|- (sttfa-impl-e "((logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => (connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m)) => logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false))) => (connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true))(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false)) => (connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m)) => logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false))))" "(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => (connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m)) => logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false)))"
%|- (sttfa-impl-i "logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false)" "(connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m)) => logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false))"
%|- (sttfa-impl-i "connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false)"
%|- (sttfa-impl-e "(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false)"
%|- (propax)
%|- (sttfa-conv "(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false))" () ()
%|- (sttfa-forall-e "(FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_false) => logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_false)))" "primes_sttfa.dividesb(n)(m)"
%|- (sttfa-impl-e "(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_false) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_false) => logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_false))))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_false)"
%|- (sttfa-conv "logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_false)" () ()
%|- (sttfa-forall-e "(FORALL(x:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](x)(x))" "bool_sttfa.sttfa_false"
%|- (sttfa-lemma "logic_sttfa.refl[bool_sttfa.sttfa_bool]")))
%|- (sttfa-conv "((LAMBDA(sttfa___:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](sttfa___)(bool_sttfa.sttfa_false))(bool_sttfa.sttfa_false) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_false) => (LAMBDA(sttfa___:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](sttfa___)(bool_sttfa.sttfa_false))(y))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(bool_sttfa.sttfa_false) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_false) => P(y)))))" "(LAMBDA(sttfa___:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](sttfa___)(bool_sttfa.sttfa_false))"
%|- (sttfa-conv "(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(bool_sttfa.sttfa_false) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_false) => P(y)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:bool_sttfa.sttfa_bool):(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(x) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(x) => P(y))))))" "bool_sttfa.sttfa_false"
%|- (sttfa-lemma "logic_sttfa.rewrite_r[bool_sttfa.sttfa_bool]")))))))))))
%|- (sttfa-impl-e "((logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => (connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m)) => logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false))) => ((logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => (connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m)) => logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false))) => (connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true))(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false)) => (connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m)) => logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false)))))" "(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => (connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m)) => logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false)))"
%|- (sttfa-impl-i "logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true)" "(connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m)) => logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false))"
%|- (sttfa-impl-i "connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false)"
%|- (sttfa-impl-e "(connectives_sttfa.sttfa_False => logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false))" "connectives_sttfa.sttfa_False"
%|- (sttfa-impl-e "(connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m)) => connectives_sttfa.sttfa_False)" "connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m))"
%|- (propax)
%|- (sttfa-impl-e "(primes_sttfa.sttfa_divides(n)(m) => (connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m)) => connectives_sttfa.sttfa_False))" "primes_sttfa.sttfa_divides(n)(m)"
%|- (sttfa-impl-e "(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => primes_sttfa.sttfa_divides(n)(m))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true)"
%|- (sttfa-impl-e "(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true)"
%|- (propax)
%|- (sttfa-conv "(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true))" () ()
%|- (sttfa-forall-e "(FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_true)))" "primes_sttfa.dividesb(n)(m)"
%|- (sttfa-impl-e "(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_true) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_true))))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_true)"
%|- (sttfa-conv "logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_true)" () ()
%|- (sttfa-forall-e "(FORALL(x:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](x)(x))" "bool_sttfa.sttfa_true"
%|- (sttfa-lemma "logic_sttfa.refl[bool_sttfa.sttfa_bool]")))
%|- (sttfa-conv "((LAMBDA(sttfa___:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](sttfa___)(bool_sttfa.sttfa_true))(bool_sttfa.sttfa_true) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_true) => (LAMBDA(sttfa___:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](sttfa___)(bool_sttfa.sttfa_true))(y))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(bool_sttfa.sttfa_true) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_true) => P(y)))))" "(LAMBDA(sttfa___:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](sttfa___)(bool_sttfa.sttfa_true))"
%|- (sttfa-conv "(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(bool_sttfa.sttfa_true) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_true) => P(y)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:bool_sttfa.sttfa_bool):(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(x) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(x) => P(y))))))" "bool_sttfa.sttfa_true"
%|- (sttfa-lemma "logic_sttfa.rewrite_r[bool_sttfa.sttfa_bool]")))))))))
%|- (sttfa-conv "(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => primes_sttfa.sttfa_divides(n)(m))" () ()
%|- (sttfa-forall-e "(FORALL(m0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m0))(bool_sttfa.sttfa_true) => primes_sttfa.sttfa_divides(n)(m0)))" "m"
%|- (sttfa-conv "(FORALL(m0:nat_sttfa.sttfa_nat):(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m0))(bool_sttfa.sttfa_true) => primes_sttfa.sttfa_divides(n)(m0)))" () ()
%|- (sttfa-forall-e "(FORALL(n:nat_sttfa.sttfa_nat):(FORALL(m:nat_sttfa.sttfa_nat):(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => primes_sttfa.sttfa_divides(n)(m))))" "n"
%|- (sttfa-lemma "primes_sttfa.dividesb_true_to_divides"))))))
%|- (sttfa-conv "(primes_sttfa.sttfa_divides(n)(m) => (connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m)) => connectives_sttfa.sttfa_False))" () ()
%|- (sttfa-forall-e "(FORALL(A:bool):(A => (connectives_sttfa.sttfa_Not(A) => connectives_sttfa.sttfa_False)))" "primes_sttfa.sttfa_divides(n)(m)"
%|- (sttfa-lemma "logic_sttfa.absurd")))))
%|- (sttfa-conv "(connectives_sttfa.sttfa_False => logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false))" () ()
%|- (sttfa-forall-e "(FORALL(t:bool):(connectives_sttfa.sttfa_False => t))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false)"
%|- (sttfa-lemma "connectives_sttfa.falsity"))))))
%|- (sttfa-conv "((logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => (connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m)) => logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false))) => ((logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => (connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m)) => logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false))) => (connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true))(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false)) => (connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m)) => logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false)))))" () ()
%|- (sttfa-forall-e "(FORALL(return:bool):((logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => return) => ((logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => return) => (connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true))(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false)) => return))))" "(connectives_sttfa.sttfa_Not(primes_sttfa.sttfa_divides(n)(m)) => logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false))"
%|- (sttfa-conv "(FORALL(return:bool):((logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => return) => ((logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false) => return) => (connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true))(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false)) => return))))" () ()
%|- (sttfa-forall-e "(FORALL(B:bool):(FORALL(return:bool):((logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => return) => ((B => return) => (connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true))(B) => return)))))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_false)"
%|- (sttfa-conv "(FORALL(B:bool):(FORALL(return:bool):((logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true) => return) => ((B => return) => (connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true))(B) => return)))))" () ()
%|- (sttfa-forall-e "(FORALL(A:bool):(FORALL(B:bool):(FORALL(return:bool):((A => return) => ((B => return) => (connectives_sttfa.sttfa_Or(A)(B) => return))))))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](primes_sttfa.dividesb(n)(m))(bool_sttfa.sttfa_true)"
%|- (sttfa-lemma "connectives_sttfa.match_Or_prop")))))))))))))
%|- QED

prime  : [nat_sttfa.sttfa_nat -> bool] = (LAMBDA(n:nat_sttfa.sttfa_nat):connectives_sttfa.sttfa_And(nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(n))((FORALL(m:nat_sttfa.sttfa_nat):(primes_sttfa.sttfa_divides(m)(n) => (nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(m) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(n))))))

prime_to_lt_O  : LEMMA (FORALL(p:nat_sttfa.sttfa_nat):(primes_sttfa.prime(p) => nat_sttfa.lt(nat_sttfa.sttfa_O)(p)))

%|- prime_to_lt_O : PROOF
%|- (then@ (sttfa-forall-i "p")
%|- (sttfa-impl-i "primes_sttfa.prime(p)" "nat_sttfa.lt(nat_sttfa.sttfa_O)(p)"
%|- (sttfa-impl-e "(primes_sttfa.prime(p) => nat_sttfa.lt(nat_sttfa.sttfa_O)(p))" "primes_sttfa.prime(p)"
%|- (propax)
%|- (sttfa-conv "(connectives_sttfa.sttfa_And(nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(p))((FORALL(m:nat_sttfa.sttfa_nat):(primes_sttfa.sttfa_divides(m)(p) => (nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(m) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(p))))) => nat_sttfa.lt(nat_sttfa.sttfa_O)(p))" () ("primes_sttfa.prime")
%|- (sttfa-impl-e "((nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(p) => ((FORALL(m:nat_sttfa.sttfa_nat):(primes_sttfa.sttfa_divides(m)(p) => (nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(m) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(p)))) => nat_sttfa.lt(nat_sttfa.sttfa_O)(p))) => (connectives_sttfa.sttfa_And(nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(p))((FORALL(m:nat_sttfa.sttfa_nat):(primes_sttfa.sttfa_divides(m)(p) => (nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(m) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(p))))) => nat_sttfa.lt(nat_sttfa.sttfa_O)(p)))" "(nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(p) => ((FORALL(m:nat_sttfa.sttfa_nat):(primes_sttfa.sttfa_divides(m)(p) => (nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(m) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(p)))) => nat_sttfa.lt(nat_sttfa.sttfa_O)(p)))"
%|- (sttfa-impl-i "nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(p)" "((FORALL(m:nat_sttfa.sttfa_nat):(primes_sttfa.sttfa_divides(m)(p) => (nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(m) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(p)))) => nat_sttfa.lt(nat_sttfa.sttfa_O)(p))"
%|- (sttfa-impl-i "(FORALL(m:nat_sttfa.sttfa_nat):(primes_sttfa.sttfa_divides(m)(p) => (nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(m) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(p))))" "nat_sttfa.lt(nat_sttfa.sttfa_O)(p)"
%|- (sttfa-impl-e "(nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(p) => nat_sttfa.lt(nat_sttfa.sttfa_O)(p))" "nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(p)"
%|- (propax)
%|- (sttfa-conv "(nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(p) => nat_sttfa.lt(nat_sttfa.sttfa_O)(p))" () ()
%|- (sttfa-forall-e "(FORALL(m:nat_sttfa.sttfa_nat):(nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(m) => nat_sttfa.lt(nat_sttfa.sttfa_O)(m)))" "p"
%|- (sttfa-conv "(FORALL(m:nat_sttfa.sttfa_nat):(nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(m) => nat_sttfa.lt(nat_sttfa.sttfa_O)(m)))" () ()
%|- (sttfa-forall-e "(FORALL(n:nat_sttfa.sttfa_nat):(FORALL(m:nat_sttfa.sttfa_nat):(nat_sttfa.lt(nat_sttfa.sttfa_S(n))(m) => nat_sttfa.lt(n)(m))))" "nat_sttfa.sttfa_O"
%|- (sttfa-lemma "nat_sttfa.lt_S_to_lt"))))))))
%|- (sttfa-conv "((nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(p) => ((FORALL(m:nat_sttfa.sttfa_nat):(primes_sttfa.sttfa_divides(m)(p) => (nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(m) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(p)))) => nat_sttfa.lt(nat_sttfa.sttfa_O)(p))) => (connectives_sttfa.sttfa_And(nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(p))((FORALL(m:nat_sttfa.sttfa_nat):(primes_sttfa.sttfa_divides(m)(p) => (nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(m) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(p))))) => nat_sttfa.lt(nat_sttfa.sttfa_O)(p)))" () ()
%|- (sttfa-forall-e "(FORALL(return:bool):((nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(p) => ((FORALL(m:nat_sttfa.sttfa_nat):(primes_sttfa.sttfa_divides(m)(p) => (nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(m) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(p)))) => return)) => (connectives_sttfa.sttfa_And(nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(p))((FORALL(m:nat_sttfa.sttfa_nat):(primes_sttfa.sttfa_divides(m)(p) => (nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(m) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(p))))) => return)))" "nat_sttfa.lt(nat_sttfa.sttfa_O)(p)"
%|- (sttfa-conv "(FORALL(return:bool):((nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(p) => ((FORALL(m:nat_sttfa.sttfa_nat):(primes_sttfa.sttfa_divides(m)(p) => (nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(m) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(p)))) => return)) => (connectives_sttfa.sttfa_And(nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(p))((FORALL(m:nat_sttfa.sttfa_nat):(primes_sttfa.sttfa_divides(m)(p) => (nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(m) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(p))))) => return)))" () ()
%|- (sttfa-forall-e "(FORALL(B:bool):(FORALL(return:bool):((nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(p) => (B => return)) => (connectives_sttfa.sttfa_And(nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(p))(B) => return))))" "(FORALL(m:nat_sttfa.sttfa_nat):(primes_sttfa.sttfa_divides(m)(p) => (nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(m) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(p))))"
%|- (sttfa-conv "(FORALL(B:bool):(FORALL(return:bool):((nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(p) => (B => return)) => (connectives_sttfa.sttfa_And(nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(p))(B) => return))))" () ()
%|- (sttfa-forall-e "(FORALL(A:bool):(FORALL(B:bool):(FORALL(return:bool):((A => (B => return)) => (connectives_sttfa.sttfa_And(A)(B) => return)))))" "nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(p)"
%|- (sttfa-lemma "connectives_sttfa.match_And_prop"))))))))))))
%|- QED

prime_to_lt_SO  : LEMMA (FORALL(p:nat_sttfa.sttfa_nat):(primes_sttfa.prime(p) => nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(p)))

%|- prime_to_lt_SO : PROOF
%|- (then@ (sttfa-forall-i "p")
%|- (sttfa-impl-i "primes_sttfa.prime(p)" "nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(p)"
%|- (sttfa-impl-e "(primes_sttfa.prime(p) => nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(p))" "primes_sttfa.prime(p)"
%|- (propax)
%|- (sttfa-conv "(connectives_sttfa.sttfa_And(nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(p))((FORALL(m:nat_sttfa.sttfa_nat):(primes_sttfa.sttfa_divides(m)(p) => (nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(m) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(p))))) => nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(p))" () ("primes_sttfa.prime")
%|- (sttfa-impl-e "((nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(p) => ((FORALL(m:nat_sttfa.sttfa_nat):(primes_sttfa.sttfa_divides(m)(p) => (nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(m) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(p)))) => nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(p))) => (connectives_sttfa.sttfa_And(nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(p))((FORALL(m:nat_sttfa.sttfa_nat):(primes_sttfa.sttfa_divides(m)(p) => (nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(m) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(p))))) => nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(p)))" "(nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(p) => ((FORALL(m:nat_sttfa.sttfa_nat):(primes_sttfa.sttfa_divides(m)(p) => (nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(m) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(p)))) => nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(p)))"
%|- (sttfa-impl-i "nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(p)" "((FORALL(m:nat_sttfa.sttfa_nat):(primes_sttfa.sttfa_divides(m)(p) => (nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(m) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(p)))) => nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(p))"
%|- (sttfa-impl-i "(FORALL(m:nat_sttfa.sttfa_nat):(primes_sttfa.sttfa_divides(m)(p) => (nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(m) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(p))))" "nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(p)"
%|- (propax)))
%|- (sttfa-conv "((nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(p) => ((FORALL(m:nat_sttfa.sttfa_nat):(primes_sttfa.sttfa_divides(m)(p) => (nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(m) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(p)))) => nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(p))) => (connectives_sttfa.sttfa_And(nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(p))((FORALL(m:nat_sttfa.sttfa_nat):(primes_sttfa.sttfa_divides(m)(p) => (nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(m) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(p))))) => nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(p)))" () ()
%|- (sttfa-forall-e "(FORALL(return:bool):((nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(p) => ((FORALL(m:nat_sttfa.sttfa_nat):(primes_sttfa.sttfa_divides(m)(p) => (nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(m) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(p)))) => return)) => (connectives_sttfa.sttfa_And(nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(p))((FORALL(m:nat_sttfa.sttfa_nat):(primes_sttfa.sttfa_divides(m)(p) => (nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(m) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(p))))) => return)))" "nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(p)"
%|- (sttfa-conv "(FORALL(return:bool):((nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(p) => ((FORALL(m:nat_sttfa.sttfa_nat):(primes_sttfa.sttfa_divides(m)(p) => (nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(m) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(p)))) => return)) => (connectives_sttfa.sttfa_And(nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(p))((FORALL(m:nat_sttfa.sttfa_nat):(primes_sttfa.sttfa_divides(m)(p) => (nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(m) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(p))))) => return)))" () ()
%|- (sttfa-forall-e "(FORALL(B:bool):(FORALL(return:bool):((nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(p) => (B => return)) => (connectives_sttfa.sttfa_And(nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(p))(B) => return))))" "(FORALL(m:nat_sttfa.sttfa_nat):(primes_sttfa.sttfa_divides(m)(p) => (nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(m) => logic_sttfa.eq[nat_sttfa.sttfa_nat](m)(p))))"
%|- (sttfa-conv "(FORALL(B:bool):(FORALL(return:bool):((nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(p) => (B => return)) => (connectives_sttfa.sttfa_And(nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(p))(B) => return))))" () ()
%|- (sttfa-forall-e "(FORALL(A:bool):(FORALL(B:bool):(FORALL(return:bool):((A => (B => return)) => (connectives_sttfa.sttfa_And(A)(B) => return)))))" "nat_sttfa.lt(nat_sttfa.sttfa_S(nat_sttfa.sttfa_O))(p)"
%|- (sttfa-lemma "connectives_sttfa.match_And_prop"))))))))))))
%|- QED

END primes_sttfa

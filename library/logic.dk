#NAME logic.

eq :
  sttfa.etap 
    (sttfa.forallK 
       (A:sttfa.type => sttfa.p (sttfa.arrow A (sttfa.arrow A sttfa.bool)))).

refl :
  sttfa.eps 
    (sttfa.forallP 
       (A:sttfa.type =>
        sttfa.forall A (x:(sttfa.etap (sttfa.p A)) => logic.eq A x x))).

eq_ind :
  sttfa.eps 
    (sttfa.forallP 
       (A:sttfa.type =>
        sttfa.forall A 
          (x:(sttfa.etap (sttfa.p A)) =>
           sttfa.forall (sttfa.arrow A sttfa.bool) 
             (P:(sttfa.etap (sttfa.p (sttfa.arrow A sttfa.bool))) =>
              sttfa.impl (P x) 
                (sttfa.forall A 
                   (y:(sttfa.etap (sttfa.p A)) =>
                    sttfa.impl (logic.eq A x y) (P y))))))).

def eq_rect_r :
  sttfa.eps 
    (sttfa.forallP 
       (A:sttfa.type =>
        sttfa.forall A 
          (a:(sttfa.etap (sttfa.p A)) =>
           sttfa.forall A 
             (x:(sttfa.etap (sttfa.p A)) =>
              sttfa.impl (logic.eq A x a) 
                (sttfa.forall (sttfa.arrow A sttfa.bool) 
                   (P:(sttfa.etap (sttfa.p (sttfa.arrow A sttfa.bool))) =>
                    sttfa.impl (P a) (P x)))))))
  :=
  A:sttfa.type =>
  a:(sttfa.etap (sttfa.p A)) =>
  x:(sttfa.etap (sttfa.p A)) =>
  p:(sttfa.eps (logic.eq A x a)) =>
  logic.eq_ind A x 
    (__:(sttfa.etap (sttfa.p A)) =>
     sttfa.forall (sttfa.arrow A sttfa.bool) 
       (P:(sttfa.etap (sttfa.p (sttfa.arrow A sttfa.bool))) =>
        sttfa.impl (P __) (P x))) 
    (P:(sttfa.etap (sttfa.p (sttfa.arrow A sttfa.bool))) =>
     auto:(sttfa.eps (P x)) => auto) a p.

def eq_ind_r :
  sttfa.eps 
    (sttfa.forallP 
       (A:sttfa.type =>
        sttfa.forall A 
          (a:(sttfa.etap (sttfa.p A)) =>
           sttfa.forall (sttfa.arrow A sttfa.bool) 
             (P:(sttfa.etap (sttfa.p (sttfa.arrow A sttfa.bool))) =>
              sttfa.impl (P a) 
                (sttfa.forall A 
                   (x:(sttfa.etap (sttfa.p A)) =>
                    sttfa.impl (logic.eq A x a) (P x)))))))
  :=
  A:sttfa.type =>
  a:(sttfa.etap (sttfa.p A)) =>
  P:(sttfa.etap (sttfa.p (sttfa.arrow A sttfa.bool))) =>
  p:(sttfa.eps (P a)) =>
  x0:(sttfa.etap (sttfa.p A)) =>
  p0:(sttfa.eps (logic.eq A x0 a)) =>
  logic.eq_rect_r A a x0 p0 (x01:(sttfa.etap (sttfa.p A)) => P x01) p.

def rewrite_l :
  sttfa.eps 
    (sttfa.forallP 
       (A:sttfa.type =>
        sttfa.forall A 
          (x:(sttfa.etap (sttfa.p A)) =>
           sttfa.forall (sttfa.arrow A sttfa.bool) 
             (P:(sttfa.etap (sttfa.p (sttfa.arrow A sttfa.bool))) =>
              sttfa.impl (P x) 
                (sttfa.forall A 
                   (y:(sttfa.etap (sttfa.p A)) =>
                    sttfa.impl (logic.eq A x y) (P y)))))))
  :=
  A:sttfa.type =>
  x:(sttfa.etap (sttfa.p A)) =>
  P:(sttfa.etap (sttfa.p (sttfa.arrow A sttfa.bool))) =>
  Hx:(sttfa.eps (P x)) =>
  y:(sttfa.etap (sttfa.p A)) =>
  Heq:(sttfa.eps (logic.eq A x y)) =>
  logic.eq_ind A x (__:(sttfa.etap (sttfa.p A)) => P __) Hx y Heq.

def sym_eq :
  sttfa.eps 
    (sttfa.forallP 
       (A:sttfa.type =>
        sttfa.forall A 
          (x:(sttfa.etap (sttfa.p A)) =>
           sttfa.forall A 
             (y:(sttfa.etap (sttfa.p A)) =>
              sttfa.impl (logic.eq A x y) (logic.eq A y x)))))
  :=
  A:sttfa.type =>
  x:(sttfa.etap (sttfa.p A)) =>
  y:(sttfa.etap (sttfa.p A)) =>
  Heq:(sttfa.eps (logic.eq A x y)) =>
  logic.rewrite_l A x (__:(sttfa.etap (sttfa.p A)) => logic.eq A __ x) 
    (logic.refl A x) y 
    (logic.rewrite_l A x (__:(sttfa.etap (sttfa.p A)) => logic.eq A x __) 
       (logic.refl A x) y Heq).

def rewrite_r :
  sttfa.eps 
    (sttfa.forallP 
       (A:sttfa.type =>
        sttfa.forall A 
          (x:(sttfa.etap (sttfa.p A)) =>
           sttfa.forall (sttfa.arrow A sttfa.bool) 
             (P:(sttfa.etap (sttfa.p (sttfa.arrow A sttfa.bool))) =>
              sttfa.impl (P x) 
                (sttfa.forall A 
                   (y:(sttfa.etap (sttfa.p A)) =>
                    sttfa.impl (logic.eq A y x) (P y)))))))
  :=
  A:sttfa.type =>
  x:(sttfa.etap (sttfa.p A)) =>
  P:(sttfa.etap (sttfa.p (sttfa.arrow A sttfa.bool))) =>
  Hx:(sttfa.eps (P x)) =>
  y:(sttfa.etap (sttfa.p A)) =>
  Heq:(sttfa.eps (logic.eq A y x)) =>
  logic.eq_ind A x (__:(sttfa.etap (sttfa.p A)) => P __) Hx y 
    (logic.sym_eq A y x Heq).

def eq_coerc :
  sttfa.eps 
    (sttfa.forall sttfa.bool 
       (A:(sttfa.etap (sttfa.p sttfa.bool)) =>
        sttfa.forall sttfa.bool 
          (B:(sttfa.etap (sttfa.p sttfa.bool)) =>
           sttfa.impl A (sttfa.impl (logic.eq sttfa.bool A B) B))))
  :=
  A:(sttfa.etap (sttfa.p sttfa.bool)) =>
  B:(sttfa.etap (sttfa.p sttfa.bool)) =>
  Ha:(sttfa.eps A) =>
  Heq:(sttfa.eps (logic.eq sttfa.bool A B)) =>
  logic.eq_ind sttfa.bool A (x_19:(sttfa.etap (sttfa.p sttfa.bool)) => x_19) 
    Ha B Heq.

def trans_eq :
  sttfa.eps 
    (sttfa.forallP 
       (A:sttfa.type =>
        sttfa.forall A 
          (x:(sttfa.etap (sttfa.p A)) =>
           sttfa.forall A 
             (y:(sttfa.etap (sttfa.p A)) =>
              sttfa.forall A 
                (z:(sttfa.etap (sttfa.p A)) =>
                 sttfa.impl (logic.eq A x y) 
                   (sttfa.impl (logic.eq A y z) (logic.eq A x z)))))))
  :=
  A:sttfa.type =>
  x:(sttfa.etap (sttfa.p A)) =>
  y:(sttfa.etap (sttfa.p A)) =>
  z:(sttfa.etap (sttfa.p A)) =>
  H1:(sttfa.eps (logic.eq A x y)) =>
  H2:(sttfa.eps (logic.eq A y z)) =>
  logic.eq_ind_r A y (x0:(sttfa.etap (sttfa.p A)) => logic.eq A x0 z) 
    (logic.rewrite_l A x (__:(sttfa.etap (sttfa.p A)) => logic.eq A __ z) 
       (logic.rewrite_l A x (__:(sttfa.etap (sttfa.p A)) => logic.eq A x __) 
          (logic.refl A x) z 
          (logic.rewrite_r A y 
             (__:(sttfa.etap (sttfa.p A)) => logic.eq A __ z) H2 x H1)) y H1) 
    x H1.

def eq_f :
  sttfa.eps 
    (sttfa.forallP 
       (A:sttfa.type =>
        sttfa.forallP 
          (B:sttfa.type =>
           sttfa.forall (sttfa.arrow A B) 
             (f:(sttfa.etap (sttfa.p (sttfa.arrow A B))) =>
              sttfa.forall A 
                (x:(sttfa.etap (sttfa.p A)) =>
                 sttfa.forall A 
                   (y:(sttfa.etap (sttfa.p A)) =>
                    sttfa.impl (logic.eq A x y) (logic.eq B (f x) (f y))))))))
  :=
  A:sttfa.type =>
  B:sttfa.type =>
  f:(sttfa.etap (sttfa.p (sttfa.arrow A B))) =>
  x:(sttfa.etap (sttfa.p A)) =>
  y:(sttfa.etap (sttfa.p A)) =>
  H:(sttfa.eps (logic.eq A x y)) =>
  logic.eq_ind_r A y 
    (x0:(sttfa.etap (sttfa.p A)) => logic.eq B (f x0) (f y)) 
    (logic.rewrite_l A x 
       (__:(sttfa.etap (sttfa.p A)) => logic.eq B (f __) (f y)) 
       (logic.rewrite_l A x 
          (__:(sttfa.etap (sttfa.p A)) => logic.eq B (f x) (f __)) 
          (logic.refl B (f x)) y H) y H) x H.

def eq_f2 :
  sttfa.eps 
    (sttfa.forallP 
       (A:sttfa.type =>
        sttfa.forallP 
          (B:sttfa.type =>
           sttfa.forallP 
             (C:sttfa.type =>
              sttfa.forall (sttfa.arrow A (sttfa.arrow B C)) 
                (f:
                 (sttfa.etap (sttfa.p (sttfa.arrow A (sttfa.arrow B C)))) =>
                 sttfa.forall A 
                   (x1:(sttfa.etap (sttfa.p A)) =>
                    sttfa.forall A 
                      (x2:(sttfa.etap (sttfa.p A)) =>
                       sttfa.forall B 
                         (y1:(sttfa.etap (sttfa.p B)) =>
                          sttfa.forall B 
                            (y2:(sttfa.etap (sttfa.p B)) =>
                             sttfa.impl (logic.eq A x1 x2) 
                               (sttfa.impl (logic.eq B y1 y2) 
                                  (logic.eq C (f x1 y1) (f x2 y2))))))))))))
  :=
  A:sttfa.type =>
  B:sttfa.type =>
  C:sttfa.type =>
  f:(sttfa.etap (sttfa.p (sttfa.arrow A (sttfa.arrow B C)))) =>
  x1:(sttfa.etap (sttfa.p A)) =>
  x2:(sttfa.etap (sttfa.p A)) =>
  y1:(sttfa.etap (sttfa.p B)) =>
  y2:(sttfa.etap (sttfa.p B)) =>
  E1:(sttfa.eps (logic.eq A x1 x2)) =>
  E2:(sttfa.eps (logic.eq B y1 y2)) =>
  logic.eq_ind_r A x2 
    (x:(sttfa.etap (sttfa.p A)) => logic.eq C (f x y1) (f x2 y2)) 
    (logic.eq_ind_r B y2 
       (x:(sttfa.etap (sttfa.p B)) => logic.eq C (f x2 x) (f x2 y2)) 
       (logic.rewrite_l A x1 
          (__:(sttfa.etap (sttfa.p A)) => logic.eq C (f __ y2) (f x2 y2)) 
          (logic.rewrite_l B y1 
             (__:(sttfa.etap (sttfa.p B)) => logic.eq C (f x1 __) (f x2 y2)) 
             (logic.rewrite_l A x1 
                (__:(sttfa.etap (sttfa.p A)) =>
                 logic.eq C (f x1 y1) (f __ y2)) 
                (logic.rewrite_l B y1 
                   (__:(sttfa.etap (sttfa.p B)) =>
                    logic.eq C (f x1 y1) (f x1 __)) (logic.refl C (f x1 y1)) 
                   y2 E2) x2 E1) y2 E2) x2 E1) y1 E2) x1 E1.

def falsity :
  sttfa.eps 
    (sttfa.forall sttfa.bool 
       (t:(sttfa.etap (sttfa.p sttfa.bool)) => sttfa.impl connectives.False t))
  :=
  t:(sttfa.etap (sttfa.p sttfa.bool)) =>
  f:
  (sttfa.eps 
     (sttfa.forall sttfa.bool (x:(sttfa.etap (sttfa.p sttfa.bool)) => x))) =>
  f t.

def Not_ind :
  sttfa.eps 
    (sttfa.forall sttfa.bool 
       (A:(sttfa.etap (sttfa.p sttfa.bool)) =>
        sttfa.forall sttfa.bool 
          (Q:(sttfa.etap (sttfa.p sttfa.bool)) =>
           sttfa.impl (sttfa.impl (sttfa.impl A connectives.False) Q) 
             (sttfa.impl (connectives.Not A) Q))))
  :=
  A:(sttfa.etap (sttfa.p sttfa.bool)) =>
  Q:(sttfa.etap (sttfa.p sttfa.bool)) =>
  F:(sttfa.eps (sttfa.impl (sttfa.impl A connectives.False) Q)) =>
  N:(sttfa.eps (connectives.Not A)) => F N.

def absurd :
  sttfa.eps 
    (sttfa.forall sttfa.bool 
       (A:(sttfa.etap (sttfa.p sttfa.bool)) =>
        sttfa.impl A (sttfa.impl (connectives.Not A) connectives.False)))
  :=
  A:(sttfa.etap (sttfa.p sttfa.bool)) =>
  H:(sttfa.eps A) =>
  Hn:(sttfa.eps (connectives.Not A)) =>
  logic.Not_ind A connectives.False 
    (_x_80:(sttfa.eps (sttfa.impl A connectives.False)) => _x_80 H) Hn.

def not_to_not :
  sttfa.eps 
    (sttfa.forall sttfa.bool 
       (A:(sttfa.etap (sttfa.p sttfa.bool)) =>
        sttfa.forall sttfa.bool 
          (B:(sttfa.etap (sttfa.p sttfa.bool)) =>
           sttfa.impl (sttfa.impl A B) 
             (sttfa.impl (connectives.Not B) (connectives.Not A)))))
  :=
  A:(sttfa.etap (sttfa.p sttfa.bool)) =>
  B:(sttfa.etap (sttfa.p sttfa.bool)) =>
  auto:(sttfa.eps (sttfa.impl A B)) =>
  auto':(sttfa.eps (connectives.Not B)) =>
  auto'':(sttfa.eps A) => logic.absurd B (auto auto'') auto'.

def sym_not_eq :
  sttfa.eps 
    (sttfa.forallP 
       (A:sttfa.type =>
        sttfa.forall A 
          (x:(sttfa.etap (sttfa.p A)) =>
           sttfa.forall A 
             (y:(sttfa.etap (sttfa.p A)) =>
              sttfa.impl (connectives.Not (logic.eq A x y)) 
                (connectives.Not (logic.eq A y x))))))
  :=
  A:sttfa.type =>
  x:(sttfa.etap (sttfa.p A)) =>
  y:(sttfa.etap (sttfa.p A)) =>
  auto:(sttfa.eps (connectives.Not (logic.eq A x y))) =>
  auto':(sttfa.eps (logic.eq A y x)) =>
  logic.absurd (logic.eq A x y) 
    (logic.rewrite_r A x (__:(sttfa.etap (sttfa.p A)) => logic.eq A x __) 
       (logic.refl A x) y auto') auto.

def match_And_prop :
  sttfa.eps 
    (sttfa.forall sttfa.bool 
       (A:(sttfa.etap (sttfa.p sttfa.bool)) =>
        sttfa.forall sttfa.bool 
          (B:(sttfa.etap (sttfa.p sttfa.bool)) =>
           sttfa.forall sttfa.bool 
             (return:(sttfa.etap (sttfa.p sttfa.bool)) =>
              sttfa.impl (sttfa.impl A (sttfa.impl B return)) 
                (sttfa.impl (connectives.And A B) return)))))
  :=
  A:(sttfa.etap (sttfa.p sttfa.bool)) =>
  B:(sttfa.etap (sttfa.p sttfa.bool)) =>
  return:(sttfa.etap (sttfa.p sttfa.bool)) =>
  case:(sttfa.eps (sttfa.impl A (sttfa.impl B return))) =>
  and:(sttfa.eps (connectives.And A B)) => and return case.

def proj1 :
  sttfa.eps 
    (sttfa.forall sttfa.bool 
       (A:(sttfa.etap (sttfa.p sttfa.bool)) =>
        sttfa.forall sttfa.bool 
          (B:(sttfa.etap (sttfa.p sttfa.bool)) =>
           sttfa.impl (connectives.And A B) A)))
  :=
  A:(sttfa.etap (sttfa.p sttfa.bool)) =>
  B:(sttfa.etap (sttfa.p sttfa.bool)) =>
  AB:(sttfa.eps (connectives.And A B)) =>
  logic.match_And_prop A B A 
    (_x_120:(sttfa.eps A) => _x_119:(sttfa.eps B) => _x_120) AB.

def proj2 :
  sttfa.eps 
    (sttfa.forall sttfa.bool 
       (A:(sttfa.etap (sttfa.p sttfa.bool)) =>
        sttfa.forall sttfa.bool 
          (B:(sttfa.etap (sttfa.p sttfa.bool)) =>
           sttfa.impl (connectives.And A B) B)))
  :=
  A:(sttfa.etap (sttfa.p sttfa.bool)) =>
  B:(sttfa.etap (sttfa.p sttfa.bool)) =>
  AB:(sttfa.eps (connectives.And A B)) =>
  logic.match_And_prop A B B 
    (_x_120:(sttfa.eps A) => _x_119:(sttfa.eps B) => _x_119) AB.

def match_Or_prop :
  sttfa.eps 
    (sttfa.forall sttfa.bool 
       (A:(sttfa.etap (sttfa.p sttfa.bool)) =>
        sttfa.forall sttfa.bool 
          (B:(sttfa.etap (sttfa.p sttfa.bool)) =>
           sttfa.forall sttfa.bool 
             (return:(sttfa.etap (sttfa.p sttfa.bool)) =>
              sttfa.impl (sttfa.impl A return) 
                (sttfa.impl (sttfa.impl B return) 
                   (sttfa.impl (connectives.Or A B) return))))))
  :=
  A:(sttfa.etap (sttfa.p sttfa.bool)) =>
  B:(sttfa.etap (sttfa.p sttfa.bool)) =>
  return:(sttfa.etap (sttfa.p sttfa.bool)) =>
  case_A:(sttfa.eps (sttfa.impl A return)) =>
  case_B:(sttfa.eps (sttfa.impl B return)) =>
  or:(sttfa.eps (connectives.Or A B)) => or return case_A case_B.

def decidable :
  sttfa.etap (sttfa.p (sttfa.arrow sttfa.bool sttfa.bool))
  :=
  A:(sttfa.etap (sttfa.p sttfa.bool)) => connectives.Or A (connectives.Not A).

def match_ex_prop :
  sttfa.eps 
    (sttfa.forallP 
       (A:sttfa.type =>
        sttfa.forall (sttfa.arrow A sttfa.bool) 
          (P:(sttfa.etap (sttfa.p (sttfa.arrow A sttfa.bool))) =>
           sttfa.forall sttfa.bool 
             (return:(sttfa.etap (sttfa.p sttfa.bool)) =>
              sttfa.impl 
                (sttfa.forall A 
                   (x:(sttfa.etap (sttfa.p A)) => sttfa.impl (P x) return)) 
                (sttfa.impl (connectives.Ex A P) return)))))
  :=
  A:sttfa.type =>
  P:(sttfa.etap (sttfa.p (sttfa.arrow A sttfa.bool))) =>
  return:(sttfa.etap (sttfa.p sttfa.bool)) =>
  case:
  (sttfa.eps 
     (sttfa.forall A (x:(sttfa.etap (sttfa.p A)) => sttfa.impl (P x) return))) =>
  Ex:(sttfa.eps (connectives.Ex A P)) => Ex return case.


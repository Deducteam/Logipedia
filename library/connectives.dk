True : sttfa.etap (sttfa.p sttfa.bool).

False : sttfa.etap (sttfa.p sttfa.bool).

Imp :
  sttfa.etap
    (sttfa.p (sttfa.arrow sttfa.bool (sttfa.arrow sttfa.bool sttfa.bool))).

Not :
  sttfa.etap (sttfa.p (sttfa.arrow sttfa.bool sttfa.bool)).

nmk : sttfa.eps (sttfa.forall sttfa.bool
                (A : sttfa.etap (sttfa.p sttfa.bool) =>
                 sttfa.impl (sttfa.impl A False) (Not A))).
def And :
  sttfa.etap
    (sttfa.p (sttfa.arrow sttfa.bool (sttfa.arrow sttfa.bool sttfa.bool)))
  :=
  x:(sttfa.etap (sttfa.p sttfa.bool)) =>
  y:(sttfa.etap (sttfa.p sttfa.bool)) =>
  sttfa.forall sttfa.bool
    (z:(sttfa.etap (sttfa.p sttfa.bool)) =>
     sttfa.impl (sttfa.impl x (sttfa.impl y z)) z).

def Or :
  sttfa.etap
    (sttfa.p (sttfa.arrow sttfa.bool (sttfa.arrow sttfa.bool sttfa.bool)))
  :=
  x:(sttfa.etap (sttfa.p sttfa.bool)) =>
  y:(sttfa.etap (sttfa.p sttfa.bool)) =>
  sttfa.forall sttfa.bool
    (z:(sttfa.etap (sttfa.p sttfa.bool)) =>
     sttfa.impl (sttfa.impl x z) (sttfa.impl (sttfa.impl y z) z)).

def Ex :
  sttfa.etap
    (sttfa.forallK
       (A:sttfa.type =>
        sttfa.p (sttfa.arrow (sttfa.arrow A sttfa.bool) sttfa.bool)))
  :=
  A:sttfa.type =>
  f:(sttfa.etap (sttfa.p (sttfa.arrow A sttfa.bool))) =>
  sttfa.forall sttfa.bool
    (z:(sttfa.etap (sttfa.p sttfa.bool)) =>
     sttfa.impl
       (sttfa.forall A (x:(sttfa.etap (sttfa.p A)) => sttfa.impl (f x) z)) z).

def I :
  sttfa.eps connectives.True.

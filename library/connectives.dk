True : sttfa.etap (sttfa.p sttfa.bool).

False : sttfa.etap (sttfa.p sttfa.bool).

Not :  sttfa.etap (sttfa.p (sttfa.arrow sttfa.bool sttfa.bool)).

And :
  sttfa.etap
    (sttfa.p (sttfa.arrow sttfa.bool (sttfa.arrow sttfa.bool sttfa.bool))).

Or :
  sttfa.etap
    (sttfa.p (sttfa.arrow sttfa.bool (sttfa.arrow sttfa.bool sttfa.bool))).

ex :
  sttfa.etap
    (sttfa.forallK
       (A:sttfa.type =>
        sttfa.p (sttfa.arrow (sttfa.arrow A sttfa.bool) sttfa.bool))).

equal :  sttfa.etap (sttfa.forallK (A:sttfa.type => sttfa.p (sttfa.arrow A (sttfa.arrow A sttfa.bool)))).

I : sttfa.eps connectives.True.

falsity :
  sttfa.eps
    (sttfa.forall sttfa.bool
       (t:(sttfa.etap (sttfa.p sttfa.bool)) => sttfa.impl connectives.False t)).


nmk : sttfa.eps (sttfa.forall sttfa.bool
                (A : sttfa.etap (sttfa.p sttfa.bool) =>
                 sttfa.impl (sttfa.impl A False) (Not A))).

Not_ind :
  sttfa.eps
    (sttfa.forall sttfa.bool
       (A:(sttfa.etap (sttfa.p sttfa.bool)) =>
        sttfa.forall sttfa.bool
          (Q:(sttfa.etap (sttfa.p sttfa.bool)) =>
           sttfa.impl (sttfa.impl (sttfa.impl A connectives.False) Q)
             (sttfa.impl (connectives.Not A) Q)))).

conj : sttfa.eps (sttfa.forall sttfa.bool
                 (A : sttfa.etap (sttfa.p sttfa.bool) =>
                  sttfa.forall sttfa.bool
                 (B : sttfa.etap (sttfa.p sttfa.bool) =>
                  sttfa.impl A (sttfa.impl B (And A B))))).

match_And_prop :
  sttfa.eps
    (sttfa.forall sttfa.bool
       (A:(sttfa.etap (sttfa.p sttfa.bool)) =>
        sttfa.forall sttfa.bool
          (B:(sttfa.etap (sttfa.p sttfa.bool)) =>
           sttfa.forall sttfa.bool
             (return:(sttfa.etap (sttfa.p sttfa.bool)) =>
              sttfa.impl (sttfa.impl A (sttfa.impl B return))
                (sttfa.impl (connectives.And A B) return))))).

or_introl :
    sttfa.eps
    (sttfa.forall sttfa.bool
       (A:(sttfa.etap (sttfa.p sttfa.bool)) =>
        sttfa.forall sttfa.bool
          (B:(sttfa.etap (sttfa.p sttfa.bool)) =>
           sttfa.impl A (Or A B)))).

or_intror :
    sttfa.eps
    (sttfa.forall sttfa.bool
       (A:(sttfa.etap (sttfa.p sttfa.bool)) =>
        sttfa.forall sttfa.bool
          (B:(sttfa.etap (sttfa.p sttfa.bool)) =>
           sttfa.impl B (Or A B)))).

match_Or_prop :
  sttfa.eps
    (sttfa.forall sttfa.bool
       (A:(sttfa.etap (sttfa.p sttfa.bool)) =>
        sttfa.forall sttfa.bool
          (B:(sttfa.etap (sttfa.p sttfa.bool)) =>
           sttfa.forall sttfa.bool
             (return:(sttfa.etap (sttfa.p sttfa.bool)) =>
              sttfa.impl (sttfa.impl A return)
                (sttfa.impl (sttfa.impl B return)
                   (sttfa.impl (connectives.Or A B) return)))))).


ex_intro : sttfa.eps
    (sttfa.forallP
    (A:sttfa.type =>
     sttfa.forall (sttfa.arrow A sttfa.bool)
    (P:(sttfa.etap (sttfa.p (sttfa.arrow A sttfa.bool))) =>
     sttfa.forall A
    (x:(sttfa.etap (sttfa.p A)) =>
     sttfa.impl (P x) (ex A P))))).

match_ex_prop :
  sttfa.eps
    (sttfa.forallP
       (A:sttfa.type =>
        sttfa.forall (sttfa.arrow A sttfa.bool)
          (P:(sttfa.etap (sttfa.p (sttfa.arrow A sttfa.bool))) =>
           sttfa.forall sttfa.bool
             (return:(sttfa.etap (sttfa.p sttfa.bool)) =>
              sttfa.impl
                (sttfa.forall A
                   (x:(sttfa.etap (sttfa.p A)) => sttfa.impl (P x) return))
                (sttfa.impl (connectives.ex A P) return))))).

refl_equal : sttfa.eps (sttfa.forallP (A:sttfa.type => sttfa.forall A
                                    (x:sttfa.eta A => equal A x x))).

equal_leibniz : sttfa.eps (sttfa.forallP (A:sttfa.type =>
                    sttfa.forall A (x:sttfa.eta A =>
                    sttfa.forall A (y:sttfa.eta A =>
                    sttfa.impl (connectives.equal A x y)
                               (sttfa.forall (sttfa.arrow A sttfa.bool)
                                  (P : sttfa.eta (sttfa.arrow A sttfa.bool) =>
                                  sttfa.impl (P x) (P y))))))).

Require Import connectives.
Require Import leibniz.
Require Import nat.
Parameter exp : ((nat.nat) ) -> ((nat.nat) ) -> (nat.nat) .
Parameter exp_body : ((nat.nat) ) -> ((nat.nat) ) -> (nat.nat) .
Axiom axiom_exp : forall (n:(nat.nat) ), forall (m:(nat.nat) ), (((connectives.equal) ((nat.nat) )) ((((exp) ) (n)) (m))) ((((nat.filter_nat_type) ((nat.nat) )) (((exp_body) ) (n))) (m)).
Definition eq_exp : forall (n:(nat.nat) ), forall (m:(nat.nat) ), (((leibniz.leibniz) ((nat.nat) )) ((((exp) ) (n)) (m))) ((((nat.filter_nat_type) ((nat.nat) )) (((exp_body) ) (n))) (m)) := fun (n:(nat.nat) ) => fun (m:(nat.nat) ) => ((((connectives.equal_leibniz) ((nat.nat) )) ((((exp) ) (n)) (m))) ((((nat.filter_nat_type) ((nat.nat) )) (((exp_body) ) (n))) (m))) (((axiom_exp) (n)) (m)).
Definition sym_eq_exp : forall (n:(nat.nat) ), forall (m:(nat.nat) ), (((leibniz.leibniz) ((nat.nat) )) ((((nat.filter_nat_type) ((nat.nat) )) (((exp_body) ) (n))) (m))) ((((exp) ) (n)) (m)) := fun (n:(nat.nat) ) => fun (m:(nat.nat) ) => ((((leibniz.sym_leibniz) ((nat.nat) )) ((((exp) ) (n)) (m))) ((((nat.filter_nat_type) ((nat.nat) )) (((exp_body) ) (n))) (m))) (((eq_exp) (n)) (m)).
Axiom axiom_exp_body_O : forall (n:(nat.nat) ), (((connectives.equal) ((nat.nat) )) ((((exp_body) ) (n)) ((nat.O) ))) (((nat.S) ) ((nat.O) )).
Definition eq_exp_body_O : forall (n:(nat.nat) ), (((leibniz.leibniz) ((nat.nat) )) ((((exp_body) ) (n)) ((nat.O) ))) (((nat.S) ) ((nat.O) )) := fun (n:(nat.nat) ) => ((((connectives.equal_leibniz) ((nat.nat) )) ((((exp_body) ) (n)) ((nat.O) ))) (((nat.S) ) ((nat.O) ))) ((axiom_exp_body_O) (n)).
Definition sym_eq_exp_body_O : forall (n:(nat.nat) ), (((leibniz.leibniz) ((nat.nat) )) (((nat.S) ) ((nat.O) ))) ((((exp_body) ) (n)) ((nat.O) )) := fun (n:(nat.nat) ) => ((((leibniz.sym_leibniz) ((nat.nat) )) ((((exp_body) ) (n)) ((nat.O) ))) (((nat.S) ) ((nat.O) ))) ((eq_exp_body_O) (n)).
Axiom axiom_exp_body_S : forall (n:(nat.nat) ), forall (m:(nat.nat) ), (((connectives.equal) ((nat.nat) )) ((((exp_body) ) (n)) (((nat.S) ) (m)))) ((((nat.times) ) ((((exp) ) (n)) (m))) (n)).
Definition eq_exp_body_S : forall (n:(nat.nat) ), forall (m:(nat.nat) ), (((leibniz.leibniz) ((nat.nat) )) ((((exp_body) ) (n)) (((nat.S) ) (m)))) ((((nat.times) ) ((((exp) ) (n)) (m))) (n)) := fun (n:(nat.nat) ) => fun (m:(nat.nat) ) => ((((connectives.equal_leibniz) ((nat.nat) )) ((((exp_body) ) (n)) (((nat.S) ) (m)))) ((((nat.times) ) ((((exp) ) (n)) (m))) (n))) (((axiom_exp_body_S) (n)) (m)).
Definition sym_eq_exp_body_S : forall (n:(nat.nat) ), forall (m:(nat.nat) ), (((leibniz.leibniz) ((nat.nat) )) ((((nat.times) ) ((((exp) ) (n)) (m))) (n))) ((((exp_body) ) (n)) (((nat.S) ) (m))) := fun (n:(nat.nat) ) => fun (m:(nat.nat) ) => ((((leibniz.sym_leibniz) ((nat.nat) )) ((((exp_body) ) (n)) (((nat.S) ) (m)))) ((((nat.times) ) ((((exp) ) (n)) (m))) (n))) (((eq_exp_body_S) (n)) (m)).
Definition lt_O_exp : forall (n:(nat.nat) ), forall (m:(nat.nat) ), ((((nat.lt) ) ((nat.O) )) (n)) -> (((nat.lt) ) ((nat.O) )) ((((exp) ) (n)) (m)) := fun (n:(nat.nat) ) => fun (m:(nat.nat) ) => ((((nat.nat_ind) (fun (_x_365:(nat.nat) ) => ((((nat.lt) ) ((nat.O) )) (n)) -> (((nat.lt) ) ((nat.O) )) ((((exp) ) (n)) (_x_365)))) (((((sym_eq_exp) (n)) ((nat.O) )) (fun (y:(nat.nat) ) => ((((nat.lt) ) ((nat.O) )) (n)) -> (((nat.lt) ) ((nat.O) )) (y))) (((((nat.sym_eq_filter_nat_type_O) ((nat.nat) )) (((exp_body) ) (n))) (fun (y:(nat.nat) ) => ((((nat.lt) ) ((nat.O) )) (n)) -> (((nat.lt) ) ((nat.O) )) (y))) ((((sym_eq_exp_body_O) (n)) (fun (y:(nat.nat) ) => ((((nat.lt) ) ((nat.O) )) (n)) -> (((nat.lt) ) ((nat.O) )) (y))) (fun (auto:(((nat.le) ) (((nat.S) ) ((nat.O) ))) (n)) => ((nat.lt_O_S) ((nat.O) ))))))) (fun (a:(nat.nat) ) => ((((sym_eq_exp) (n)) (((nat.S) ) (a))) (fun (y:(nat.nat) ) => (((((nat.lt) ) ((nat.O) )) (n)) -> (((nat.lt) ) ((nat.O) )) ((((exp) ) (n)) (a))) -> ((((nat.lt) ) ((nat.O) )) (n)) -> (((nat.lt) ) ((nat.O) )) (y))) ((((((nat.sym_eq_filter_nat_type_S) ((nat.nat) )) (((exp_body) ) (n))) (a)) (fun (y:(nat.nat) ) => (((((nat.lt) ) ((nat.O) )) (n)) -> (((nat.lt) ) ((nat.O) )) ((((exp) ) (n)) (a))) -> ((((nat.lt) ) ((nat.O) )) (n)) -> (((nat.lt) ) ((nat.O) )) (y))) (((((sym_eq_exp_body_S) (n)) (a)) (fun (y:(nat.nat) ) => (((((nat.lt) ) ((nat.O) )) (n)) -> (((nat.lt) ) ((nat.O) )) ((((exp) ) (n)) (a))) -> ((((nat.lt) ) ((nat.O) )) (n)) -> (((nat.lt) ) ((nat.O) )) (y))) (fun (Hind:((((nat.le) ) (((nat.S) ) ((nat.O) ))) (n)) -> (((nat.le) ) (((nat.S) ) ((nat.O) ))) ((((exp) ) (n)) (a))) => (fun (posn:(((nat.le) ) (((nat.S) ) ((nat.O) ))) (n)) => (((nat.eq_times_body_O) (fun (y:((nat.nat) ) -> (nat.nat) ) => (((nat.le) ) (((nat.S) ) ((y) (((nat.S) ) ((nat.O) ))))) ((((nat.times) ) ((((exp) ) (n)) (a))) (n)))) (((((nat.eq_filter_nat_type_O) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) (fun (y:((nat.nat) ) -> (nat.nat) ) => (((nat.le) ) (((nat.S) ) ((y) (((nat.S) ) ((nat.O) ))))) ((((nat.times) ) ((((exp) ) (n)) (a))) (n)))) ((((nat.eq_times) ((nat.O) )) (fun (y:((nat.nat) ) -> (nat.nat) ) => (((nat.le) ) (((nat.S) ) ((y) (((nat.S) ) ((nat.O) ))))) ((((nat.times) ) ((((exp) ) (n)) (a))) (n)))) (((nat.eq_plus_body_O) (fun (y:((nat.nat) ) -> (nat.nat) ) => (((nat.le) ) (((nat.S) ) ((y) ((((nat.times) ) ((nat.O) )) (((nat.S) ) ((nat.O) )))))) ((((nat.times) ) ((((exp) ) (n)) (a))) (n)))) (((((nat.eq_filter_nat_type_O) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (fun (y:((nat.nat) ) -> (nat.nat) ) => (((nat.le) ) (((nat.S) ) ((y) ((((nat.times) ) ((nat.O) )) (((nat.S) ) ((nat.O) )))))) ((((nat.times) ) ((((exp) ) (n)) (a))) (n)))) ((((nat.eq_plus) ((nat.O) )) (fun (y:((nat.nat) ) -> (nat.nat) ) => (((nat.le) ) (((nat.S) ) ((y) ((((nat.times) ) ((nat.O) )) (((nat.S) ) ((nat.O) )))))) ((((nat.times) ) ((((exp) ) (n)) (a))) (n)))) ((((nat.eq_plus_body_S) ((nat.O) )) (fun (y:((nat.nat) ) -> (nat.nat) ) => (((nat.le) ) ((y) ((((nat.times) ) ((nat.O) )) (((nat.S) ) ((nat.O) ))))) ((((nat.times) ) ((((exp) ) (n)) (a))) (n)))) ((((((nat.eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) ((nat.O) )) (fun (y:((nat.nat) ) -> (nat.nat) ) => (((nat.le) ) ((y) ((((nat.times) ) ((nat.O) )) (((nat.S) ) ((nat.O) ))))) ((((nat.times) ) ((((exp) ) (n)) (a))) (n)))) ((((nat.eq_plus) (((nat.S) ) ((nat.O) ))) (fun (y:((nat.nat) ) -> (nat.nat) ) => (((nat.le) ) ((y) ((((nat.times) ) ((nat.O) )) (((nat.S) ) ((nat.O) ))))) ((((nat.times) ) ((((exp) ) (n)) (a))) (n)))) ((((nat.eq_times_body_S) ((nat.O) )) (fun (y:((nat.nat) ) -> (nat.nat) ) => (((nat.le) ) ((y) (((nat.S) ) ((nat.O) )))) ((((nat.times) ) ((((exp) ) (n)) (a))) (n)))) ((((((nat.eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) ((nat.O) )) (fun (y:((nat.nat) ) -> (nat.nat) ) => (((nat.le) ) ((y) (((nat.S) ) ((nat.O) )))) ((((nat.times) ) ((((exp) ) (n)) (a))) (n)))) ((((nat.eq_times) (((nat.S) ) ((nat.O) ))) (fun (y:((nat.nat) ) -> (nat.nat) ) => (((nat.le) ) ((y) (((nat.S) ) ((nat.O) )))) ((((nat.times) ) ((((exp) ) (n)) (a))) (n)))) (((((((nat.le_times) (((nat.S) ) ((nat.O) ))) ((((exp) ) (n)) (a))) (((nat.S) ) ((nat.O) ))) (n)) ((Hind) (posn))) (posn)))))))))))))))))))) (m).

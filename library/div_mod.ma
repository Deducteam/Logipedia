include "basics/pts.ma".
include "bool.ma".
include "connectives.ma".
include "leibniz.ma".
include "logic.ma".
include "nat.ma".
axiom mod_aux : ((nat) ) -> ((nat) ) -> ((nat) ) -> (nat) .
axiom mod_aux_body : ((nat) ) -> ((nat) ) -> ((nat) ) -> (nat) .
axiom axiom_mod_aux : \forall (p:(nat) ). (((equal) (((nat) ) -> ((nat) ) -> (nat) )) (((mod_aux) ) (p))) ((((filter_nat_type) (((nat) ) -> ((nat) ) -> (nat) )) ((mod_aux_body) )) (p)).
definition eq_mod_aux : \forall (p:(nat) ). (((leibniz) (((nat) ) -> ((nat) ) -> (nat) )) (((mod_aux) ) (p))) ((((filter_nat_type) (((nat) ) -> ((nat) ) -> (nat) )) ((mod_aux_body) )) (p)) := \lambda p : (nat) . ((((equal_leibniz) (((nat) ) -> ((nat) ) -> (nat) )) (((mod_aux) ) (p))) ((((filter_nat_type) (((nat) ) -> ((nat) ) -> (nat) )) ((mod_aux_body) )) (p))) ((axiom_mod_aux) (p)).
definition sym_eq_mod_aux : \forall (p:(nat) ). (((leibniz) (((nat) ) -> ((nat) ) -> (nat) )) ((((filter_nat_type) (((nat) ) -> ((nat) ) -> (nat) )) ((mod_aux_body) )) (p))) (((mod_aux) ) (p)) := \lambda p : (nat) . ((((sym_leibniz) (((nat) ) -> ((nat) ) -> (nat) )) (((mod_aux) ) (p))) ((((filter_nat_type) (((nat) ) -> ((nat) ) -> (nat) )) ((mod_aux_body) )) (p))) ((eq_mod_aux) (p)).
axiom axiom_mod_aux_body_O : (((equal) (((nat) ) -> ((nat) ) -> (nat) )) (((mod_aux_body) ) ((O) ))) (\lambda m : (nat) . \lambda n : (nat) . m).
definition eq_mod_aux_body_O : (((leibniz) (((nat) ) -> ((nat) ) -> (nat) )) (((mod_aux_body) ) ((O) ))) (\lambda m : (nat) . \lambda n : (nat) . m) := ((((equal_leibniz) (((nat) ) -> ((nat) ) -> (nat) )) (((mod_aux_body) ) ((O) ))) (\lambda m : (nat) . \lambda n : (nat) . m)) (axiom_mod_aux_body_O).
definition sym_eq_mod_aux_body_O : (((leibniz) (((nat) ) -> ((nat) ) -> (nat) )) (\lambda m : (nat) . \lambda n : (nat) . m)) (((mod_aux_body) ) ((O) )) := ((((sym_leibniz) (((nat) ) -> ((nat) ) -> (nat) )) (((mod_aux_body) ) ((O) ))) (\lambda m : (nat) . \lambda n : (nat) . m)) (eq_mod_aux_body_O).
axiom axiom_mod_aux_body_S : \forall (p:(nat) ). (((equal) (((nat) ) -> ((nat) ) -> (nat) )) (((mod_aux_body) ) (((S) ) (p)))) (\lambda m : (nat) . \lambda n : (nat) . ((((match_bool_type) ((nat) )) (m)) (((((mod_aux) ) (p)) ((((minus) ) (m)) (((S) ) (n)))) (n))) ((((leb) ) (m)) (n))).
definition eq_mod_aux_body_S : \forall (p:(nat) ). (((leibniz) (((nat) ) -> ((nat) ) -> (nat) )) (((mod_aux_body) ) (((S) ) (p)))) (\lambda m : (nat) . \lambda n : (nat) . ((((match_bool_type) ((nat) )) (m)) (((((mod_aux) ) (p)) ((((minus) ) (m)) (((S) ) (n)))) (n))) ((((leb) ) (m)) (n))) := \lambda p : (nat) . ((((equal_leibniz) (((nat) ) -> ((nat) ) -> (nat) )) (((mod_aux_body) ) (((S) ) (p)))) (\lambda m : (nat) . \lambda n : (nat) . ((((match_bool_type) ((nat) )) (m)) (((((mod_aux) ) (p)) ((((minus) ) (m)) (((S) ) (n)))) (n))) ((((leb) ) (m)) (n)))) ((axiom_mod_aux_body_S) (p)).
definition sym_eq_mod_aux_body_S : \forall (p:(nat) ). (((leibniz) (((nat) ) -> ((nat) ) -> (nat) )) (\lambda m : (nat) . \lambda n : (nat) . ((((match_bool_type) ((nat) )) (m)) (((((mod_aux) ) (p)) ((((minus) ) (m)) (((S) ) (n)))) (n))) ((((leb) ) (m)) (n)))) (((mod_aux_body) ) (((S) ) (p))) := \lambda p : (nat) . ((((sym_leibniz) (((nat) ) -> ((nat) ) -> (nat) )) (((mod_aux_body) ) (((S) ) (p)))) (\lambda m : (nat) . \lambda n : (nat) . ((((match_bool_type) ((nat) )) (m)) (((((mod_aux) ) (p)) ((((minus) ) (m)) (((S) ) (n)))) (n))) ((((leb) ) (m)) (n)))) ((eq_mod_aux_body_S) (p)).
definition mod : ((nat) ) -> ((nat) ) -> (nat)  := \lambda n : (nat) . \lambda m : (nat) . ((((match_nat_type) ((nat) )) (n)) (\lambda p : (nat) . ((((mod_aux) ) (n)) (n)) (p))) (m).
axiom div_aux : ((nat) ) -> ((nat) ) -> ((nat) ) -> (nat) .
axiom div_aux_body : ((nat) ) -> ((nat) ) -> ((nat) ) -> (nat) .
axiom axiom_div_aux : \forall (p:(nat) ). (((equal) (((nat) ) -> ((nat) ) -> (nat) )) (((div_aux) ) (p))) ((((filter_nat_type) (((nat) ) -> ((nat) ) -> (nat) )) ((div_aux_body) )) (p)).
definition eq_div_aux : \forall (p:(nat) ). (((leibniz) (((nat) ) -> ((nat) ) -> (nat) )) (((div_aux) ) (p))) ((((filter_nat_type) (((nat) ) -> ((nat) ) -> (nat) )) ((div_aux_body) )) (p)) := \lambda p : (nat) . ((((equal_leibniz) (((nat) ) -> ((nat) ) -> (nat) )) (((div_aux) ) (p))) ((((filter_nat_type) (((nat) ) -> ((nat) ) -> (nat) )) ((div_aux_body) )) (p))) ((axiom_div_aux) (p)).
definition sym_eq_div_aux : \forall (p:(nat) ). (((leibniz) (((nat) ) -> ((nat) ) -> (nat) )) ((((filter_nat_type) (((nat) ) -> ((nat) ) -> (nat) )) ((div_aux_body) )) (p))) (((div_aux) ) (p)) := \lambda p : (nat) . ((((sym_leibniz) (((nat) ) -> ((nat) ) -> (nat) )) (((div_aux) ) (p))) ((((filter_nat_type) (((nat) ) -> ((nat) ) -> (nat) )) ((div_aux_body) )) (p))) ((eq_div_aux) (p)).
axiom axiom_div_aux_body_O : (((equal) (((nat) ) -> ((nat) ) -> (nat) )) (((div_aux_body) ) ((O) ))) (\lambda m : (nat) . \lambda n : (nat) . (O) ).
definition eq_div_aux_body_O : (((leibniz) (((nat) ) -> ((nat) ) -> (nat) )) (((div_aux_body) ) ((O) ))) (\lambda m : (nat) . \lambda n : (nat) . (O) ) := ((((equal_leibniz) (((nat) ) -> ((nat) ) -> (nat) )) (((div_aux_body) ) ((O) ))) (\lambda m : (nat) . \lambda n : (nat) . (O) )) (axiom_div_aux_body_O).
definition sym_eq_div_aux_body_O : (((leibniz) (((nat) ) -> ((nat) ) -> (nat) )) (\lambda m : (nat) . \lambda n : (nat) . (O) )) (((div_aux_body) ) ((O) )) := ((((sym_leibniz) (((nat) ) -> ((nat) ) -> (nat) )) (((div_aux_body) ) ((O) ))) (\lambda m : (nat) . \lambda n : (nat) . (O) )) (eq_div_aux_body_O).
axiom axiom_div_aux_body_S : \forall (p:(nat) ). (((equal) (((nat) ) -> ((nat) ) -> (nat) )) (((div_aux_body) ) (((S) ) (p)))) (\lambda m : (nat) . \lambda n : (nat) . ((((match_bool_type) ((nat) )) ((O) )) (((S) ) (((((div_aux) ) (p)) ((((minus) ) (m)) (((S) ) (n)))) (n)))) ((((leb) ) (m)) (n))).
definition eq_div_aux_body_S : \forall (p:(nat) ). (((leibniz) (((nat) ) -> ((nat) ) -> (nat) )) (((div_aux_body) ) (((S) ) (p)))) (\lambda m : (nat) . \lambda n : (nat) . ((((match_bool_type) ((nat) )) ((O) )) (((S) ) (((((div_aux) ) (p)) ((((minus) ) (m)) (((S) ) (n)))) (n)))) ((((leb) ) (m)) (n))) := \lambda p : (nat) . ((((equal_leibniz) (((nat) ) -> ((nat) ) -> (nat) )) (((div_aux_body) ) (((S) ) (p)))) (\lambda m : (nat) . \lambda n : (nat) . ((((match_bool_type) ((nat) )) ((O) )) (((S) ) (((((div_aux) ) (p)) ((((minus) ) (m)) (((S) ) (n)))) (n)))) ((((leb) ) (m)) (n)))) ((axiom_div_aux_body_S) (p)).
definition sym_eq_div_aux_body_S : \forall (p:(nat) ). (((leibniz) (((nat) ) -> ((nat) ) -> (nat) )) (\lambda m : (nat) . \lambda n : (nat) . ((((match_bool_type) ((nat) )) ((O) )) (((S) ) (((((div_aux) ) (p)) ((((minus) ) (m)) (((S) ) (n)))) (n)))) ((((leb) ) (m)) (n)))) (((div_aux_body) ) (((S) ) (p))) := \lambda p : (nat) . ((((sym_leibniz) (((nat) ) -> ((nat) ) -> (nat) )) (((div_aux_body) ) (((S) ) (p)))) (\lambda m : (nat) . \lambda n : (nat) . ((((match_bool_type) ((nat) )) ((O) )) (((S) ) (((((div_aux) ) (p)) ((((minus) ) (m)) (((S) ) (n)))) (n)))) ((((leb) ) (m)) (n)))) ((eq_div_aux_body_S) (p)).
definition div : ((nat) ) -> ((nat) ) -> (nat)  := \lambda n : (nat) . \lambda m : (nat) . ((((match_nat_type) ((nat) )) (((S) ) (n))) (\lambda p : (nat) . ((((div_aux) ) (n)) (n)) (p))) (m).
definition le_mod_aux_m_m : \forall (p:(nat) ). \forall (n:(nat) ). \forall (m:(nat) ). ((((le) ) (n)) (p)) -> (((le) ) (((((mod_aux) ) (p)) (n)) (m))) (m) := \lambda p : (nat) . ((((nat_ind) (\lambda j_x_365 : (nat) . \forall (n:(nat) ). \forall (m:(nat) ). ((((le) ) (n)) (j_x_365)) -> (((le) ) (((((mod_aux) ) (j_x_365)) (n)) (m))) (m))) (\lambda n : (nat) . \lambda m : (nat) . (((sym_eq_mod_aux) ((O) )) (\lambda y : ((nat) ) -> ((nat) ) -> (nat) . ((((le) ) (n)) ((O) )) -> (((le) ) (((y) (n)) (m))) (m))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> ((nat) ) -> (nat) )) ((mod_aux_body) )) (\lambda y : ((nat) ) -> ((nat) ) -> (nat) . ((((le) ) (n)) ((O) )) -> (((le) ) (((y) (n)) (m))) (m))) (((sym_eq_mod_aux_body_O) (\lambda y : ((nat) ) -> ((nat) ) -> (nat) . ((((le) ) (n)) ((O) )) -> (((le) ) (((y) (n)) (m))) (m))) (\lambda lenO : (((le) ) (n)) ((O) ). (((((le_n_O_elim) (n)) (lenO)) (\lambda j__ : (nat) . (((le) ) (j__)) (m))) ((le_O_n) (m)))))))) (\lambda q : (nat) . (((sym_eq_mod_aux) (((S) ) (q))) (\lambda y : ((nat) ) -> ((nat) ) -> (nat) . (\forall (n:(nat) ). \forall (m:(nat) ). ((((le) ) (n)) (q)) -> (((le) ) (((((mod_aux) ) (q)) (n)) (m))) (m)) -> \forall (n:(nat) ). \forall (m:(nat) ). ((((le) ) (n)) (((S) ) (q))) -> (((le) ) (((y) (n)) (m))) (m))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> ((nat) ) -> (nat) )) ((mod_aux_body) )) (q)) (\lambda y : ((nat) ) -> ((nat) ) -> (nat) . (\forall (n:(nat) ). \forall (m:(nat) ). ((((le) ) (n)) (q)) -> (((le) ) (((((mod_aux) ) (q)) (n)) (m))) (m)) -> \forall (n:(nat) ). \forall (m:(nat) ). ((((le) ) (n)) (((S) ) (q))) -> (((le) ) (((y) (n)) (m))) (m))) ((((sym_eq_mod_aux_body_S) (q)) (\lambda y : ((nat) ) -> ((nat) ) -> (nat) . (\forall (n:(nat) ). \forall (m:(nat) ). ((((le) ) (n)) (q)) -> (((le) ) (((((mod_aux) ) (q)) (n)) (m))) (m)) -> \forall (n:(nat) ). \forall (m:(nat) ). ((((le) ) (n)) (((S) ) (q))) -> (((le) ) (((y) (n)) (m))) (m))) (\lambda Hind : \forall (n:(nat) ). \forall (m:(nat) ). ((((le) ) (n)) (q)) -> (((le) ) (((((mod_aux) ) (q)) (n)) (m))) (m). (\lambda n : (nat) . \lambda m : (nat) . \lambda len : (((le) ) (n)) (((S) ) (q)). ((((((leb_elim) (n)) (m)) (\lambda j__ : (bool) . (((le) ) (((((match_bool_type) ((nat) )) (n)) (((((mod_aux) ) (q)) ((((minus) ) (n)) (((S) ) (m)))) (m))) (j__))) (m))) ((((((sym_eq_match_bool_type_true) ((nat) )) (n)) (((((mod_aux) ) (q)) ((((minus) ) (n)) (((S) ) (m)))) (m))) (\lambda y : (nat) . ((((le) ) (n)) (m)) -> (((le) ) (y)) (m))) (\lambda auto : (((le) ) (n)) (m). (auto)))) ((((((sym_eq_match_bool_type_false) ((nat) )) (n)) (((((mod_aux) ) (q)) ((((minus) ) (n)) (((S) ) (m)))) (m))) (\lambda y : (nat) . (((Not) ) ((((le) ) (n)) (m))) -> (((le) ) (y)) (m))) (\lambda notlenm : ((Not) ) ((((le) ) (n)) (m)). ((((Hind) ((((minus) ) (n)) (((S) ) (m)))) (m)) (((((le_plus_to_minus) (n)) (((S) ) (m))) (q)) ((((((transitive_le) (n)) (((S) ) (q))) ((((plus) ) (q)) (((S) ) (m)))) (len)) (((((eq_coerc) ((((le) ) (((S) ) (q))) ((((plus) ) (((S) ) (q))) (m)))) ((((le) ) (((S) ) (q))) ((((plus) ) (q)) (((S) ) (m))))) (((le_plus_n_r) (m)) (((S) ) (q)))) (((((((rewrite_l) ((nat) )) ((((plus) ) (m)) (((S) ) (q)))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (((S) ) (q))) (j__))) ((((le) ) (((S) ) (q))) ((((plus) ) (q)) (((S) ) (m)))))) (((((((rewrite_r) ((nat) )) ((((plus) ) (q)) (((S) ) (m)))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (((S) ) (q))) (j__))) ((((le) ) (((S) ) (q))) ((((plus) ) (q)) (((S) ) (m)))))) (((refl) (Prop)) ((((le) ) (((S) ) (q))) ((((plus) ) (q)) (((S) ) (m)))))) ((((plus) ) (m)) (((S) ) (q)))) (((((((rewrite_l) ((nat) )) (((S) ) ((((plus) ) (m)) (q)))) (\lambda j__ : (nat) . (((eq) ((nat) )) (j__)) ((((plus) ) (q)) (((S) ) (m))))) (((((((rewrite_l) ((nat) )) ((((plus) ) (q)) (m))) (\lambda j__ : (nat) . (((eq) ((nat) )) (((S) ) (j__))) ((((plus) ) (q)) (((S) ) (m))))) (((plus_n_Sm) (q)) (m))) ((((plus) ) (m)) (q))) (((commutative_plus) (q)) (m)))) ((((plus) ) (m)) (((S) ) (q)))) (((plus_n_Sm) (m)) (q))))) ((((plus) ) (((S) ) (q))) (m))) (((commutative_plus) (m)) (((S) ) (q))))))))))))))))) (p).
definition lt_mod_m_m : \forall (n:(nat) ). \forall (m:(nat) ). ((((lt) ) ((O) )) (m)) -> (((lt) ) ((((mod) ) (n)) (m))) (m) := \lambda n : (nat) . \lambda m : (nat) . ((((match_nat_prop) (\lambda j__ : (nat) . ((((lt) ) ((O) )) (j__)) -> (((lt) ) ((((mod) ) (n)) (j__))) (j__))) (\lambda abs : (((lt) ) ((O) )) ((O) ). (((falsity) ((((lt) ) ((((mod) ) (n)) ((O) ))) ((O) ))) ((((absurd) ((((le) ) (((S) ) ((O) ))) ((O) ))) (abs)) ((not_le_Sn_O) ((O) )))))) (\lambda p : (nat) . ((((((sym_eq_match_nat_type_S) ((nat) )) (n)) (\lambda q : (nat) . ((((mod_aux) ) (n)) (n)) (q))) (p)) (\lambda y : (nat) . ((((lt) ) ((O) )) (((S) ) (p))) -> (((lt) ) (y)) (((S) ) (p)))) (\lambda j__ : (((lt) ) ((O) )) (((S) ) (p)). ((((le_S_S) (((((mod_aux) ) (n)) (n)) (p))) (p)) (((((le_mod_aux_m_m) (n)) (n)) (p)) ((le_n) (n))))))) (m).
definition div_aux_mod_aux : \forall (p:(nat) ). \forall (n:(nat) ). \forall (m:(nat) ). (((eq) ((nat) )) (n)) ((((plus) ) ((((times) ) (((((div_aux) ) (p)) (n)) (m))) (((S) ) (m)))) (((((mod_aux) ) (p)) (n)) (m))) := \lambda p : (nat) . ((((nat_ind) (\lambda j_x_365 : (nat) . \forall (n:(nat) ). \forall (m:(nat) ). (((eq) ((nat) )) (n)) ((((plus) ) ((((times) ) (((((div_aux) ) (j_x_365)) (n)) (m))) (((S) ) (m)))) (((((mod_aux) ) (j_x_365)) (n)) (m))))) (\lambda n : (nat) . \lambda m : (nat) . (((sym_eq_div_aux) ((O) )) (\lambda y : ((nat) ) -> ((nat) ) -> (nat) . (((eq) ((nat) )) (n)) ((((plus) ) ((((times) ) (((y) (n)) (m))) (((S) ) (m)))) (((((mod_aux) ) ((O) )) (n)) (m))))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> ((nat) ) -> (nat) )) ((div_aux_body) )) (\lambda y : ((nat) ) -> ((nat) ) -> (nat) . (((eq) ((nat) )) (n)) ((((plus) ) ((((times) ) (((y) (n)) (m))) (((S) ) (m)))) (((((mod_aux) ) ((O) )) (n)) (m))))) (((sym_eq_div_aux_body_O) (\lambda y : ((nat) ) -> ((nat) ) -> (nat) . (((eq) ((nat) )) (n)) ((((plus) ) ((((times) ) (((y) (n)) (m))) (((S) ) (m)))) (((((mod_aux) ) ((O) )) (n)) (m))))) ((((((eq_match_nat_type_O) ((nat) )) ((O) )) (\lambda q : (nat) . ((((match_bool_type) ((nat) )) ((O) )) (((S) ) (((((div_aux) ) (q)) ((((minus) ) (n)) (((S) ) (m)))) (m)))) ((((leb) ) (n)) (m)))) (\lambda y : (nat) . (((eq) ((nat) )) (n)) ((((plus) ) ((((times) ) (y)) (((S) ) (m)))) (((((mod_aux) ) ((O) )) (n)) (m))))) ((((sym_eq_mod_aux) ((O) )) (\lambda y : ((nat) ) -> ((nat) ) -> (nat) . (((eq) ((nat) )) (n)) ((((plus) ) ((((times) ) (((\lambda m0 : (nat) . \lambda n0 : (nat) . ((((match_nat_type) ((nat) )) ((O) )) (\lambda q : (nat) . ((((match_bool_type) ((nat) )) ((O) )) (((S) ) (((((div_aux) ) (q)) ((((minus) ) (m0)) (((S) ) (n0)))) (n0)))) ((((leb) ) (m0)) (n0)))) ((O) )) (n)) (m))) (((S) ) (m)))) (((y) (n)) (m))))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> ((nat) ) -> (nat) )) ((mod_aux_body) )) (\lambda y : ((nat) ) -> ((nat) ) -> (nat) . (((eq) ((nat) )) (n)) ((((plus) ) ((((times) ) (((\lambda m0 : (nat) . \lambda n0 : (nat) . ((((match_nat_type) ((nat) )) ((O) )) (\lambda q : (nat) . ((((match_bool_type) ((nat) )) ((O) )) (((S) ) (((((div_aux) ) (q)) ((((minus) ) (m0)) (((S) ) (n0)))) (n0)))) ((((leb) ) (m0)) (n0)))) ((O) )) (n)) (m))) (((S) ) (m)))) (((y) (n)) (m))))) (((sym_eq_mod_aux_body_O) (\lambda y : ((nat) ) -> ((nat) ) -> (nat) . (((eq) ((nat) )) (n)) ((((plus) ) ((((times) ) (((\lambda m0 : (nat) . \lambda n0 : (nat) . ((((match_nat_type) ((nat) )) ((O) )) (\lambda q : (nat) . ((((match_bool_type) ((nat) )) ((O) )) (((S) ) (((((div_aux) ) (q)) ((((minus) ) (m0)) (((S) ) (n0)))) (n0)))) ((((leb) ) (m0)) (n0)))) ((O) )) (n)) (m))) (((S) ) (m)))) (((y) (n)) (m))))) ((((((sym_eq_match_nat_type_O) ((nat) )) ((O) )) (\lambda q : (nat) . ((((match_bool_type) ((nat) )) ((O) )) (((S) ) (((((div_aux) ) (q)) ((((minus) ) (n)) (((S) ) (m)))) (m)))) ((((leb) ) (n)) (m)))) (\lambda y : (nat) . (((eq) ((nat) )) (n)) ((((plus) ) ((((times) ) (((\lambda m0 : (nat) . \lambda n0 : (nat) . y) (n)) (m))) (((S) ) (m)))) (n)))) ((((sym_eq_times) ((O) )) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) (n)) ((((plus) ) ((y) (((S) ) (m)))) (n)))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((times_body) )) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) (n)) ((((plus) ) ((y) (((S) ) (m)))) (n)))) (((sym_eq_times_body_O) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) (n)) ((((plus) ) ((y) (((S) ) (m)))) (n)))) ((((sym_eq_plus) ((O) )) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) (n)) ((y) (n)))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((plus_body) )) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) (n)) ((y) (n)))) (((sym_eq_plus_body_O) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) (n)) ((y) (n)))) (((refl) ((nat) )) (n))))))))))))))))) (\lambda q : (nat) . (((sym_eq_div_aux) (((S) ) (q))) (\lambda y : ((nat) ) -> ((nat) ) -> (nat) . (\forall (n:(nat) ). \forall (m:(nat) ). (((eq) ((nat) )) (n)) ((((plus) ) ((((times) ) (((((div_aux) ) (q)) (n)) (m))) (((S) ) (m)))) (((((mod_aux) ) (q)) (n)) (m)))) -> \forall (n:(nat) ). \forall (m:(nat) ). (((eq) ((nat) )) (n)) ((((plus) ) ((((times) ) (((y) (n)) (m))) (((S) ) (m)))) (((((mod_aux) ) (((S) ) (q))) (n)) (m))))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> ((nat) ) -> (nat) )) ((div_aux_body) )) (q)) (\lambda y : ((nat) ) -> ((nat) ) -> (nat) . (\forall (n:(nat) ). \forall (m:(nat) ). (((eq) ((nat) )) (n)) ((((plus) ) ((((times) ) (((((div_aux) ) (q)) (n)) (m))) (((S) ) (m)))) (((((mod_aux) ) (q)) (n)) (m)))) -> \forall (n:(nat) ). \forall (m:(nat) ). (((eq) ((nat) )) (n)) ((((plus) ) ((((times) ) (((y) (n)) (m))) (((S) ) (m)))) (((((mod_aux) ) (((S) ) (q))) (n)) (m))))) ((((sym_eq_div_aux_body_S) (q)) (\lambda y : ((nat) ) -> ((nat) ) -> (nat) . (\forall (n:(nat) ). \forall (m:(nat) ). (((eq) ((nat) )) (n)) ((((plus) ) ((((times) ) (((((div_aux) ) (q)) (n)) (m))) (((S) ) (m)))) (((((mod_aux) ) (q)) (n)) (m)))) -> \forall (n:(nat) ). \forall (m:(nat) ). (((eq) ((nat) )) (n)) ((((plus) ) ((((times) ) (((y) (n)) (m))) (((S) ) (m)))) (((((mod_aux) ) (((S) ) (q))) (n)) (m))))) (\lambda Hind : \forall (n:(nat) ). \forall (m:(nat) ). (((eq) ((nat) )) (n)) ((((plus) ) ((((times) ) (((((div_aux) ) (q)) (n)) (m))) (((S) ) (m)))) (((((mod_aux) ) (q)) (n)) (m))). (\lambda n : (nat) . \lambda m : (nat) . ((((((eq_match_nat_type_S) ((nat) )) ((O) )) (\lambda q0 : (nat) . ((((match_bool_type) ((nat) )) ((O) )) (((S) ) (((((div_aux) ) (q0)) ((((minus) ) (n)) (((S) ) (m)))) (m)))) ((((leb) ) (n)) (m)))) (q)) (\lambda y : (nat) . (((eq) ((nat) )) (n)) ((((plus) ) ((((times) ) (y)) (((S) ) (m)))) (((((mod_aux) ) (((S) ) (q))) (n)) (m))))) ((((sym_eq_mod_aux) (((S) ) (q))) (\lambda y : ((nat) ) -> ((nat) ) -> (nat) . (((eq) ((nat) )) (n)) ((((plus) ) ((((times) ) (((\lambda m0 : (nat) . \lambda n0 : (nat) . ((((match_nat_type) ((nat) )) ((O) )) (\lambda q0 : (nat) . ((((match_bool_type) ((nat) )) ((O) )) (((S) ) (((((div_aux) ) (q0)) ((((minus) ) (m0)) (((S) ) (n0)))) (n0)))) ((((leb) ) (m0)) (n0)))) (((S) ) (q))) (n)) (m))) (((S) ) (m)))) (((y) (n)) (m))))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> ((nat) ) -> (nat) )) ((mod_aux_body) )) (q)) (\lambda y : ((nat) ) -> ((nat) ) -> (nat) . (((eq) ((nat) )) (n)) ((((plus) ) ((((times) ) (((\lambda m0 : (nat) . \lambda n0 : (nat) . ((((match_nat_type) ((nat) )) ((O) )) (\lambda q0 : (nat) . ((((match_bool_type) ((nat) )) ((O) )) (((S) ) (((((div_aux) ) (q0)) ((((minus) ) (m0)) (((S) ) (n0)))) (n0)))) ((((leb) ) (m0)) (n0)))) (((S) ) (q))) (n)) (m))) (((S) ) (m)))) (((y) (n)) (m))))) ((((sym_eq_mod_aux_body_S) (q)) (\lambda y : ((nat) ) -> ((nat) ) -> (nat) . (((eq) ((nat) )) (n)) ((((plus) ) ((((times) ) (((\lambda m0 : (nat) . \lambda n0 : (nat) . ((((match_nat_type) ((nat) )) ((O) )) (\lambda q0 : (nat) . ((((match_bool_type) ((nat) )) ((O) )) (((S) ) (((((div_aux) ) (q0)) ((((minus) ) (m0)) (((S) ) (n0)))) (n0)))) ((((leb) ) (m0)) (n0)))) (((S) ) (q))) (n)) (m))) (((S) ) (m)))) (((y) (n)) (m))))) (((((((sym_eq_match_nat_type_S) ((nat) )) ((O) )) (\lambda z : (nat) . ((((match_bool_type) ((nat) )) ((O) )) (((S) ) (((((div_aux) ) (z)) ((((minus) ) (n)) (((S) ) (m)))) (m)))) ((((leb) ) (n)) (m)))) (q)) (\lambda y : (nat) . (((eq) ((nat) )) (n)) ((((plus) ) ((((times) ) (y)) (((S) ) (m)))) (((((match_bool_type) ((nat) )) (n)) (((((mod_aux) ) (q)) ((((minus) ) (n)) (((S) ) (m)))) (m))) ((((leb) ) (n)) (m)))))) ((((((leb_elim) (n)) (m)) (\lambda j__ : (bool) . (((eq) ((nat) )) (n)) ((((plus) ) ((((times) ) (((((match_bool_type) ((nat) )) ((O) )) (((S) ) (((((div_aux) ) (q)) ((((minus) ) (n)) (((S) ) (m)))) (m)))) (j__))) (((S) ) (m)))) (((((match_bool_type) ((nat) )) (n)) (((((mod_aux) ) (q)) ((((minus) ) (n)) (((S) ) (m)))) (m))) (j__))))) ((((((sym_eq_match_bool_type_true) ((nat) )) ((O) )) (((S) ) (((((div_aux) ) (q)) ((((minus) ) (n)) (((S) ) (m)))) (m)))) (\lambda x : (nat) . ((((le) ) (n)) (m)) -> (((eq) ((nat) )) (n)) ((((plus) ) ((((times) ) (x)) (((S) ) (m)))) (((((match_bool_type) ((nat) )) (n)) (((((mod_aux) ) (q)) ((((minus) ) (n)) (((S) ) (m)))) (m))) ((true) ))))) ((((sym_eq_times) ((O) )) (\lambda y : ((nat) ) -> (nat) . ((((le) ) (n)) (m)) -> (((eq) ((nat) )) (n)) ((((plus) ) ((y) (((S) ) (m)))) (((((match_bool_type) ((nat) )) (n)) (((((mod_aux) ) (q)) ((((minus) ) (n)) (((S) ) (m)))) (m))) ((true) ))))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((times_body) )) (\lambda y : ((nat) ) -> (nat) . ((((le) ) (n)) (m)) -> (((eq) ((nat) )) (n)) ((((plus) ) ((y) (((S) ) (m)))) (((((match_bool_type) ((nat) )) (n)) (((((mod_aux) ) (q)) ((((minus) ) (n)) (((S) ) (m)))) (m))) ((true) ))))) (((sym_eq_times_body_O) (\lambda y : ((nat) ) -> (nat) . ((((le) ) (n)) (m)) -> (((eq) ((nat) )) (n)) ((((plus) ) ((y) (((S) ) (m)))) (((((match_bool_type) ((nat) )) (n)) (((((mod_aux) ) (q)) ((((minus) ) (n)) (((S) ) (m)))) (m))) ((true) ))))) ((((((sym_eq_match_bool_type_true) ((nat) )) (n)) (((((mod_aux) ) (q)) ((((minus) ) (n)) (((S) ) (m)))) (m))) (\lambda y : (nat) . ((((le) ) (n)) (m)) -> (((eq) ((nat) )) (n)) ((((plus) ) ((O) )) (y)))) ((((sym_eq_plus) ((O) )) (\lambda y : ((nat) ) -> (nat) . ((((le) ) (n)) (m)) -> (((eq) ((nat) )) (n)) ((y) (n)))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((plus_body) )) (\lambda y : ((nat) ) -> (nat) . ((((le) ) (n)) (m)) -> (((eq) ((nat) )) (n)) ((y) (n)))) (((sym_eq_plus_body_O) (\lambda y : ((nat) ) -> (nat) . ((((le) ) (n)) (m)) -> (((eq) ((nat) )) (n)) ((y) (n)))) (\lambda lenm : (((le) ) (n)) (m). (((refl) ((nat) )) (n)))))))))))) ((((((sym_eq_match_bool_type_false) ((nat) )) (n)) (((((mod_aux) ) (q)) ((((minus) ) (n)) (((S) ) (m)))) (m))) (\lambda x : (nat) . (((Not) ) ((((le) ) (n)) (m))) -> (((eq) ((nat) )) (n)) ((((plus) ) ((((times) ) (((((match_bool_type) ((nat) )) ((O) )) (((S) ) (((((div_aux) ) (q)) ((((minus) ) (n)) (((S) ) (m)))) (m)))) ((false) ))) (((S) ) (m)))) (x)))) ((((((sym_eq_match_bool_type_false) ((nat) )) ((O) )) (((S) ) (((((div_aux) ) (q)) ((((minus) ) (n)) (((S) ) (m)))) (m)))) (\lambda y : (nat) . (((Not) ) ((((le) ) (n)) (m))) -> (((eq) ((nat) )) (n)) ((((plus) ) ((((times) ) (y)) (((S) ) (m)))) (((((mod_aux) ) (q)) ((((minus) ) (n)) (((S) ) (m)))) (m))))) ((((sym_eq_times) (((S) ) (((((div_aux) ) (q)) ((((minus) ) (n)) (((S) ) (m)))) (m)))) (\lambda y : ((nat) ) -> (nat) . (((Not) ) ((((le) ) (n)) (m))) -> (((eq) ((nat) )) (n)) ((((plus) ) ((y) (((S) ) (m)))) (((((mod_aux) ) (q)) ((((minus) ) (n)) (((S) ) (m)))) (m))))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((times_body) )) (((((div_aux) ) (q)) ((((minus) ) (n)) (((S) ) (m)))) (m))) (\lambda y : ((nat) ) -> (nat) . (((Not) ) ((((le) ) (n)) (m))) -> (((eq) ((nat) )) (n)) ((((plus) ) ((y) (((S) ) (m)))) (((((mod_aux) ) (q)) ((((minus) ) (n)) (((S) ) (m)))) (m))))) ((((sym_eq_times_body_S) (((((div_aux) ) (q)) ((((minus) ) (n)) (((S) ) (m)))) (m))) (\lambda y : ((nat) ) -> (nat) . (((Not) ) ((((le) ) (n)) (m))) -> (((eq) ((nat) )) (n)) ((((plus) ) ((y) (((S) ) (m)))) (((((mod_aux) ) (q)) ((((minus) ) (n)) (((S) ) (m)))) (m))))) ((((sym_eq_plus) (((S) ) (m))) (\lambda y : ((nat) ) -> (nat) . (((Not) ) ((((le) ) (n)) (m))) -> (((eq) ((nat) )) (n)) ((((plus) ) ((y) ((((times) ) (((((div_aux) ) (q)) ((((minus) ) (n)) (((S) ) (m)))) (m))) (((S) ) (m))))) (((((mod_aux) ) (q)) ((((minus) ) (n)) (((S) ) (m)))) (m))))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((plus_body) )) (m)) (\lambda y : ((nat) ) -> (nat) . (((Not) ) ((((le) ) (n)) (m))) -> (((eq) ((nat) )) (n)) ((((plus) ) ((y) ((((times) ) (((((div_aux) ) (q)) ((((minus) ) (n)) (((S) ) (m)))) (m))) (((S) ) (m))))) (((((mod_aux) ) (q)) ((((minus) ) (n)) (((S) ) (m)))) (m))))) ((((sym_eq_plus_body_S) (m)) (\lambda y : ((nat) ) -> (nat) . (((Not) ) ((((le) ) (n)) (m))) -> (((eq) ((nat) )) (n)) ((((plus) ) ((y) ((((times) ) (((((div_aux) ) (q)) ((((minus) ) (n)) (((S) ) (m)))) (m))) (((S) ) (m))))) (((((mod_aux) ) (q)) ((((minus) ) (n)) (((S) ) (m)))) (m))))) ((((sym_eq_plus) (((S) ) ((((plus) ) (m)) ((((times) ) (((((div_aux) ) (q)) ((((minus) ) (n)) (((S) ) (m)))) (m))) (((S) ) (m)))))) (\lambda y : ((nat) ) -> (nat) . (((Not) ) ((((le) ) (n)) (m))) -> (((eq) ((nat) )) (n)) ((y) (((((mod_aux) ) (q)) ((((minus) ) (n)) (((S) ) (m)))) (m))))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((plus_body) )) ((((plus) ) (m)) ((((times) ) (((((div_aux) ) (q)) ((((minus) ) (n)) (((S) ) (m)))) (m))) (((S) ) (m))))) (\lambda y : ((nat) ) -> (nat) . (((Not) ) ((((le) ) (n)) (m))) -> (((eq) ((nat) )) (n)) ((y) (((((mod_aux) ) (q)) ((((minus) ) (n)) (((S) ) (m)))) (m))))) ((((sym_eq_plus_body_S) ((((plus) ) (m)) ((((times) ) (((((div_aux) ) (q)) ((((minus) ) (n)) (((S) ) (m)))) (m))) (((S) ) (m))))) (\lambda y : ((nat) ) -> (nat) . (((Not) ) ((((le) ) (n)) (m))) -> (((eq) ((nat) )) (n)) ((y) (((((mod_aux) ) (q)) ((((minus) ) (n)) (((S) ) (m)))) (m))))) (\lambda lenm : ((Not) ) ((((le) ) (n)) (m)). (((((((eq_ind_r) ((nat) )) ((((plus) ) (m)) ((((plus) ) ((((times) ) (((((div_aux) ) (q)) ((((minus) ) (n)) (((S) ) (m)))) (m))) (((S) ) (m)))) (((((mod_aux) ) (q)) ((((minus) ) (n)) (((S) ) (m)))) (m))))) (\lambda x : (nat) . (((eq) ((nat) )) (n)) (((S) ) (x)))) (((((((eq_ind) ((nat) )) ((((minus) ) (n)) (((S) ) (m)))) (\lambda x_1 : (nat) . (((eq) ((nat) )) (n)) (((S) ) ((((plus) ) (m)) (x_1))))) (((((eq_coerc) ((((eq) ((nat) )) (n)) ((((plus) ) ((((minus) ) (n)) (((S) ) (m)))) (((S) ) (m))))) ((((eq) ((nat) )) (n)) (((S) ) ((((plus) ) (m)) ((((minus) ) (n)) (((S) ) (m))))))) ((((plus_minus_m_m) (n)) (((S) ) (m))) ((((not_le_to_lt) (n)) (m)) (lenm)))) (((((((rewrite_r) ((nat) )) (((pred) ) ((((minus) ) (n)) (m)))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((eq) ((nat) )) (n)) ((((plus) ) (j__)) (((S) ) (m))))) ((((eq) ((nat) )) (n)) (((S) ) ((((plus) ) (m)) ((((minus) ) (n)) (((S) ) (m)))))))) (((((((rewrite_r) ((nat) )) (((pred) ) ((((minus) ) (n)) (m)))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((eq) ((nat) )) (n)) ((((plus) ) (((pred) ) ((((minus) ) (n)) (m)))) (((S) ) (m))))) ((((eq) ((nat) )) (n)) (((S) ) ((((plus) ) (m)) (j__)))))) (((((((rewrite_r) ((nat) )) ((((plus) ) (m)) (((S) ) (((pred) ) ((((minus) ) (n)) (m)))))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((eq) ((nat) )) (n)) ((((plus) ) (((pred) ) ((((minus) ) (n)) (m)))) (((S) ) (m))))) ((((eq) ((nat) )) (n)) (j__)))) (((((((rewrite_r) ((nat) )) ((((plus) ) (m)) (((S) ) (((pred) ) ((((minus) ) (n)) (m)))))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((eq) ((nat) )) (n)) (j__))) ((((eq) ((nat) )) (n)) ((((plus) ) (m)) (((S) ) (((pred) ) ((((minus) ) (n)) (m)))))))) (((refl) (Prop)) ((((eq) ((nat) )) (n)) ((((plus) ) (m)) (((S) ) (((pred) ) ((((minus) ) (n)) (m)))))))) ((((plus) ) (((pred) ) ((((minus) ) (n)) (m)))) (((S) ) (m)))) (((((((rewrite_l) ((nat) )) (((S) ) ((((plus) ) (((pred) ) ((((minus) ) (n)) (m)))) (m)))) (\lambda j__ : (nat) . (((eq) ((nat) )) (j__)) ((((plus) ) (m)) (((S) ) (((pred) ) ((((minus) ) (n)) (m))))))) (((((((rewrite_l) ((nat) )) ((((plus) ) (m)) (((pred) ) ((((minus) ) (n)) (m))))) (\lambda j__ : (nat) . (((eq) ((nat) )) (((S) ) (j__))) ((((plus) ) (m)) (((S) ) (((pred) ) ((((minus) ) (n)) (m))))))) (((plus_n_Sm) (m)) (((pred) ) ((((minus) ) (n)) (m))))) ((((plus) ) (((pred) ) ((((minus) ) (n)) (m)))) (m))) (((commutative_plus) (m)) (((pred) ) ((((minus) ) (n)) (m)))))) ((((plus) ) (((pred) ) ((((minus) ) (n)) (m)))) (((S) ) (m)))) (((plus_n_Sm) (((pred) ) ((((minus) ) (n)) (m)))) (m))))) (((S) ) ((((plus) ) (m)) (((pred) ) ((((minus) ) (n)) (m)))))) (((plus_n_Sm) (m)) (((pred) ) ((((minus) ) (n)) (m)))))) ((((minus) ) (n)) (((S) ) (m)))) (((eq_minus_S_pred) (n)) (m)))) ((((minus) ) (n)) (((S) ) (m)))) (((eq_minus_S_pred) (n)) (m))))) ((((plus) ) ((((times) ) (((((div_aux) ) (q)) ((((minus) ) (n)) (((S) ) (m)))) (m))) (((S) ) (m)))) (((((mod_aux) ) (q)) ((((minus) ) (n)) (((S) ) (m)))) (m)))) (((Hind) ((((minus) ) (n)) (((S) ) (m)))) (m)))) ((((plus) ) ((((plus) ) (m)) ((((times) ) (((((div_aux) ) (q)) ((((minus) ) (n)) (((S) ) (m)))) (m))) (((S) ) (m))))) (((((mod_aux) ) (q)) ((((minus) ) (n)) (((S) ) (m)))) (m)))) ((((associative_plus) (m)) ((((times) ) (((((div_aux) ) (q)) ((((minus) ) (n)) (((S) ) (m)))) (m))) (((S) ) (m)))) (((((mod_aux) ) (q)) ((((minus) ) (n)) (((S) ) (m)))) (m))))))))))))))))))))))))))) (p).
definition div_mod : \forall (n:(nat) ). \forall (m:(nat) ). (((eq) ((nat) )) (n)) ((((plus) ) ((((times) ) ((((div) ) (n)) (m))) (m))) ((((mod) ) (n)) (m))) := \lambda n : (nat) . \lambda m : (nat) . ((((match_nat_prop) (\lambda j__ : (nat) . (((eq) ((nat) )) (n)) ((((plus) ) ((((times) ) ((((div) ) (n)) (j__))) (j__))) ((((mod) ) (n)) (j__))))) ((((sym_eq_times) ((((div) ) (n)) ((O) ))) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) (n)) ((((plus) ) ((y) ((O) ))) ((((mod) ) (n)) ((O) ))))) ((((((sym_eq_match_nat_type_O) ((nat) )) (((S) ) (n))) (\lambda p : (nat) . ((((div_aux) ) (n)) (n)) (p))) (\lambda y : (nat) . (((eq) ((nat) )) (n)) ((((plus) ) (((((filter_nat_type) (((nat) ) -> (nat) )) ((times_body) )) (y)) ((O) ))) (((((match_nat_type) ((nat) )) (n)) (\lambda p : (nat) . ((((mod_aux) ) (n)) (n)) (p))) ((O) ))))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((times_body) )) (n)) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) (n)) ((((plus) ) ((y) ((O) ))) ((((mod) ) (n)) ((O) ))))) ((((sym_eq_times_body_S) (n)) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) (n)) ((((plus) ) ((y) ((O) ))) ((((mod) ) (n)) ((O) ))))) ((((((sym_eq_match_nat_type_O) ((nat) )) (n)) (\lambda p : (nat) . ((((mod_aux) ) (n)) (n)) (p))) (\lambda y : (nat) . (((eq) ((nat) )) (n)) ((((plus) ) ((((plus) ) ((O) )) ((((times) ) (n)) ((O) )))) (y)))) ((((sym_eq_plus) ((O) )) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) (n)) ((((plus) ) ((y) ((((times) ) (n)) ((O) )))) (n)))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((plus_body) )) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) (n)) ((((plus) ) ((y) ((((times) ) (n)) ((O) )))) (n)))) (((sym_eq_plus_body_O) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) (n)) ((((plus) ) ((y) ((((times) ) (n)) ((O) )))) (n)))) (((((((rewrite_l) ((nat) )) ((O) )) (\lambda j__ : (nat) . (((eq) ((nat) )) (n)) ((((plus) ) (j__)) (n)))) (((((((rewrite_r) ((nat) )) ((((plus) ) (n)) ((O) ))) (\lambda j__ : (nat) . (((eq) ((nat) )) (n)) (j__))) (((((((rewrite_l) ((nat) )) (n)) (\lambda j__ : (nat) . (((eq) ((nat) )) (n)) (j__))) (((refl) ((nat) )) (n))) ((((plus) ) (n)) ((O) ))) ((plus_n_O) (n)))) ((((plus) ) ((O) )) (n))) (((commutative_plus) ((O) )) (n)))) ((((times) ) (n)) ((O) ))) ((times_n_O) (n)))))))))))) (\lambda auto : (nat) . ((((((sym_eq_match_nat_type_S) ((nat) )) (((S) ) (n))) (\lambda p : (nat) . ((((div_aux) ) (n)) (n)) (p))) (auto)) (\lambda y : (nat) . (((eq) ((nat) )) (n)) ((((plus) ) ((((times) ) (y)) (((S) ) (auto)))) (((((match_nat_type) ((nat) )) (n)) (\lambda p : (nat) . ((((mod_aux) ) (n)) (n)) (p))) (((S) ) (auto)))))) (((((((sym_eq_match_nat_type_S) ((nat) )) (n)) (\lambda p : (nat) . ((((mod_aux) ) (n)) (n)) (p))) (auto)) (\lambda y : (nat) . (((eq) ((nat) )) (n)) ((((plus) ) ((((times) ) (((((div_aux) ) (n)) (n)) (auto))) (((S) ) (auto)))) (y)))) (((((((rewrite_r) ((nat) )) ((((plus) ) ((((times) ) (((((div_aux) ) (n)) (n)) (auto))) (((S) ) (auto)))) (((((mod_aux) ) (n)) (n)) (auto)))) (\lambda j__ : (nat) . (((eq) ((nat) )) (j__)) ((((plus) ) ((((times) ) (((((div_aux) ) (n)) (n)) (auto))) (((S) ) (auto)))) (((((mod_aux) ) (n)) (n)) (auto))))) (((refl) ((nat) )) ((((plus) ) ((((times) ) (((((div_aux) ) (n)) (n)) (auto))) (((S) ) (auto)))) (((((mod_aux) ) (n)) (n)) (auto))))) (n)) ((((div_aux_mod_aux) (n)) (n)) (auto)))))) (m).
definition eq_times_div_minus_mod : \forall (a:(nat) ). \forall (b:(nat) ). (((eq) ((nat) )) ((((times) ) ((((div) ) (a)) (b))) (b))) ((((minus) ) (a)) ((((mod) ) (a)) (b))) := \lambda a : (nat) . \lambda b : (nat) . ((((eq_coerc) ((((eq) ((nat) )) ((((times) ) (b)) ((((div) ) (a)) (b)))) ((((minus) ) ((((plus) ) ((((times) ) (b)) ((((div) ) (a)) (b)))) ((((mod) ) (a)) (b)))) ((((mod) ) (a)) (b))))) ((((eq) ((nat) )) ((((times) ) ((((div) ) (a)) (b))) (b))) ((((minus) ) (a)) ((((mod) ) (a)) (b))))) (((minus_plus_m_m) ((((times) ) (b)) ((((div) ) (a)) (b)))) ((((mod) ) (a)) (b)))) (((((((rewrite_r) ((nat) )) ((((plus) ) ((((mod) ) (a)) (b))) ((((times) ) (b)) ((((div) ) (a)) (b))))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((eq) ((nat) )) ((((times) ) (b)) ((((div) ) (a)) (b)))) ((((minus) ) (j__)) ((((mod) ) (a)) (b))))) ((((eq) ((nat) )) ((((times) ) ((((div) ) (a)) (b))) (b))) ((((minus) ) (a)) ((((mod) ) (a)) (b)))))) (((((((rewrite_r) ((nat) )) ((((times) ) (b)) ((((div) ) (a)) (b)))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((eq) ((nat) )) ((((times) ) (b)) ((((div) ) (a)) (b)))) ((((minus) ) ((((plus) ) ((((mod) ) (a)) (b))) ((((times) ) (b)) ((((div) ) (a)) (b))))) ((((mod) ) (a)) (b))))) ((((eq) ((nat) )) (j__)) ((((minus) ) (a)) ((((mod) ) (a)) (b)))))) (((((((rewrite_l) ((nat) )) (a)) (\lambda j__ : (nat) . (((eq) (Prop)) ((((eq) ((nat) )) ((((times) ) (b)) ((((div) ) (a)) (b)))) ((((minus) ) (j__)) ((((mod) ) (a)) (b))))) ((((eq) ((nat) )) ((((times) ) (b)) ((((div) ) (a)) (b)))) ((((minus) ) (a)) ((((mod) ) (a)) (b)))))) (((refl) (Prop)) ((((eq) ((nat) )) ((((times) ) (b)) ((((div) ) (a)) (b)))) ((((minus) ) (a)) ((((mod) ) (a)) (b)))))) ((((plus) ) ((((mod) ) (a)) (b))) ((((times) ) (b)) ((((div) ) (a)) (b))))) (((((((rewrite_l) ((nat) )) ((((plus) ) ((((times) ) (b)) ((((div) ) (a)) (b)))) ((((mod) ) (a)) (b)))) (\lambda j__ : (nat) . (((eq) ((nat) )) (a)) (j__))) (((((((rewrite_l) ((nat) )) ((((times) ) ((((div) ) (a)) (b))) (b))) (\lambda j__ : (nat) . (((eq) ((nat) )) (a)) ((((plus) ) (j__)) ((((mod) ) (a)) (b))))) (((div_mod) (a)) (b))) ((((times) ) (b)) ((((div) ) (a)) (b)))) (((commutative_times) ((((div) ) (a)) (b))) (b)))) ((((plus) ) ((((mod) ) (a)) (b))) ((((times) ) (b)) ((((div) ) (a)) (b))))) (((commutative_plus) ((((times) ) (b)) ((((div) ) (a)) (b)))) ((((mod) ) (a)) (b)))))) ((((times) ) ((((div) ) (a)) (b))) (b))) (((commutative_times) ((((div) ) (a)) (b))) (b)))) ((((plus) ) ((((times) ) (b)) ((((div) ) (a)) (b)))) ((((mod) ) (a)) (b)))) (((commutative_plus) ((((times) ) (b)) ((((div) ) (a)) (b)))) ((((mod) ) (a)) (b)))).
axiom div_mod_spec : ((nat) ) -> ((nat) ) -> ((nat) ) -> ((nat) ) -> Prop.
axiom div_mod_spec_intro : \forall (n:(nat) ). \forall (m:(nat) ). \forall (q:(nat) ). \forall (r:(nat) ). ((((lt) ) (r)) (m)) -> ((((eq) ((nat) )) (n)) ((((plus) ) ((((times) ) (q)) (m))) (r))) -> (((((div_mod_spec) ) (n)) (m)) (q)) (r).
axiom match_div_mod_spec_prop : \forall (n:(nat) ). \forall (m:(nat) ). \forall (q:(nat) ). \forall (r:(nat) ). \forall (return_:Prop). (((((lt) ) (r)) (m)) -> ((((eq) ((nat) )) (n)) ((((plus) ) ((((times) ) (q)) (m))) (r))) -> return_) -> ((((((div_mod_spec) ) (n)) (m)) (q)) (r)) -> return_.
definition div_mod_spec_div_mod : \forall (n:(nat) ). \forall (m:(nat) ). ((((lt) ) ((O) )) (m)) -> (((((div_mod_spec) ) (n)) (m)) ((((div) ) (n)) (m))) ((((mod) ) (n)) (m)) := \lambda n : (nat) . \lambda m : (nat) . \lambda posm : (((lt) ) ((O) )) (m). (((((((div_mod_spec_intro) (n)) (m)) ((((div) ) (n)) (m))) ((((mod) ) (n)) (m))) ((((lt_mod_m_m) (n)) (m)) (posm))) (((((((rewrite_r) ((nat) )) ((((times) ) (m)) ((((div) ) (n)) (m)))) (\lambda j__ : (nat) . (((eq) ((nat) )) (n)) ((((plus) ) (j__)) ((((mod) ) (n)) (m))))) (((((((rewrite_r) ((nat) )) ((((plus) ) ((((mod) ) (n)) (m))) ((((times) ) (m)) ((((div) ) (n)) (m))))) (\lambda j__ : (nat) . (((eq) ((nat) )) (n)) (j__))) (((((((rewrite_l) ((nat) )) (n)) (\lambda j__ : (nat) . (((eq) ((nat) )) (n)) (j__))) (((refl) ((nat) )) (n))) ((((plus) ) ((((mod) ) (n)) (m))) ((((times) ) (m)) ((((div) ) (n)) (m))))) (((((((rewrite_l) ((nat) )) ((((plus) ) ((((times) ) (m)) ((((div) ) (n)) (m)))) ((((mod) ) (n)) (m)))) (\lambda j__ : (nat) . (((eq) ((nat) )) (n)) (j__))) (((((((rewrite_l) ((nat) )) ((((times) ) ((((div) ) (n)) (m))) (m))) (\lambda j__ : (nat) . (((eq) ((nat) )) (n)) ((((plus) ) (j__)) ((((mod) ) (n)) (m))))) (((div_mod) (n)) (m))) ((((times) ) (m)) ((((div) ) (n)) (m)))) (((commutative_times) ((((div) ) (n)) (m))) (m)))) ((((plus) ) ((((mod) ) (n)) (m))) ((((times) ) (m)) ((((div) ) (n)) (m))))) (((commutative_plus) ((((times) ) (m)) ((((div) ) (n)) (m)))) ((((mod) ) (n)) (m)))))) ((((plus) ) ((((times) ) (m)) ((((div) ) (n)) (m)))) ((((mod) ) (n)) (m)))) (((commutative_plus) ((((times) ) (m)) ((((div) ) (n)) (m)))) ((((mod) ) (n)) (m))))) ((((times) ) ((((div) ) (n)) (m))) (m))) (((commutative_times) ((((div) ) (n)) (m))) (m)))).
definition let_clause_1078 : \forall (a:(nat) ). \forall (b:(nat) ). \forall (q:(nat) ). \forall (r:(nat) ). \forall (q1:(nat) ). \forall (r1:(nat) ). ((((((div_mod_spec) ) (a)) (b)) (q)) (r)) -> ((((lt) ) (r)) (b)) -> ((((eq) ((nat) )) (a)) ((((plus) ) ((((times) ) (q)) (b))) (r))) -> ((((((div_mod_spec) ) (a)) (b)) (q1)) (r1)) -> ((((lt) ) (r1)) (b)) -> ((((eq) ((nat) )) (a)) ((((plus) ) ((((times) ) (q1)) (b))) (r1))) -> ((((le) ) (q)) (q1)) -> ((((lt) ) (q)) (q1)) -> (((eq) ((nat) )) (a)) ((((plus) ) (r)) ((((times) ) (b)) (q))) := \lambda a : (nat) . \lambda b : (nat) . \lambda q : (nat) . \lambda r : (nat) . \lambda q1 : (nat) . \lambda r1 : (nat) . \lambda j_clearme : (((((div_mod_spec) ) (a)) (b)) (q)) (r). (\lambda ltrb : (((lt) ) (r)) (b). (\lambda spec : (((eq) ((nat) )) (a)) ((((plus) ) ((((times) ) (q)) (b))) (r)). (\lambda j_clearme0 : (((((div_mod_spec) ) (a)) (b)) (q1)) (r1). (\lambda ltr1b : (((lt) ) (r1)) (b). (\lambda spec1 : (((eq) ((nat) )) (a)) ((((plus) ) ((((times) ) (q1)) (b))) (r1)). (\lambda leqq1 : (((le) ) (q)) (q1). (\lambda ltqq1 : (((lt) ) (q)) (q1). (((((((rewrite_l) ((nat) )) ((((plus) ) ((((times) ) (b)) (q))) (r))) (\lambda j__ : (nat) . (((eq) ((nat) )) (a)) (j__))) (((((((rewrite_l) ((nat) )) ((((times) ) (q)) (b))) (\lambda j__ : (nat) . (((eq) ((nat) )) (a)) ((((plus) ) (j__)) (r)))) (spec)) ((((times) ) (b)) (q))) (((commutative_times) (q)) (b)))) ((((plus) ) (r)) ((((times) ) (b)) (q)))) (((commutative_plus) ((((times) ) (b)) (q))) (r)))))))))).
definition let_clause_1062 : \forall (a:(nat) ). \forall (b:(nat) ). \forall (q:(nat) ). \forall (r:(nat) ). \forall (q1:(nat) ). \forall (r1:(nat) ). ((((((div_mod_spec) ) (a)) (b)) (q)) (r)) -> ((((lt) ) (r)) (b)) -> ((((eq) ((nat) )) (a)) ((((plus) ) ((((times) ) (q)) (b))) (r))) -> ((((((div_mod_spec) ) (a)) (b)) (q1)) (r1)) -> ((((lt) ) (r1)) (b)) -> ((((eq) ((nat) )) (a)) ((((plus) ) ((((times) ) (q1)) (b))) (r1))) -> (((Not) ) ((((le) ) (q)) (q1))) -> (((eq) ((nat) )) (a)) ((((plus) ) (r1)) ((((times) ) (b)) (q1))) := \lambda a : (nat) . \lambda b : (nat) . \lambda q : (nat) . \lambda r : (nat) . \lambda q1 : (nat) . \lambda r1 : (nat) . \lambda j_clearme : (((((div_mod_spec) ) (a)) (b)) (q)) (r). (\lambda ltrb : (((lt) ) (r)) (b). (\lambda spec : (((eq) ((nat) )) (a)) ((((plus) ) ((((times) ) (q)) (b))) (r)). (\lambda j_clearme0 : (((((div_mod_spec) ) (a)) (b)) (q1)) (r1). (\lambda ltr1b : (((lt) ) (r1)) (b). (\lambda spec1 : (((eq) ((nat) )) (a)) ((((plus) ) ((((times) ) (q1)) (b))) (r1)). (\lambda leqq1 : ((Not) ) ((((le) ) (q)) (q1)). (((((((rewrite_l) ((nat) )) ((((plus) ) ((((times) ) (b)) (q1))) (r1))) (\lambda j__ : (nat) . (((eq) ((nat) )) (a)) (j__))) (((((((rewrite_l) ((nat) )) ((((times) ) (q1)) (b))) (\lambda j__ : (nat) . (((eq) ((nat) )) (a)) ((((plus) ) (j__)) (r1)))) (spec1)) ((((times) ) (b)) (q1))) (((commutative_times) (q1)) (b)))) ((((plus) ) (r1)) ((((times) ) (b)) (q1)))) (((commutative_plus) ((((times) ) (b)) (q1))) (r1))))))))).
definition div_mod_spec_to_eq : \forall (a:(nat) ). \forall (b:(nat) ). \forall (q:(nat) ). \forall (r:(nat) ). \forall (q1:(nat) ). \forall (r1:(nat) ). ((((((div_mod_spec) ) (a)) (b)) (q)) (r)) -> ((((((div_mod_spec) ) (a)) (b)) (q1)) (r1)) -> (((eq) ((nat) )) (q)) (q1) := \lambda a : (nat) . \lambda b : (nat) . \lambda q : (nat) . \lambda r : (nat) . \lambda q1 : (nat) . \lambda r1 : (nat) . \lambda j_clearme : (((((div_mod_spec) ) (a)) (b)) (q)) (r). ((((((((match_div_mod_spec_prop) (a)) (b)) (q)) (r)) (((((((div_mod_spec) ) (a)) (b)) (q1)) (r1)) -> (((eq) ((nat) )) (q)) (q1))) (\lambda ltrb : (((lt) ) (r)) (b). (\lambda spec : (((eq) ((nat) )) (a)) ((((plus) ) ((((times) ) (q)) (b))) (r)). (\lambda j_clearme0 : (((((div_mod_spec) ) (a)) (b)) (q1)) (r1). ((((((((match_div_mod_spec_prop) (a)) (b)) (q1)) (r1)) ((((eq) ((nat) )) (q)) (q1))) (\lambda ltr1b : (((lt) ) (r1)) (b). (\lambda spec1 : (((eq) ((nat) )) (a)) ((((plus) ) ((((times) ) (q1)) (b))) (r1)). ((((((leb_elim) (q)) (q1)) (\lambda j__ : (bool) . (((eq) ((nat) )) (q)) (q1))) (\lambda leqq1 : (((le) ) (q)) (q1). (((((((match_Or_prop) ((((lt) ) (q)) (q1))) ((((eq) ((nat) )) (q)) (q1))) ((((eq) ((nat) )) (q)) (q1))) (\lambda ltqq1 : (((lt) ) (q)) (q1). (((falsity) ((((eq) ((nat) )) (q)) (q1))) ((((absurd) ((((le) ) (((S) ) (a))) (a))) ((((((lt_to_le_to_lt) (a)) ((((times) ) (((S) ) (q))) (b))) (a)) (((((((eq_ind_r) ((nat) )) ((((plus) ) ((((times) ) (q)) (b))) (r))) (\lambda x : (nat) . (((lt) ) (x)) ((((times) ) (((S) ) (q))) (b)))) (((((eq_coerc) ((((lt) ) ((((plus) ) ((((times) ) (q)) (b))) (r))) ((((plus) ) ((((times) ) (q)) (b))) (b)))) ((((lt) ) ((((plus) ) ((((times) ) (q)) (b))) (r))) ((((times) ) (((S) ) (q))) (b)))) (((((monotonic_lt_plus_r) ((((times) ) (q)) (b))) (r)) (b)) (ltrb))) (((((((rewrite_r) ((nat) )) ((((times) ) (b)) (q))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((lt) ) ((((plus) ) (j__)) (r))) ((((plus) ) (j__)) (b)))) ((((lt) ) ((((plus) ) (j__)) (r))) ((((times) ) (((S) ) (q))) (b))))) (((((((rewrite_r) ((nat) )) ((((plus) ) (r)) ((((times) ) (b)) (q)))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((lt) ) ((((plus) ) ((((times) ) (b)) (q))) (r))) ((((plus) ) ((((times) ) (b)) (q))) (b)))) ((((lt) ) (j__)) ((((times) ) (((S) ) (q))) (b))))) (((((((rewrite_l) ((nat) )) (a)) (\lambda j__ : (nat) . (((eq) (Prop)) ((((lt) ) ((((plus) ) ((((times) ) (b)) (q))) (r))) ((((plus) ) ((((times) ) (b)) (q))) (b)))) ((((lt) ) (j__)) ((((times) ) (((S) ) (q))) (b))))) (((((((rewrite_r) ((nat) )) ((((times) ) (b)) (((S) ) (q)))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((lt) ) ((((plus) ) ((((times) ) (b)) (q))) (r))) ((((plus) ) ((((times) ) (b)) (q))) (b)))) ((((lt) ) (a)) (j__)))) (((((((rewrite_l) ((nat) )) ((((plus) ) (b)) ((((times) ) (b)) (q)))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((lt) ) ((((plus) ) ((((times) ) (b)) (q))) (r))) ((((plus) ) ((((times) ) (b)) (q))) (b)))) ((((lt) ) (a)) (j__)))) (((((((rewrite_r) ((nat) )) ((((plus) ) (r)) ((((times) ) (b)) (q)))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((lt) ) (j__)) ((((plus) ) ((((times) ) (b)) (q))) (b)))) ((((lt) ) (a)) ((((plus) ) (b)) ((((times) ) (b)) (q)))))) (((((((rewrite_l) ((nat) )) (a)) (\lambda j__ : (nat) . (((eq) (Prop)) ((((lt) ) (j__)) ((((plus) ) ((((times) ) (b)) (q))) (b)))) ((((lt) ) (a)) ((((plus) ) (b)) ((((times) ) (b)) (q)))))) (((((((rewrite_r) ((nat) )) ((((plus) ) (b)) ((((times) ) (b)) (q)))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((lt) ) (a)) (j__))) ((((lt) ) (a)) ((((plus) ) (b)) ((((times) ) (b)) (q)))))) (((refl) (Prop)) ((((lt) ) (a)) ((((plus) ) (b)) ((((times) ) (b)) (q)))))) ((((plus) ) ((((times) ) (b)) (q))) (b))) (((commutative_plus) ((((times) ) (b)) (q))) (b)))) ((((plus) ) (r)) ((((times) ) (b)) (q)))) (((((((((((((((let_clause_1078) (a)) (b)) (q)) (r)) (q1)) (r1)) (j_clearme)) (ltrb)) (spec)) (j_clearme0)) (ltr1b)) (spec1)) (leqq1)) (ltqq1)))) ((((plus) ) ((((times) ) (b)) (q))) (r))) (((commutative_plus) ((((times) ) (b)) (q))) (r)))) ((((times) ) (b)) (((S) ) (q)))) (((times_n_Sm) (b)) (q)))) ((((times) ) (((S) ) (q))) (b))) (((commutative_times) (((S) ) (q))) (b)))) ((((plus) ) (r)) ((((times) ) (b)) (q)))) (((((((((((((((let_clause_1078) (a)) (b)) (q)) (r)) (q1)) (r1)) (j_clearme)) (ltrb)) (spec)) (j_clearme0)) (ltr1b)) (spec1)) (leqq1)) (ltqq1)))) ((((plus) ) ((((times) ) (b)) (q))) (r))) (((commutative_plus) ((((times) ) (b)) (q))) (r)))) ((((times) ) (q)) (b))) (((commutative_times) (q)) (b))))) (a)) (spec))) ((((((transitive_le) ((((times) ) (((S) ) (q))) (b))) ((((times) ) (q1)) (b))) (a)) (((((eq_coerc) ((((le) ) ((((times) ) (b)) (((S) ) (q)))) ((((times) ) (b)) (q1)))) ((((le) ) ((((times) ) (((S) ) (q))) (b))) ((((times) ) (q1)) (b)))) (((((monotonic_le_times_r) (b)) (((S) ) (q))) (q1)) (ltqq1))) (((((((rewrite_r) ((nat) )) ((((times) ) (b)) (((S) ) (q)))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) ((((times) ) (b)) (((S) ) (q)))) ((((times) ) (b)) (q1)))) ((((le) ) (j__)) ((((times) ) (q1)) (b))))) (((((((rewrite_l) ((nat) )) ((((plus) ) (b)) ((((times) ) (b)) (q)))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) ((((times) ) (b)) (((S) ) (q)))) ((((times) ) (b)) (q1)))) ((((le) ) (j__)) ((((times) ) (q1)) (b))))) (((((((rewrite_r) ((nat) )) ((((times) ) (b)) (q1))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) ((((times) ) (b)) (((S) ) (q)))) ((((times) ) (b)) (q1)))) ((((le) ) ((((plus) ) (b)) ((((times) ) (b)) (q)))) (j__)))) (((((((rewrite_l) ((nat) )) ((((plus) ) (b)) ((((times) ) (b)) (q)))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (j__)) ((((times) ) (b)) (q1)))) ((((le) ) ((((plus) ) (b)) ((((times) ) (b)) (q)))) ((((times) ) (b)) (q1))))) (((refl) (Prop)) ((((le) ) ((((plus) ) (b)) ((((times) ) (b)) (q)))) ((((times) ) (b)) (q1))))) ((((times) ) (b)) (((S) ) (q)))) (((times_n_Sm) (b)) (q)))) ((((times) ) (q1)) (b))) (((commutative_times) (q1)) (b)))) ((((times) ) (b)) (((S) ) (q)))) (((times_n_Sm) (b)) (q)))) ((((times) ) (((S) ) (q))) (b))) (((commutative_times) (((S) ) (q))) (b))))) (((((eq_coerc) ((((le) ) ((((times) ) (q1)) (b))) ((((plus) ) ((((times) ) (q1)) (b))) (r1)))) ((((le) ) ((((times) ) (q1)) (b))) (a))) (((le_plus_n_r) (r1)) ((((times) ) (q1)) (b)))) (((((((rewrite_r) ((nat) )) ((((times) ) (b)) (q1))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (j__)) ((((plus) ) (j__)) (r1)))) ((((le) ) (j__)) (a)))) (((((((rewrite_r) ((nat) )) ((((plus) ) (r1)) ((((times) ) (b)) (q1)))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) ((((times) ) (b)) (q1))) (j__))) ((((le) ) ((((times) ) (b)) (q1))) (a)))) (((((((rewrite_l) ((nat) )) (a)) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) ((((times) ) (b)) (q1))) (j__))) ((((le) ) ((((times) ) (b)) (q1))) (a)))) (((refl) (Prop)) ((((le) ) ((((times) ) (b)) (q1))) (a)))) ((((plus) ) (r1)) ((((times) ) (b)) (q1)))) (((((((rewrite_l) ((nat) )) ((((plus) ) ((((times) ) (b)) (q1))) (r1))) (\lambda j__ : (nat) . (((eq) ((nat) )) (a)) (j__))) (((((((rewrite_l) ((nat) )) ((((times) ) (q1)) (b))) (\lambda j__ : (nat) . (((eq) ((nat) )) (a)) ((((plus) ) (j__)) (r1)))) (spec1)) ((((times) ) (b)) (q1))) (((commutative_times) (q1)) (b)))) ((((plus) ) (r1)) ((((times) ) (b)) (q1)))) (((commutative_plus) ((((times) ) (b)) (q1))) (r1))))) ((((plus) ) ((((times) ) (b)) (q1))) (r1))) (((commutative_plus) ((((times) ) (b)) (q1))) (r1)))) ((((times) ) (q1)) (b))) (((commutative_times) (q1)) (b))))))) ((not_le_Sn_n) (a)))))) (\lambda j_x_172 : (((eq) ((nat) )) (q)) (q1). (((((((rewrite_l) ((nat) )) (q)) (\lambda j__ : (nat) . (((eq) ((nat) )) (q)) (j__))) (((refl) ((nat) )) (q))) (q1)) (j_x_172)))) ((((le_to_or_lt_eq) (q)) (q1)) (leqq1))))) (\lambda leqq1 : ((Not) ) ((((le) ) (q)) (q1)). (((falsity) ((((eq) ((nat) )) (q)) (q1))) ((((absurd) ((((le) ) (((S) ) (a))) (a))) ((((((lt_to_le_to_lt) (a)) ((((times) ) (((S) ) (q1))) (b))) (a)) (((((((eq_ind_r) ((nat) )) ((((plus) ) ((((times) ) (q1)) (b))) (r1))) (\lambda x : (nat) . (((lt) ) (x)) ((((times) ) (((S) ) (q1))) (b)))) (((((eq_coerc) ((((lt) ) ((((plus) ) ((((times) ) (q1)) (b))) (r1))) ((((plus) ) ((((times) ) (q1)) (b))) (b)))) ((((lt) ) ((((plus) ) ((((times) ) (q1)) (b))) (r1))) ((((times) ) (((S) ) (q1))) (b)))) (((((monotonic_lt_plus_r) ((((times) ) (q1)) (b))) (r1)) (b)) (ltr1b))) (((((((rewrite_r) ((nat) )) ((((times) ) (b)) (q1))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((lt) ) ((((plus) ) (j__)) (r1))) ((((plus) ) (j__)) (b)))) ((((lt) ) ((((plus) ) (j__)) (r1))) ((((times) ) (((S) ) (q1))) (b))))) (((((((rewrite_r) ((nat) )) ((((plus) ) (r1)) ((((times) ) (b)) (q1)))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((lt) ) ((((plus) ) ((((times) ) (b)) (q1))) (r1))) ((((plus) ) ((((times) ) (b)) (q1))) (b)))) ((((lt) ) (j__)) ((((times) ) (((S) ) (q1))) (b))))) (((((((rewrite_l) ((nat) )) (a)) (\lambda j__ : (nat) . (((eq) (Prop)) ((((lt) ) ((((plus) ) ((((times) ) (b)) (q1))) (r1))) ((((plus) ) ((((times) ) (b)) (q1))) (b)))) ((((lt) ) (j__)) ((((times) ) (((S) ) (q1))) (b))))) (((((((rewrite_r) ((nat) )) ((((times) ) (b)) (((S) ) (q1)))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((lt) ) ((((plus) ) ((((times) ) (b)) (q1))) (r1))) ((((plus) ) ((((times) ) (b)) (q1))) (b)))) ((((lt) ) (a)) (j__)))) (((((((rewrite_l) ((nat) )) ((((plus) ) (b)) ((((times) ) (b)) (q1)))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((lt) ) ((((plus) ) ((((times) ) (b)) (q1))) (r1))) ((((plus) ) ((((times) ) (b)) (q1))) (b)))) ((((lt) ) (a)) (j__)))) (((((((rewrite_r) ((nat) )) ((((plus) ) (r1)) ((((times) ) (b)) (q1)))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((lt) ) (j__)) ((((plus) ) ((((times) ) (b)) (q1))) (b)))) ((((lt) ) (a)) ((((plus) ) (b)) ((((times) ) (b)) (q1)))))) (((((((rewrite_l) ((nat) )) (a)) (\lambda j__ : (nat) . (((eq) (Prop)) ((((lt) ) (j__)) ((((plus) ) ((((times) ) (b)) (q1))) (b)))) ((((lt) ) (a)) ((((plus) ) (b)) ((((times) ) (b)) (q1)))))) (((((((rewrite_r) ((nat) )) ((((plus) ) (b)) ((((times) ) (b)) (q1)))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((lt) ) (a)) (j__))) ((((lt) ) (a)) ((((plus) ) (b)) ((((times) ) (b)) (q1)))))) (((refl) (Prop)) ((((lt) ) (a)) ((((plus) ) (b)) ((((times) ) (b)) (q1)))))) ((((plus) ) ((((times) ) (b)) (q1))) (b))) (((commutative_plus) ((((times) ) (b)) (q1))) (b)))) ((((plus) ) (r1)) ((((times) ) (b)) (q1)))) ((((((((((((((let_clause_1062) (a)) (b)) (q)) (r)) (q1)) (r1)) (j_clearme)) (ltrb)) (spec)) (j_clearme0)) (ltr1b)) (spec1)) (leqq1)))) ((((plus) ) ((((times) ) (b)) (q1))) (r1))) (((commutative_plus) ((((times) ) (b)) (q1))) (r1)))) ((((times) ) (b)) (((S) ) (q1)))) (((times_n_Sm) (b)) (q1)))) ((((times) ) (((S) ) (q1))) (b))) (((commutative_times) (((S) ) (q1))) (b)))) ((((plus) ) (r1)) ((((times) ) (b)) (q1)))) ((((((((((((((let_clause_1062) (a)) (b)) (q)) (r)) (q1)) (r1)) (j_clearme)) (ltrb)) (spec)) (j_clearme0)) (ltr1b)) (spec1)) (leqq1)))) ((((plus) ) ((((times) ) (b)) (q1))) (r1))) (((commutative_plus) ((((times) ) (b)) (q1))) (r1)))) ((((times) ) (q1)) (b))) (((commutative_times) (q1)) (b))))) (a)) (spec1))) ((((((transitive_le) ((((times) ) (((S) ) (q1))) (b))) ((((times) ) (q)) (b))) (a)) (((((eq_coerc) ((((le) ) ((((times) ) (b)) (((S) ) (q1)))) ((((times) ) (b)) (q)))) ((((le) ) ((((times) ) (((S) ) (q1))) (b))) ((((times) ) (q)) (b)))) (((((monotonic_le_times_r) (b)) (((S) ) (q1))) (q)) ((((not_le_to_lt) (q)) (q1)) (leqq1)))) (((((((rewrite_r) ((nat) )) ((((times) ) (b)) (((S) ) (q1)))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) ((((times) ) (b)) (((S) ) (q1)))) ((((times) ) (b)) (q)))) ((((le) ) (j__)) ((((times) ) (q)) (b))))) (((((((rewrite_l) ((nat) )) ((((plus) ) (b)) ((((times) ) (b)) (q1)))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) ((((times) ) (b)) (((S) ) (q1)))) ((((times) ) (b)) (q)))) ((((le) ) (j__)) ((((times) ) (q)) (b))))) (((((((rewrite_r) ((nat) )) ((((times) ) (b)) (q))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) ((((times) ) (b)) (((S) ) (q1)))) ((((times) ) (b)) (q)))) ((((le) ) ((((plus) ) (b)) ((((times) ) (b)) (q1)))) (j__)))) (((((((rewrite_l) ((nat) )) ((((plus) ) (b)) ((((times) ) (b)) (q1)))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (j__)) ((((times) ) (b)) (q)))) ((((le) ) ((((plus) ) (b)) ((((times) ) (b)) (q1)))) ((((times) ) (b)) (q))))) (((refl) (Prop)) ((((le) ) ((((plus) ) (b)) ((((times) ) (b)) (q1)))) ((((times) ) (b)) (q))))) ((((times) ) (b)) (((S) ) (q1)))) (((times_n_Sm) (b)) (q1)))) ((((times) ) (q)) (b))) (((commutative_times) (q)) (b)))) ((((times) ) (b)) (((S) ) (q1)))) (((times_n_Sm) (b)) (q1)))) ((((times) ) (((S) ) (q1))) (b))) (((commutative_times) (((S) ) (q1))) (b))))) (((((eq_coerc) ((((le) ) ((((times) ) (q)) (b))) ((((plus) ) ((((times) ) (q)) (b))) (r)))) ((((le) ) ((((times) ) (q)) (b))) (a))) (((le_plus_n_r) (r)) ((((times) ) (q)) (b)))) (((((((rewrite_r) ((nat) )) ((((times) ) (b)) (q))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (j__)) ((((plus) ) (j__)) (r)))) ((((le) ) (j__)) (a)))) (((((((rewrite_r) ((nat) )) ((((plus) ) (r)) ((((times) ) (b)) (q)))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) ((((times) ) (b)) (q))) (j__))) ((((le) ) ((((times) ) (b)) (q))) (a)))) (((((((rewrite_l) ((nat) )) (a)) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) ((((times) ) (b)) (q))) (j__))) ((((le) ) ((((times) ) (b)) (q))) (a)))) (((refl) (Prop)) ((((le) ) ((((times) ) (b)) (q))) (a)))) ((((plus) ) (r)) ((((times) ) (b)) (q)))) (((((((rewrite_l) ((nat) )) ((((plus) ) ((((times) ) (b)) (q))) (r))) (\lambda j__ : (nat) . (((eq) ((nat) )) (a)) (j__))) (((((((rewrite_l) ((nat) )) ((((times) ) (q)) (b))) (\lambda j__ : (nat) . (((eq) ((nat) )) (a)) ((((plus) ) (j__)) (r)))) (spec)) ((((times) ) (b)) (q))) (((commutative_times) (q)) (b)))) ((((plus) ) (r)) ((((times) ) (b)) (q)))) (((commutative_plus) ((((times) ) (b)) (q))) (r))))) ((((plus) ) ((((times) ) (b)) (q))) (r))) (((commutative_plus) ((((times) ) (b)) (q))) (r)))) ((((times) ) (q)) (b))) (((commutative_times) (q)) (b))))))) ((not_le_Sn_n) (a))))))))) (j_clearme0)))))) (j_clearme)).
definition div_mod_spec_to_eq2 : \forall (a:(nat) ). \forall (b:(nat) ). \forall (q:(nat) ). \forall (r:(nat) ). \forall (q1:(nat) ). \forall (r1:(nat) ). ((((((div_mod_spec) ) (a)) (b)) (q)) (r)) -> ((((((div_mod_spec) ) (a)) (b)) (q1)) (r1)) -> (((eq) ((nat) )) (r)) (r1) := \lambda a : (nat) . \lambda b : (nat) . \lambda q : (nat) . \lambda r : (nat) . \lambda q1 : (nat) . \lambda r1 : (nat) . \lambda spec : (((((div_mod_spec) ) (a)) (b)) (q)) (r). (\lambda spec1 : (((((div_mod_spec) ) (a)) (b)) (q1)) (r1). ((((((((match_div_mod_spec_prop) (a)) (b)) (q)) (r)) ((((eq) ((nat) )) (r)) (r1))) (\lambda j__ : (((lt) ) (r)) (b). (\lambda eqa : (((eq) ((nat) )) (a)) ((((plus) ) ((((times) ) (q)) (b))) (r)). ((((((((match_div_mod_spec_prop) (a)) (b)) (q1)) (r1)) ((((eq) ((nat) )) (r)) (r1))) (\lambda j_0 : (((lt) ) (r1)) (b). (\lambda eqa1 : (((eq) ((nat) )) (a)) ((((plus) ) ((((times) ) (q1)) (b))) (r1)). (((((injective_plus_r) ((((times) ) (q)) (b))) (r)) (r1)) (((((((rewrite_r) ((nat) )) ((((times) ) (b)) (q))) (\lambda j__1 : (nat) . (((eq) ((nat) )) ((((plus) ) (j__1)) (r))) ((((plus) ) ((((times) ) (q)) (b))) (r1)))) (((((((rewrite_r) ((nat) )) ((((plus) ) (r)) ((((times) ) (b)) (q)))) (\lambda j__1 : (nat) . (((eq) ((nat) )) (j__1)) ((((plus) ) ((((times) ) (q)) (b))) (r1)))) (((((((rewrite_l) ((nat) )) (a)) (\lambda j__1 : (nat) . (((eq) ((nat) )) (j__1)) ((((plus) ) ((((times) ) (q)) (b))) (r1)))) (((((((rewrite_r) ((nat) )) ((((times) ) (b)) (q))) (\lambda j__1 : (nat) . (((eq) ((nat) )) (a)) ((((plus) ) (j__1)) (r1)))) (((((((rewrite_r) ((nat) )) ((((plus) ) (r1)) ((((times) ) (b)) (q)))) (\lambda j__1 : (nat) . (((eq) ((nat) )) (a)) (j__1))) (((((((rewrite_l) ((nat) )) (a)) (\lambda j__1 : (nat) . (((eq) ((nat) )) (a)) (j__1))) (((refl) ((nat) )) (a))) ((((plus) ) (r1)) ((((times) ) (b)) (q)))) (((((((rewrite_r) ((nat) )) (q1)) (\lambda j__1 : (nat) . (((eq) ((nat) )) (a)) ((((plus) ) (r1)) ((((times) ) (b)) (j__1))))) (((((((rewrite_l) ((nat) )) ((((plus) ) ((((times) ) (b)) (q1))) (r1))) (\lambda j__1 : (nat) . (((eq) ((nat) )) (a)) (j__1))) (((((((rewrite_l) ((nat) )) ((((times) ) (q1)) (b))) (\lambda j__1 : (nat) . (((eq) ((nat) )) (a)) ((((plus) ) (j__1)) (r1)))) (eqa1)) ((((times) ) (b)) (q1))) (((commutative_times) (q1)) (b)))) ((((plus) ) (r1)) ((((times) ) (b)) (q1)))) (((commutative_plus) ((((times) ) (b)) (q1))) (r1)))) (q)) (((((((((div_mod_spec_to_eq) (a)) (b)) (q)) (r)) (q1)) (r1)) (spec)) (spec1))))) ((((plus) ) ((((times) ) (b)) (q))) (r1))) (((commutative_plus) ((((times) ) (b)) (q))) (r1)))) ((((times) ) (q)) (b))) (((commutative_times) (q)) (b)))) ((((plus) ) (r)) ((((times) ) (b)) (q)))) (((((((rewrite_l) ((nat) )) ((((plus) ) ((((times) ) (b)) (q))) (r))) (\lambda j__1 : (nat) . (((eq) ((nat) )) (a)) (j__1))) (((((((rewrite_l) ((nat) )) ((((times) ) (q)) (b))) (\lambda j__1 : (nat) . (((eq) ((nat) )) (a)) ((((plus) ) (j__1)) (r)))) (eqa)) ((((times) ) (b)) (q))) (((commutative_times) (q)) (b)))) ((((plus) ) (r)) ((((times) ) (b)) (q)))) (((commutative_plus) ((((times) ) (b)) (q))) (r))))) ((((plus) ) ((((times) ) (b)) (q))) (r))) (((commutative_plus) ((((times) ) (b)) (q))) (r)))) ((((times) ) (q)) (b))) (((commutative_times) (q)) (b))))))) (spec1))))) (spec))).
definition div_times : \forall (a:(nat) ). \forall (b:(nat) ). ((((lt) ) ((O) )) (b)) -> (((eq) ((nat) )) ((((div) ) ((((times) ) (a)) (b))) (b))) (a) := \lambda a : (nat) . \lambda b : (nat) . \lambda posb : (((lt) ) ((O) )) (b). (((((((((div_mod_spec_to_eq) ((((times) ) (a)) (b))) (b)) ((((div) ) ((((times) ) (a)) (b))) (b))) ((((mod) ) ((((times) ) (a)) (b))) (b))) (a)) ((O) )) ((((div_mod_spec_div_mod) ((((times) ) (a)) (b))) (b)) (posb))) (((((((div_mod_spec_intro) ((((times) ) (a)) (b))) (b)) (a)) ((O) )) (posb)) (((((((rewrite_r) ((nat) )) ((((plus) ) ((O) )) ((((times) ) (a)) (b)))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((((times) ) (a)) (b))) (j__))) (((((((rewrite_l) ((nat) )) ((((times) ) (a)) (b))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((((times) ) (a)) (b))) (j__))) (((refl) ((nat) )) ((((times) ) (a)) (b)))) ((((plus) ) ((O) )) ((((times) ) (a)) (b)))) ((plus_O_n) ((((times) ) (a)) (b))))) ((((plus) ) ((((times) ) (a)) (b))) ((O) ))) (((commutative_plus) ((((times) ) (a)) (b))) ((O) ))))).
definition eq_div_O : \forall (n:(nat) ). \forall (m:(nat) ). ((((lt) ) (n)) (m)) -> (((eq) ((nat) )) ((((div) ) (n)) (m))) ((O) ) := \lambda n : (nat) . \lambda m : (nat) . \lambda ltnm : (((lt) ) (n)) (m). (((((((((div_mod_spec_to_eq) (n)) (m)) ((((div) ) (n)) (m))) ((((mod) ) (n)) (m))) ((O) )) (n)) ((((div_mod_spec_div_mod) (n)) (m)) ((((ltn_to_ltO) (n)) (m)) (ltnm)))) (((((((div_mod_spec_intro) (n)) (m)) ((O) )) (n)) (ltnm)) (((((((rewrite_r) ((nat) )) ((((times) ) (m)) ((O) ))) (\lambda j__ : (nat) . (((eq) ((nat) )) (n)) ((((plus) ) (j__)) (n)))) (((((((rewrite_l) ((nat) )) ((O) )) (\lambda j__ : (nat) . (((eq) ((nat) )) (n)) ((((plus) ) (j__)) (n)))) (((((((rewrite_r) ((nat) )) ((((plus) ) (n)) ((O) ))) (\lambda j__ : (nat) . (((eq) ((nat) )) (n)) (j__))) (((((((rewrite_l) ((nat) )) (n)) (\lambda j__ : (nat) . (((eq) ((nat) )) (n)) (j__))) (((refl) ((nat) )) (n))) ((((plus) ) (n)) ((O) ))) ((plus_n_O) (n)))) ((((plus) ) ((O) )) (n))) (((commutative_plus) ((O) )) (n)))) ((((times) ) (m)) ((O) ))) ((times_n_O) (m)))) ((((times) ) ((O) )) (m))) (((commutative_times) ((O) )) (m))))).
definition mod_O_n : \forall (n:(nat) ). (((eq) ((nat) )) ((((mod) ) ((O) )) (n))) ((O) ) := \lambda n : (nat) . ((((sym_eq) ((nat) )) ((O) )) ((((mod) ) ((O) )) (n))) (((((eq_coerc) ((((eq) ((nat) )) ((O) )) ((((mod) ) ((O) )) (n)))) ((((eq) ((nat) )) ((O) )) ((((mod) ) ((O) )) (n)))) (((le_n_O_to_eq) ((((mod) ) ((O) )) (n))) (((((eq_coerc) ((((le) ) ((((minus) ) ((((plus) ) ((((mod) ) ((O) )) (n))) ((((times) ) (n)) ((((div) ) ((O) )) (n))))) ((((plus) ) ((O) )) ((((times) ) (n)) ((((div) ) ((O) )) (n)))))) ((((plus) ) ((((mod) ) ((O) )) (n))) ((((times) ) (n)) ((((div) ) ((O) )) (n)))))) ((((le) ) ((((mod) ) ((O) )) (n))) ((O) ))) (((minus_le) ((((plus) ) ((((mod) ) ((O) )) (n))) ((((times) ) (n)) ((((div) ) ((O) )) (n))))) ((((plus) ) ((O) )) ((((times) ) (n)) ((((div) ) ((O) )) (n)))))) (((((((rewrite_r) ((nat) )) ((((minus) ) ((((mod) ) ((O) )) (n))) ((O) ))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (j__)) ((((plus) ) ((((mod) ) ((O) )) (n))) ((((times) ) (n)) ((((div) ) ((O) )) (n)))))) ((((le) ) ((((mod) ) ((O) )) (n))) ((O) )))) (((((((rewrite_l) ((nat) )) ((((mod) ) ((O) )) (n))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (j__)) ((((plus) ) ((((mod) ) ((O) )) (n))) ((((times) ) (n)) ((((div) ) ((O) )) (n)))))) ((((le) ) ((((mod) ) ((O) )) (n))) ((O) )))) (((((((rewrite_l) ((nat) )) ((O) )) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) ((((mod) ) ((O) )) (n))) (j__))) ((((le) ) ((((mod) ) ((O) )) (n))) ((O) )))) (((refl) (Prop)) ((((le) ) ((((mod) ) ((O) )) (n))) ((O) )))) ((((plus) ) ((((mod) ) ((O) )) (n))) ((((times) ) (n)) ((((div) ) ((O) )) (n))))) (((((((rewrite_l) ((nat) )) ((((plus) ) ((((times) ) (n)) ((((div) ) ((O) )) (n)))) ((((mod) ) ((O) )) (n)))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((O) )) (j__))) (((((((rewrite_l) ((nat) )) ((((times) ) ((((div) ) ((O) )) (n))) (n))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((O) )) ((((plus) ) (j__)) ((((mod) ) ((O) )) (n))))) (((div_mod) ((O) )) (n))) ((((times) ) (n)) ((((div) ) ((O) )) (n)))) (((commutative_times) ((((div) ) ((O) )) (n))) (n)))) ((((plus) ) ((((mod) ) ((O) )) (n))) ((((times) ) (n)) ((((div) ) ((O) )) (n))))) (((commutative_plus) ((((times) ) (n)) ((((div) ) ((O) )) (n)))) ((((mod) ) ((O) )) (n)))))) ((((minus) ) ((((mod) ) ((O) )) (n))) ((O) ))) ((minus_n_O) ((((mod) ) ((O) )) (n))))) ((((minus) ) ((((plus) ) ((((mod) ) ((O) )) (n))) ((((times) ) (n)) ((((div) ) ((O) )) (n))))) ((((plus) ) ((O) )) ((((times) ) (n)) ((((div) ) ((O) )) (n)))))) ((((minus_plus_plus_l) ((((mod) ) ((O) )) (n))) ((O) )) ((((times) ) (n)) ((((div) ) ((O) )) (n)))))))) (((refl) (Prop)) ((((eq) ((nat) )) ((O) )) ((((mod) ) ((O) )) (n))))).

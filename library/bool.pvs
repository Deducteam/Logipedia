bool_sttfa : THEORY
BEGIN
IMPORTING connectives_sttfa,leibniz_sttfa,logic_sttfa,relations_sttfa

sttfa_bool : TYPE+

sttfa_true : bool_sttfa.sttfa_bool

sttfa_false : bool_sttfa.sttfa_bool

match_bool_prop  : AXIOM (FORALL(return:[bool_sttfa.sttfa_bool -> bool]):(return(bool_sttfa.sttfa_true) => (return(bool_sttfa.sttfa_false) => (FORALL(z:bool_sttfa.sttfa_bool):return(z)))))

match_bool_type [return:TYPE+]: [return -> [return -> [bool_sttfa.sttfa_bool -> return]]]

axiom_match_bool_type_true [return:TYPE+] : AXIOM (FORALL(case_true:return):(FORALL(case_false:return):connectives_sttfa.equal[return](bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_true))(case_true)))

eq_match_bool_type_true [return:TYPE+] : LEMMA (FORALL(case_true:return):(FORALL(case_false:return):leibniz_sttfa.leibniz[return](bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_true))(case_true)))

%|- eq_match_bool_type_true : PROOF
%|- (sttfa-conv "(FORALL(case_true:return):(FORALL(case_false:return):(FORALL(P:[return -> bool]):(P(bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_true)) => P(case_true)))))" () ("leibniz_sttfa.leibniz")
%|- (then@ (sttfa-forall-i "case_true")
%|- (then@ (sttfa-forall-i "case_false")
%|- (sttfa-impl-e "(connectives_sttfa.equal[return](bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_true))(case_true) => (FORALL(P:[return -> bool]):(P(bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_true)) => P(case_true))))" "connectives_sttfa.equal[return](bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_true))(case_true)"
%|- (sttfa-conv "connectives_sttfa.equal[return](bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_true))(case_true)" () ()
%|- (sttfa-forall-e "(FORALL(case_false0:return):connectives_sttfa.equal[return](bool_sttfa.match_bool_type[return](case_true)(case_false0)(bool_sttfa.sttfa_true))(case_true))" "case_false"
%|- (sttfa-conv "(FORALL(case_false0:return):connectives_sttfa.equal[return](bool_sttfa.match_bool_type[return](case_true)(case_false0)(bool_sttfa.sttfa_true))(case_true))" () ()
%|- (sttfa-forall-e "(FORALL(case_true0:return):(FORALL(case_false0:return):connectives_sttfa.equal[return](bool_sttfa.match_bool_type[return](case_true0)(case_false0)(bool_sttfa.sttfa_true))(case_true0)))" "case_true"
%|- (sttfa-lemma "bool_sttfa.axiom_match_bool_type_true[return]")))))
%|- (sttfa-conv "(connectives_sttfa.equal[return](bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_true))(case_true) => (FORALL(P:[return -> bool]):(P(bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_true)) => P(case_true))))" () ()
%|- (sttfa-forall-e "(FORALL(y:return):(connectives_sttfa.equal[return](bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_true))(y) => (FORALL(P:[return -> bool]):(P(bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_true)) => P(y)))))" "case_true"
%|- (sttfa-conv "(FORALL(y:return):(connectives_sttfa.equal[return](bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_true))(y) => (FORALL(P:[return -> bool]):(P(bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_true)) => P(y)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:return):(FORALL(y:return):(connectives_sttfa.equal[return](x)(y) => (FORALL(P:[return -> bool]):(P(x) => P(y))))))" "bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_true)"
%|- (sttfa-lemma "connectives_sttfa.equal_leibniz[return]")))))))))
%|- QED

axiom_match_bool_type_false [return:TYPE+] : AXIOM (FORALL(case_true:return):(FORALL(case_false:return):connectives_sttfa.equal[return](bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_false))(case_false)))

eq_match_bool_type_false [return:TYPE+] : LEMMA (FORALL(case_true:return):(FORALL(case_false:return):leibniz_sttfa.leibniz[return](bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_false))(case_false)))

%|- eq_match_bool_type_false : PROOF
%|- (sttfa-conv "(FORALL(case_true:return):(FORALL(case_false:return):(FORALL(P:[return -> bool]):(P(bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_false)) => P(case_false)))))" () ("leibniz_sttfa.leibniz")
%|- (then@ (sttfa-forall-i "case_true")
%|- (then@ (sttfa-forall-i "case_false")
%|- (sttfa-impl-e "(connectives_sttfa.equal[return](bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_false))(case_false) => (FORALL(P:[return -> bool]):(P(bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_false)) => P(case_false))))" "connectives_sttfa.equal[return](bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_false))(case_false)"
%|- (sttfa-conv "connectives_sttfa.equal[return](bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_false))(case_false)" () ()
%|- (sttfa-forall-e "(FORALL(case_false0:return):connectives_sttfa.equal[return](bool_sttfa.match_bool_type[return](case_true)(case_false0)(bool_sttfa.sttfa_false))(case_false0))" "case_false"
%|- (sttfa-conv "(FORALL(case_false0:return):connectives_sttfa.equal[return](bool_sttfa.match_bool_type[return](case_true)(case_false0)(bool_sttfa.sttfa_false))(case_false0))" () ()
%|- (sttfa-forall-e "(FORALL(case_true0:return):(FORALL(case_false0:return):connectives_sttfa.equal[return](bool_sttfa.match_bool_type[return](case_true0)(case_false0)(bool_sttfa.sttfa_false))(case_false0)))" "case_true"
%|- (sttfa-lemma "bool_sttfa.axiom_match_bool_type_false[return]")))))
%|- (sttfa-conv "(connectives_sttfa.equal[return](bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_false))(case_false) => (FORALL(P:[return -> bool]):(P(bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_false)) => P(case_false))))" () ()
%|- (sttfa-forall-e "(FORALL(y:return):(connectives_sttfa.equal[return](bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_false))(y) => (FORALL(P:[return -> bool]):(P(bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_false)) => P(y)))))" "case_false"
%|- (sttfa-conv "(FORALL(y:return):(connectives_sttfa.equal[return](bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_false))(y) => (FORALL(P:[return -> bool]):(P(bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_false)) => P(y)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:return):(FORALL(y:return):(connectives_sttfa.equal[return](x)(y) => (FORALL(P:[return -> bool]):(P(x) => P(y))))))" "bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_false)"
%|- (sttfa-lemma "connectives_sttfa.equal_leibniz[return]")))))))))
%|- QED

sym_eq_match_bool_type_true [return:TYPE+] : LEMMA (FORALL(case_true:return):(FORALL(case_false:return):leibniz_sttfa.leibniz[return](case_true)(bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_true))))

%|- sym_eq_match_bool_type_true : PROOF
%|- (then@ (sttfa-forall-i "case_true")
%|- (then@ (sttfa-forall-i "case_false")
%|- (sttfa-impl-e "(leibniz_sttfa.leibniz[return](bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_true))(case_true) => leibniz_sttfa.leibniz[return](case_true)(bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_true)))" "leibniz_sttfa.leibniz[return](bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_true))(case_true)"
%|- (sttfa-conv "leibniz_sttfa.leibniz[return](bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_true))(case_true)" () ()
%|- (sttfa-forall-e "(FORALL(case_false0:return):leibniz_sttfa.leibniz[return](bool_sttfa.match_bool_type[return](case_true)(case_false0)(bool_sttfa.sttfa_true))(case_true))" "case_false"
%|- (sttfa-conv "(FORALL(case_false0:return):leibniz_sttfa.leibniz[return](bool_sttfa.match_bool_type[return](case_true)(case_false0)(bool_sttfa.sttfa_true))(case_true))" () ()
%|- (sttfa-forall-e "(FORALL(case_true0:return):(FORALL(case_false0:return):leibniz_sttfa.leibniz[return](bool_sttfa.match_bool_type[return](case_true0)(case_false0)(bool_sttfa.sttfa_true))(case_true0)))" "case_true"
%|- (sttfa-lemma "bool_sttfa.eq_match_bool_type_true[return]")))))
%|- (sttfa-conv "(leibniz_sttfa.leibniz[return](bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_true))(case_true) => leibniz_sttfa.leibniz[return](case_true)(bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_true)))" () ()
%|- (sttfa-forall-e "(FORALL(y:return):(leibniz_sttfa.leibniz[return](bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_true))(y) => leibniz_sttfa.leibniz[return](y)(bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_true))))" "case_true"
%|- (sttfa-conv "(FORALL(y:return):(leibniz_sttfa.leibniz[return](bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_true))(y) => leibniz_sttfa.leibniz[return](y)(bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_true))))" () ()
%|- (sttfa-forall-e "(FORALL(x:return):(FORALL(y:return):(leibniz_sttfa.leibniz[return](x)(y) => leibniz_sttfa.leibniz[return](y)(x))))" "bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_true)"
%|- (sttfa-lemma "leibniz_sttfa.sym_leibniz[return]"))))))))
%|- QED

sym_eq_match_bool_type_false [return:TYPE+] : LEMMA (FORALL(case_true:return):(FORALL(case_false:return):leibniz_sttfa.leibniz[return](case_false)(bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_false))))

%|- sym_eq_match_bool_type_false : PROOF
%|- (then@ (sttfa-forall-i "case_true")
%|- (then@ (sttfa-forall-i "case_false")
%|- (sttfa-impl-e "(leibniz_sttfa.leibniz[return](bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_false))(case_false) => leibniz_sttfa.leibniz[return](case_false)(bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_false)))" "leibniz_sttfa.leibniz[return](bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_false))(case_false)"
%|- (sttfa-conv "leibniz_sttfa.leibniz[return](bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_false))(case_false)" () ()
%|- (sttfa-forall-e "(FORALL(case_false0:return):leibniz_sttfa.leibniz[return](bool_sttfa.match_bool_type[return](case_true)(case_false0)(bool_sttfa.sttfa_false))(case_false0))" "case_false"
%|- (sttfa-conv "(FORALL(case_false0:return):leibniz_sttfa.leibniz[return](bool_sttfa.match_bool_type[return](case_true)(case_false0)(bool_sttfa.sttfa_false))(case_false0))" () ()
%|- (sttfa-forall-e "(FORALL(case_true0:return):(FORALL(case_false0:return):leibniz_sttfa.leibniz[return](bool_sttfa.match_bool_type[return](case_true0)(case_false0)(bool_sttfa.sttfa_false))(case_false0)))" "case_true"
%|- (sttfa-lemma "bool_sttfa.eq_match_bool_type_false[return]")))))
%|- (sttfa-conv "(leibniz_sttfa.leibniz[return](bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_false))(case_false) => leibniz_sttfa.leibniz[return](case_false)(bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_false)))" () ()
%|- (sttfa-forall-e "(FORALL(y:return):(leibniz_sttfa.leibniz[return](bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_false))(y) => leibniz_sttfa.leibniz[return](y)(bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_false))))" "case_false"
%|- (sttfa-conv "(FORALL(y:return):(leibniz_sttfa.leibniz[return](bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_false))(y) => leibniz_sttfa.leibniz[return](y)(bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_false))))" () ()
%|- (sttfa-forall-e "(FORALL(x:return):(FORALL(y:return):(leibniz_sttfa.leibniz[return](x)(y) => leibniz_sttfa.leibniz[return](y)(x))))" "bool_sttfa.match_bool_type[return](case_true)(case_false)(bool_sttfa.sttfa_false)"
%|- (sttfa-lemma "leibniz_sttfa.sym_leibniz[return]"))))))))
%|- QED

bool_discr  : LEMMA (FORALL(x:bool_sttfa.sttfa_bool):(FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](x)(y) => bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(y))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(y))(x))))

%|- bool_discr : PROOF
%|- (then@ (sttfa-forall-i "x")
%|- (then@ (sttfa-forall-i "y")
%|- (sttfa-impl-i "logic_sttfa.eq[bool_sttfa.sttfa_bool](x)(y)" "bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(y))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(y))(x)"
%|- (sttfa-impl-e "(logic_sttfa.eq[bool_sttfa.sttfa_bool](x)(y) => bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(y))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(y))(x))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](x)(y)"
%|- (propax)
%|- (sttfa-conv "(logic_sttfa.eq[bool_sttfa.sttfa_bool](x)(y) => bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(y))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(y))(x))" () ()
%|- (sttfa-forall-e "(FORALL(y0:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](x)(y0) => bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(y0))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(y0))(x)))" "y"
%|- (sttfa-impl-e "(bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(x))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(x))(x) => (FORALL(y0:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](x)(y0) => bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(y0))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(y0))(x))))" "bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(x))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(x))(x)"
%|- (sttfa-conv "bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(x))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(x))(x)" () ()
%|- (sttfa-forall-e "(FORALL(z:bool_sttfa.sttfa_bool):bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(z))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(z))(z))" "x"
%|- (sttfa-impl-e "(bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_false))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(bool_sttfa.sttfa_false))(bool_sttfa.sttfa_false) => (FORALL(z:bool_sttfa.sttfa_bool):bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(z))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(z))(z)))" "bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_false))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(bool_sttfa.sttfa_false))(bool_sttfa.sttfa_false)"
%|- (sttfa-impl-e "(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(bool_sttfa.sttfa_false) => bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_false))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(bool_sttfa.sttfa_false))(bool_sttfa.sttfa_false))" "bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(bool_sttfa.sttfa_false)"
%|- (sttfa-impl-e "((FORALL(P:bool):(P => P)) => bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(bool_sttfa.sttfa_false))" "(FORALL(P:bool):(P => P))"
%|- (then@ (sttfa-forall-i "P")
%|- (sttfa-impl-i "P" "P"
%|- (propax)))
%|- (sttfa-conv "((LAMBDA(x0:bool):x0)((FORALL(P:bool):(P => P))) => (LAMBDA(x0:bool):x0)(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(bool_sttfa.sttfa_false)))" () ()
%|- (sttfa-forall-e "(FORALL(P:[bool -> bool]):(P((FORALL(P0:bool):(P0 => P0))) => P(bool_sttfa.match_bool_type[bool]((FORALL(P0:bool):P0))((FORALL(P0:bool):(P0 => P0)))(bool_sttfa.sttfa_false))))" "(LAMBDA(x0:bool):x0)"
%|- (sttfa-conv "(LAMBDA(y0:bool):(FORALL(P:[bool -> bool]):(P((FORALL(P0:bool):(P0 => P0))) => P(y0))))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(bool_sttfa.sttfa_false))" () ()
%|- (sttfa-conv "(LAMBDA(x0:bool):(LAMBDA(y0:bool):(FORALL(P:[bool -> bool]):(P(x0) => P(y0)))))((FORALL(P:bool):(P => P)))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(bool_sttfa.sttfa_false))" () ()
%|- (sttfa-conv "leibniz_sttfa.leibniz[bool]((FORALL(P:bool):(P => P)))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(bool_sttfa.sttfa_false))" ("leibniz_sttfa.leibniz") ()
%|- (sttfa-conv "leibniz_sttfa.leibniz[bool]((FORALL(P:bool):(P => P)))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(bool_sttfa.sttfa_false))" () ()
%|- (sttfa-forall-e "(FORALL(case_false:bool):leibniz_sttfa.leibniz[bool](case_false)(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))(case_false)(bool_sttfa.sttfa_false)))" "(FORALL(P:bool):(P => P))"
%|- (sttfa-conv "(FORALL(case_false:bool):leibniz_sttfa.leibniz[bool](case_false)(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))(case_false)(bool_sttfa.sttfa_false)))" () ()
%|- (sttfa-forall-e "(FORALL(case_true:bool):(FORALL(case_false:bool):leibniz_sttfa.leibniz[bool](case_false)(bool_sttfa.match_bool_type[bool](case_true)(case_false)(bool_sttfa.sttfa_false))))" "(FORALL(P:bool):P)"
%|- (sttfa-lemma "bool_sttfa.sym_eq_match_bool_type_false[bool]")))))))))))
%|- (sttfa-conv "((LAMBDA(x0:bool):x0)(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(bool_sttfa.sttfa_false)) => (LAMBDA(x0:bool):x0)(bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_false))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(bool_sttfa.sttfa_false))(bool_sttfa.sttfa_false)))" () ()
%|- (sttfa-forall-e "(FORALL(P:[bool -> bool]):(P(bool_sttfa.match_bool_type[bool]((FORALL(P0:bool):P0))((FORALL(P0:bool):(P0 => P0)))(bool_sttfa.sttfa_false)) => P(bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P0:bool):(P0 => P0)))((FORALL(P0:bool):P0))(bool_sttfa.sttfa_false))(bool_sttfa.match_bool_type[bool]((FORALL(P0:bool):P0))((FORALL(P0:bool):(P0 => P0)))(bool_sttfa.sttfa_false))(bool_sttfa.sttfa_false))))" "(LAMBDA(x0:bool):x0)"
%|- (sttfa-conv "(LAMBDA(y0:bool):(FORALL(P:[bool -> bool]):(P(bool_sttfa.match_bool_type[bool]((FORALL(P0:bool):P0))((FORALL(P0:bool):(P0 => P0)))(bool_sttfa.sttfa_false)) => P(y0))))(bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_false))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(bool_sttfa.sttfa_false))(bool_sttfa.sttfa_false))" () ()
%|- (sttfa-conv "(LAMBDA(x0:bool):(LAMBDA(y0:bool):(FORALL(P:[bool -> bool]):(P(x0) => P(y0)))))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(bool_sttfa.sttfa_false))(bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_false))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(bool_sttfa.sttfa_false))(bool_sttfa.sttfa_false))" () ()
%|- (sttfa-conv "leibniz_sttfa.leibniz[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(bool_sttfa.sttfa_false))(bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_false))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(bool_sttfa.sttfa_false))(bool_sttfa.sttfa_false))" ("leibniz_sttfa.leibniz") ()
%|- (sttfa-conv "leibniz_sttfa.leibniz[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(bool_sttfa.sttfa_false))(bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_false))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(bool_sttfa.sttfa_false))(bool_sttfa.sttfa_false))" () ()
%|- (sttfa-forall-e "(FORALL(case_false:bool):leibniz_sttfa.leibniz[bool](case_false)(bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_false))(case_false)(bool_sttfa.sttfa_false)))" "bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(bool_sttfa.sttfa_false)"
%|- (sttfa-conv "(FORALL(case_false:bool):leibniz_sttfa.leibniz[bool](case_false)(bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_false))(case_false)(bool_sttfa.sttfa_false)))" () ()
%|- (sttfa-forall-e "(FORALL(case_true:bool):(FORALL(case_false:bool):leibniz_sttfa.leibniz[bool](case_false)(bool_sttfa.match_bool_type[bool](case_true)(case_false)(bool_sttfa.sttfa_false))))" "bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_false)"
%|- (sttfa-lemma "bool_sttfa.sym_eq_match_bool_type_false[bool]")))))))))))
%|- (sttfa-impl-e "(bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_true))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(bool_sttfa.sttfa_true))(bool_sttfa.sttfa_true) => (bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_false))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(bool_sttfa.sttfa_false))(bool_sttfa.sttfa_false) => (FORALL(z:bool_sttfa.sttfa_bool):bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(z))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(z))(z))))" "bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_true))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(bool_sttfa.sttfa_true))(bool_sttfa.sttfa_true)"
%|- (sttfa-impl-e "(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_true) => bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_true))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(bool_sttfa.sttfa_true))(bool_sttfa.sttfa_true))" "bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_true)"
%|- (sttfa-impl-e "((FORALL(P:bool):(P => P)) => bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_true))" "(FORALL(P:bool):(P => P))"
%|- (then@ (sttfa-forall-i "P")
%|- (sttfa-impl-i "P" "P"
%|- (propax)))
%|- (sttfa-conv "((LAMBDA(x0:bool):x0)((FORALL(P:bool):(P => P))) => (LAMBDA(x0:bool):x0)(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_true)))" () ()
%|- (sttfa-forall-e "(FORALL(P:[bool -> bool]):(P((FORALL(P0:bool):(P0 => P0))) => P(bool_sttfa.match_bool_type[bool]((FORALL(P0:bool):(P0 => P0)))((FORALL(P0:bool):P0))(bool_sttfa.sttfa_true))))" "(LAMBDA(x0:bool):x0)"
%|- (sttfa-conv "(LAMBDA(y0:bool):(FORALL(P:[bool -> bool]):(P((FORALL(P0:bool):(P0 => P0))) => P(y0))))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_true))" () ()
%|- (sttfa-conv "(LAMBDA(x0:bool):(LAMBDA(y0:bool):(FORALL(P:[bool -> bool]):(P(x0) => P(y0)))))((FORALL(P:bool):(P => P)))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_true))" () ()
%|- (sttfa-conv "leibniz_sttfa.leibniz[bool]((FORALL(P:bool):(P => P)))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_true))" ("leibniz_sttfa.leibniz") ()
%|- (sttfa-conv "leibniz_sttfa.leibniz[bool]((FORALL(P:bool):(P => P)))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_true))" () ()
%|- (sttfa-forall-e "(FORALL(case_false:bool):leibniz_sttfa.leibniz[bool]((FORALL(P:bool):(P => P)))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))(case_false)(bool_sttfa.sttfa_true)))" "(FORALL(P:bool):P)"
%|- (sttfa-conv "(FORALL(case_false:bool):leibniz_sttfa.leibniz[bool]((FORALL(P:bool):(P => P)))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))(case_false)(bool_sttfa.sttfa_true)))" () ()
%|- (sttfa-forall-e "(FORALL(case_true:bool):(FORALL(case_false:bool):leibniz_sttfa.leibniz[bool](case_true)(bool_sttfa.match_bool_type[bool](case_true)(case_false)(bool_sttfa.sttfa_true))))" "(FORALL(P:bool):(P => P))"
%|- (sttfa-lemma "bool_sttfa.sym_eq_match_bool_type_true[bool]")))))))))))
%|- (sttfa-conv "((LAMBDA(x0:bool):x0)(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_true)) => (LAMBDA(x0:bool):x0)(bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_true))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(bool_sttfa.sttfa_true))(bool_sttfa.sttfa_true)))" () ()
%|- (sttfa-forall-e "(FORALL(P:[bool -> bool]):(P(bool_sttfa.match_bool_type[bool]((FORALL(P0:bool):(P0 => P0)))((FORALL(P0:bool):P0))(bool_sttfa.sttfa_true)) => P(bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P0:bool):(P0 => P0)))((FORALL(P0:bool):P0))(bool_sttfa.sttfa_true))(bool_sttfa.match_bool_type[bool]((FORALL(P0:bool):P0))((FORALL(P0:bool):(P0 => P0)))(bool_sttfa.sttfa_true))(bool_sttfa.sttfa_true))))" "(LAMBDA(x0:bool):x0)"
%|- (sttfa-conv "(LAMBDA(y0:bool):(FORALL(P:[bool -> bool]):(P(bool_sttfa.match_bool_type[bool]((FORALL(P0:bool):(P0 => P0)))((FORALL(P0:bool):P0))(bool_sttfa.sttfa_true)) => P(y0))))(bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_true))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(bool_sttfa.sttfa_true))(bool_sttfa.sttfa_true))" () ()
%|- (sttfa-conv "(LAMBDA(x0:bool):(LAMBDA(y0:bool):(FORALL(P:[bool -> bool]):(P(x0) => P(y0)))))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_true))(bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_true))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(bool_sttfa.sttfa_true))(bool_sttfa.sttfa_true))" () ()
%|- (sttfa-conv "leibniz_sttfa.leibniz[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_true))(bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_true))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(bool_sttfa.sttfa_true))(bool_sttfa.sttfa_true))" ("leibniz_sttfa.leibniz") ()
%|- (sttfa-conv "leibniz_sttfa.leibniz[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_true))(bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_true))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(bool_sttfa.sttfa_true))(bool_sttfa.sttfa_true))" () ()
%|- (sttfa-forall-e "(FORALL(case_false:bool):leibniz_sttfa.leibniz[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_true))(bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_true))(case_false)(bool_sttfa.sttfa_true)))" "bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(bool_sttfa.sttfa_true)"
%|- (sttfa-conv "(FORALL(case_false:bool):leibniz_sttfa.leibniz[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_true))(bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_true))(case_false)(bool_sttfa.sttfa_true)))" () ()
%|- (sttfa-forall-e "(FORALL(case_true:bool):(FORALL(case_false:bool):leibniz_sttfa.leibniz[bool](case_true)(bool_sttfa.match_bool_type[bool](case_true)(case_false)(bool_sttfa.sttfa_true))))" "bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_true)"
%|- (sttfa-lemma "bool_sttfa.sym_eq_match_bool_type_true[bool]")))))))))))
%|- (sttfa-conv "((LAMBDA(sttfa___:bool_sttfa.sttfa_bool):bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(sttfa___))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(sttfa___))(sttfa___))(bool_sttfa.sttfa_true) => ((LAMBDA(sttfa___:bool_sttfa.sttfa_bool):bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(sttfa___))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(sttfa___))(sttfa___))(bool_sttfa.sttfa_false) => (FORALL(z:bool_sttfa.sttfa_bool):(LAMBDA(sttfa___:bool_sttfa.sttfa_bool):bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(sttfa___))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(sttfa___))(sttfa___))(z))))" () ()
%|- (sttfa-forall-e "(FORALL(return:[bool_sttfa.sttfa_bool -> bool]):(return(bool_sttfa.sttfa_true) => (return(bool_sttfa.sttfa_false) => (FORALL(z:bool_sttfa.sttfa_bool):return(z)))))" "(LAMBDA(sttfa___:bool_sttfa.sttfa_bool):bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(sttfa___))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(sttfa___))(sttfa___))"
%|- (sttfa-lemma "bool_sttfa.match_bool_prop")))))))
%|- (sttfa-conv "((LAMBDA(x_13:bool_sttfa.sttfa_bool):bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(x_13))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(x_13))(x))(x) => (FORALL(y0:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](x)(y0) => (LAMBDA(x_13:bool_sttfa.sttfa_bool):bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(x_13))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(x_13))(x))(y0))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(x) => (FORALL(y0:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](x)(y0) => P(y0)))))" "(LAMBDA(x_13:bool_sttfa.sttfa_bool):bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(x_13))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(x_13))(x))"
%|- (sttfa-conv "(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(x) => (FORALL(y0:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](x)(y0) => P(y0)))))" () ()
%|- (sttfa-forall-e "(FORALL(x0:bool_sttfa.sttfa_bool):(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(x0) => (FORALL(y0:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](x0)(y0) => P(y0))))))" "x"
%|- (sttfa-lemma "logic_sttfa.eq_ind[bool_sttfa.sttfa_bool]"))))))))))))
%|- QED

not_eq_true_false  : LEMMA connectives_sttfa.sttfa_Not(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_false))

%|- not_eq_true_false : PROOF
%|- (sttfa-impl-e "((logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_False) => connectives_sttfa.sttfa_Not(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_false)))" "(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_False)"
%|- (sttfa-impl-i "logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_false)" "connectives_sttfa.sttfa_False"
%|- (sttfa-conv "connectives_sttfa.sttfa_False" () ()
%|- (sttfa-forall-e "(FORALL(P:bool):P)" "connectives_sttfa.sttfa_False"
%|- (sttfa-impl-e "(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_false) => (FORALL(P:bool):P))" "bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_false)"
%|- (sttfa-impl-e "(bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_false))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(bool_sttfa.sttfa_false))(bool_sttfa.sttfa_true) => bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_false))" "bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_false))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(bool_sttfa.sttfa_false))(bool_sttfa.sttfa_true)"
%|- (sttfa-impl-e "(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_false) => bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_false))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(bool_sttfa.sttfa_false))(bool_sttfa.sttfa_true))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_false)"
%|- (propax)
%|- (sttfa-conv "(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_false) => bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_false))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(bool_sttfa.sttfa_false))(bool_sttfa.sttfa_true))" () ()
%|- (sttfa-forall-e "(FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(y) => bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(y))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(y))(bool_sttfa.sttfa_true)))" "bool_sttfa.sttfa_false"
%|- (sttfa-conv "(FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(y) => bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(y))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(y))(bool_sttfa.sttfa_true)))" () ()
%|- (sttfa-forall-e "(FORALL(x:bool_sttfa.sttfa_bool):(FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](x)(y) => bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(y))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(y))(x))))" "bool_sttfa.sttfa_true"
%|- (sttfa-lemma "bool_sttfa.bool_discr"))))))
%|- (sttfa-conv "((LAMBDA(x:bool):x)(bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_false))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(bool_sttfa.sttfa_false))(bool_sttfa.sttfa_true)) => (LAMBDA(x:bool):x)(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_false)))" () ()
%|- (sttfa-forall-e "(FORALL(P:[bool -> bool]):(P(bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P0:bool):(P0 => P0)))((FORALL(P0:bool):P0))(bool_sttfa.sttfa_false))(bool_sttfa.match_bool_type[bool]((FORALL(P0:bool):P0))((FORALL(P0:bool):(P0 => P0)))(bool_sttfa.sttfa_false))(bool_sttfa.sttfa_true)) => P(bool_sttfa.match_bool_type[bool]((FORALL(P0:bool):(P0 => P0)))((FORALL(P0:bool):P0))(bool_sttfa.sttfa_false))))" "(LAMBDA(x:bool):x)"
%|- (sttfa-conv "(LAMBDA(y:bool):(FORALL(P:[bool -> bool]):(P(bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P0:bool):(P0 => P0)))((FORALL(P0:bool):P0))(bool_sttfa.sttfa_false))(bool_sttfa.match_bool_type[bool]((FORALL(P0:bool):P0))((FORALL(P0:bool):(P0 => P0)))(bool_sttfa.sttfa_false))(bool_sttfa.sttfa_true)) => P(y))))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_false))" () ()
%|- (sttfa-conv "(LAMBDA(x:bool):(LAMBDA(y:bool):(FORALL(P:[bool -> bool]):(P(x) => P(y)))))(bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_false))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(bool_sttfa.sttfa_false))(bool_sttfa.sttfa_true))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_false))" () ()
%|- (sttfa-conv "leibniz_sttfa.leibniz[bool](bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_false))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(bool_sttfa.sttfa_false))(bool_sttfa.sttfa_true))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_false))" ("leibniz_sttfa.leibniz") ()
%|- (sttfa-conv "leibniz_sttfa.leibniz[bool](bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_false))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(bool_sttfa.sttfa_false))(bool_sttfa.sttfa_true))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_false))" () ()
%|- (sttfa-forall-e "(FORALL(case_false:bool):leibniz_sttfa.leibniz[bool](bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_false))(case_false)(bool_sttfa.sttfa_true))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_false)))" "bool_sttfa.match_bool_type[bool]((FORALL(P:bool):P))((FORALL(P:bool):(P => P)))(bool_sttfa.sttfa_false)"
%|- (sttfa-conv "(FORALL(case_false:bool):leibniz_sttfa.leibniz[bool](bool_sttfa.match_bool_type[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_false))(case_false)(bool_sttfa.sttfa_true))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_false)))" () ()
%|- (sttfa-forall-e "(FORALL(case_true:bool):(FORALL(case_false:bool):leibniz_sttfa.leibniz[bool](bool_sttfa.match_bool_type[bool](case_true)(case_false)(bool_sttfa.sttfa_true))(case_true)))" "bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_false)"
%|- (sttfa-lemma "bool_sttfa.eq_match_bool_type_true[bool]")))))))))))
%|- (sttfa-conv "((LAMBDA(x:bool):x)(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_false)) => (LAMBDA(x:bool):x)((FORALL(P:bool):P)))" () ()
%|- (sttfa-forall-e "(FORALL(P:[bool -> bool]):(P(bool_sttfa.match_bool_type[bool]((FORALL(P0:bool):(P0 => P0)))((FORALL(P0:bool):P0))(bool_sttfa.sttfa_false)) => P((FORALL(P0:bool):P0))))" "(LAMBDA(x:bool):x)"
%|- (sttfa-conv "(LAMBDA(y:bool):(FORALL(P:[bool -> bool]):(P(bool_sttfa.match_bool_type[bool]((FORALL(P0:bool):(P0 => P0)))((FORALL(P0:bool):P0))(bool_sttfa.sttfa_false)) => P(y))))((FORALL(P:bool):P))" () ()
%|- (sttfa-conv "(LAMBDA(x:bool):(LAMBDA(y:bool):(FORALL(P:[bool -> bool]):(P(x) => P(y)))))(bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_false))((FORALL(P:bool):P))" () ()
%|- (sttfa-conv "leibniz_sttfa.leibniz[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_false))((FORALL(P:bool):P))" ("leibniz_sttfa.leibniz") ()
%|- (sttfa-conv "leibniz_sttfa.leibniz[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))((FORALL(P:bool):P))(bool_sttfa.sttfa_false))((FORALL(P:bool):P))" () ()
%|- (sttfa-forall-e "(FORALL(case_false:bool):leibniz_sttfa.leibniz[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))(case_false)(bool_sttfa.sttfa_false))(case_false))" "(FORALL(P:bool):P)"
%|- (sttfa-conv "(FORALL(case_false:bool):leibniz_sttfa.leibniz[bool](bool_sttfa.match_bool_type[bool]((FORALL(P:bool):(P => P)))(case_false)(bool_sttfa.sttfa_false))(case_false))" () ()
%|- (sttfa-forall-e "(FORALL(case_true:bool):(FORALL(case_false:bool):leibniz_sttfa.leibniz[bool](bool_sttfa.match_bool_type[bool](case_true)(case_false)(bool_sttfa.sttfa_false))(case_false)))" "(FORALL(P:bool):(P => P))"
%|- (sttfa-lemma "bool_sttfa.eq_match_bool_type_false[bool]"))))))))))))))
%|- (sttfa-conv "((logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_false) => connectives_sttfa.sttfa_False) => connectives_sttfa.sttfa_Not(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_false)))" () ()
%|- (sttfa-forall-e "(FORALL(A:bool):((A => connectives_sttfa.sttfa_False) => connectives_sttfa.sttfa_Not(A)))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_false)"
%|- (sttfa-lemma "connectives_sttfa.nmk"))))
%|- QED

notb  : [bool_sttfa.sttfa_bool -> bool_sttfa.sttfa_bool] = (LAMBDA(b:bool_sttfa.sttfa_bool):bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true)(b))

andb  : [bool_sttfa.sttfa_bool -> [bool_sttfa.sttfa_bool -> bool_sttfa.sttfa_bool]] = (LAMBDA(b1:bool_sttfa.sttfa_bool):(LAMBDA(b2:bool_sttfa.sttfa_bool):bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_false)(b1)))

andb_true_l  : LEMMA (FORALL(b1:bool_sttfa.sttfa_bool):(FORALL(b2:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.andb(b1)(b2))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](b1)(bool_sttfa.sttfa_true))))

%|- andb_true_l : PROOF
%|- (then@ (sttfa-forall-i "b1")
%|- (sttfa-conv "(FORALL(b2:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.andb(b1)(b2))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](b1)(bool_sttfa.sttfa_true)))" () ()
%|- (sttfa-forall-e "(FORALL(z:bool_sttfa.sttfa_bool):(FORALL(b2:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.andb(z)(b2))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](z)(bool_sttfa.sttfa_true))))" "b1"
%|- (sttfa-impl-e "((FORALL(sttfa__b2:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](sttfa__b2)(bool_sttfa.sttfa_false)(bool_sttfa.sttfa_false))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true))) => (FORALL(z:bool_sttfa.sttfa_bool):(FORALL(b2:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.andb(z)(b2))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](z)(bool_sttfa.sttfa_true)))))" "(FORALL(sttfa__b2:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](sttfa__b2)(bool_sttfa.sttfa_false)(bool_sttfa.sttfa_false))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true)))"
%|- (then@ (sttfa-forall-i "sttfa__b2")
%|- (sttfa-impl-e "((logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true)) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](sttfa__b2)(bool_sttfa.sttfa_false)(bool_sttfa.sttfa_false))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true)))" "(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true))"
%|- (sttfa-impl-i "logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true)" "logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true)"
%|- (sttfa-impl-e "(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true)"
%|- (propax)
%|- (sttfa-conv "(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true))" () ()
%|- (sttfa-forall-e "(FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_true)))" "bool_sttfa.sttfa_false"
%|- (sttfa-impl-e "(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_true) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_true))))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_true)"
%|- (sttfa-conv "logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_true)" () ()
%|- (sttfa-forall-e "(FORALL(x:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](x)(x))" "bool_sttfa.sttfa_true"
%|- (sttfa-lemma "logic_sttfa.refl[bool_sttfa.sttfa_bool]")))
%|- (sttfa-conv "((LAMBDA(sttfa___:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](sttfa___)(bool_sttfa.sttfa_true))(bool_sttfa.sttfa_true) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_true) => (LAMBDA(sttfa___:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](sttfa___)(bool_sttfa.sttfa_true))(y))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(bool_sttfa.sttfa_true) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_true) => P(y)))))" "(LAMBDA(sttfa___:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](sttfa___)(bool_sttfa.sttfa_true))"
%|- (sttfa-conv "(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(bool_sttfa.sttfa_true) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_true) => P(y)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:bool_sttfa.sttfa_bool):(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(x) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(x) => P(y))))))" "bool_sttfa.sttfa_true"
%|- (sttfa-lemma "logic_sttfa.rewrite_r[bool_sttfa.sttfa_bool]"))))))))))
%|- (sttfa-conv "((LAMBDA(x:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](x)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true)))(bool_sttfa.sttfa_false) => (LAMBDA(x:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](x)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true)))(bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](sttfa__b2)(bool_sttfa.sttfa_false)(bool_sttfa.sttfa_false)))" () ()
%|- (sttfa-forall-e "(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(bool_sttfa.sttfa_false) => P(bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](sttfa__b2)(bool_sttfa.sttfa_false)(bool_sttfa.sttfa_false))))" "(LAMBDA(x:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](x)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true)))"
%|- (sttfa-conv "(LAMBDA(y:bool_sttfa.sttfa_bool):(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(bool_sttfa.sttfa_false) => P(y))))(bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](sttfa__b2)(bool_sttfa.sttfa_false)(bool_sttfa.sttfa_false))" () ()
%|- (sttfa-conv "(LAMBDA(x:bool_sttfa.sttfa_bool):(LAMBDA(y:bool_sttfa.sttfa_bool):(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(x) => P(y)))))(bool_sttfa.sttfa_false)(bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](sttfa__b2)(bool_sttfa.sttfa_false)(bool_sttfa.sttfa_false))" () ()
%|- (sttfa-conv "leibniz_sttfa.leibniz[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](sttfa__b2)(bool_sttfa.sttfa_false)(bool_sttfa.sttfa_false))" ("leibniz_sttfa.leibniz") ()
%|- (sttfa-conv "leibniz_sttfa.leibniz[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](sttfa__b2)(bool_sttfa.sttfa_false)(bool_sttfa.sttfa_false))" () ()
%|- (sttfa-forall-e "(FORALL(case_false:bool_sttfa.sttfa_bool):leibniz_sttfa.leibniz[bool_sttfa.sttfa_bool](case_false)(bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](sttfa__b2)(case_false)(bool_sttfa.sttfa_false)))" "bool_sttfa.sttfa_false"
%|- (sttfa-conv "(FORALL(case_false:bool_sttfa.sttfa_bool):leibniz_sttfa.leibniz[bool_sttfa.sttfa_bool](case_false)(bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](sttfa__b2)(case_false)(bool_sttfa.sttfa_false)))" () ()
%|- (sttfa-forall-e "(FORALL(case_true:bool_sttfa.sttfa_bool):(FORALL(case_false:bool_sttfa.sttfa_bool):leibniz_sttfa.leibniz[bool_sttfa.sttfa_bool](case_false)(bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](case_true)(case_false)(bool_sttfa.sttfa_false))))" "sttfa__b2"
%|- (sttfa-lemma "bool_sttfa.sym_eq_match_bool_type_false[bool_sttfa.sttfa_bool]"))))))))))))
%|- (sttfa-conv "((FORALL(b2:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.andb(bool_sttfa.sttfa_false)(b2))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true))) => (FORALL(z:bool_sttfa.sttfa_bool):(FORALL(b2:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.andb(z)(b2))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](z)(bool_sttfa.sttfa_true)))))" ("bool_sttfa.andb") ()
%|- (sttfa-impl-e "((FORALL(b2:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_true))) => ((FORALL(b2:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.andb(bool_sttfa.sttfa_false)(b2))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true))) => (FORALL(z:bool_sttfa.sttfa_bool):(FORALL(b2:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.andb(z)(b2))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](z)(bool_sttfa.sttfa_true))))))" "(FORALL(b2:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_true)))"
%|- (then@ (sttfa-forall-i "b2")
%|- (sttfa-impl-e "((logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_true)) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_true)))" "(logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_true))"
%|- (sttfa-impl-i "logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true)" "logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_true)"
%|- (sttfa-impl-e "(logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_true))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true)"
%|- (propax)
%|- (sttfa-conv "(logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_true))" () ()
%|- (sttfa-forall-e "(FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(y) => logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_true)))" "bool_sttfa.sttfa_true"
%|- (sttfa-impl-e "(logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(y) => logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_true))))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true)"
%|- (sttfa-impl-e "(logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true)"
%|- (propax)
%|- (sttfa-conv "(logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true))" () ()
%|- (sttfa-forall-e "(FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(y) => logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(y)))" "bool_sttfa.sttfa_true"
%|- (sttfa-impl-e "(logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(b2) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(y) => logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(y))))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(b2)"
%|- (sttfa-conv "logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(b2)" () ()
%|- (sttfa-forall-e "(FORALL(x:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](x)(x))" "b2"
%|- (sttfa-lemma "logic_sttfa.refl[bool_sttfa.sttfa_bool]")))
%|- (sttfa-conv "((LAMBDA(sttfa___:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(sttfa___))(b2) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(y) => (LAMBDA(sttfa___:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(sttfa___))(y))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(b2) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(y) => P(y)))))" "(LAMBDA(sttfa___:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(sttfa___))"
%|- (sttfa-conv "(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(b2) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(y) => P(y)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:bool_sttfa.sttfa_bool):(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(x) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](x)(y) => P(y))))))" "b2"
%|- (sttfa-lemma "logic_sttfa.rewrite_l[bool_sttfa.sttfa_bool]")))))))))
%|- (sttfa-conv "((LAMBDA(sttfa___:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](sttfa___)(bool_sttfa.sttfa_true))(b2) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(y) => (LAMBDA(sttfa___:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](sttfa___)(bool_sttfa.sttfa_true))(y))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(b2) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(y) => P(y)))))" "(LAMBDA(sttfa___:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](sttfa___)(bool_sttfa.sttfa_true))"
%|- (sttfa-conv "(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(b2) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(y) => P(y)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:bool_sttfa.sttfa_bool):(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(x) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](x)(y) => P(y))))))" "b2"
%|- (sttfa-lemma "logic_sttfa.rewrite_l[bool_sttfa.sttfa_bool]"))))))))))
%|- (sttfa-conv "((LAMBDA(x:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](x)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_true)))(b2) => (LAMBDA(x:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](x)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_true)))(bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true)))" () ()
%|- (sttfa-forall-e "(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(b2) => P(bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true))))" "(LAMBDA(x:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](x)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_true)))"
%|- (sttfa-conv "(LAMBDA(y:bool_sttfa.sttfa_bool):(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(b2) => P(y))))(bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true))" () ()
%|- (sttfa-conv "(LAMBDA(x:bool_sttfa.sttfa_bool):(LAMBDA(y:bool_sttfa.sttfa_bool):(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(x) => P(y)))))(b2)(bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true))" () ()
%|- (sttfa-conv "leibniz_sttfa.leibniz[bool_sttfa.sttfa_bool](b2)(bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true))" ("leibniz_sttfa.leibniz") ()
%|- (sttfa-conv "leibniz_sttfa.leibniz[bool_sttfa.sttfa_bool](b2)(bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true))" () ()
%|- (sttfa-forall-e "(FORALL(case_false:bool_sttfa.sttfa_bool):leibniz_sttfa.leibniz[bool_sttfa.sttfa_bool](b2)(bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](b2)(case_false)(bool_sttfa.sttfa_true)))" "bool_sttfa.sttfa_false"
%|- (sttfa-conv "(FORALL(case_false:bool_sttfa.sttfa_bool):leibniz_sttfa.leibniz[bool_sttfa.sttfa_bool](b2)(bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](b2)(case_false)(bool_sttfa.sttfa_true)))" () ()
%|- (sttfa-forall-e "(FORALL(case_true:bool_sttfa.sttfa_bool):(FORALL(case_false:bool_sttfa.sttfa_bool):leibniz_sttfa.leibniz[bool_sttfa.sttfa_bool](case_true)(bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](case_true)(case_false)(bool_sttfa.sttfa_true))))" "b2"
%|- (sttfa-lemma "bool_sttfa.sym_eq_match_bool_type_true[bool_sttfa.sttfa_bool]"))))))))))))
%|- (sttfa-conv "((FORALL(b2:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.andb(bool_sttfa.sttfa_true)(b2))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_true))) => ((FORALL(b2:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.andb(bool_sttfa.sttfa_false)(b2))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true))) => (FORALL(z:bool_sttfa.sttfa_bool):(FORALL(b2:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.andb(z)(b2))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](z)(bool_sttfa.sttfa_true))))))" ("bool_sttfa.andb") ()
%|- (sttfa-conv "((LAMBDA(sttfa___:bool_sttfa.sttfa_bool):(FORALL(b2:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.andb(sttfa___)(b2))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](sttfa___)(bool_sttfa.sttfa_true))))(bool_sttfa.sttfa_true) => ((LAMBDA(sttfa___:bool_sttfa.sttfa_bool):(FORALL(b2:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.andb(sttfa___)(b2))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](sttfa___)(bool_sttfa.sttfa_true))))(bool_sttfa.sttfa_false) => (FORALL(z:bool_sttfa.sttfa_bool):(LAMBDA(sttfa___:bool_sttfa.sttfa_bool):(FORALL(b2:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.andb(sttfa___)(b2))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](sttfa___)(bool_sttfa.sttfa_true))))(z))))" () ()
%|- (sttfa-forall-e "(FORALL(return:[bool_sttfa.sttfa_bool -> bool]):(return(bool_sttfa.sttfa_true) => (return(bool_sttfa.sttfa_false) => (FORALL(z:bool_sttfa.sttfa_bool):return(z)))))" "(LAMBDA(sttfa___:bool_sttfa.sttfa_bool):(FORALL(b2:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.andb(sttfa___)(b2))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](sttfa___)(bool_sttfa.sttfa_true))))"
%|- (sttfa-lemma "bool_sttfa.match_bool_prop"))))))))))
%|- QED

andb_true_r  : LEMMA (FORALL(b1:bool_sttfa.sttfa_bool):(FORALL(b2:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.andb(b1)(b2))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true))))

%|- andb_true_r : PROOF
%|- (then@ (sttfa-forall-i "b1")
%|- (then@ (sttfa-forall-i "b2")
%|- (sttfa-conv "(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.andb(b1)(b2))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true))" () ()
%|- (sttfa-forall-e "(FORALL(z:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.andb(z)(b2))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true)))" "b1"
%|- (sttfa-impl-e "((logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_false)(bool_sttfa.sttfa_false))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true)) => (FORALL(z:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.andb(z)(b2))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true))))" "(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_false)(bool_sttfa.sttfa_false))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true))"
%|- (sttfa-impl-e "((logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true)) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_false)(bool_sttfa.sttfa_false))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true)))" "(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true))"
%|- (sttfa-conv "(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true))" () ()
%|- (sttfa-forall-e "(FORALL(z:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](z)(bool_sttfa.sttfa_true)))" "b2"
%|- (sttfa-impl-e "((logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true)) => (FORALL(z:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](z)(bool_sttfa.sttfa_true))))" "(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true))"
%|- (sttfa-impl-i "logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true)" "logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true)"
%|- (sttfa-impl-e "(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true)"
%|- (propax)
%|- (sttfa-conv "(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true))" () ()
%|- (sttfa-forall-e "(FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_true)))" "bool_sttfa.sttfa_false"
%|- (sttfa-impl-e "(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_true) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_true))))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_true)"
%|- (sttfa-conv "logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_true)" () ()
%|- (sttfa-forall-e "(FORALL(x:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](x)(x))" "bool_sttfa.sttfa_true"
%|- (sttfa-lemma "logic_sttfa.refl[bool_sttfa.sttfa_bool]")))
%|- (sttfa-conv "((LAMBDA(sttfa___:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](sttfa___)(bool_sttfa.sttfa_true))(bool_sttfa.sttfa_true) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_true) => (LAMBDA(sttfa___:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](sttfa___)(bool_sttfa.sttfa_true))(y))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(bool_sttfa.sttfa_true) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_true) => P(y)))))" "(LAMBDA(sttfa___:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](sttfa___)(bool_sttfa.sttfa_true))"
%|- (sttfa-conv "(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(bool_sttfa.sttfa_true) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(bool_sttfa.sttfa_true) => P(y)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:bool_sttfa.sttfa_bool):(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(x) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](y)(x) => P(y))))))" "bool_sttfa.sttfa_true"
%|- (sttfa-lemma "logic_sttfa.rewrite_r[bool_sttfa.sttfa_bool]"))))))))))
%|- (sttfa-impl-e "((logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_true)) => ((logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true)) => (FORALL(z:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](z)(bool_sttfa.sttfa_true)))))" "(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_true))"
%|- (sttfa-impl-i "logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true)" "logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_true)"
%|- (sttfa-conv "logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_true)" () ()
%|- (sttfa-forall-e "(FORALL(x:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](x)(x))" "bool_sttfa.sttfa_true"
%|- (sttfa-lemma "logic_sttfa.refl[bool_sttfa.sttfa_bool]"))))
%|- (sttfa-conv "((LAMBDA(sttfa___:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](sttfa___)(bool_sttfa.sttfa_true)))(bool_sttfa.sttfa_true) => ((LAMBDA(sttfa___:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](sttfa___)(bool_sttfa.sttfa_true)))(bool_sttfa.sttfa_false) => (FORALL(z:bool_sttfa.sttfa_bool):(LAMBDA(sttfa___:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](sttfa___)(bool_sttfa.sttfa_true)))(z))))" () ()
%|- (sttfa-forall-e "(FORALL(return:[bool_sttfa.sttfa_bool -> bool]):(return(bool_sttfa.sttfa_true) => (return(bool_sttfa.sttfa_false) => (FORALL(z:bool_sttfa.sttfa_bool):return(z)))))" "(LAMBDA(sttfa___:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](sttfa___)(bool_sttfa.sttfa_true)))"
%|- (sttfa-lemma "bool_sttfa.match_bool_prop")))))))
%|- (sttfa-conv "((LAMBDA(x:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](x)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true)))(bool_sttfa.sttfa_false) => (LAMBDA(x:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](x)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true)))(bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_false)(bool_sttfa.sttfa_false)))" () ()
%|- (sttfa-forall-e "(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(bool_sttfa.sttfa_false) => P(bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_false)(bool_sttfa.sttfa_false))))" "(LAMBDA(x:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](x)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true)))"
%|- (sttfa-conv "(LAMBDA(y:bool_sttfa.sttfa_bool):(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(bool_sttfa.sttfa_false) => P(y))))(bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_false)(bool_sttfa.sttfa_false))" () ()
%|- (sttfa-conv "(LAMBDA(x:bool_sttfa.sttfa_bool):(LAMBDA(y:bool_sttfa.sttfa_bool):(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(x) => P(y)))))(bool_sttfa.sttfa_false)(bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_false)(bool_sttfa.sttfa_false))" () ()
%|- (sttfa-conv "leibniz_sttfa.leibniz[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_false)(bool_sttfa.sttfa_false))" ("leibniz_sttfa.leibniz") ()
%|- (sttfa-conv "leibniz_sttfa.leibniz[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_false)(bool_sttfa.sttfa_false))" () ()
%|- (sttfa-forall-e "(FORALL(case_false:bool_sttfa.sttfa_bool):leibniz_sttfa.leibniz[bool_sttfa.sttfa_bool](case_false)(bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](b2)(case_false)(bool_sttfa.sttfa_false)))" "bool_sttfa.sttfa_false"
%|- (sttfa-conv "(FORALL(case_false:bool_sttfa.sttfa_bool):leibniz_sttfa.leibniz[bool_sttfa.sttfa_bool](case_false)(bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](b2)(case_false)(bool_sttfa.sttfa_false)))" () ()
%|- (sttfa-forall-e "(FORALL(case_true:bool_sttfa.sttfa_bool):(FORALL(case_false:bool_sttfa.sttfa_bool):leibniz_sttfa.leibniz[bool_sttfa.sttfa_bool](case_false)(bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](case_true)(case_false)(bool_sttfa.sttfa_false))))" "b2"
%|- (sttfa-lemma "bool_sttfa.sym_eq_match_bool_type_false[bool_sttfa.sttfa_bool]")))))))))))
%|- (sttfa-conv "((logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.andb(bool_sttfa.sttfa_false)(b2))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true)) => (FORALL(z:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.andb(z)(b2))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true))))" ("bool_sttfa.andb") ()
%|- (sttfa-impl-e "((logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true)) => ((logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.andb(bool_sttfa.sttfa_false)(b2))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true)) => (FORALL(z:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.andb(z)(b2))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true)))))" "(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true))"
%|- (sttfa-impl-e "((logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true)) => (logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true)))" "(logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true))"
%|- (sttfa-impl-i "logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true)" "logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true)"
%|- (sttfa-impl-e "(logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true)"
%|- (propax)
%|- (sttfa-conv "(logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true))" () ()
%|- (sttfa-forall-e "(FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(y) => logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(y)))" "bool_sttfa.sttfa_true"
%|- (sttfa-impl-e "(logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(b2) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(y) => logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(y))))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(b2)"
%|- (sttfa-conv "logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(b2)" () ()
%|- (sttfa-forall-e "(FORALL(x:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](x)(x))" "b2"
%|- (sttfa-lemma "logic_sttfa.refl[bool_sttfa.sttfa_bool]")))
%|- (sttfa-conv "((LAMBDA(sttfa___:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(sttfa___))(b2) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(y) => (LAMBDA(sttfa___:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(sttfa___))(y))))" () ()
%|- (sttfa-forall-e "(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(b2) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(y) => P(y)))))" "(LAMBDA(sttfa___:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(sttfa___))"
%|- (sttfa-conv "(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(b2) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(y) => P(y)))))" () ()
%|- (sttfa-forall-e "(FORALL(x:bool_sttfa.sttfa_bool):(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(x) => (FORALL(y:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](x)(y) => P(y))))))" "b2"
%|- (sttfa-lemma "logic_sttfa.rewrite_l[bool_sttfa.sttfa_bool]"))))))))))
%|- (sttfa-conv "((LAMBDA(x:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](x)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true)))(b2) => (LAMBDA(x:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](x)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true)))(bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true)))" () ()
%|- (sttfa-forall-e "(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(b2) => P(bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true))))" "(LAMBDA(x:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](x)(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true)))"
%|- (sttfa-conv "(LAMBDA(y:bool_sttfa.sttfa_bool):(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(b2) => P(y))))(bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true))" () ()
%|- (sttfa-conv "(LAMBDA(x:bool_sttfa.sttfa_bool):(LAMBDA(y:bool_sttfa.sttfa_bool):(FORALL(P:[bool_sttfa.sttfa_bool -> bool]):(P(x) => P(y)))))(b2)(bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true))" () ()
%|- (sttfa-conv "leibniz_sttfa.leibniz[bool_sttfa.sttfa_bool](b2)(bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true))" ("leibniz_sttfa.leibniz") ()
%|- (sttfa-conv "leibniz_sttfa.leibniz[bool_sttfa.sttfa_bool](b2)(bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true))" () ()
%|- (sttfa-forall-e "(FORALL(case_false:bool_sttfa.sttfa_bool):leibniz_sttfa.leibniz[bool_sttfa.sttfa_bool](b2)(bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](b2)(case_false)(bool_sttfa.sttfa_true)))" "bool_sttfa.sttfa_false"
%|- (sttfa-conv "(FORALL(case_false:bool_sttfa.sttfa_bool):leibniz_sttfa.leibniz[bool_sttfa.sttfa_bool](b2)(bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](b2)(case_false)(bool_sttfa.sttfa_true)))" () ()
%|- (sttfa-forall-e "(FORALL(case_true:bool_sttfa.sttfa_bool):(FORALL(case_false:bool_sttfa.sttfa_bool):leibniz_sttfa.leibniz[bool_sttfa.sttfa_bool](case_true)(bool_sttfa.match_bool_type[bool_sttfa.sttfa_bool](case_true)(case_false)(bool_sttfa.sttfa_true))))" "b2"
%|- (sttfa-lemma "bool_sttfa.sym_eq_match_bool_type_true[bool_sttfa.sttfa_bool]")))))))))))
%|- (sttfa-conv "((logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.andb(bool_sttfa.sttfa_true)(b2))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true)) => ((logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.andb(bool_sttfa.sttfa_false)(b2))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true)) => (FORALL(z:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.andb(z)(b2))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true)))))" ("bool_sttfa.andb") ()
%|- (sttfa-conv "((LAMBDA(sttfa___:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.andb(sttfa___)(b2))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true)))(bool_sttfa.sttfa_true) => ((LAMBDA(sttfa___:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.andb(sttfa___)(b2))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true)))(bool_sttfa.sttfa_false) => (FORALL(z:bool_sttfa.sttfa_bool):(LAMBDA(sttfa___:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.andb(sttfa___)(b2))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true)))(z))))" () ()
%|- (sttfa-forall-e "(FORALL(return:[bool_sttfa.sttfa_bool -> bool]):(return(bool_sttfa.sttfa_true) => (return(bool_sttfa.sttfa_false) => (FORALL(z:bool_sttfa.sttfa_bool):return(z)))))" "(LAMBDA(sttfa___:bool_sttfa.sttfa_bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.andb(sttfa___)(b2))(bool_sttfa.sttfa_true) => logic_sttfa.eq[bool_sttfa.sttfa_bool](b2)(bool_sttfa.sttfa_true)))"
%|- (sttfa-lemma "bool_sttfa.match_bool_prop")))))))))))
%|- QED

true_or_false  : LEMMA (FORALL(b:bool_sttfa.sttfa_bool):connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](b)(bool_sttfa.sttfa_true))(logic_sttfa.eq[bool_sttfa.sttfa_bool](b)(bool_sttfa.sttfa_false)))

%|- true_or_false : PROOF
%|- (then@ (sttfa-forall-i "b")
%|- (sttfa-conv "connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](b)(bool_sttfa.sttfa_true))(logic_sttfa.eq[bool_sttfa.sttfa_bool](b)(bool_sttfa.sttfa_false))" () ()
%|- (sttfa-forall-e "(FORALL(z:bool_sttfa.sttfa_bool):connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](z)(bool_sttfa.sttfa_true))(logic_sttfa.eq[bool_sttfa.sttfa_bool](z)(bool_sttfa.sttfa_false)))" "b"
%|- (sttfa-impl-e "(relations_sttfa.RC[bool_sttfa.sttfa_bool]((LAMBDA(sttfa___:bool_sttfa.sttfa_bool):(LAMBDA(sttfa__0:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true))))(bool_sttfa.sttfa_false)(bool_sttfa.sttfa_false) => (FORALL(z:bool_sttfa.sttfa_bool):connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](z)(bool_sttfa.sttfa_true))(logic_sttfa.eq[bool_sttfa.sttfa_bool](z)(bool_sttfa.sttfa_false))))" "relations_sttfa.RC[bool_sttfa.sttfa_bool]((LAMBDA(sttfa___:bool_sttfa.sttfa_bool):(LAMBDA(sttfa__0:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true))))(bool_sttfa.sttfa_false)(bool_sttfa.sttfa_false)"
%|- (sttfa-conv "relations_sttfa.RC[bool_sttfa.sttfa_bool]((LAMBDA(sttfa___:bool_sttfa.sttfa_bool):(LAMBDA(sttfa__0:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true))))(bool_sttfa.sttfa_false)(bool_sttfa.sttfa_false)" () ()
%|- (sttfa-forall-e "(FORALL(x:bool_sttfa.sttfa_bool):relations_sttfa.RC[bool_sttfa.sttfa_bool]((LAMBDA(sttfa___:bool_sttfa.sttfa_bool):(LAMBDA(sttfa__0:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true))))(x)(x))" "bool_sttfa.sttfa_false"
%|- (sttfa-conv "(LAMBDA(R:[bool_sttfa.sttfa_bool -> [bool_sttfa.sttfa_bool -> bool]]):(FORALL(x:bool_sttfa.sttfa_bool):R(x)(x)))(relations_sttfa.RC[bool_sttfa.sttfa_bool]((LAMBDA(sttfa___:bool_sttfa.sttfa_bool):(LAMBDA(sttfa__0:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true)))))" () ()
%|- (sttfa-conv "relations_sttfa.reflexive[bool_sttfa.sttfa_bool](relations_sttfa.RC[bool_sttfa.sttfa_bool]((LAMBDA(sttfa___:bool_sttfa.sttfa_bool):(LAMBDA(sttfa__0:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true)))))" ("relations_sttfa.reflexive") ()
%|- (sttfa-conv "relations_sttfa.reflexive[bool_sttfa.sttfa_bool](relations_sttfa.RC[bool_sttfa.sttfa_bool]((LAMBDA(sttfa___:bool_sttfa.sttfa_bool):(LAMBDA(sttfa__0:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true)))))" () ()
%|- (sttfa-forall-e "(FORALL(R:[bool_sttfa.sttfa_bool -> [bool_sttfa.sttfa_bool -> bool]]):relations_sttfa.reflexive[bool_sttfa.sttfa_bool](relations_sttfa.RC[bool_sttfa.sttfa_bool](R)))" "(LAMBDA(sttfa___:bool_sttfa.sttfa_bool):(LAMBDA(sttfa__0:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true)))"
%|- (sttfa-lemma "relations_sttfa.RC_reflexive[bool_sttfa.sttfa_bool]")))))))
%|- (sttfa-conv "(connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true))(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_false)) => (FORALL(z:bool_sttfa.sttfa_bool):connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](z)(bool_sttfa.sttfa_true))(logic_sttfa.eq[bool_sttfa.sttfa_bool](z)(bool_sttfa.sttfa_false))))" () ("relations_sttfa.RC")
%|- (sttfa-impl-e "(connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_true))(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_false)) => (connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_true))(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_false)(bool_sttfa.sttfa_false)) => (FORALL(z:bool_sttfa.sttfa_bool):connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](z)(bool_sttfa.sttfa_true))(logic_sttfa.eq[bool_sttfa.sttfa_bool](z)(bool_sttfa.sttfa_false)))))" "connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_true))(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_false))"
%|- (sttfa-impl-e "(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_true) => connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_true))(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_false)))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_true)"
%|- (sttfa-conv "logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_true)" () ()
%|- (sttfa-forall-e "(FORALL(x:bool_sttfa.sttfa_bool):logic_sttfa.eq[bool_sttfa.sttfa_bool](x)(x))" "bool_sttfa.sttfa_true"
%|- (sttfa-lemma "logic_sttfa.refl[bool_sttfa.sttfa_bool]")))
%|- (sttfa-conv "(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_true) => connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_true))(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_false)))" () ()
%|- (sttfa-forall-e "(FORALL(B:bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_true) => connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_true))(B)))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_false)"
%|- (sttfa-conv "(FORALL(B:bool):(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_true) => connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_true))(B)))" () ()
%|- (sttfa-forall-e "(FORALL(A:bool):(FORALL(B:bool):(A => connectives_sttfa.sttfa_Or(A)(B))))" "logic_sttfa.eq[bool_sttfa.sttfa_bool](bool_sttfa.sttfa_true)(bool_sttfa.sttfa_true)"
%|- (sttfa-lemma "connectives_sttfa.or_introl"))))))
%|- (sttfa-conv "((LAMBDA(sttfa___:bool_sttfa.sttfa_bool):connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](sttfa___)(bool_sttfa.sttfa_true))(logic_sttfa.eq[bool_sttfa.sttfa_bool](sttfa___)(bool_sttfa.sttfa_false)))(bool_sttfa.sttfa_true) => ((LAMBDA(sttfa___:bool_sttfa.sttfa_bool):connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](sttfa___)(bool_sttfa.sttfa_true))(logic_sttfa.eq[bool_sttfa.sttfa_bool](sttfa___)(bool_sttfa.sttfa_false)))(bool_sttfa.sttfa_false) => (FORALL(z:bool_sttfa.sttfa_bool):(LAMBDA(sttfa___:bool_sttfa.sttfa_bool):connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](sttfa___)(bool_sttfa.sttfa_true))(logic_sttfa.eq[bool_sttfa.sttfa_bool](sttfa___)(bool_sttfa.sttfa_false)))(z))))" () ()
%|- (sttfa-forall-e "(FORALL(return:[bool_sttfa.sttfa_bool -> bool]):(return(bool_sttfa.sttfa_true) => (return(bool_sttfa.sttfa_false) => (FORALL(z:bool_sttfa.sttfa_bool):return(z)))))" "(LAMBDA(sttfa___:bool_sttfa.sttfa_bool):connectives_sttfa.sttfa_Or(logic_sttfa.eq[bool_sttfa.sttfa_bool](sttfa___)(bool_sttfa.sttfa_true))(logic_sttfa.eq[bool_sttfa.sttfa_bool](sttfa___)(bool_sttfa.sttfa_false)))"
%|- (sttfa-lemma "bool_sttfa.match_bool_prop")))))))))
%|- QED

END bool_sttfa


(; This file was generated by Holide. ;)

#NAME natural_2Dthm_2D1_2E22.

Number_2ENatural_2Enatural : hol.type.

def type_0 : hol.type :=
  Number_2ENatural_2Enatural.

def type_1 : hol.type :=
  hol.bool.

def type_2 : hol.type :=
  hol.arr type_0 type_1.

def type_3 : hol.type :=
  hol.arr type_2 type_1.

(; Constant Data.Bool.! ;)

Data_2EBool_2E_21 : A : hol.type -> hol.term A.

def term_0 : hol.term type_3 :=
  Data_2EBool_2E_21 type_3.

def type_4 : hol.type :=
  hol.arr type_1 (hol.arr type_1 type_1).

(; Constant Data.Bool.\/ ;)

Data_2EBool_2E_5C_2F : A : hol.type -> hol.term A.

def term_1 : m_1 : hol.term type_0 -> hol.term type_2 :=
  m_1 : hol.term type_0 => hol.eq type_0 m_1.

(; Constant Number.Natural.zero ;)

Number_2ENatural_2Ezero : A : hol.type -> hol.term A.

def term_2 : hol.term type_0 :=
  Number_2ENatural_2Ezero type_0.

(; Constant Data.Bool.? ;)

Data_2EBool_2E_3F : A : hol.type -> hol.term A.

(; Constant Number.Natural.suc ;)

Number_2ENatural_2Esuc : A : hol.type -> hol.term A.

def term_3 : n_1 : hol.term type_0 -> hol.term type_0 :=
  n_1 : hol.term type_0 => n_1.

def term_4 : n_1 : hol.term type_0 -> hol.term type_0 :=
  n_1 : hol.term type_0 => Number_2ENatural_2Esuc (hol.arr type_0 type_0) (term_3 n_1).

def term_5 : hol.term type_1 :=
  term_0 (m_1 : hol.term type_0 => Data_2EBool_2E_5C_2F type_4 (term_1 m_1 term_2) (Data_2EBool_2E_3F type_3 (n_2 : hol.term type_0 => term_1 m_1 (term_4 n_2)))).

(; axiom ;)

thm_0 : hol.proof term_5.

(; Theorem: |- (Data.Bool.! \lambda m. ((Data.Bool.\/ ((= m) Number.Natural.zero)) (Data.Bool.? \lambda n. ((= m) (Number.Natural.suc n))))) ;)

def type_5 : hol.type -> hol.type :=
  A : hol.type => A.

def type_6 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_5 A) type_1.

def type_7 : hol.type -> hol.type :=
  A : hol.type => hol.arr type_0 (type_5 A).

def type_8 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_5 A) (type_7 A).

(; Constant Data.Bool.?! ;)

Data_2EBool_2E_3F_21 : A : hol.type -> hol.term (type_5 A).

(; Constant Data.Bool./\ ;)

Data_2EBool_2E_2F_5C : A : hol.type -> hol.term (type_5 A).

def term_6 : A : hol.type -> hol.term (hol.arr (type_5 A) (type_6 A)) :=
  A : hol.type => hol.eq (type_5 A).

def term_7 : A : hol.type -> fn_1 : hol.term (type_7 A) -> hol.term (type_7 A) :=
  A : hol.type => fn_1 : hol.term (type_7 A) => fn_1.

def term_8 : A : hol.type -> hol.term type_1 :=
  A : hol.type => Data_2EBool_2E_21 (hol.arr (type_6 A) type_1) (e_1 : hol.term (type_5 A) => Data_2EBool_2E_21 (hol.arr (hol.arr (type_8 A) type_1) type_1) (f_2 : hol.term (type_8 A) => Data_2EBool_2E_3F_21 (hol.arr (hol.arr (type_7 A) type_1) type_1) (fn_3 : hol.term (type_7 A) => Data_2EBool_2E_2F_5C type_4 (term_6 A (term_7 A fn_3 term_2) e_1) (term_0 (n_4 : hol.term type_0 => term_6 A (term_7 A fn_3 (term_4 n_4)) (f_2 (term_7 A fn_3 (term_3 n_4)) (term_3 n_4))))))).

(; axiom ;)

thm_1 : A : hol.type -> hol.proof (term_8 A).

(; Theorem: |- (Data.Bool.! \lambda e. (Data.Bool.! \lambda f. (Data.Bool.?! \lambda fn. ((Data.Bool./\ ((= (fn Number.Natural.zero)) e)) (Data.Bool.! \lambda n. ((= (fn (Number.Natural.suc n))) ((f (fn n)) n))))))) ;)

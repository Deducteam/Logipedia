
(; This file was generated by Holide. ;)

#NAME list_2Dmap_2Ddef_2D1_2E48.

def type_0 : hol.type -> hol.type :=
  A : hol.type => A.

def type_1 : hol.type -> hol.type :=
  B : hol.type => B.

def type_2 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_0 A) (type_1 B).

(; Constant Data.Bool.! ;)

Data_2EBool_2E_21 : A : hol.type -> hol.term (type_0 A).

def term_0 : B : hol.type -> A : hol.type -> hol.term (hol.arr (hol.arr (type_2 B A) hol.bool) hol.bool) :=
  B : hol.type => A : hol.type => Data_2EBool_2E_21 (hol.arr (hol.arr (type_2 B A) hol.bool) hol.bool).

Data_2EList_2Elist : hol.type -> hol.type.

def type_3 : hol.type -> hol.type :=
  B : hol.type => Data_2EList_2Elist (type_1 B).

def term_1 : B : hol.type -> hol.term (hol.arr (type_3 B) (hol.arr (type_3 B) hol.bool)) :=
  B : hol.type => hol.eq (type_3 B).

def type_4 : hol.type -> hol.type :=
  A : hol.type => Data_2EList_2Elist (type_0 A).

def type_5 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_2 B A) (hol.arr (type_4 A) (type_3 B)).

(; Constant list-map-def-1.48 ;)

list_2Dmap_2Ddef_2D1_2E48 : A : hol.type -> hol.term (type_0 A).

(; Constant Data.List.map ;)

def Data_2EList_2Emap : B : hol.type -> A : hol.type -> hol.term (type_5 B A) :=
  B : hol.type => A : hol.type => list_2Dmap_2Ddef_2D1_2E48 (type_5 B A).

def term_2 : B : hol.type -> A : hol.type -> f_1 : hol.term (type_2 B A) -> hol.term (type_2 B A) :=
  B : hol.type => A : hol.type => f_1 : hol.term (type_2 B A) => f_1.

def term_3 : B : hol.type -> A : hol.type -> f_1 : hol.term (type_2 B A) -> hol.term (hol.arr (type_4 A) (type_3 B)) :=
  B : hol.type => A : hol.type => f_1 : hol.term (type_2 B A) => Data_2EList_2Emap (type_1 B) (type_0 A) (term_2 B A f_1).

(; Constant Data.List.[] ;)

Data_2EList_2E_5B_5D : A : hol.type -> hol.term (type_0 A).

def term_4 : B : hol.type -> A : hol.type -> hol.term hol.bool :=
  B : hol.type => A : hol.type => term_0 B A (f_1 : hol.term (type_2 B A) => term_1 B (term_3 B A f_1 (Data_2EList_2E_5B_5D (type_4 A))) (Data_2EList_2E_5B_5D (type_3 B))).

(; axiom ;)

thm_0 : B : hol.type -> A : hol.type -> hol.proof (term_4 B A).

(; Theorem: |- (Data.Bool.! \lambda f. ((= ((Data.List.map f) Data.List.[])) Data.List.[])) ;)

(; Constant Data.List.:: ;)

Data_2EList_2E_3A_3A : A : hol.type -> hol.term (type_0 A).

def term_5 : A : hol.type -> h_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => h_1 : hol.term (type_0 A) => h_1.

def term_6 : A : hol.type -> t_1 : hol.term (type_4 A) -> hol.term (type_4 A) :=
  A : hol.type => t_1 : hol.term (type_4 A) => t_1.

def term_7 : B : hol.type -> A : hol.type -> hol.term hol.bool :=
  B : hol.type => A : hol.type => term_0 B A (f_1 : hol.term (type_2 B A) => Data_2EBool_2E_21 (hol.arr (hol.arr (type_0 A) hol.bool) hol.bool) (h_2 : hol.term (type_0 A) => Data_2EBool_2E_21 (hol.arr (hol.arr (type_4 A) hol.bool) hol.bool) (t_3 : hol.term (type_4 A) => term_1 B (term_3 B A f_1 (Data_2EList_2E_3A_3A (hol.arr (type_0 A) (hol.arr (type_4 A) (type_4 A))) (term_5 A h_2) (term_6 A t_3))) (Data_2EList_2E_3A_3A (hol.arr (type_1 B) (hol.arr (type_3 B) (type_3 B))) (term_2 B A f_1 (term_5 A h_2)) (term_3 B A f_1 (term_6 A t_3)))))).

(; axiom ;)

thm_1 : B : hol.type -> A : hol.type -> hol.proof (term_7 B A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda h. (Data.Bool.! \lambda t. ((= ((Data.List.map f) ((Data.List.:: h) t))) ((Data.List.:: (f h)) ((Data.List.map f) t)))))) ;)

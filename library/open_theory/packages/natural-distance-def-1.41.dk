
(; This file was generated by Holide. ;)

#NAME natural_2Ddistance_2Ddef_2D1_2E41.

Number_2ENatural_2Enatural : hol.type.

def type_0 : hol.type :=
  Number_2ENatural_2Enatural.

def type_1 : hol.type :=
  hol.bool.

def type_2 : hol.type :=
  hol.arr type_0 type_1.

(; Constant Data.Bool.! ;)

Data_2EBool_2E_21 : A : hol.type -> hol.term A.

def term_0 : hol.term (hol.arr type_2 type_1) :=
  Data_2EBool_2E_21 (hol.arr type_2 type_1).

def type_3 : hol.type :=
  hol.arr type_0 type_2.

def type_4 : hol.type :=
  hol.arr type_0 (hol.arr type_0 type_0).

(; Constant natural-distance-def-1.41 ;)

natural_2Ddistance_2Ddef_2D1_2E41 : A : hol.type -> hol.term A.

(; Constant Number.Natural.distance ;)

def Number_2ENatural_2Edistance : hol.term type_4 :=
  natural_2Ddistance_2Ddef_2D1_2E41 type_4.

def term_1 : m_1 : hol.term type_0 -> hol.term type_0 :=
  m_1 : hol.term type_0 => m_1.

def term_2 : n_1 : hol.term type_0 -> hol.term type_0 :=
  n_1 : hol.term type_0 => n_1.

(; Constant Data.Bool.cond ;)

Data_2EBool_2Econd : A : hol.type -> hol.term A.

(; Constant Number.Natural.<= ;)

Number_2ENatural_2E_3C_3D : A : hol.type -> hol.term A.

(; Constant Number.Natural.- ;)

Number_2ENatural_2E_2D : A : hol.type -> hol.term A.

def term_3 : hol.term type_4 :=
  Number_2ENatural_2E_2D type_4.

def term_4 : hol.term type_1 :=
  term_0 (m_1 : hol.term type_0 => term_0 (n_2 : hol.term type_0 => hol.eq type_0 (Number_2ENatural_2Edistance (term_1 m_1) (term_2 n_2)) (Data_2EBool_2Econd (hol.arr type_1 type_4) (Number_2ENatural_2E_3C_3D type_3 (term_1 m_1) (term_2 n_2)) (term_3 (term_2 n_2) (term_1 m_1)) (term_3 (term_1 m_1) (term_2 n_2))))).

(; axiom ;)

thm_0 : hol.proof term_4.

(; Theorem: |- (Data.Bool.! \lambda m. (Data.Bool.! \lambda n. ((= ((Number.Natural.distance m) n)) (((Data.Bool.cond ((Number.Natural.<= m) n)) ((Number.Natural.- n) m)) ((Number.Natural.- m) n))))) ;)

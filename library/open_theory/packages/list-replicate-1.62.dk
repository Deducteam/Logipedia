
(; This file was generated by Holide. ;)

#NAME list_2Dreplicate_2D1_2E62.

def type_0 : hol.type -> hol.type :=
  A : hol.type => A.

def type_1 : hol.type :=
  hol.bool.

def type_2 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_0 A) type_1.

(; Constant Data.Bool.! ;)

Data_2EBool_2E_21 : A : hol.type -> hol.term (type_0 A).

def term_0 : A : hol.type -> hol.term (hol.arr (type_2 A) type_1) :=
  A : hol.type => Data_2EBool_2E_21 (hol.arr (type_2 A) type_1).

Data_2EList_2Elist : hol.type -> hol.type.

def type_3 : hol.type -> hol.type :=
  A : hol.type => Data_2EList_2Elist (type_0 A).

def type_4 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_3 A) type_1.

def term_1 : A : hol.type -> hol.term (hol.arr (type_3 A) (type_4 A)) :=
  A : hol.type => hol.eq (type_3 A).

Number_2ENatural_2Enatural : hol.type.

def type_5 : hol.type :=
  Number_2ENatural_2Enatural.

def type_6 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_0 A) (hol.arr type_5 (type_3 A)).

(; Constant list-replicate-1.62 ;)

list_2Dreplicate_2D1_2E62 : A : hol.type -> hol.term (type_0 A).

(; Constant Data.List.replicate ;)

def Data_2EList_2Ereplicate : A : hol.type -> hol.term (type_6 A) :=
  A : hol.type => list_2Dreplicate_2D1_2E62 (type_6 A).

def term_2 : A : hol.type -> x_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => x_1 : hol.term (type_0 A) => x_1.

def term_3 : A : hol.type -> x_1 : hol.term (type_0 A) -> hol.term (hol.arr type_5 (type_3 A)) :=
  A : hol.type => x_1 : hol.term (type_0 A) => Data_2EList_2Ereplicate (type_0 A) (term_2 A x_1).

(; Constant Number.Natural.zero ;)

Number_2ENatural_2Ezero : A : hol.type -> hol.term (type_0 A).

def term_4 : hol.term type_5 :=
  Number_2ENatural_2Ezero type_5.

(; Constant Data.List.[] ;)

Data_2EList_2E_5B_5D : A : hol.type -> hol.term (type_0 A).

def term_5 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_0 A (x_1 : hol.term (type_0 A) => term_1 A (term_3 A x_1 term_4) (Data_2EList_2E_5B_5D (type_3 A))).

(; axiom ;)

thm_0 : A : hol.type -> hol.proof (term_5 A).

(; Theorem: |- (Data.Bool.! \lambda x. ((= ((Data.List.replicate x) Number.Natural.zero)) Data.List.[])) ;)

def type_7 : hol.type :=
  hol.arr type_5 type_1.

def term_6 : hol.term (hol.arr type_7 type_1) :=
  Data_2EBool_2E_21 (hol.arr type_7 type_1).

def type_8 : hol.type :=
  hol.arr type_5 type_7.

def term_7 : hol.term type_8 :=
  hol.eq type_5.

(; Constant Data.List.length ;)

Data_2EList_2Elength : A : hol.type -> hol.term (type_0 A).

def term_8 : A : hol.type -> hol.term (hol.arr (type_3 A) type_5) :=
  A : hol.type => Data_2EList_2Elength (hol.arr (type_3 A) type_5).

def term_9 : n_1 : hol.term type_5 -> hol.term type_5 :=
  n_1 : hol.term type_5 => n_1.

def term_10 : A : hol.type -> n_1 : hol.term type_5 -> x_2 : hol.term (type_0 A) -> hol.term (type_3 A) :=
  A : hol.type => n_1 : hol.term type_5 => x_2 : hol.term (type_0 A) => term_3 A x_2 (term_9 n_1).

def term_11 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_0 A (x_1 : hol.term (type_0 A) => term_6 (n_2 : hol.term type_5 => term_7 (term_8 A (term_10 A n_2 x_1)) (term_9 n_2))).

(; axiom ;)

thm_1 : A : hol.type -> hol.proof (term_11 A).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda n. ((= (Data.List.length ((Data.List.replicate x) n))) n))) ;)

def type_9 : hol.type :=
  hol.arr type_1 type_1.

def type_10 : hol.type :=
  hol.arr type_1 type_9.

def term_12 : hol.term type_10 :=
  hol.eq type_1.

(; Constant Data.List.null ;)

Data_2EList_2Enull : A : hol.type -> hol.term (type_0 A).

def term_13 : n_1 : hol.term type_5 -> hol.term type_1 :=
  n_1 : hol.term type_5 => term_7 (term_9 n_1) term_4.

def term_14 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_0 A (x_1 : hol.term (type_0 A) => term_6 (n_2 : hol.term type_5 => term_12 (Data_2EList_2Enull (type_4 A) (term_10 A n_2 x_1)) (term_13 n_2))).

(; axiom ;)

thm_2 : A : hol.type -> hol.proof (term_14 A).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda n. ((= (Data.List.null ((Data.List.replicate x) n))) ((= n) Number.Natural.zero)))) ;)

def type_11 : hol.type :=
  hol.arr type_5 type_5.

(; Constant Number.Natural.suc ;)

Number_2ENatural_2Esuc : A : hol.type -> hol.term (type_0 A).

(; Constant Data.List.:: ;)

Data_2EList_2E_3A_3A : A : hol.type -> hol.term (type_0 A).

def term_15 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_0 A (x_1 : hol.term (type_0 A) => term_6 (n_2 : hol.term type_5 => term_1 A (term_3 A x_1 (Number_2ENatural_2Esuc type_11 (term_9 n_2))) (Data_2EList_2E_3A_3A (hol.arr (type_0 A) (hol.arr (type_3 A) (type_3 A))) (term_2 A x_1) (term_10 A n_2 x_1)))).

(; axiom ;)

thm_3 : A : hol.type -> hol.proof (term_15 A).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda n. ((= ((Data.List.replicate x) (Number.Natural.suc n))) ((Data.List.:: x) ((Data.List.replicate x) n))))) ;)

def type_12 : hol.type -> hol.type :=
  B : hol.type => B.

def type_13 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_0 A) (type_12 B).

def type_14 : hol.type -> hol.type :=
  B : hol.type => Data_2EList_2Elist (type_12 B).

(; Constant Data.List.map ;)

Data_2EList_2Emap : A : hol.type -> hol.term (type_0 A).

def term_16 : B : hol.type -> A : hol.type -> f_1 : hol.term (type_13 B A) -> hol.term (type_13 B A) :=
  B : hol.type => A : hol.type => f_1 : hol.term (type_13 B A) => f_1.

def term_17 : B : hol.type -> A : hol.type -> hol.term type_1 :=
  B : hol.type => A : hol.type => Data_2EBool_2E_21 (hol.arr (hol.arr (type_13 B A) type_1) type_1) (f_1 : hol.term (type_13 B A) => term_0 A (x_2 : hol.term (type_0 A) => term_6 (n_3 : hol.term type_5 => hol.eq (type_14 B) (Data_2EList_2Emap (hol.arr (type_13 B A) (hol.arr (type_3 A) (type_14 B))) (term_16 B A f_1) (term_10 A n_3 x_2)) (Data_2EList_2Ereplicate (type_12 B) (term_16 B A f_1 (term_2 A x_2)) (term_9 n_3))))).

(; axiom ;)

thm_4 : B : hol.type -> A : hol.type -> hol.proof (term_17 B A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda n. ((= ((Data.List.map f) ((Data.List.replicate x) n))) ((Data.List.replicate (f x)) n))))) ;)

(; Constant Data.Bool.==> ;)

Data_2EBool_2E_3D_3D_3E : A : hol.type -> hol.term (type_0 A).

(; Constant Number.Natural.< ;)

Number_2ENatural_2E_3C : A : hol.type -> hol.term (type_0 A).

def term_18 : i_1 : hol.term type_5 -> hol.term type_5 :=
  i_1 : hol.term type_5 => i_1.

def term_19 : A : hol.type -> hol.term (hol.arr (type_0 A) (type_2 A)) :=
  A : hol.type => hol.eq (type_0 A).

(; Constant Data.List.nth ;)

Data_2EList_2Enth : A : hol.type -> hol.term (type_0 A).

def term_20 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_0 A (x_1 : hol.term (type_0 A) => term_6 (n_2 : hol.term type_5 => term_6 (i_3 : hol.term type_5 => Data_2EBool_2E_3D_3D_3E type_10 (Number_2ENatural_2E_3C type_8 (term_18 i_3) (term_9 n_2)) (term_19 A (Data_2EList_2Enth (hol.arr (type_3 A) (hol.arr type_5 (type_0 A))) (term_10 A n_2 x_1) (term_18 i_3)) (term_2 A x_1))))).

(; axiom ;)

thm_5 : A : hol.type -> hol.proof (term_20 A).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda n. (Data.Bool.! \lambda i. ((Data.Bool.==> ((Number.Natural.< i) n)) ((= ((Data.List.nth ((Data.List.replicate x) n)) i)) x))))) ;)

Set_2Eset : hol.type -> hol.type.

def type_15 : hol.type -> hol.type :=
  A : hol.type => Set_2Eset (type_0 A).

(; Constant Data.List.toSet ;)

Data_2EList_2EtoSet : A : hol.type -> hol.term (type_0 A).

(; Constant Data.Bool.cond ;)

Data_2EBool_2Econd : A : hol.type -> hol.term (type_0 A).

(; Constant Set.{} ;)

Set_2E_7B_7D : A : hol.type -> hol.term (type_0 A).

def term_21 : A : hol.type -> hol.term (type_15 A) :=
  A : hol.type => Set_2E_7B_7D (type_15 A).

(; Constant Set.insert ;)

Set_2Einsert : A : hol.type -> hol.term (type_0 A).

def term_22 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_0 A (x_1 : hol.term (type_0 A) => term_6 (n_2 : hol.term type_5 => hol.eq (type_15 A) (Data_2EList_2EtoSet (hol.arr (type_3 A) (type_15 A)) (term_10 A n_2 x_1)) (Data_2EBool_2Econd (hol.arr type_1 (hol.arr (type_15 A) (hol.arr (type_15 A) (type_15 A)))) (term_13 n_2) (term_21 A) (Set_2Einsert (hol.arr (type_0 A) (hol.arr (type_15 A) (type_15 A))) (term_2 A x_1) (term_21 A))))).

(; axiom ;)

thm_6 : A : hol.type -> hol.proof (term_22 A).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda n. ((= (Data.List.toSet ((Data.List.replicate x) n))) (((Data.Bool.cond ((= n) Number.Natural.zero)) Set.{}) ((Set.insert x) Set.{}))))) ;)

(; Constant Number.Natural.+ ;)

Number_2ENatural_2E_2B : A : hol.type -> hol.term (type_0 A).

def term_23 : hol.term (hol.arr type_5 type_11) :=
  Number_2ENatural_2E_2B (hol.arr type_5 type_11).

def term_24 : m_1 : hol.term type_5 -> hol.term type_5 :=
  m_1 : hol.term type_5 => m_1.

(; Constant Data.List.@ ;)

Data_2EList_2E_40 : A : hol.type -> hol.term (type_0 A).

def term_25 : A : hol.type -> hol.term (hol.arr (type_3 A) (hol.arr (type_3 A) (type_3 A))) :=
  A : hol.type => Data_2EList_2E_40 (hol.arr (type_3 A) (hol.arr (type_3 A) (type_3 A))).

def term_26 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_0 A (x_1 : hol.term (type_0 A) => term_6 (m_2 : hol.term type_5 => term_6 (n_3 : hol.term type_5 => term_1 A (term_3 A x_1 (term_23 (term_24 m_2) (term_9 n_3))) (term_25 A (term_3 A x_1 (term_24 m_2)) (term_10 A n_3 x_1))))).

(; axiom ;)

thm_7 : A : hol.type -> hol.proof (term_26 A).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda m. (Data.Bool.! \lambda n. ((= ((Data.List.replicate x) ((Number.Natural.+ m) n))) ((Data.List.@ ((Data.List.replicate x) m)) ((Data.List.replicate x) n)))))) ;)

(; Constant Data.List.member ;)

Data_2EList_2Emember : A : hol.type -> hol.term (type_0 A).

def term_27 : A : hol.type -> y_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => y_1 : hol.term (type_0 A) => y_1.

(; Constant Data.Bool./\ ;)

Data_2EBool_2E_2F_5C : A : hol.type -> hol.term (type_0 A).

def term_28 : hol.term type_10 :=
  Data_2EBool_2E_2F_5C type_10.

(; Constant Data.Bool.~ ;)

Data_2EBool_2E_7E : A : hol.type -> hol.term (type_0 A).

def term_29 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_0 A (x_1 : hol.term (type_0 A) => term_6 (n_2 : hol.term type_5 => term_0 A (y_3 : hol.term (type_0 A) => term_12 (Data_2EList_2Emember (hol.arr (type_0 A) (type_4 A)) (term_27 A y_3) (term_10 A n_2 x_1)) (term_28 (term_19 A (term_27 A y_3) (term_2 A x_1)) (Data_2EBool_2E_7E type_9 (term_13 n_2)))))).

(; axiom ;)

thm_8 : A : hol.type -> hol.proof (term_29 A).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda n. (Data.Bool.! \lambda y. ((= ((Data.List.member y) ((Data.List.replicate x) n))) ((Data.Bool./\ ((= y) x)) (Data.Bool.~ ((= n) Number.Natural.zero))))))) ;)

def term_30 : A : hol.type -> hol.term (hol.arr (type_4 A) type_1) :=
  A : hol.type => Data_2EBool_2E_21 (hol.arr (type_4 A) type_1).

def term_31 : A : hol.type -> l1_1 : hol.term (type_3 A) -> hol.term (type_3 A) :=
  A : hol.type => l1_1 : hol.term (type_3 A) => l1_1.

def term_32 : A : hol.type -> l2_1 : hol.term (type_3 A) -> hol.term (type_3 A) :=
  A : hol.type => l2_1 : hol.term (type_3 A) => l2_1.

def term_33 : A : hol.type -> l1_1 : hol.term (type_3 A) -> hol.term type_5 :=
  A : hol.type => l1_1 : hol.term (type_3 A) => term_8 A (term_31 A l1_1).

def term_34 : A : hol.type -> l2_1 : hol.term (type_3 A) -> hol.term type_5 :=
  A : hol.type => l2_1 : hol.term (type_3 A) => term_8 A (term_32 A l2_1).

def term_35 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_0 A (x_1 : hol.term (type_0 A) => term_6 (n_2 : hol.term type_5 => term_30 A (l1_3 : hol.term (type_3 A) => term_30 A (l2_4 : hol.term (type_3 A) => term_12 (term_1 A (term_25 A (term_31 A l1_3) (term_32 A l2_4)) (term_10 A n_2 x_1)) (term_28 (term_1 A (term_3 A x_1 (term_33 A l1_3)) (term_31 A l1_3)) (term_28 (term_1 A (term_3 A x_1 (term_34 A l2_4)) (term_32 A l2_4)) (term_7 (term_23 (term_33 A l1_3) (term_34 A l2_4)) (term_9 n_2)))))))).

(; axiom ;)

thm_9 : A : hol.type -> hol.proof (term_35 A).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda n. (Data.Bool.! \lambda l1. (Data.Bool.! \lambda l2. ((= ((= ((Data.List.@ l1) l2)) ((Data.List.replicate x) n))) ((Data.Bool./\ ((= ((Data.List.replicate x) (Data.List.length l1))) l1)) ((Data.Bool./\ ((= ((Data.List.replicate x) (Data.List.length l2))) l2)) ((= ((Number.Natural.+ (Data.List.length l1)) (Data.List.length l2))) n)))))))) ;)


(; This file was generated by Holide. ;)

#NAME list_2Dzip_2Ddef_2D1_2E23.

def type_0 : hol.type -> hol.type :=
  A : hol.type => A.

def type_1 : hol.type -> hol.type :=
  B : hol.type => B.

def type_2 : hol.type -> hol.type :=
  C : hol.type => C.

def type_3 : hol.type -> hol.type -> hol.type -> hol.type :=
  C : hol.type => B : hol.type => A : hol.type => hol.arr (type_0 A) (hol.arr (type_1 B) (type_2 C)).

def type_4 : hol.type :=
  hol.bool.

(; Constant Data.Bool.! ;)

Data_2EBool_2E_21 : A : hol.type -> hol.term (type_0 A).

def term_0 : C : hol.type -> B : hol.type -> A : hol.type -> hol.term (hol.arr (hol.arr (type_3 C B A) type_4) type_4) :=
  C : hol.type => B : hol.type => A : hol.type => Data_2EBool_2E_21 (hol.arr (hol.arr (type_3 C B A) type_4) type_4).

Data_2EList_2Elist : hol.type -> hol.type.

def type_5 : hol.type -> hol.type :=
  C : hol.type => Data_2EList_2Elist (type_2 C).

def term_1 : C : hol.type -> hol.term (hol.arr (type_5 C) (hol.arr (type_5 C) type_4)) :=
  C : hol.type => hol.eq (type_5 C).

def type_6 : hol.type -> hol.type :=
  A : hol.type => Data_2EList_2Elist (type_0 A).

def type_7 : hol.type -> hol.type :=
  B : hol.type => Data_2EList_2Elist (type_1 B).

def type_8 : hol.type -> hol.type -> hol.type -> hol.type :=
  C : hol.type => B : hol.type => A : hol.type => hol.arr (type_3 C B A) (hol.arr (type_6 A) (hol.arr (type_7 B) (type_5 C))).

(; Constant list-zip-def-1.23 ;)

list_2Dzip_2Ddef_2D1_2E23 : A : hol.type -> hol.term (type_0 A).

(; Constant Data.List.zipWith ;)

def Data_2EList_2EzipWith : C : hol.type -> B : hol.type -> A : hol.type -> hol.term (type_8 C B A) :=
  C : hol.type => B : hol.type => A : hol.type => list_2Dzip_2Ddef_2D1_2E23 (type_8 C B A).

def term_2 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (type_3 C B A) -> hol.term (type_3 C B A) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (type_3 C B A) => f_1.

def term_3 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (type_3 C B A) -> hol.term (hol.arr (type_6 A) (hol.arr (type_7 B) (type_5 C))) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (type_3 C B A) => Data_2EList_2EzipWith (type_2 C) (type_1 B) (type_0 A) (term_2 C B A f_1).

(; Constant Data.List.[] ;)

Data_2EList_2E_5B_5D : A : hol.type -> hol.term (type_0 A).

def term_4 : A : hol.type -> hol.term (type_6 A) :=
  A : hol.type => Data_2EList_2E_5B_5D (type_6 A).

def term_5 : B : hol.type -> hol.term (type_7 B) :=
  B : hol.type => Data_2EList_2E_5B_5D (type_7 B).

def term_6 : C : hol.type -> B : hol.type -> A : hol.type -> hol.term type_4 :=
  C : hol.type => B : hol.type => A : hol.type => term_0 C B A (f_1 : hol.term (type_3 C B A) => term_1 C (term_3 C B A f_1 (term_4 A) (term_5 B)) (Data_2EList_2E_5B_5D (type_5 C))).

(; axiom ;)

thm_0 : C : hol.type -> B : hol.type -> A : hol.type -> hol.proof (term_6 C B A).

(; Theorem: |- (Data.Bool.! \lambda f. ((= (((Data.List.zipWith f) Data.List.[]) Data.List.[])) Data.List.[])) ;)

def term_7 : A : hol.type -> hol.term (hol.arr (hol.arr (type_6 A) type_4) type_4) :=
  A : hol.type => Data_2EBool_2E_21 (hol.arr (hol.arr (type_6 A) type_4) type_4).

def term_8 : B : hol.type -> hol.term (hol.arr (hol.arr (type_7 B) type_4) type_4) :=
  B : hol.type => Data_2EBool_2E_21 (hol.arr (hol.arr (type_7 B) type_4) type_4).

Data_2EPair_2E_2A : hol.type -> hol.type -> hol.type.

def type_9 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => Data_2EPair_2E_2A (type_0 A) (type_1 B).

def type_10 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => Data_2EList_2Elist (type_9 B A).

def type_11 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_6 A) (hol.arr (type_7 B) (type_10 B A)).

(; Constant Data.List.zip ;)

def Data_2EList_2Ezip : B : hol.type -> A : hol.type -> hol.term (type_11 B A) :=
  B : hol.type => A : hol.type => list_2Dzip_2Ddef_2D1_2E23 (type_11 B A).

def term_9 : A : hol.type -> l1_1 : hol.term (type_6 A) -> hol.term (type_6 A) :=
  A : hol.type => l1_1 : hol.term (type_6 A) => l1_1.

def term_10 : B : hol.type -> l2_1 : hol.term (type_7 B) -> hol.term (type_7 B) :=
  B : hol.type => l2_1 : hol.term (type_7 B) => l2_1.

def type_12 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_0 A) (hol.arr (type_1 B) (type_9 B A)).

(; Constant Data.Pair., ;)

Data_2EPair_2E_2C : A : hol.type -> hol.term (type_0 A).

def term_11 : B : hol.type -> A : hol.type -> hol.term (type_12 B A) :=
  B : hol.type => A : hol.type => Data_2EPair_2E_2C (type_12 B A).

def term_12 : B : hol.type -> A : hol.type -> hol.term type_4 :=
  B : hol.type => A : hol.type => term_7 A (l1_1 : hol.term (type_6 A) => term_8 B (l2_2 : hol.term (type_7 B) => hol.eq (type_10 B A) (Data_2EList_2Ezip (type_1 B) (type_0 A) (term_9 A l1_1) (term_10 B l2_2)) (Data_2EList_2EzipWith (type_9 B A) (type_1 B) (type_0 A) (term_11 B A) (term_9 A l1_1) (term_10 B l2_2)))).

(; axiom ;)

thm_1 : B : hol.type -> A : hol.type -> hol.proof (term_12 B A).

(; Theorem: |- (Data.Bool.! \lambda l1. (Data.Bool.! \lambda l2. ((= ((Data.List.zip l1) l2)) (((Data.List.zipWith Data.Pair.,) l1) l2)))) ;)

def term_13 : A : hol.type -> hol.term (hol.arr (hol.arr (type_0 A) type_4) type_4) :=
  A : hol.type => Data_2EBool_2E_21 (hol.arr (hol.arr (type_0 A) type_4) type_4).

def term_14 : B : hol.type -> hol.term (hol.arr (hol.arr (type_1 B) type_4) type_4) :=
  B : hol.type => Data_2EBool_2E_21 (hol.arr (hol.arr (type_1 B) type_4) type_4).

(; Constant Data.Bool.==> ;)

Data_2EBool_2E_3D_3D_3E : A : hol.type -> hol.term (type_0 A).

Number_2ENatural_2Enatural : hol.type.

def type_13 : hol.type :=
  Number_2ENatural_2Enatural.

(; Constant Data.List.length ;)

Data_2EList_2Elength : A : hol.type -> hol.term (type_0 A).

def term_15 : A : hol.type -> t1_1 : hol.term (type_6 A) -> hol.term (type_6 A) :=
  A : hol.type => t1_1 : hol.term (type_6 A) => t1_1.

def term_16 : B : hol.type -> t2_1 : hol.term (type_7 B) -> hol.term (type_7 B) :=
  B : hol.type => t2_1 : hol.term (type_7 B) => t2_1.

(; Constant Data.List.:: ;)

Data_2EList_2E_3A_3A : A : hol.type -> hol.term (type_0 A).

def term_17 : A : hol.type -> hol.term (hol.arr (type_0 A) (hol.arr (type_6 A) (type_6 A))) :=
  A : hol.type => Data_2EList_2E_3A_3A (hol.arr (type_0 A) (hol.arr (type_6 A) (type_6 A))).

def term_18 : A : hol.type -> h1_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => h1_1 : hol.term (type_0 A) => h1_1.

def term_19 : B : hol.type -> hol.term (hol.arr (type_1 B) (hol.arr (type_7 B) (type_7 B))) :=
  B : hol.type => Data_2EList_2E_3A_3A (hol.arr (type_1 B) (hol.arr (type_7 B) (type_7 B))).

def term_20 : B : hol.type -> h2_1 : hol.term (type_1 B) -> hol.term (type_1 B) :=
  B : hol.type => h2_1 : hol.term (type_1 B) => h2_1.

def term_21 : C : hol.type -> B : hol.type -> A : hol.type -> hol.term type_4 :=
  C : hol.type => B : hol.type => A : hol.type => term_0 C B A (f_1 : hol.term (type_3 C B A) => term_13 A (h1_2 : hol.term (type_0 A) => term_14 B (h2_3 : hol.term (type_1 B) => term_7 A (t1_4 : hol.term (type_6 A) => term_8 B (t2_5 : hol.term (type_7 B) => Data_2EBool_2E_3D_3D_3E (hol.arr type_4 (hol.arr type_4 type_4)) (hol.eq type_13 (Data_2EList_2Elength (hol.arr (type_6 A) type_13) (term_15 A t1_4)) (Data_2EList_2Elength (hol.arr (type_7 B) type_13) (term_16 B t2_5))) (term_1 C (term_3 C B A f_1 (term_17 A (term_18 A h1_2) (term_15 A t1_4)) (term_19 B (term_20 B h2_3) (term_16 B t2_5))) (Data_2EList_2E_3A_3A (hol.arr (type_2 C) (hol.arr (type_5 C) (type_5 C))) (term_2 C B A f_1 (term_18 A h1_2) (term_20 B h2_3)) (term_3 C B A f_1 (term_15 A t1_4) (term_16 B t2_5))))))))).

(; axiom ;)

thm_2 : C : hol.type -> B : hol.type -> A : hol.type -> hol.proof (term_21 C B A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda h1. (Data.Bool.! \lambda h2. (Data.Bool.! \lambda t1. (Data.Bool.! \lambda t2. ((Data.Bool.==> ((= (Data.List.length t1)) (Data.List.length t2))) ((= (((Data.List.zipWith f) ((Data.List.:: h1) t1)) ((Data.List.:: h2) t2))) ((Data.List.:: ((f h1) h2)) (((Data.List.zipWith f) t1) t2))))))))) ;)

def type_14 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => Data_2EPair_2E_2A (type_6 A) (type_7 B).

def type_15 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_10 B A) (type_14 B A).

(; Constant Data.List.unzip ;)

def Data_2EList_2Eunzip : B : hol.type -> A : hol.type -> hol.term (type_15 B A) :=
  B : hol.type => A : hol.type => list_2Dzip_2Ddef_2D1_2E23 (type_15 B A).

def type_16 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_14 B A) (type_14 B A).

def type_17 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_9 B A) (type_16 B A).

(; Constant Data.List.foldr ;)

Data_2EList_2Efoldr : A : hol.type -> hol.term (type_0 A).

def type_18 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_16 B A) type_4.

def term_22 : A : hol.type -> x_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => x_1 : hol.term (type_0 A) => x_1.

def term_23 : B : hol.type -> y_1 : hol.term (type_1 B) -> hol.term (type_1 B) :=
  B : hol.type => y_1 : hol.term (type_1 B) => y_1.

def term_24 : B : hol.type -> A : hol.type -> hol.term (hol.arr (type_6 A) (hol.arr (type_7 B) (type_14 B A))) :=
  B : hol.type => A : hol.type => Data_2EPair_2E_2C (hol.arr (type_6 A) (hol.arr (type_7 B) (type_14 B A))).

def term_25 : A : hol.type -> xs_1 : hol.term (type_6 A) -> hol.term (type_6 A) :=
  A : hol.type => xs_1 : hol.term (type_6 A) => xs_1.

def term_26 : B : hol.type -> ys_1 : hol.term (type_7 B) -> hol.term (type_7 B) :=
  B : hol.type => ys_1 : hol.term (type_7 B) => ys_1.

def term_27 : B : hol.type -> A : hol.type -> hol.term type_4 :=
  B : hol.type => A : hol.type => hol.eq (type_15 B A) (Data_2EList_2Eunzip (type_1 B) (type_0 A)) (Data_2EList_2Efoldr (hol.arr (type_17 B A) (hol.arr (type_14 B A) (type_15 B A))) (hol.select (type_17 B A) (f_1 : hol.term (type_17 B A) => term_13 A (x_2 : hol.term (type_0 A) => term_14 B (y_3 : hol.term (type_1 B) => hol.eq (type_16 B A) (f_1 (term_11 B A (term_22 A x_2) (term_23 B y_3))) (hol.select (type_16 B A) (f_4 : hol.term (type_16 B A) => term_7 A (xs_5 : hol.term (type_6 A) => term_8 B (ys_6 : hol.term (type_7 B) => hol.eq (type_14 B A) (f_4 (term_24 B A (term_25 A xs_5) (term_26 B ys_6))) (term_24 B A (term_17 A (term_22 A x_2) (term_25 A xs_5)) (term_19 B (term_23 B y_3) (term_26 B ys_6))))))))))) (term_24 B A (term_4 A) (term_5 B))).

(; axiom ;)

thm_3 : B : hol.type -> A : hol.type -> hol.proof (term_27 B A).

(; Theorem: |- ((= Data.List.unzip) ((Data.List.foldr (select \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (f ((Data.Pair., x) y))) (select \lambda f. (Data.Bool.! \lambda xs. (Data.Bool.! \lambda ys. ((= (f ((Data.Pair., xs) ys))) ((Data.Pair., ((Data.List.:: x) xs)) ((Data.List.:: y) ys))))))))))) ((Data.Pair., Data.List.[]) Data.List.[]))) ;)

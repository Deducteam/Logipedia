
(; This file was generated by Holide. ;)

#NAME natural_2Dorder_2Dmin_2Dmax_2Ddef_2D1_2E29.

Number_2ENatural_2Enatural : hol.type.

def type_0 : hol.type :=
  Number_2ENatural_2Enatural.

def type_1 : hol.type :=
  hol.bool.

def type_2 : hol.type :=
  hol.arr type_0 type_1.

def type_3 : hol.type :=
  hol.arr type_2 type_1.

(; Constant Data.Bool.! ;)

Data_2EBool_2E_21 : A : hol.type -> hol.term A.

def term_0 : hol.term type_3 :=
  Data_2EBool_2E_21 type_3.

def type_4 : hol.type :=
  hol.arr type_0 type_2.

def term_1 : hol.term type_4 :=
  hol.eq type_0.

def type_5 : hol.type :=
  hol.arr type_0 (hol.arr type_0 type_0).

(; Constant natural-order-min-max-def-1.29 ;)

natural_2Dorder_2Dmin_2Dmax_2Ddef_2D1_2E29 : A : hol.type -> hol.term A.

def term_2 : hol.term type_5 :=
  natural_2Dorder_2Dmin_2Dmax_2Ddef_2D1_2E29 type_5.

(; Constant Number.Natural.max ;)

def Number_2ENatural_2Emax : hol.term type_5 :=
  term_2.

def term_3 : m_1 : hol.term type_0 -> hol.term type_0 :=
  m_1 : hol.term type_0 => m_1.

def term_4 : n_1 : hol.term type_0 -> hol.term type_0 :=
  n_1 : hol.term type_0 => n_1.

(; Constant Data.Bool.cond ;)

Data_2EBool_2Econd : A : hol.type -> hol.term A.

(; Constant Number.Natural.<= ;)

Number_2ENatural_2E_3C_3D : A : hol.type -> hol.term A.

def term_5 : n_1 : hol.term type_0 -> m_2 : hol.term type_0 -> hol.term type_5 :=
  n_1 : hol.term type_0 => m_2 : hol.term type_0 => Data_2EBool_2Econd (hol.arr type_1 type_5) (Number_2ENatural_2E_3C_3D type_4 (term_3 m_2) (term_4 n_1)).

def term_6 : hol.term type_1 :=
  term_0 (m_1 : hol.term type_0 => term_0 (n_2 : hol.term type_0 => term_1 (Number_2ENatural_2Emax (term_3 m_1) (term_4 n_2)) (term_5 n_2 m_1 (term_4 n_2) (term_3 m_1)))).

(; axiom ;)

thm_0 : hol.proof term_6.

(; Theorem: |- (Data.Bool.! \lambda m. (Data.Bool.! \lambda n. ((= ((Number.Natural.max m) n)) (((Data.Bool.cond ((Number.Natural.<= m) n)) n) m)))) ;)

(; Constant Number.Natural.min ;)

def Number_2ENatural_2Emin : hol.term type_5 :=
  term_2.

def term_7 : hol.term type_1 :=
  term_0 (m_1 : hol.term type_0 => term_0 (n_2 : hol.term type_0 => term_1 (Number_2ENatural_2Emin (term_3 m_1) (term_4 n_2)) (term_5 n_2 m_1 (term_3 m_1) (term_4 n_2)))).

(; axiom ;)

thm_1 : hol.proof term_7.

(; Theorem: |- (Data.Bool.! \lambda m. (Data.Bool.! \lambda n. ((= ((Number.Natural.min m) n)) (((Data.Bool.cond ((Number.Natural.<= m) n)) m) n)))) ;)

def type_6 : hol.type :=
  hol.arr type_1 type_1.

def type_7 : hol.type :=
  hol.arr type_1 type_6.

(; Constant Data.Bool.? ;)

Data_2EBool_2E_3F : A : hol.type -> hol.term A.

def term_8 : p_1 : hol.term type_2 -> hol.term type_2 :=
  p_1 : hol.term type_2 => p_1.

(; Constant Data.Bool./\ ;)

Data_2EBool_2E_2F_5C : A : hol.type -> hol.term A.

def type_8 : hol.type :=
  hol.arr type_2 type_0.

(; Constant Number.Natural.minimal ;)

def Number_2ENatural_2Eminimal : hol.term type_8 :=
  natural_2Dorder_2Dmin_2Dmax_2Ddef_2D1_2E29 type_8.

def term_9 : p_1 : hol.term type_2 -> hol.term type_0 :=
  p_1 : hol.term type_2 => Number_2ENatural_2Eminimal (term_8 p_1).

(; Constant Data.Bool.==> ;)

Data_2EBool_2E_3D_3D_3E : A : hol.type -> hol.term A.

(; Constant Number.Natural.< ;)

Number_2ENatural_2E_3C : A : hol.type -> hol.term A.

(; Constant Data.Bool.~ ;)

Data_2EBool_2E_7E : A : hol.type -> hol.term A.

def term_10 : hol.term type_1 :=
  Data_2EBool_2E_21 (hol.arr type_3 type_1) (p_1 : hol.term type_2 => hol.eq type_1 (Data_2EBool_2E_3F type_3 (n_2 : hol.term type_0 => term_8 p_1 (term_4 n_2))) (Data_2EBool_2E_2F_5C type_7 (term_8 p_1 (term_9 p_1)) (term_0 (m_2 : hol.term type_0 => Data_2EBool_2E_3D_3D_3E type_7 (Number_2ENatural_2E_3C type_4 (term_3 m_2) (term_9 p_1)) (Data_2EBool_2E_7E type_6 (term_8 p_1 (term_3 m_2))))))).

(; axiom ;)

thm_2 : hol.proof term_10.

(; Theorem: |- (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda n. (p n))) ((Data.Bool./\ (p (Number.Natural.minimal p))) (Data.Bool.! \lambda m. ((Data.Bool.==> ((Number.Natural.< m) (Number.Natural.minimal p))) (Data.Bool.~ (p m))))))) ;)

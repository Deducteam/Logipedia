
(; This file was generated by Holide. ;)

#NAME function_2Dthm_2D1_2E49.

def type_0 : hol.type -> hol.type :=
  A : hol.type => A.

def type_1 : hol.type :=
  hol.bool.

def type_2 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_0 A) type_1.

def type_3 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_2 A) type_1.

(; Constant Data.Bool.! ;)

Data_2EBool_2E_21 : A : hol.type -> hol.term (type_0 A).

def term_0 : A : hol.type -> hol.term (type_3 A) :=
  A : hol.type => Data_2EBool_2E_21 (type_3 A).

def term_1 : A : hol.type -> hol.term (hol.arr (type_0 A) (type_2 A)) :=
  A : hol.type => hol.eq (type_0 A).

def type_4 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_0 A) (type_0 A).

(; Constant Function.id ;)

Function_2Eid : A : hol.type -> hol.term (type_0 A).

def term_2 : A : hol.type -> hol.term (type_4 A) :=
  A : hol.type => Function_2Eid (type_4 A).

def term_3 : A : hol.type -> x_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => x_1 : hol.term (type_0 A) => x_1.

def term_4 : A : hol.type -> hol.term type_1 :=
  A : hol.type => term_0 A (x_1 : hol.term (type_0 A) => term_1 A (term_2 A (term_3 A x_1)) (term_3 A x_1)).

(; axiom ;)

thm_0 : A : hol.type -> hol.proof (term_4 A).

(; Theorem: |- (Data.Bool.! \lambda x. ((= (Function.id x)) x)) ;)

def type_5 : hol.type -> hol.type :=
  B : hol.type => B.

def type_6 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_0 A) (type_5 B).

def type_7 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_6 B A) type_1.

def type_8 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_7 B A) type_1.

def term_5 : B : hol.type -> A : hol.type -> hol.term (type_8 B A) :=
  B : hol.type => A : hol.type => Data_2EBool_2E_21 (type_8 B A).

def type_9 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_0 A) (hol.arr (type_5 B) (type_0 A)).

(; Constant Function.Combinator.s ;)

Function_2ECombinator_2Es : A : hol.type -> hol.term (type_0 A).

(; Constant Function.const ;)

Function_2Econst : A : hol.type -> hol.term (type_0 A).

def term_6 : B : hol.type -> A : hol.type -> hol.term (type_9 B A) :=
  B : hol.type => A : hol.type => Function_2Econst (type_9 B A).

def term_7 : B : hol.type -> A : hol.type -> hol.term type_1 :=
  B : hol.type => A : hol.type => term_5 B A (x_1 : hol.term (type_6 B A) => hol.eq (type_4 A) (Function_2ECombinator_2Es (hol.arr (type_9 B A) (hol.arr (type_6 B A) (type_4 A))) (term_6 B A) x_1) (term_2 A)).

(; axiom ;)

thm_1 : B : hol.type -> A : hol.type -> hol.proof (term_7 B A).

(; Theorem: |- (Data.Bool.! \lambda x. ((= ((Function.Combinator.s Function.const) x)) Function.id)) ;)

def term_8 : B : hol.type -> A : hol.type -> hol.term (hol.arr (type_6 B A) (type_7 B A)) :=
  B : hol.type => A : hol.type => hol.eq (type_6 B A).

(; Constant Function.o ;)

Function_2Eo : A : hol.type -> hol.term (type_0 A).

def term_9 : B : hol.type -> A : hol.type -> f_1 : hol.term (type_6 B A) -> hol.term (type_6 B A) :=
  B : hol.type => A : hol.type => f_1 : hol.term (type_6 B A) => f_1.

def term_10 : B : hol.type -> A : hol.type -> hol.term type_1 :=
  B : hol.type => A : hol.type => term_5 B A (f_1 : hol.term (type_6 B A) => term_8 B A (Function_2Eo (hol.arr (type_6 B A) (hol.arr (type_4 A) (type_6 B A))) (term_9 B A f_1) (term_2 A)) (term_9 B A f_1)).

(; axiom ;)

thm_2 : B : hol.type -> A : hol.type -> hol.proof (term_10 B A).

(; Theorem: |- (Data.Bool.! \lambda f. ((= ((Function.o f) Function.id)) f)) ;)

def type_10 : hol.type -> hol.type :=
  B : hol.type => hol.arr (type_5 B) (type_5 B).

def term_11 : B : hol.type -> A : hol.type -> hol.term type_1 :=
  B : hol.type => A : hol.type => term_5 B A (f_1 : hol.term (type_6 B A) => term_8 B A (Function_2Eo (hol.arr (type_10 B) (hol.arr (type_6 B A) (type_6 B A))) (Function_2Eid (type_10 B)) (term_9 B A f_1)) (term_9 B A f_1)).

(; axiom ;)

thm_3 : B : hol.type -> A : hol.type -> hol.proof (term_11 B A).

(; Theorem: |- (Data.Bool.! \lambda f. ((= ((Function.o Function.id) f)) f)) ;)

def type_11 : hol.type -> hol.type :=
  C : hol.type => C.

def type_12 : hol.type -> hol.type -> hol.type :=
  C : hol.type => B : hol.type => hol.arr (type_5 B) (type_11 C).

def type_13 : hol.type -> hol.type -> hol.type -> hol.type :=
  C : hol.type => B : hol.type => A : hol.type => hol.arr (type_0 A) (type_12 C B).

def type_14 : hol.type -> hol.type -> hol.type -> hol.type :=
  C : hol.type => B : hol.type => A : hol.type => hol.arr (type_13 C B A) type_1.

def term_12 : C : hol.type -> B : hol.type -> A : hol.type -> hol.term (hol.arr (type_14 C B A) type_1) :=
  C : hol.type => B : hol.type => A : hol.type => Data_2EBool_2E_21 (hol.arr (type_14 C B A) type_1).

def type_15 : hol.type -> hol.type -> hol.type :=
  C : hol.type => A : hol.type => hol.arr (type_0 A) (type_11 C).

def type_16 : hol.type -> hol.type -> hol.type -> hol.type :=
  C : hol.type => A : hol.type => B : hol.type => hol.arr (type_5 B) (type_15 C A).

(; Constant Function.flip ;)

Function_2Eflip : A : hol.type -> hol.term (type_0 A).

def term_13 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (type_13 C B A) -> hol.term (type_13 C B A) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (type_13 C B A) => f_1.

def term_14 : C : hol.type -> B : hol.type -> A : hol.type -> f_1 : hol.term (type_13 C B A) -> hol.term (type_16 C A B) :=
  C : hol.type => B : hol.type => A : hol.type => f_1 : hol.term (type_13 C B A) => Function_2Eflip (hol.arr (type_13 C B A) (type_16 C A B)) (term_13 C B A f_1).

def term_15 : C : hol.type -> B : hol.type -> A : hol.type -> hol.term type_1 :=
  C : hol.type => B : hol.type => A : hol.type => term_12 C B A (f_1 : hol.term (type_13 C B A) => hol.eq (type_13 C B A) (Function_2Eflip (hol.arr (type_16 C A B) (type_13 C B A)) (term_14 C B A f_1)) (term_13 C B A f_1)).

(; axiom ;)

thm_4 : C : hol.type -> B : hol.type -> A : hol.type -> hol.proof (term_15 C B A).

(; Theorem: |- (Data.Bool.! \lambda f. ((= (Function.flip (Function.flip f))) f)) ;)

def type_17 : hol.type -> hol.type :=
  B : hol.type => hol.arr (type_5 B) type_1.

def type_18 : hol.type -> hol.type :=
  B : hol.type => hol.arr (type_17 B) type_1.

def term_16 : B : hol.type -> hol.term (type_18 B) :=
  B : hol.type => Data_2EBool_2E_21 (type_18 B).

def term_17 : B : hol.type -> y_1 : hol.term (type_5 B) -> hol.term (type_5 B) :=
  B : hol.type => y_1 : hol.term (type_5 B) => y_1.

def term_18 : B : hol.type -> A : hol.type -> hol.term type_1 :=
  B : hol.type => A : hol.type => term_0 A (x_1 : hol.term (type_0 A) => term_16 B (y_2 : hol.term (type_5 B) => term_1 A (term_6 B A (term_3 A x_1) (term_17 B y_2)) (term_3 A x_1))).

(; axiom ;)

thm_5 : B : hol.type -> A : hol.type -> hol.proof (term_18 B A).

(; Theorem: |- (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= ((Function.const x) y)) x))) ;)

def type_19 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_0 A) (type_6 B A).

def term_19 : B : hol.type -> hol.term (hol.arr (type_5 B) (type_17 B)) :=
  B : hol.type => hol.eq (type_5 B).

(; Constant Function.Combinator.w ;)

Function_2ECombinator_2Ew : A : hol.type -> hol.term (type_0 A).

def term_20 : B : hol.type -> A : hol.type -> f_1 : hol.term (type_19 B A) -> hol.term (type_19 B A) :=
  B : hol.type => A : hol.type => f_1 : hol.term (type_19 B A) => f_1.

def term_21 : B : hol.type -> A : hol.type -> hol.term type_1 :=
  B : hol.type => A : hol.type => Data_2EBool_2E_21 (hol.arr (hol.arr (type_19 B A) type_1) type_1) (f_1 : hol.term (type_19 B A) => term_0 A (x_2 : hol.term (type_0 A) => term_19 B (Function_2ECombinator_2Ew (hol.arr (type_19 B A) (type_6 B A)) (term_20 B A f_1) (term_3 A x_2)) (term_20 B A f_1 (term_3 A x_2) (term_3 A x_2)))).

(; axiom ;)

thm_6 : B : hol.type -> A : hol.type -> hol.proof (term_21 B A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda x. ((= ((Function.Combinator.w f) x)) ((f x) x)))) ;)

def type_20 : hol.type -> hol.type -> hol.type :=
  C : hol.type => B : hol.type => hol.arr (hol.arr (type_12 C B) type_1) type_1.

def term_22 : C : hol.type -> B : hol.type -> hol.term (type_20 C B) :=
  C : hol.type => B : hol.type => Data_2EBool_2E_21 (type_20 C B).

def term_23 : C : hol.type -> hol.term (hol.arr (type_11 C) (hol.arr (type_11 C) type_1)) :=
  C : hol.type => hol.eq (type_11 C).

def term_24 : A : hol.type -> C : hol.type -> B : hol.type -> hol.term (hol.arr (type_12 C B) (hol.arr (type_6 B A) (type_15 C A))) :=
  A : hol.type => C : hol.type => B : hol.type => Function_2Eo (hol.arr (type_12 C B) (hol.arr (type_6 B A) (type_15 C A))).

def term_25 : C : hol.type -> B : hol.type -> f_1 : hol.term (type_12 C B) -> hol.term (type_12 C B) :=
  C : hol.type => B : hol.type => f_1 : hol.term (type_12 C B) => f_1.

def term_26 : B : hol.type -> A : hol.type -> g_1 : hol.term (type_6 B A) -> hol.term (type_6 B A) :=
  B : hol.type => A : hol.type => g_1 : hol.term (type_6 B A) => g_1.

def term_27 : B : hol.type -> A : hol.type -> x_1 : hol.term (type_0 A) -> g_2 : hol.term (type_6 B A) -> hol.term (type_5 B) :=
  B : hol.type => A : hol.type => x_1 : hol.term (type_0 A) => g_2 : hol.term (type_6 B A) => term_26 B A g_2 (term_3 A x_1).

def term_28 : A : hol.type -> C : hol.type -> B : hol.type -> hol.term type_1 :=
  A : hol.type => C : hol.type => B : hol.type => term_22 C B (f_1 : hol.term (type_12 C B) => term_5 B A (g_2 : hol.term (type_6 B A) => term_0 A (x_3 : hol.term (type_0 A) => term_23 C (term_24 A C B (term_25 C B f_1) (term_26 B A g_2) (term_3 A x_3)) (term_25 C B f_1 (term_27 B A x_3 g_2))))).

(; axiom ;)

thm_7 : A : hol.type -> C : hol.type -> B : hol.type -> hol.proof (term_28 A C B).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= (((Function.o f) g) x)) (f (g x)))))) ;)

def term_29 : B : hol.type -> x_1 : hol.term (type_5 B) -> hol.term (type_5 B) :=
  B : hol.type => x_1 : hol.term (type_5 B) => x_1.

def term_30 : A : hol.type -> y_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => y_1 : hol.term (type_0 A) => y_1.

def term_31 : C : hol.type -> B : hol.type -> A : hol.type -> hol.term type_1 :=
  C : hol.type => B : hol.type => A : hol.type => term_12 C B A (f_1 : hol.term (type_13 C B A) => term_16 B (x_2 : hol.term (type_5 B) => term_0 A (y_3 : hol.term (type_0 A) => term_23 C (term_14 C B A f_1 (term_29 B x_2) (term_30 A y_3)) (term_13 C B A f_1 (term_30 A y_3) (term_29 B x_2))))).

(; axiom ;)

thm_8 : C : hol.type -> B : hol.type -> A : hol.type -> hol.proof (term_31 C B A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((= (((Function.flip f) x) y)) ((f y) x))))) ;)

def term_32 : C : hol.type -> B : hol.type -> A : hol.type -> hol.term type_1 :=
  C : hol.type => B : hol.type => A : hol.type => term_12 C B A (f_1 : hol.term (type_13 C B A) => term_5 B A (g_2 : hol.term (type_6 B A) => term_0 A (x_3 : hol.term (type_0 A) => term_23 C (Function_2ECombinator_2Es (hol.arr (type_13 C B A) (hol.arr (type_6 B A) (type_15 C A))) (term_13 C B A f_1) (term_26 B A g_2) (term_3 A x_3)) (term_13 C B A f_1 (term_3 A x_3) (term_27 B A x_3 g_2))))).

(; axiom ;)

thm_9 : C : hol.type -> B : hol.type -> A : hol.type -> hol.proof (term_32 C B A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda x. ((= (((Function.Combinator.s f) g) x)) ((f x) (g x)))))) ;)

def type_21 : hol.type -> hol.type -> hol.type :=
  D : hol.type => C : hol.type => hol.arr (type_11 C) D.

def term_33 : D : hol.type -> C : hol.type -> hol.term (hol.arr (hol.arr (type_21 D C) type_1) type_1) :=
  D : hol.type => C : hol.type => Data_2EBool_2E_21 (hol.arr (hol.arr (type_21 D C) type_1) type_1).

def type_22 : hol.type -> hol.type -> hol.type :=
  D : hol.type => A : hol.type => hol.arr (type_0 A) D.

def term_34 : D : hol.type -> A : hol.type -> hol.term (hol.arr (type_22 D A) (hol.arr (type_22 D A) type_1)) :=
  D : hol.type => A : hol.type => hol.eq (type_22 D A).

def term_35 : D : hol.type -> C : hol.type -> f_1 : hol.term (type_21 D C) -> hol.term (type_21 D C) :=
  D : hol.type => C : hol.type => f_1 : hol.term (type_21 D C) => f_1.

def term_36 : C : hol.type -> B : hol.type -> g_1 : hol.term (type_12 C B) -> hol.term (type_12 C B) :=
  C : hol.type => B : hol.type => g_1 : hol.term (type_12 C B) => g_1.

def term_37 : B : hol.type -> A : hol.type -> h_1 : hol.term (type_6 B A) -> hol.term (type_6 B A) :=
  B : hol.type => A : hol.type => h_1 : hol.term (type_6 B A) => h_1.

def term_38 : A : hol.type -> C : hol.type -> B : hol.type -> h_1 : hol.term (type_6 B A) -> g_2 : hol.term (type_12 C B) -> hol.term (type_15 C A) :=
  A : hol.type => C : hol.type => B : hol.type => h_1 : hol.term (type_6 B A) => g_2 : hol.term (type_12 C B) => term_24 A C B (term_36 C B g_2) (term_37 B A h_1).

def term_39 : B : hol.type -> A : hol.type -> D : hol.type -> C : hol.type -> h_1 : hol.term (type_6 B A) -> g_2 : hol.term (type_12 C B) -> f_3 : hol.term (type_21 D C) -> hol.term (type_22 D A) :=
  B : hol.type => A : hol.type => D : hol.type => C : hol.type => h_1 : hol.term (type_6 B A) => g_2 : hol.term (type_12 C B) => f_3 : hol.term (type_21 D C) => Function_2Eo (hol.arr (type_21 D C) (hol.arr (type_15 C A) (type_22 D A))) (term_35 D C f_3) (term_38 A C B h_1 g_2).

def type_23 : hol.type -> hol.type -> hol.type :=
  D : hol.type => B : hol.type => hol.arr (type_5 B) D.

def term_40 : C : hol.type -> A : hol.type -> D : hol.type -> B : hol.type -> h_1 : hol.term (type_6 B A) -> g_2 : hol.term (type_12 C B) -> f_3 : hol.term (type_21 D C) -> hol.term (type_22 D A) :=
  C : hol.type => A : hol.type => D : hol.type => B : hol.type => h_1 : hol.term (type_6 B A) => g_2 : hol.term (type_12 C B) => f_3 : hol.term (type_21 D C) => Function_2Eo (hol.arr (type_23 D B) (hol.arr (type_6 B A) (type_22 D A))) (Function_2Eo (hol.arr (type_21 D C) (hol.arr (type_12 C B) (type_23 D B))) (term_35 D C f_3) (term_36 C B g_2)) (term_37 B A h_1).

def term_41 : A : hol.type -> B : hol.type -> D : hol.type -> C : hol.type -> hol.term type_1 :=
  A : hol.type => B : hol.type => D : hol.type => C : hol.type => term_33 D C (f_1 : hol.term (type_21 D C) => term_22 C B (g_2 : hol.term (type_12 C B) => term_5 B A (h_3 : hol.term (type_6 B A) => term_34 D A (term_39 B A D C h_3 g_2 f_1) (term_40 C A D B h_3 g_2 f_1)))).

(; axiom ;)

thm_10 : A : hol.type -> B : hol.type -> D : hol.type -> C : hol.type -> hol.proof (term_41 A B D C).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda h. ((= ((Function.o f) ((Function.o g) h))) ((Function.o ((Function.o f) g)) h))))) ;)

def term_42 : A : hol.type -> B : hol.type -> D : hol.type -> C : hol.type -> hol.term type_1 :=
  A : hol.type => B : hol.type => D : hol.type => C : hol.type => term_33 D C (f_1 : hol.term (type_21 D C) => term_22 C B (g_2 : hol.term (type_12 C B) => term_5 B A (h_3 : hol.term (type_6 B A) => term_34 D A (term_40 C A D B h_3 g_2 f_1) (term_39 B A D C h_3 g_2 f_1)))).

(; axiom ;)

thm_11 : A : hol.type -> B : hol.type -> D : hol.type -> C : hol.type -> hol.proof (term_42 A B D C).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. (Data.Bool.! \lambda h. ((= ((Function.o ((Function.o f) g)) h)) ((Function.o f) ((Function.o g) h)))))) ;)

def type_24 : hol.type -> hol.type -> hol.type :=
  C : hol.type => A : hol.type => hol.arr (type_15 C A) type_1.

def term_43 : C : hol.type -> A : hol.type -> hol.term (hol.arr (type_24 C A) type_1) :=
  C : hol.type => A : hol.type => Data_2EBool_2E_21 (hol.arr (type_24 C A) type_1).

def type_25 : hol.type :=
  hol.arr type_1 (hol.arr type_1 type_1).

def term_44 : hol.term type_25 :=
  hol.eq type_1.

(; Constant Data.Bool.? ;)

Data_2EBool_2E_3F : A : hol.type -> hol.term (type_0 A).

def term_45 : B : hol.type -> hol.term (type_18 B) :=
  B : hol.type => Data_2EBool_2E_3F (type_18 B).

def term_46 : C : hol.type -> A : hol.type -> f_1 : hol.term (type_15 C A) -> hol.term (type_15 C A) :=
  C : hol.type => A : hol.type => f_1 : hol.term (type_15 C A) => f_1.

def term_47 : C : hol.type -> A : hol.type -> x_1 : hol.term (type_0 A) -> f_2 : hol.term (type_15 C A) -> hol.term (type_11 C) :=
  C : hol.type => A : hol.type => x_1 : hol.term (type_0 A) => f_2 : hol.term (type_15 C A) => term_46 C A f_2 (term_3 A x_1).

def term_48 : A : hol.type -> C : hol.type -> B : hol.type -> x_1 : hol.term (type_0 A) -> f_2 : hol.term (type_15 C A) -> g_3 : hol.term (type_12 C B) -> hol.term type_1 :=
  A : hol.type => C : hol.type => B : hol.type => x_1 : hol.term (type_0 A) => f_2 : hol.term (type_15 C A) => g_3 : hol.term (type_12 C B) => term_45 B (y_4 : hol.term (type_5 B) => term_23 C (term_36 C B g_3 (term_17 B y_4)) (term_47 C A x_1 f_2)).

def term_49 : B : hol.type -> A : hol.type -> hol.term (type_8 B A) :=
  B : hol.type => A : hol.type => Data_2EBool_2E_3F (type_8 B A).

def term_50 : C : hol.type -> A : hol.type -> f_1 : hol.term (type_15 C A) -> hol.term (type_24 C A) :=
  C : hol.type => A : hol.type => f_1 : hol.term (type_15 C A) => hol.eq (type_15 C A) (term_46 C A f_1).

def term_51 : B : hol.type -> C : hol.type -> A : hol.type -> hol.term type_1 :=
  B : hol.type => C : hol.type => A : hol.type => term_43 C A (f_1 : hol.term (type_15 C A) => term_22 C B (g_2 : hol.term (type_12 C B) => term_44 (term_0 A (x_3 : hol.term (type_0 A) => term_48 A C B x_3 f_1 g_2)) (term_49 B A (h_3 : hol.term (type_6 B A) => term_50 C A f_1 (term_38 A C B h_3 g_2))))).

(; axiom ;)

thm_12 : B : hol.type -> C : hol.type -> A : hol.type -> hol.proof (term_51 B C A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.? \lambda y. ((= (g y)) (f x))))) (Data.Bool.? \lambda h. ((= f) ((Function.o g) h)))))) ;)

def term_52 : A : hol.type -> hol.term (type_3 A) :=
  A : hol.type => Data_2EBool_2E_3F (type_3 A).

def term_53 : B : hol.type -> A : hol.type -> x_1 : hol.term (type_0 A) -> f_2 : hol.term (type_6 B A) -> hol.term (type_5 B) :=
  B : hol.type => A : hol.type => x_1 : hol.term (type_0 A) => f_2 : hol.term (type_6 B A) => term_9 B A f_2 (term_3 A x_1).

def term_54 : A : hol.type -> B : hol.type -> f_1 : hol.term (type_6 B A) -> hol.term (hol.arr type_1 type_1) :=
  A : hol.type => B : hol.type => f_1 : hol.term (type_6 B A) => term_44 (term_16 B (y_2 : hol.term (type_5 B) => term_52 A (x_3 : hol.term (type_0 A) => term_19 B (term_53 B A x_3 f_1) (term_17 B y_2)))).

def term_55 : B : hol.type -> hol.term (hol.arr (type_18 B) type_1) :=
  B : hol.type => Data_2EBool_2E_21 (hol.arr (type_18 B) type_1).

def term_56 : B : hol.type -> p_1 : hol.term (type_17 B) -> hol.term (type_17 B) :=
  B : hol.type => p_1 : hol.term (type_17 B) => p_1.

def term_57 : B : hol.type -> A : hol.type -> f_1 : hol.term (type_6 B A) -> p_2 : hol.term (type_17 B) -> hol.term (type_2 A) :=
  B : hol.type => A : hol.type => f_1 : hol.term (type_6 B A) => p_2 : hol.term (type_17 B) => x_3 : hol.term (type_0 A) => term_56 B p_2 (term_53 B A x_3 f_1).

def term_58 : B : hol.type -> p_1 : hol.term (type_17 B) -> hol.term (type_17 B) :=
  B : hol.type => p_1 : hol.term (type_17 B) => y_2 : hol.term (type_5 B) => term_56 B p_1 (term_17 B y_2).

def term_59 : B : hol.type -> A : hol.type -> hol.term type_1 :=
  B : hol.type => A : hol.type => term_5 B A (f_1 : hol.term (type_6 B A) => term_54 A B f_1 (term_55 B (p_2 : hol.term (type_17 B) => term_44 (term_0 A (term_57 B A f_1 p_2)) (term_16 B (term_58 B p_2))))).

(; axiom ;)

thm_13 : B : hol.type -> A : hol.type -> hol.proof (term_59 B A).

(; Theorem: |- (Data.Bool.! \lambda f. ((= (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))) (Data.Bool.! \lambda p. ((= (Data.Bool.! \lambda x. (p (f x)))) (Data.Bool.! \lambda y. (p y)))))) ;)

def term_60 : B : hol.type -> A : hol.type -> hol.term type_1 :=
  B : hol.type => A : hol.type => term_5 B A (f_1 : hol.term (type_6 B A) => term_54 A B f_1 (term_55 B (p_2 : hol.term (type_17 B) => term_44 (term_52 A (term_57 B A f_1 p_2)) (term_45 B (term_58 B p_2))))).

(; axiom ;)

thm_14 : B : hol.type -> A : hol.type -> hol.proof (term_60 B A).

(; Theorem: |- (Data.Bool.! \lambda f. ((= (Data.Bool.! \lambda y. (Data.Bool.? \lambda x. ((= (f x)) y)))) (Data.Bool.! \lambda p. ((= (Data.Bool.? \lambda x. (p (f x)))) (Data.Bool.? \lambda y. (p y)))))) ;)

(; Constant Data.Bool.==> ;)

Data_2EBool_2E_3D_3D_3E : A : hol.type -> hol.term (type_0 A).

def term_61 : hol.term type_25 :=
  Data_2EBool_2E_3D_3D_3E type_25.

def term_62 : A : hol.type -> B : hol.type -> y_1 : hol.term (type_0 A) -> x_2 : hol.term (type_0 A) -> g_3 : hol.term (type_6 B A) -> hol.term type_1 :=
  A : hol.type => B : hol.type => y_1 : hol.term (type_0 A) => x_2 : hol.term (type_0 A) => g_3 : hol.term (type_6 B A) => term_19 B (term_27 B A x_2 g_3) (term_26 B A g_3 (term_30 A y_1)).

def term_63 : A : hol.type -> C : hol.type -> x_1 : hol.term (type_0 A) -> f_2 : hol.term (type_15 C A) -> hol.term (hol.arr (type_11 C) type_1) :=
  A : hol.type => C : hol.type => x_1 : hol.term (type_0 A) => f_2 : hol.term (type_15 C A) => term_23 C (term_47 C A x_1 f_2).

def term_64 : A : hol.type -> C : hol.type -> y_1 : hol.term (type_0 A) -> x_2 : hol.term (type_0 A) -> f_3 : hol.term (type_15 C A) -> hol.term type_1 :=
  A : hol.type => C : hol.type => y_1 : hol.term (type_0 A) => x_2 : hol.term (type_0 A) => f_3 : hol.term (type_15 C A) => term_63 A C x_2 f_3 (term_46 C A f_3 (term_30 A y_1)).

def term_65 : C : hol.type -> B : hol.type -> hol.term (type_20 C B) :=
  C : hol.type => B : hol.type => Data_2EBool_2E_3F (type_20 C B).

def term_66 : C : hol.type -> B : hol.type -> h_1 : hol.term (type_12 C B) -> hol.term (type_12 C B) :=
  C : hol.type => B : hol.type => h_1 : hol.term (type_12 C B) => h_1.

def term_67 : B : hol.type -> C : hol.type -> A : hol.type -> hol.term type_1 :=
  B : hol.type => C : hol.type => A : hol.type => term_43 C A (f_1 : hol.term (type_15 C A) => term_5 B A (g_2 : hol.term (type_6 B A) => term_44 (term_0 A (x_3 : hol.term (type_0 A) => term_0 A (y_4 : hol.term (type_0 A) => term_61 (term_62 A B y_4 x_3 g_2) (term_64 A C y_4 x_3 f_1)))) (term_65 C B (h_3 : hol.term (type_12 C B) => term_50 C A f_1 (term_24 A C B (term_66 C B h_3) (term_26 B A g_2)))))).

(; axiom ;)

thm_15 : B : hol.type -> C : hol.type -> A : hol.type -> hol.proof (term_67 B C A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((= (g x)) (g y))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. ((= f) ((Function.o h) g)))))) ;)

def term_68 : A : hol.type -> hol.term (hol.arr (type_3 A) type_1) :=
  A : hol.type => Data_2EBool_2E_21 (hol.arr (type_3 A) type_1).

def term_69 : A : hol.type -> p_1 : hol.term (type_2 A) -> hol.term (type_2 A) :=
  A : hol.type => p_1 : hol.term (type_2 A) => p_1.

def term_70 : A : hol.type -> x_1 : hol.term (type_0 A) -> p_2 : hol.term (type_2 A) -> hol.term type_1 :=
  A : hol.type => x_1 : hol.term (type_0 A) => p_2 : hol.term (type_2 A) => term_69 A p_2 (term_3 A x_1).

def term_71 : A : hol.type -> x_1 : hol.term (type_0 A) -> p_2 : hol.term (type_2 A) -> hol.term (hol.arr type_1 type_1) :=
  A : hol.type => x_1 : hol.term (type_0 A) => p_2 : hol.term (type_2 A) => term_61 (term_70 A x_1 p_2).

def term_72 : B : hol.type -> C : hol.type -> A : hol.type -> hol.term type_1 :=
  B : hol.type => C : hol.type => A : hol.type => term_68 A (p_1 : hol.term (type_2 A) => term_43 C A (f_2 : hol.term (type_15 C A) => term_22 C B (g_3 : hol.term (type_12 C B) => term_44 (term_0 A (x_4 : hol.term (type_0 A) => term_71 A x_4 p_1 (term_48 A C B x_4 f_2 g_3))) (term_49 B A (h_4 : hol.term (type_6 B A) => term_0 A (x_5 : hol.term (type_0 A) => term_71 A x_5 p_1 (term_63 A C x_5 f_2 (term_36 C B g_3 (term_37 B A h_4 (term_3 A x_5)))))))))).

(; axiom ;)

thm_16 : B : hol.type -> C : hol.type -> A : hol.type -> hol.proof (term_72 B C A).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) (Data.Bool.? \lambda y. ((= (g y)) (f x)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (g (h x)))))))))) ;)

(; Constant Data.Bool./\ ;)

Data_2EBool_2E_2F_5C : A : hol.type -> hol.term (type_0 A).

def term_73 : hol.term type_25 :=
  Data_2EBool_2E_2F_5C type_25.

def term_74 : B : hol.type -> C : hol.type -> A : hol.type -> hol.term type_1 :=
  B : hol.type => C : hol.type => A : hol.type => term_68 A (p_1 : hol.term (type_2 A) => term_43 C A (f_2 : hol.term (type_15 C A) => term_5 B A (g_3 : hol.term (type_6 B A) => term_44 (term_0 A (x_4 : hol.term (type_0 A) => term_0 A (y_5 : hol.term (type_0 A) => term_61 (term_73 (term_70 A x_4 p_1) (term_73 (term_69 A p_1 (term_30 A y_5)) (term_62 A B y_5 x_4 g_3))) (term_64 A C y_5 x_4 f_2)))) (term_65 C B (h_4 : hol.term (type_12 C B) => term_0 A (x_5 : hol.term (type_0 A) => term_71 A x_5 p_1 (term_63 A C x_5 f_2 (term_66 C B h_4 (term_27 B A x_5 g_3))))))))).

(; axiom ;)

thm_17 : B : hol.type -> C : hol.type -> A : hol.type -> hol.proof (term_74 B C A).

(; Theorem: |- (Data.Bool.! \lambda p. (Data.Bool.! \lambda f. (Data.Bool.! \lambda g. ((= (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) ((Data.Bool./\ (p y)) ((= (g x)) (g y))))) ((= (f x)) (f y)))))) (Data.Bool.? \lambda h. (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) ((= (f x)) (h (g x)))))))))) ;)

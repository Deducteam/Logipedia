
(; This file was generated by Holide. ;)

#NAME list_2Dfold_2Ddef_2D1_2E28.

def type_0 : hol.type -> hol.type :=
  A : hol.type => A.

def type_1 : hol.type -> hol.type :=
  B : hol.type => B.

def type_2 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_0 A) (hol.arr (type_1 B) (type_1 B)).

(; Constant Data.Bool.! ;)

Data_2EBool_2E_21 : A : hol.type -> hol.term (type_0 A).

def term_0 : B : hol.type -> A : hol.type -> hol.term (hol.arr (hol.arr (type_2 B A) hol.bool) hol.bool) :=
  B : hol.type => A : hol.type => Data_2EBool_2E_21 (hol.arr (hol.arr (type_2 B A) hol.bool) hol.bool).

def type_3 : hol.type -> hol.type :=
  B : hol.type => hol.arr (type_1 B) hol.bool.

def term_1 : B : hol.type -> hol.term (hol.arr (type_3 B) hol.bool) :=
  B : hol.type => Data_2EBool_2E_21 (hol.arr (type_3 B) hol.bool).

def term_2 : B : hol.type -> hol.term (hol.arr (type_1 B) (type_3 B)) :=
  B : hol.type => hol.eq (type_1 B).

Data_2EList_2Elist : hol.type -> hol.type.

def type_4 : hol.type -> hol.type :=
  A : hol.type => Data_2EList_2Elist (type_0 A).

def type_5 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_2 B A) (hol.arr (type_1 B) (hol.arr (type_4 A) (type_1 B))).

(; Constant list-fold-def-1.28 ;)

list_2Dfold_2Ddef_2D1_2E28 : A : hol.type -> hol.term (type_0 A).

(; Constant Data.List.foldr ;)

def Data_2EList_2Efoldr : B : hol.type -> A : hol.type -> hol.term (type_5 B A) :=
  B : hol.type => A : hol.type => list_2Dfold_2Ddef_2D1_2E28 (type_5 B A).

def term_3 : B : hol.type -> A : hol.type -> hol.term (type_5 B A) :=
  B : hol.type => A : hol.type => Data_2EList_2Efoldr (type_1 B) (type_0 A).

def term_4 : B : hol.type -> A : hol.type -> f_1 : hol.term (type_2 B A) -> hol.term (type_2 B A) :=
  B : hol.type => A : hol.type => f_1 : hol.term (type_2 B A) => f_1.

def term_5 : B : hol.type -> b_1 : hol.term (type_1 B) -> hol.term (type_1 B) :=
  B : hol.type => b_1 : hol.term (type_1 B) => b_1.

def term_6 : B : hol.type -> A : hol.type -> b_1 : hol.term (type_1 B) -> f_2 : hol.term (type_2 B A) -> hol.term (hol.arr (type_4 A) (type_1 B)) :=
  B : hol.type => A : hol.type => b_1 : hol.term (type_1 B) => f_2 : hol.term (type_2 B A) => term_3 B A (term_4 B A f_2) (term_5 B b_1).

(; Constant Data.List.[] ;)

Data_2EList_2E_5B_5D : A : hol.type -> hol.term (type_0 A).

def term_7 : B : hol.type -> A : hol.type -> hol.term hol.bool :=
  B : hol.type => A : hol.type => term_0 B A (f_1 : hol.term (type_2 B A) => term_1 B (b_2 : hol.term (type_1 B) => term_2 B (term_6 B A b_2 f_1 (Data_2EList_2E_5B_5D (type_4 A))) (term_5 B b_2))).

(; axiom ;)

thm_0 : B : hol.type -> A : hol.type -> hol.proof (term_7 B A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda b. ((= (((Data.List.foldr f) b) Data.List.[])) b))) ;)

def type_6 : hol.type -> hol.type -> hol.type :=
  A : hol.type => B : hol.type => hol.arr (type_1 B) (hol.arr (type_0 A) (type_1 B)).

def term_8 : A : hol.type -> hol.term (hol.arr (hol.arr (type_4 A) hol.bool) hol.bool) :=
  A : hol.type => Data_2EBool_2E_21 (hol.arr (hol.arr (type_4 A) hol.bool) hol.bool).

def type_7 : hol.type -> hol.type -> hol.type :=
  A : hol.type => B : hol.type => hol.arr (type_6 A B) (hol.arr (type_1 B) (hol.arr (type_4 A) (type_1 B))).

(; Constant Data.List.foldl ;)

def Data_2EList_2Efoldl : A : hol.type -> B : hol.type -> hol.term (type_7 A B) :=
  A : hol.type => B : hol.type => list_2Dfold_2Ddef_2D1_2E28 (type_7 A B).

def term_9 : A : hol.type -> B : hol.type -> f_1 : hol.term (type_6 A B) -> hol.term (type_6 A B) :=
  A : hol.type => B : hol.type => f_1 : hol.term (type_6 A B) => f_1.

def term_10 : A : hol.type -> l_1 : hol.term (type_4 A) -> hol.term (type_4 A) :=
  A : hol.type => l_1 : hol.term (type_4 A) => l_1.

(; Constant Function.flip ;)

Function_2Eflip : A : hol.type -> hol.term (type_0 A).

def type_8 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_4 A) (type_4 A).

(; Constant Data.List.reverse ;)

Data_2EList_2Ereverse : A : hol.type -> hol.term (type_0 A).

def term_11 : A : hol.type -> B : hol.type -> hol.term hol.bool :=
  A : hol.type => B : hol.type => Data_2EBool_2E_21 (hol.arr (hol.arr (type_6 A B) hol.bool) hol.bool) (f_1 : hol.term (type_6 A B) => term_1 B (b_2 : hol.term (type_1 B) => term_8 A (l_3 : hol.term (type_4 A) => term_2 B (Data_2EList_2Efoldl (type_0 A) (type_1 B) (term_9 A B f_1) (term_5 B b_2) (term_10 A l_3)) (term_3 B A (Function_2Eflip (hol.arr (type_6 A B) (type_2 B A)) (term_9 A B f_1)) (term_5 B b_2) (Data_2EList_2Ereverse (type_8 A) (term_10 A l_3)))))).

(; axiom ;)

thm_1 : A : hol.type -> B : hol.type -> hol.proof (term_11 A B).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda b. (Data.Bool.! \lambda l. ((= (((Data.List.foldl f) b) l)) (((Data.List.foldr (Function.flip f)) b) (Data.List.reverse l)))))) ;)

(; Constant Data.List.:: ;)

Data_2EList_2E_3A_3A : A : hol.type -> hol.term (type_0 A).

def term_12 : A : hol.type -> h_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => h_1 : hol.term (type_0 A) => h_1.

def term_13 : A : hol.type -> t_1 : hol.term (type_4 A) -> hol.term (type_4 A) :=
  A : hol.type => t_1 : hol.term (type_4 A) => t_1.

def term_14 : B : hol.type -> A : hol.type -> hol.term hol.bool :=
  B : hol.type => A : hol.type => term_0 B A (f_1 : hol.term (type_2 B A) => term_1 B (b_2 : hol.term (type_1 B) => Data_2EBool_2E_21 (hol.arr (hol.arr (type_0 A) hol.bool) hol.bool) (h_3 : hol.term (type_0 A) => term_8 A (t_4 : hol.term (type_4 A) => term_2 B (term_6 B A b_2 f_1 (Data_2EList_2E_3A_3A (hol.arr (type_0 A) (type_8 A)) (term_12 A h_3) (term_13 A t_4))) (term_4 B A f_1 (term_12 A h_3) (term_6 B A b_2 f_1 (term_13 A t_4))))))).

(; axiom ;)

thm_2 : B : hol.type -> A : hol.type -> hol.proof (term_14 B A).

(; Theorem: |- (Data.Bool.! \lambda f. (Data.Bool.! \lambda b. (Data.Bool.! \lambda h. (Data.Bool.! \lambda t. ((= (((Data.List.foldr f) b) ((Data.List.:: h) t))) ((f h) (((Data.List.foldr f) b) t))))))) ;)

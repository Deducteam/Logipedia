
(; This file was generated by Holide. ;)

#NAME bool_2Ddef.

def type_0 : hol.type -> hol.type :=
  A : hol.type => A.

def type_1 : hol.type :=
  hol.bool.

def type_2 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_0 A) type_1.

def type_3 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_2 A) type_1.

def term_0 : A : hol.type -> p_1 : hol.term (type_2 A) -> hol.term (type_2 A) :=
  A : hol.type => p_1 : hol.term (type_2 A) => p_1.

def type_4 : hol.type :=
  hol.arr type_1 type_1.

def type_5 : hol.type :=
  hol.arr type_4 type_1.

def term_1 : hol.term (hol.arr type_4 type_5) :=
  hol.eq type_4.

def term_2 : p_1 : hol.term type_1 -> hol.term type_1 :=
  p_1 : hol.term type_1 => p_1.

def term_3 : hol.term type_4 :=
  p_1 : hol.term type_1 => term_2 p_1.

def term_4 : hol.term type_1 :=
  term_1 term_3 term_3.

(; Constant Data.Bool.T ;)

def Data_2EBool_2ET : hol.term type_1 :=
  term_4.

(; dict ;)

thm thm_0 : hol.proof (hol.eq type_1 Data_2EBool_2ET term_4) :=
  hol.REFL type_1 Data_2EBool_2ET.

def term_5 : hol.term type_1 :=
  Data_2EBool_2ET.

def term_6 : A : hol.type -> hol.term (type_3 A) :=
  A : hol.type => p_1 : hol.term (type_2 A) => hol.eq (type_2 A) (term_0 A p_1) (x_2 : hol.term (type_0 A) => term_5).

(; Constant Data.Bool.! ;)

def Data_2EBool_2E_21 : A : hol.type -> hol.term (type_3 A) :=
  A : hol.type => term_6 A.

(; dict ;)

thm thm_1 : A : hol.type -> hol.proof (hol.eq (type_3 A) (Data_2EBool_2E_21 (type_0 A)) (term_6 A)) :=
  A : hol.type => hol.REFL (type_3 A) (Data_2EBool_2E_21 (type_0 A)).

def term_7 : hol.term type_5 :=
  Data_2EBool_2E_21 type_1.

def term_8 : hol.term type_1 :=
  term_7 term_3.

(; Constant Data.Bool.F ;)

def Data_2EBool_2EF : hol.term type_1 :=
  term_8.

(; dict ;)

thm thm_2 : hol.proof (hol.eq type_1 Data_2EBool_2EF term_8) :=
  hol.REFL type_1 Data_2EBool_2EF.

def type_6 : hol.type :=
  hol.arr type_1 type_4.

def term_9 : hol.term type_6 :=
  hol.eq type_1.

def term_10 : hol.term type_1 :=
  Data_2EBool_2EF.

(; Theorem: |- ((= Data.Bool.F) (Data.Bool.! \lambda p. p)) ;)

def type_7 : hol.type :=
  hol.arr type_6 type_1.

def term_11 : f_1 : hol.term type_6 -> hol.term type_6 :=
  f_1 : hol.term type_6 => f_1.

def term_12 : q_1 : hol.term type_1 -> hol.term type_1 :=
  q_1 : hol.term type_1 => q_1.

def term_13 : hol.term type_6 :=
  p_1 : hol.term type_1 => q_2 : hol.term type_1 => hol.eq type_7 (f_3 : hol.term type_6 => term_11 f_3 (term_2 p_1) (term_12 q_2)) (f_3 : hol.term type_6 => term_11 f_3 term_5 term_5).

(; Constant Data.Bool./\ ;)

def Data_2EBool_2E_2F_5C : hol.term type_6 :=
  term_13.

(; dict ;)

thm thm_3 : hol.proof (hol.eq type_6 Data_2EBool_2E_2F_5C term_13) :=
  hol.REFL type_6 Data_2EBool_2E_2F_5C.

def term_14 : hol.term type_6 :=
  Data_2EBool_2E_2F_5C.

def term_15 : hol.term type_6 :=
  p_1 : hol.term type_1 => q_2 : hol.term type_1 => term_9 (term_14 (term_2 p_1) (term_12 q_2)) (term_2 p_1).

(; Constant Data.Bool.==> ;)

def Data_2EBool_2E_3D_3D_3E : hol.term type_6 :=
  term_15.

(; dict ;)

thm thm_4 : hol.proof (hol.eq type_6 Data_2EBool_2E_3D_3D_3E term_15) :=
  hol.REFL type_6 Data_2EBool_2E_3D_3D_3E.

def term_16 : hol.term type_6 :=
  Data_2EBool_2E_3D_3D_3E.

def term_17 : p_1 : hol.term type_1 -> hol.term type_4 :=
  p_1 : hol.term type_1 => term_16 (term_2 p_1).

def term_18 : hol.term type_4 :=
  p_1 : hol.term type_1 => term_17 p_1 term_10.

(; Constant Data.Bool.~ ;)

def Data_2EBool_2E_7E : hol.term type_4 :=
  term_18.

(; dict ;)

thm thm_5 : hol.proof (term_1 Data_2EBool_2E_7E term_18) :=
  hol.REFL type_4 Data_2EBool_2E_7E.

(; Theorem: |- ((= Data.Bool.~) \lambda p. ((Data.Bool.==> p) Data.Bool.F)) ;)

(; Theorem: |- ((= Data.Bool.T) ((= \lambda p. p) \lambda p. p)) ;)

def term_19 : A : hol.type -> hol.term (hol.arr (type_3 A) (hol.arr (type_3 A) type_1)) :=
  A : hol.type => hol.eq (type_3 A).

def term_20 : A : hol.type -> hol.term (type_3 A) :=
  A : hol.type => Data_2EBool_2E_21 (type_0 A).

(; Theorem: |- ((= Data.Bool.!) \lambda p. ((= p) \lambda x. Data.Bool.T)) ;)

def term_21 : hol.term (hol.arr type_6 type_7) :=
  hol.eq type_6.

(; Theorem: |- ((= Data.Bool.==>) \lambda p. \lambda q. ((= ((Data.Bool./\ p) q)) p)) ;)

(; Theorem: |- ((= Data.Bool./\) \lambda p. \lambda q. ((= \lambda f. ((f p) q)) \lambda f. ((f Data.Bool.T) Data.Bool.T))) ;)

def term_22 : A : hol.type -> x_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => x_1 : hol.term (type_0 A) => x_1.

def term_23 : A : hol.type -> x_1 : hol.term (type_0 A) -> p_2 : hol.term (type_2 A) -> hol.term type_1 :=
  A : hol.type => x_1 : hol.term (type_0 A) => p_2 : hol.term (type_2 A) => term_0 A p_2 (term_22 A x_1).

def term_24 : A : hol.type -> hol.term (type_3 A) :=
  A : hol.type => p_1 : hol.term (type_2 A) => term_7 (q_2 : hol.term type_1 => term_16 (term_20 A (x_3 : hol.term (type_0 A) => term_16 (term_23 A x_3 p_1) (term_12 q_2))) (term_12 q_2)).

(; Constant Data.Bool.? ;)

def Data_2EBool_2E_3F : A : hol.type -> hol.term (type_3 A) :=
  A : hol.type => term_24 A.

(; dict ;)

thm thm_6 : A : hol.type -> hol.proof (term_19 A (Data_2EBool_2E_3F (type_0 A)) (term_24 A)) :=
  A : hol.type => hol.REFL (type_3 A) (Data_2EBool_2E_3F (type_0 A)).

def term_25 : A : hol.type -> hol.term (type_3 A) :=
  A : hol.type => Data_2EBool_2E_3F (type_0 A).

(; Theorem: |- ((= Data.Bool.?) \lambda p. (Data.Bool.! \lambda q. ((Data.Bool.==> (Data.Bool.! \lambda x. ((Data.Bool.==> (p x)) q))) q))) ;)

def term_26 : r_1 : hol.term type_1 -> hol.term type_1 :=
  r_1 : hol.term type_1 => r_1.

def term_27 : hol.term type_6 :=
  p_1 : hol.term type_1 => q_2 : hol.term type_1 => term_7 (r_3 : hol.term type_1 => term_16 (term_17 p_1 (term_26 r_3)) (term_16 (term_16 (term_12 q_2) (term_26 r_3)) (term_26 r_3))).

(; Constant Data.Bool.\/ ;)

def Data_2EBool_2E_5C_2F : hol.term type_6 :=
  term_27.

(; dict ;)

thm thm_7 : hol.proof (term_21 Data_2EBool_2E_5C_2F term_27) :=
  hol.REFL type_6 Data_2EBool_2E_5C_2F.

(; Theorem: |- ((= Data.Bool.\/) \lambda p. \lambda q. (Data.Bool.! \lambda r. ((Data.Bool.==> ((Data.Bool.==> p) r)) ((Data.Bool.==> ((Data.Bool.==> q) r)) r)))) ;)

def term_28 : A : hol.type -> y_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => y_1 : hol.term (type_0 A) => y_1.

def term_29 : A : hol.type -> x_1 : hol.term (type_0 A) -> hol.term (type_2 A) :=
  A : hol.type => x_1 : hol.term (type_0 A) => hol.eq (type_0 A) (term_22 A x_1).

def term_30 : A : hol.type -> hol.term (type_3 A) :=
  A : hol.type => p_1 : hol.term (type_2 A) => term_14 (term_25 A (term_0 A p_1)) (term_20 A (x_2 : hol.term (type_0 A) => term_20 A (y_3 : hol.term (type_0 A) => term_16 (term_14 (term_23 A x_2 p_1) (term_0 A p_1 (term_28 A y_3))) (term_29 A x_2 (term_28 A y_3))))).

(; Constant Data.Bool.?! ;)

def Data_2EBool_2E_3F_21 : A : hol.type -> hol.term (type_3 A) :=
  A : hol.type => term_30 A.

(; dict ;)

thm thm_8 : A : hol.type -> hol.proof (term_19 A (Data_2EBool_2E_3F_21 (type_0 A)) (term_30 A)) :=
  A : hol.type => hol.REFL (type_3 A) (Data_2EBool_2E_3F_21 (type_0 A)).

(; Theorem: |- ((= Data.Bool.?!) \lambda p. ((Data.Bool./\ (Data.Bool.? p)) (Data.Bool.! \lambda x. (Data.Bool.! \lambda y. ((Data.Bool.==> ((Data.Bool./\ (p x)) (p y))) ((= x) y)))))) ;)

def term_31 : t_1 : hol.term type_1 -> hol.term type_4 :=
  t_1 : hol.term type_1 => term_9 t_1.

def term_32 : A : hol.type -> hol.term (hol.arr type_1 (hol.arr (type_0 A) (hol.arr (type_0 A) (type_0 A)))) :=
  A : hol.type => t_1 : hol.term type_1 => t1_2 : hol.term (type_0 A) => t2_3 : hol.term (type_0 A) => hol.select (type_0 A) (x_4 : hol.term (type_0 A) => term_14 (term_16 (term_31 t_1 term_5) (term_29 A x_4 t1_2)) (term_16 (term_31 t_1 term_10) (term_29 A x_4 t2_3))).

(; Constant Data.Bool.cond ;)

def Data_2EBool_2Econd : A : hol.type -> hol.term (hol.arr type_1 (hol.arr (type_0 A) (hol.arr (type_0 A) (type_0 A)))) :=
  A : hol.type => term_32 A.

(; dict ;)

thm thm_9 : A : hol.type -> hol.proof (hol.eq (hol.arr type_1 (hol.arr (type_0 A) (hol.arr (type_0 A) (type_0 A)))) (Data_2EBool_2Econd (type_0 A)) (term_32 A)) :=
  A : hol.type => hol.REFL (hol.arr type_1 (hol.arr (type_0 A) (hol.arr (type_0 A) (type_0 A)))) (Data_2EBool_2Econd (type_0 A)).

def type_8 : hol.type -> hol.type :=
  A : hol.type => hol.arr type_1 (hol.arr (type_0 A) (hol.arr (type_0 A) (type_0 A))).

(; Theorem: |- ((= Data.Bool.cond) \lambda t. \lambda t1. \lambda t2. (select \lambda x. ((Data.Bool./\ ((Data.Bool.==> ((= t) Data.Bool.T)) ((= x) t1))) ((Data.Bool.==> ((= t) Data.Bool.F)) ((= x) t2))))) ;)

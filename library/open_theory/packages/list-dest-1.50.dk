
(; This file was generated by Holide. ;)

#NAME list_2Ddest_2D1_2E50.

def type_0 : hol.type -> hol.type :=
  A : hol.type => A.

Data_2EList_2Elist : hol.type -> hol.type.

def type_1 : hol.type -> hol.type :=
  A : hol.type => Data_2EList_2Elist (type_0 A).

def type_2 : hol.type :=
  hol.bool.

def type_3 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_1 A) type_2.

(; Constant list-dest-1.50 ;)

list_2Ddest_2D1_2E50 : A : hol.type -> hol.term (type_0 A).

(; Constant Data.List.null ;)

def Data_2EList_2Enull : A : hol.type -> hol.term (type_3 A) :=
  A : hol.type => list_2Ddest_2D1_2E50 (type_3 A).

def term_0 : A : hol.type -> hol.term (type_3 A) :=
  A : hol.type => Data_2EList_2Enull (type_0 A).

(; Constant Data.List.[] ;)

Data_2EList_2E_5B_5D : A : hol.type -> hol.term (type_0 A).

def term_1 : A : hol.type -> hol.term (type_1 A) :=
  A : hol.type => Data_2EList_2E_5B_5D (type_1 A).

def term_2 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_0 A (term_1 A).

(; axiom ;)

thm_0 : A : hol.type -> hol.proof (term_2 A).

(; Theorem: |- (Data.List.null Data.List.[]) ;)

(; Constant Data.Bool.! ;)

Data_2EBool_2E_21 : A : hol.type -> hol.term (type_0 A).

def term_3 : A : hol.type -> hol.term (hol.arr (type_3 A) type_2) :=
  A : hol.type => Data_2EBool_2E_21 (hol.arr (type_3 A) type_2).

def type_4 : hol.type :=
  hol.arr type_2 type_2.

def type_5 : hol.type :=
  hol.arr type_2 type_4.

def term_4 : A : hol.type -> l_1 : hol.term (type_1 A) -> hol.term (type_1 A) :=
  A : hol.type => l_1 : hol.term (type_1 A) => l_1.

def term_5 : A : hol.type -> l_1 : hol.term (type_1 A) -> hol.term type_2 :=
  A : hol.type => l_1 : hol.term (type_1 A) => term_0 A (term_4 A l_1).

def term_6 : A : hol.type -> hol.term (hol.arr (type_1 A) (type_3 A)) :=
  A : hol.type => hol.eq (type_1 A).

def term_7 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_3 A (l_1 : hol.term (type_1 A) => hol.eq type_2 (term_5 A l_1) (term_6 A (term_4 A l_1) (term_1 A))).

(; axiom ;)

thm_1 : A : hol.type -> hol.proof (term_7 A).

(; Theorem: |- (Data.Bool.! \lambda l. ((= (Data.List.null l)) ((= l) Data.List.[]))) ;)

def type_6 : hol.type -> hol.type :=
  B : hol.type => B.

def type_7 : hol.type -> hol.type -> hol.type :=
  B : hol.type => A : hol.type => hol.arr (type_0 A) (hol.arr (type_1 A) (type_6 B)).

def type_8 : hol.type -> hol.type -> hol.type :=
  A : hol.type => B : hol.type => hol.arr (type_6 B) (hol.arr (type_7 B A) (hol.arr (type_1 A) (type_6 B))).

(; Constant Data.List.case.[].:: ;)

def Data_2EList_2Ecase_2E_5B_5D_2E_3A_3A : A : hol.type -> B : hol.type -> hol.term (type_8 A B) :=
  A : hol.type => B : hol.type => list_2Ddest_2D1_2E50 (type_8 A B).

def type_9 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_1 A) (type_1 A).

def type_10 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_0 A) (type_9 A).

(; Constant Data.List.:: ;)

Data_2EList_2E_3A_3A : A : hol.type -> hol.term (type_0 A).

def term_8 : A : hol.type -> hol.term (type_10 A) :=
  A : hol.type => Data_2EList_2E_3A_3A (type_10 A).

def term_9 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_3 A (l_1 : hol.term (type_1 A) => term_6 A (Data_2EList_2Ecase_2E_5B_5D_2E_3A_3A (type_0 A) (type_1 A) (term_1 A) (term_8 A) (term_4 A l_1)) (term_4 A l_1)).

(; axiom ;)

thm_2 : A : hol.type -> hol.proof (term_9 A).

(; Theorem: |- (Data.Bool.! \lambda l. ((= (((Data.List.case.[].:: Data.List.[]) Data.List.::) l)) l)) ;)

def type_11 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_0 A) type_2.

def term_10 : A : hol.type -> hol.term (hol.arr (type_11 A) type_2) :=
  A : hol.type => Data_2EBool_2E_21 (hol.arr (type_11 A) type_2).

(; Constant Data.Bool.~ ;)

Data_2EBool_2E_7E : A : hol.type -> hol.term (type_0 A).

def term_11 : hol.term type_4 :=
  Data_2EBool_2E_7E type_4.

def term_12 : A : hol.type -> h_1 : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => h_1 : hol.term (type_0 A) => h_1.

def term_13 : A : hol.type -> t_1 : hol.term (type_1 A) -> hol.term (type_1 A) :=
  A : hol.type => t_1 : hol.term (type_1 A) => t_1.

def term_14 : A : hol.type -> t_1 : hol.term (type_1 A) -> h_2 : hol.term (type_0 A) -> hol.term (type_1 A) :=
  A : hol.type => t_1 : hol.term (type_1 A) => h_2 : hol.term (type_0 A) => term_8 A (term_12 A h_2) (term_13 A t_1).

def term_15 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_10 A (h_1 : hol.term (type_0 A) => term_3 A (t_2 : hol.term (type_1 A) => term_11 (term_0 A (term_14 A t_2 h_1)))).

(; axiom ;)

thm_3 : A : hol.type -> hol.proof (term_15 A).

(; Theorem: |- (Data.Bool.! \lambda h. (Data.Bool.! \lambda t. (Data.Bool.~ (Data.List.null ((Data.List.:: h) t))))) ;)

def type_12 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_1 A) (type_0 A).

(; Constant Data.List.head ;)

def Data_2EList_2Ehead : A : hol.type -> hol.term (type_12 A) :=
  A : hol.type => list_2Ddest_2D1_2E50 (type_12 A).

def term_16 : A : hol.type -> hol.term (type_12 A) :=
  A : hol.type => Data_2EList_2Ehead (type_0 A).

def term_17 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_10 A (h_1 : hol.term (type_0 A) => term_3 A (t_2 : hol.term (type_1 A) => hol.eq (type_0 A) (term_16 A (term_14 A t_2 h_1)) (term_12 A h_1))).

(; axiom ;)

thm_4 : A : hol.type -> hol.proof (term_17 A).

(; Theorem: |- (Data.Bool.! \lambda h. (Data.Bool.! \lambda t. ((= (Data.List.head ((Data.List.:: h) t))) h))) ;)

(; Constant Data.List.tail ;)

def Data_2EList_2Etail : A : hol.type -> hol.term (type_9 A) :=
  A : hol.type => list_2Ddest_2D1_2E50 (type_9 A).

def term_18 : A : hol.type -> hol.term (type_9 A) :=
  A : hol.type => Data_2EList_2Etail (type_0 A).

def term_19 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_10 A (h_1 : hol.term (type_0 A) => term_3 A (t_2 : hol.term (type_1 A) => term_6 A (term_18 A (term_14 A t_2 h_1)) (term_13 A t_2))).

(; axiom ;)

thm_5 : A : hol.type -> hol.proof (term_19 A).

(; Theorem: |- (Data.Bool.! \lambda h. (Data.Bool.! \lambda t. ((= (Data.List.tail ((Data.List.:: h) t))) t))) ;)

def type_13 : hol.type -> hol.type :=
  B : hol.type => hol.arr (type_6 B) type_2.

def term_20 : B : hol.type -> hol.term (hol.arr (type_13 B) type_2) :=
  B : hol.type => Data_2EBool_2E_21 (hol.arr (type_13 B) type_2).

def term_21 : B : hol.type -> A : hol.type -> hol.term (hol.arr (hol.arr (type_7 B A) type_2) type_2) :=
  B : hol.type => A : hol.type => Data_2EBool_2E_21 (hol.arr (hol.arr (type_7 B A) type_2) type_2).

def term_22 : B : hol.type -> hol.term (hol.arr (type_6 B) (type_13 B)) :=
  B : hol.type => hol.eq (type_6 B).

def term_23 : B : hol.type -> b_1 : hol.term (type_6 B) -> hol.term (type_6 B) :=
  B : hol.type => b_1 : hol.term (type_6 B) => b_1.

def term_24 : B : hol.type -> A : hol.type -> f_1 : hol.term (type_7 B A) -> hol.term (type_7 B A) :=
  B : hol.type => A : hol.type => f_1 : hol.term (type_7 B A) => f_1.

def term_25 : A : hol.type -> B : hol.type -> f_1 : hol.term (type_7 B A) -> b_2 : hol.term (type_6 B) -> hol.term (hol.arr (type_1 A) (type_6 B)) :=
  A : hol.type => B : hol.type => f_1 : hol.term (type_7 B A) => b_2 : hol.term (type_6 B) => Data_2EList_2Ecase_2E_5B_5D_2E_3A_3A (type_0 A) (type_6 B) (term_23 B b_2) (term_24 B A f_1).

def term_26 : A : hol.type -> B : hol.type -> hol.term type_2 :=
  A : hol.type => B : hol.type => term_20 B (b_1 : hol.term (type_6 B) => term_21 B A (f_2 : hol.term (type_7 B A) => term_22 B (term_25 A B f_2 b_1 (term_1 A)) (term_23 B b_1))).

(; axiom ;)

thm_6 : A : hol.type -> B : hol.type -> hol.proof (term_26 A B).

(; Theorem: |- (Data.Bool.! \lambda b. (Data.Bool.! \lambda f. ((= (((Data.List.case.[].:: b) f) Data.List.[])) b))) ;)

(; Constant Data.Bool.==> ;)

Data_2EBool_2E_3D_3D_3E : A : hol.type -> hol.term (type_0 A).

def term_27 : A : hol.type -> hol.term type_2 :=
  A : hol.type => term_3 A (l_1 : hol.term (type_1 A) => Data_2EBool_2E_3D_3D_3E type_5 (term_11 (term_5 A l_1)) (term_6 A (term_8 A (term_16 A (term_4 A l_1)) (term_18 A (term_4 A l_1))) (term_4 A l_1))).

(; axiom ;)

thm_7 : A : hol.type -> hol.proof (term_27 A).

(; Theorem: |- (Data.Bool.! \lambda l. ((Data.Bool.==> (Data.Bool.~ (Data.List.null l))) ((= ((Data.List.:: (Data.List.head l)) (Data.List.tail l))) l))) ;)

def term_28 : A : hol.type -> B : hol.type -> hol.term type_2 :=
  A : hol.type => B : hol.type => term_20 B (b_1 : hol.term (type_6 B) => term_21 B A (f_2 : hol.term (type_7 B A) => term_10 A (h_3 : hol.term (type_0 A) => term_3 A (t_4 : hol.term (type_1 A) => term_22 B (term_25 A B f_2 b_1 (term_14 A t_4 h_3)) (term_24 B A f_2 (term_12 A h_3) (term_13 A t_4)))))).

(; axiom ;)

thm_8 : A : hol.type -> B : hol.type -> hol.proof (term_28 A B).

(; Theorem: |- (Data.Bool.! \lambda b. (Data.Bool.! \lambda f. (Data.Bool.! \lambda h. (Data.Bool.! \lambda t. ((= (((Data.List.case.[].:: b) f) ((Data.List.:: h) t))) ((f h) t)))))) ;)


(; This file is a proof of [x = y -> f x = f y] that could have been generated by Holide. ;)

(; 'a ;)
def type_0 : hol.type -> hol.type :=
  A : hol.type => A.

(; 'b ;)
def type_1 : hol.type -> hol.type :=
  B : hol.type => B.

(; 'a -> 'b ;)
def type_2 : hol.type -> hol.type -> hol.type :=
  A : hol.type => B : hol.type => hol.arr (type_0 A) (type_1 B).

(; x : 'a ;)
def term_0 : A : hol.type -> x : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => x : hol.term (type_0 A) => x.

(; y : 'a ;)
def term_1 : A : hol.type -> y : hol.term (type_0 A) -> hol.term (type_0 A) :=
  A : hol.type => y : hol.term (type_0 A) => y.

(; f : 'a -> 'b ;)
def term_2 : A : hol.type -> B : hol.type -> f : hol.term (type_2 A B) -> hol.term (type_2 A B) :=
  A : hol.type => B : hol.type => f : hol.term (type_2 A B) => f.

(; thm : x = y -> f x = f y ;)
thm thm_eq :
  A : hol.type -> B : hol.type ->
  x : hol.term (type_0 A) -> y : hol.term (type_0 A) ->
  f : hol.term (type_2 A B) ->
  hol.proof (hol.imp (hol.eq (type_0 A) (term_0 A x) (term_1 A y))
                     (hol.eq (type_1 B) ((term_2 A B f) (term_0 A x)) ((term_2 A B f) (term_1 A y)))
            ) :=
  A : hol.type => B : hol.type =>
  x : hol.term (type_0 A) => y : hol.term (type_0 A) =>
  f : hol.term (type_2 A B) =>
  H : hol.proof (hol.eq (type_0 A) (term_0 A x) (term_1 A y)) =>
  hol.APP_THM A B f f x y (hol.REFL (arr A B) f) H.

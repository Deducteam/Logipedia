include "basics/pts.ma".
include "bigops.ma".
include "bool.ma".
include "cong.ma".
include "connectives.ma".
include "div_mod.ma".
include "exp.ma".
include "fact.ma".
include "gcd.ma".
include "logic.ma".
include "nat.ma".
include "permutation.ma".
include "primes.ma".
include "sigma_pi.ma".
definition prime_to_not_divides_fact : \forall (p:(nat) ). (((prime) ) (p)) -> \forall (n:(nat) ). ((((lt) ) (n)) (p)) -> ((Not) ) ((((divides) ) (p)) (((fact) ) (n))) := \lambda p : (nat) . \lambda primep : ((prime) ) (p). (\lambda n : (nat) . ((((nat_ind) (\lambda j_x_365 : (nat) . ((((lt) ) (j_x_365)) (p)) -> ((Not) ) ((((divides) ) (p)) (((fact) ) (j_x_365))))) ((((sym_eq_fact) ((O) )) (\lambda y : (nat) . ((((lt) ) ((O) )) (p)) -> ((Not) ) ((((divides) ) (p)) (y)))) (((((sym_eq_filter_nat_type_O) ((nat) )) ((fact_body) )) (\lambda y : (nat) . ((((lt) ) ((O) )) (p)) -> ((Not) ) ((((divides) ) (p)) (y)))) (((sym_eq_fact_body_O) (\lambda y : (nat) . ((((lt) ) ((O) )) (p)) -> ((Not) ) ((((divides) ) (p)) (y)))) (\lambda j__ : (((le) ) (((S) ) ((O) ))) (p). (((nmk) ((((divides) ) (p)) (((S) ) ((O) )))) (\lambda divp : (((divides) ) (p)) (((S) ) ((O) )). ((((absurd) ((((le) ) (p)) (((S) ) ((O) )))) (((((divides_to_le) (p)) (((S) ) ((O) ))) ((lt_O_S) ((O) ))) (divp))) ((((lt_to_not_le) (((S) ) ((O) ))) (p)) (((prime_to_lt_SO) (p)) (primep))))))))))) (\lambda n1 : (nat) . (((sym_eq_fact) (((S) ) (n1))) (\lambda y : (nat) . (((((lt) ) (n1)) (p)) -> ((Not) ) ((((divides) ) (p)) (((fact) ) (n1)))) -> ((((lt) ) (((S) ) (n1))) (p)) -> ((Not) ) ((((divides) ) (p)) (y)))) ((((((sym_eq_filter_nat_type_S) ((nat) )) ((fact_body) )) (n1)) (\lambda y : (nat) . (((((lt) ) (n1)) (p)) -> ((Not) ) ((((divides) ) (p)) (((fact) ) (n1)))) -> ((((lt) ) (((S) ) (n1))) (p)) -> ((Not) ) ((((divides) ) (p)) (y)))) ((((sym_eq_fact_body_S) (n1)) (\lambda y : (nat) . (((((lt) ) (n1)) (p)) -> ((Not) ) ((((divides) ) (p)) (((fact) ) (n1)))) -> ((((lt) ) (((S) ) (n1))) (p)) -> ((Not) ) ((((divides) ) (p)) (y)))) (\lambda Hind : ((((lt) ) (n1)) (p)) -> ((Not) ) ((((divides) ) (p)) (((fact) ) (n1))). (\lambda ltn1 : (((lt) ) (((S) ) (n1))) (p). (((nmk) ((((divides) ) (p)) ((((times) ) (((fact) ) (n1))) (((S) ) (n1))))) (\lambda Hdiv : (((divides) ) (p)) ((((times) ) (((fact) ) (n1))) (((S) ) (n1))). (((((((match_Or_prop) ((((divides) ) (p)) (((fact) ) (n1)))) ((((divides) ) (p)) (((S) ) (n1)))) ((False) )) (\lambda Hdiv0 : (((divides) ) (p)) (((fact) ) (n1)). ((((absurd) ((((divides) ) (p)) (((fact) ) (n1)))) (Hdiv0)) ((Hind) ((((lt_to_le) (((S) ) (n1))) (p)) (ltn1)))))) (\lambda Hdiv0 : (((divides) ) (p)) (((S) ) (n1)). ((((absurd) ((((le) ) (p)) (((S) ) (n1)))) (((((divides_to_le) (p)) (((S) ) (n1))) ((lt_O_S) (n1))) (Hdiv0))) ((((lt_to_not_le) (((S) ) (n1))) (p)) (ltn1))))) ((((((divides_times_to_divides) (p)) (((fact) ) (n1))) (((S) ) (n1))) (primep)) (Hdiv))))))))))) (n)).
definition permut_mod : \forall (p:(nat) ). \forall (a:(nat) ). (((prime) ) (p)) -> (((Not) ) ((((divides) ) (p)) (a))) -> (((permut) ) (\lambda n : (nat) . (((mod) ) ((((times) ) (a)) (n))) (p))) (((pred) ) (p)) := \lambda p : (nat) . \lambda a : (nat) . \lambda primep : ((prime) ) (p). (\lambda ndiv : ((Not) ) ((((divides) ) (p)) (a)). (((((conj) (\forall (x:(nat) ). ((((le) ) (x)) (((pred) ) (p))) -> (((le) ) ((((mod) ) ((((times) ) (a)) (x))) (p))) (((pred) ) (p)))) ((((injn) ) (\lambda n : (nat) . (((mod) ) ((((times) ) (a)) (n))) (p))) (((pred) ) (p)))) (\lambda i : (nat) . \lambda lei : (((le) ) (i)) (((pred) ) (p)). ((((le_S_S_to_le) ((((mod) ) ((((times) ) (a)) (i))) (p))) (((pred) ) (p))) ((((((transitive_le) (((S) ) ((((mod) ) ((((times) ) (a)) (i))) (p)))) (p)) (((S) ) (((pred) ) (p)))) ((((lt_mod_m_m) ((((times) ) (a)) (i))) (p)) (((prime_to_lt_O) (p)) (primep)))) (((((((eq_ind_r) ((nat) )) (p)) (\lambda x : (nat) . (((le) ) (p)) (x))) ((le_n) (p))) (((S) ) (((pred) ) (p)))) (((S_pred) (p)) (((prime_to_lt_O) (p)) (primep)))))))) (\lambda i : (nat) . \lambda j : (nat) . \lambda lei : (((le) ) (i)) (((pred) ) (p)). (\lambda lej : (((le) ) (j)) (((pred) ) (p)). (\lambda H : (((eq) ((nat) )) ((((mod) ) ((((times) ) (a)) (i))) (p))) ((((mod) ) ((((times) ) (a)) (j))) (p)). (((((((match_Or_prop) ((((lt) ) (i)) (j))) (((Not) ) ((((lt) ) (i)) (j)))) ((((eq) ((nat) )) (i)) (j))) (\lambda ltij : (((lt) ) (i)) (j). (((falsity) ((((eq) ((nat) )) (i)) (j))) ((((absurd) ((((lt) ) ((((minus) ) (j)) (i))) (p))) (((((((eq_ind) ((nat) )) (((S) ) (((pred) ) (p)))) (\lambda x_1 : (nat) . (((lt) ) ((((minus) ) (j)) (i))) (x_1))) ((((le_S_S) ((((minus) ) (j)) (i))) (((pred) ) (p))) (((((le_plus_to_minus) (j)) (i)) (((pred) ) (p))) ((((((transitive_le) (j)) (((pred) ) (p))) ((((plus) ) (((pred) ) (p))) (i))) (lej)) (((le_plus_n_r) (i)) (((pred) ) (p))))))) (p)) (((S_pred) (p)) (((prime_to_lt_O) (p)) (primep))))) ((((le_to_not_lt) (p)) ((((minus) ) (j)) (i))) (((((divides_to_le) (p)) ((((minus) ) (j)) (i))) (((((lt_plus_to_minus_r) ((O) )) (i)) (j)) ((((sym_eq_plus) ((O) )) (\lambda y : ((nat) ) -> (nat) . (((le) ) (((S) ) ((y) (i)))) (j))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((plus_body) )) (\lambda y : ((nat) ) -> (nat) . (((le) ) (((S) ) ((y) (i)))) (j))) (((sym_eq_plus_body_O) (\lambda y : ((nat) ) -> (nat) . (((le) ) (((S) ) ((y) (i)))) (j))) (ltij)))))) (((((((match_Or_prop) ((((divides) ) (p)) (a))) ((((divides) ) (p)) ((((minus) ) (j)) (i)))) ((((divides) ) (p)) ((((minus) ) (j)) (i)))) (\lambda Hdiv : (((divides) ) (p)) (a). (((falsity) ((((divides) ) (p)) ((((minus) ) (j)) (i)))) ((((absurd) ((((divides) ) (p)) (a))) (Hdiv)) (ndiv))))) (\lambda auto : (((divides) ) (p)) ((((minus) ) (j)) (i)). (auto))) ((((((divides_times_to_divides) (p)) (a)) ((((minus) ) (j)) (i))) (primep)) (((((((eq_ind_r) ((nat) )) ((((minus) ) ((((times) ) (a)) (j))) ((((times) ) (a)) (i)))) (\lambda x : (nat) . (((divides) ) (p)) (x))) ((((((eq_mod_to_divides) ((((times) ) (a)) (j))) ((((times) ) (a)) (i))) (p)) (((prime_to_lt_O) (p)) (primep))) (((((((rewrite_l) ((nat) )) ((((mod) ) ((((times) ) (a)) (i))) (p))) (\lambda j__ : (nat) . (((eq) ((nat) )) (j__)) ((((mod) ) ((((times) ) (a)) (i))) (p)))) (((refl) ((nat) )) ((((mod) ) ((((times) ) (a)) (i))) (p)))) ((((mod) ) ((((times) ) (a)) (j))) (p))) (H)))) ((((times) ) (a)) ((((minus) ) (j)) (i)))) ((((distributive_times_minus) (a)) (j)) (i))))))))))) (\lambda Hij : ((Not) ) ((((lt) ) (i)) (j)). (((((((match_Or_prop) ((((lt) ) (j)) (i))) ((((eq) ((nat) )) (j)) (i))) ((((eq) ((nat) )) (i)) (j))) (\lambda Hij0 : (((lt) ) (j)) (i). (((falsity) ((((eq) ((nat) )) (i)) (j))) ((((absurd) ((((lt) ) ((((minus) ) (i)) (j))) (p))) (((((((eq_ind) ((nat) )) (((S) ) (((pred) ) (p)))) (\lambda x_1 : (nat) . (((lt) ) ((((minus) ) (i)) (j))) (x_1))) ((((le_S_S) ((((minus) ) (i)) (j))) (((pred) ) (p))) (((((le_plus_to_minus) (i)) (j)) (((pred) ) (p))) ((((((transitive_le) (i)) (((pred) ) (p))) ((((plus) ) (((pred) ) (p))) (j))) (lei)) (((le_plus_n_r) (j)) (((pred) ) (p))))))) (p)) (((S_pred) (p)) (((prime_to_lt_O) (p)) (primep))))) ((((le_to_not_lt) (p)) ((((minus) ) (i)) (j))) (((((divides_to_le) (p)) ((((minus) ) (i)) (j))) (((((lt_plus_to_minus_r) ((O) )) (j)) (i)) ((((sym_eq_plus) ((O) )) (\lambda y : ((nat) ) -> (nat) . (((le) ) (((S) ) ((y) (j)))) (i))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((plus_body) )) (\lambda y : ((nat) ) -> (nat) . (((le) ) (((S) ) ((y) (j)))) (i))) (((sym_eq_plus_body_O) (\lambda y : ((nat) ) -> (nat) . (((le) ) (((S) ) ((y) (j)))) (i))) (Hij0)))))) (((((((match_Or_prop) ((((divides) ) (p)) (a))) ((((divides) ) (p)) ((((minus) ) (i)) (j)))) ((((divides) ) (p)) ((((minus) ) (i)) (j)))) (\lambda Hdiv : (((divides) ) (p)) (a). (((falsity) ((((divides) ) (p)) ((((minus) ) (i)) (j)))) ((((absurd) ((((divides) ) (p)) (a))) (Hdiv)) (ndiv))))) (\lambda auto : (((divides) ) (p)) ((((minus) ) (i)) (j)). (auto))) ((((((divides_times_to_divides) (p)) (a)) ((((minus) ) (i)) (j))) (primep)) (((((((eq_ind_r) ((nat) )) ((((minus) ) ((((times) ) (a)) (i))) ((((times) ) (a)) (j)))) (\lambda x : (nat) . (((divides) ) (p)) (x))) ((((((eq_mod_to_divides) ((((times) ) (a)) (i))) ((((times) ) (a)) (j))) (p)) (((prime_to_lt_O) (p)) (primep))) (((((((rewrite_l) ((nat) )) ((((mod) ) ((((times) ) (a)) (i))) (p))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((((mod) ) ((((times) ) (a)) (i))) (p))) (j__))) (((refl) ((nat) )) ((((mod) ) ((((times) ) (a)) (i))) (p)))) ((((mod) ) ((((times) ) (a)) (j))) (p))) (H)))) ((((times) ) (a)) ((((minus) ) (i)) (j)))) ((((distributive_times_minus) (a)) (i)) (j))))))))))) (\lambda Hij0 : (((eq) ((nat) )) (j)) (i). (((((((rewrite_r) ((nat) )) (i)) (\lambda j__ : (nat) . (((eq) ((nat) )) (i)) (j__))) (((refl) ((nat) )) (i))) (j)) (Hij0)))) ((((le_to_or_lt_eq) (j)) (i)) ((((not_lt_to_le) (i)) (j)) (Hij)))))) (((decidable_lt) (i)) (j)))))))).
definition eq_fact_pi_p : \forall (n:(nat) ). (((eq) ((nat) )) (((fact) ) (n))) (((((((bigop) ((nat) )) ((((minus) ) (((S) ) (n))) (((S) ) ((O) )))) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((plus) ) (i)) (((S) ) ((O) )))) := \lambda n : (nat) . ((((nat_ind) (\lambda j_x_365 : (nat) . (((eq) ((nat) )) (((fact) ) (j_x_365))) (((((((bigop) ((nat) )) ((((minus) ) (((S) ) (j_x_365))) (((S) ) ((O) )))) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((plus) ) (i)) (((S) ) ((O) )))))) ((((sym_eq_minus) (((S) ) ((O) ))) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) (((fact) ) ((O) ))) (((((((bigop) ((nat) )) ((y) (((S) ) ((O) )))) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((plus) ) (i)) (((S) ) ((O) )))))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((minus_body) )) ((O) )) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) (((fact) ) ((O) ))) (((((((bigop) ((nat) )) ((y) (((S) ) ((O) )))) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((plus) ) (i)) (((S) ) ((O) )))))) ((((sym_eq_minus_body_S) ((O) )) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) (((fact) ) ((O) ))) (((((((bigop) ((nat) )) ((y) (((S) ) ((O) )))) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((plus) ) (i)) (((S) ) ((O) )))))) (((((((sym_eq_match_nat_type_S) ((nat) )) (((S) ) ((O) ))) (\lambda q : (nat) . (((minus) ) ((O) )) (q))) ((O) )) (\lambda y : (nat) . (((eq) ((nat) )) (((fact) ) ((O) ))) (((((((bigop) ((nat) )) (y)) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((plus) ) (i)) (((S) ) ((O) )))))) ((((sym_eq_minus) ((O) )) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) (((fact) ) ((O) ))) (((((((bigop) ((nat) )) ((y) ((O) ))) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((plus) ) (i)) (((S) ) ((O) )))))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((minus_body) )) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) (((fact) ) ((O) ))) (((((((bigop) ((nat) )) ((y) ((O) ))) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((plus) ) (i)) (((S) ) ((O) )))))) (((sym_eq_minus_body_O) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) (((fact) ) ((O) ))) (((((((bigop) ((nat) )) ((y) ((O) ))) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((plus) ) (i)) (((S) ) ((O) )))))) ((((sym_eq_bigop_O) ((nat) )) (\lambda y : (((nat) ) -> (bool) ) -> ((nat) ) -> (((nat) ) -> ((nat) ) -> (nat) ) -> (((nat) ) -> (nat) ) -> (nat) . (((eq) ((nat) )) (((fact) ) ((O) ))) (((((y) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((plus) ) (i)) (((S) ) ((O) )))))) ((((sym_eq_bigop_body_O) ((nat) )) (\lambda y : (((nat) ) -> (bool) ) -> ((nat) ) -> (((nat) ) -> ((nat) ) -> (nat) ) -> (((nat) ) -> (nat) ) -> (nat) . (((eq) ((nat) )) (((fact) ) ((O) ))) (((((y) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((plus) ) (i)) (((S) ) ((O) )))))) (((eq_fact_body_O) (\lambda y : (nat) . (((eq) ((nat) )) (((fact) ) ((O) ))) (y))) (((((eq_filter_nat_type_O) ((nat) )) ((fact_body) )) (\lambda y : (nat) . (((eq) ((nat) )) (((fact) ) ((O) ))) (y))) ((((eq_fact) ((O) )) (\lambda y : (nat) . (((eq) ((nat) )) (((fact) ) ((O) ))) (y))) (((refl) ((nat) )) (((fact) ) ((O) )))))))))))))))) (\lambda n1 : (nat) . (((sym_eq_fact) (((S) ) (n1))) (\lambda y : (nat) . ((((eq) ((nat) )) (((fact) ) (n1))) (((((((bigop) ((nat) )) ((((minus) ) (((S) ) (n1))) (((S) ) ((O) )))) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((plus) ) (i)) (((S) ) ((O) ))))) -> (((eq) ((nat) )) (y)) (((((((bigop) ((nat) )) ((((minus) ) (((S) ) (((S) ) (n1)))) (((S) ) ((O) )))) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((plus) ) (i)) (((S) ) ((O) )))))) ((((((sym_eq_filter_nat_type_S) ((nat) )) ((fact_body) )) (n1)) (\lambda y : (nat) . ((((eq) ((nat) )) (((fact) ) (n1))) (((((((bigop) ((nat) )) ((((minus) ) (((S) ) (n1))) (((S) ) ((O) )))) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((plus) ) (i)) (((S) ) ((O) ))))) -> (((eq) ((nat) )) (y)) (((((((bigop) ((nat) )) ((((minus) ) (((S) ) (((S) ) (n1)))) (((S) ) ((O) )))) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((plus) ) (i)) (((S) ) ((O) )))))) ((((sym_eq_fact_body_S) (n1)) (\lambda y : (nat) . ((((eq) ((nat) )) (((fact) ) (n1))) (((((((bigop) ((nat) )) ((((minus) ) (((S) ) (n1))) (((S) ) ((O) )))) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((plus) ) (i)) (((S) ) ((O) ))))) -> (((eq) ((nat) )) (y)) (((((((bigop) ((nat) )) ((((minus) ) (((S) ) (((S) ) (n1)))) (((S) ) ((O) )))) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((plus) ) (i)) (((S) ) ((O) )))))) (\lambda Hind : (((eq) ((nat) )) (((fact) ) (n1))) (((((((bigop) ((nat) )) ((((minus) ) (((S) ) (n1))) (((S) ) ((O) )))) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((plus) ) (i)) (((S) ) ((O) )))). (((((((eq_ind_r) ((nat) )) ((((times) ) (((S) ) (n1))) (((fact) ) (n1)))) (\lambda x : (nat) . (((eq) ((nat) )) (x)) (((((((bigop) ((nat) )) ((((minus) ) (((S) ) (((S) ) (n1)))) (((S) ) ((O) )))) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((plus) ) (i)) (((S) ) ((O) )))))) ((((sym_eq_minus) (((S) ) (((S) ) (n1)))) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((times) ) (((S) ) (n1))) (((fact) ) (n1)))) (((((((bigop) ((nat) )) ((y) (((S) ) ((O) )))) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((plus) ) (i)) (((S) ) ((O) )))))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((minus_body) )) (((S) ) (n1))) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((times) ) (((S) ) (n1))) (((fact) ) (n1)))) (((((((bigop) ((nat) )) ((y) (((S) ) ((O) )))) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((plus) ) (i)) (((S) ) ((O) )))))) ((((sym_eq_minus_body_S) (((S) ) (n1))) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((times) ) (((S) ) (n1))) (((fact) ) (n1)))) (((((((bigop) ((nat) )) ((y) (((S) ) ((O) )))) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((plus) ) (i)) (((S) ) ((O) )))))) (((((((sym_eq_match_nat_type_S) ((nat) )) (((S) ) (((S) ) (n1)))) (\lambda q : (nat) . (((minus) ) (((S) ) (n1))) (q))) ((O) )) (\lambda y : (nat) . (((eq) ((nat) )) ((((times) ) (((S) ) (n1))) (((fact) ) (n1)))) (((((((bigop) ((nat) )) (y)) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((plus) ) (i)) (((S) ) ((O) )))))) ((((sym_eq_minus) (((S) ) (n1))) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((times) ) (((S) ) (n1))) (((fact) ) (n1)))) (((((((bigop) ((nat) )) ((y) ((O) ))) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((plus) ) (i)) (((S) ) ((O) )))))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((minus_body) )) (n1)) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((times) ) (((S) ) (n1))) (((fact) ) (n1)))) (((((((bigop) ((nat) )) ((y) ((O) ))) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((plus) ) (i)) (((S) ) ((O) )))))) ((((sym_eq_minus_body_S) (n1)) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((times) ) (((S) ) (n1))) (((fact) ) (n1)))) (((((((bigop) ((nat) )) ((y) ((O) ))) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((plus) ) (i)) (((S) ) ((O) )))))) ((((((sym_eq_match_nat_type_O) ((nat) )) (((S) ) (n1))) (\lambda q : (nat) . (((minus) ) (n1)) (q))) (\lambda y : (nat) . (((eq) ((nat) )) ((((times) ) (((S) ) (n1))) (((fact) ) (n1)))) (((((((bigop) ((nat) )) (y)) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((plus) ) (i)) (((S) ) ((O) )))))) (((((((eq_ind_r) ((nat) )) ((((times) ) ((((plus) ) (n1)) (((S) ) ((O) )))) (((((((bigop) ((nat) )) (n1)) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((plus) ) (i)) (((S) ) ((O) )))))) (\lambda x : (nat) . (((eq) ((nat) )) ((((times) ) (((S) ) (n1))) (((fact) ) (n1)))) (x))) (((((((eq_ind) ((nat) )) (((S) ) ((((plus) ) (n1)) ((O) )))) (\lambda x_1 : (nat) . (((eq) ((nat) )) ((((times) ) (((S) ) (n1))) (((fact) ) (n1)))) ((((times) ) (x_1)) (((((((bigop) ((nat) )) (n1)) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((plus) ) (i)) (((S) ) ((O) ))))))) (((((((eq_ind) ((nat) )) (n1)) (\lambda x_1 : (nat) . (((eq) ((nat) )) ((((times) ) (((S) ) (n1))) (((fact) ) (n1)))) ((((times) ) (((S) ) (x_1))) (((((((bigop) ((nat) )) (n1)) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((plus) ) (i)) (((S) ) ((O) ))))))) (((((((eq_f) ((nat) )) ((nat) )) (((times) ) (((S) ) (n1)))) (((fact) ) (n1))) (((((((bigop) ((nat) )) (n1)) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((plus) ) (i)) (((S) ) ((O) ))))) (((((((eq_ind) ((nat) )) ((((minus) ) (((S) ) (n1))) (((S) ) ((O) )))) (\lambda x_1 : (nat) . (((eq) ((nat) )) (((fact) ) (n1))) (((((((bigop) ((nat) )) (x_1)) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((plus) ) (i)) (((S) ) ((O) )))))) (Hind)) (n1)) ((((sym_eq_minus) (((S) ) (n1))) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((y) (((S) ) ((O) )))) (n1))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((minus_body) )) (n1)) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((y) (((S) ) ((O) )))) (n1))) ((((sym_eq_minus_body_S) (n1)) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((y) (((S) ) ((O) )))) (n1))) (((((((sym_eq_match_nat_type_S) ((nat) )) (((S) ) (n1))) (\lambda q : (nat) . (((minus) ) (n1)) (q))) ((O) )) (\lambda y : (nat) . (((eq) ((nat) )) (y)) (n1))) (((((((rewrite_l) ((nat) )) (n1)) (\lambda j__ : (nat) . (((eq) ((nat) )) (j__)) (n1))) (((refl) ((nat) )) (n1))) ((((minus) ) (n1)) ((O) ))) ((minus_n_O) (n1)))))))))) ((((plus) ) (n1)) ((O) ))) ((plus_n_O) (n1)))) ((((plus) ) (n1)) (((S) ) ((O) )))) (((plus_n_Sm) (n1)) ((O) )))) (((((((bigop) ((nat) )) (((S) ) (n1))) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((plus) ) (i)) (((S) ) ((O) ))))) ((((((((bigop_Strue) ((nat) )) (n1)) (\lambda j__ : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda j__ : (nat) . (((plus) ) (j__)) (((S) ) ((O) )))) (((refl) ((bool) )) ((true) ))))))))))))) ((((times) ) (((fact) ) (n1))) (((S) ) (n1)))) (((commutative_times) (((fact) ) (n1))) (((S) ) (n1))))))))) (n).
definition congruent_pi : \forall (f:((nat) ) -> (nat) ). \forall (n:(nat) ). \forall (p:(nat) ). ((((lt) ) ((O) )) (p)) -> ((((congruent) ) (((((((bigop) ((nat) )) (n)) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) (i)))) (((((((bigop) ((nat) )) (n)) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((mod) ) ((f) (i))) (p)))) (p) := \lambda f : ((nat) ) -> (nat) . \lambda n : (nat) . ((((nat_ind) (\lambda j_x_365 : (nat) . \forall (p:(nat) ). ((((lt) ) ((O) )) (p)) -> ((((congruent) ) (((((((bigop) ((nat) )) (j_x_365)) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) (i)))) (((((((bigop) ((nat) )) (j_x_365)) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((mod) ) ((f) (i))) (p)))) (p))) (\lambda p : (nat) . (((sym_eq_bigop_O) ((nat) )) (\lambda y : (((nat) ) -> (bool) ) -> ((nat) ) -> (((nat) ) -> ((nat) ) -> (nat) ) -> (((nat) ) -> (nat) ) -> (nat) . ((((lt) ) ((O) )) (p)) -> ((((congruent) ) (((((((bigop) ((nat) )) ((O) )) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) (i)))) (((((y) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((mod) ) ((f) (i))) (p)))) (p))) ((((sym_eq_bigop_body_O) ((nat) )) (\lambda y : (((nat) ) -> (bool) ) -> ((nat) ) -> (((nat) ) -> ((nat) ) -> (nat) ) -> (((nat) ) -> (nat) ) -> (nat) . ((((lt) ) ((O) )) (p)) -> ((((congruent) ) (((((((bigop) ((nat) )) ((O) )) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) (i)))) (((((y) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((mod) ) ((f) (i))) (p)))) (p))) ((((eq_bigop_body_O) ((nat) )) (\lambda y : (((nat) ) -> (bool) ) -> ((nat) ) -> (((nat) ) -> ((nat) ) -> (nat) ) -> (((nat) ) -> (nat) ) -> (nat) . ((((lt) ) ((O) )) (p)) -> ((((congruent) ) (((((((bigop) ((nat) )) ((O) )) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) (i)))) (((((y) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) (i)))) (p))) ((((eq_bigop_O) ((nat) )) (\lambda y : (((nat) ) -> (bool) ) -> ((nat) ) -> (((nat) ) -> ((nat) ) -> (nat) ) -> (((nat) ) -> (nat) ) -> (nat) . ((((lt) ) ((O) )) (p)) -> ((((congruent) ) (((((((bigop) ((nat) )) ((O) )) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) (i)))) (((((y) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) (i)))) (p))) (\lambda auto : (((lt) ) ((O) )) (p). (((congruent_n_n) (((((((bigop) ((nat) )) ((O) )) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) (i)))) (p)))))))) (\lambda n1 : (nat) . \lambda Hind : \forall (p:(nat) ). ((((lt) ) ((O) )) (p)) -> ((((congruent) ) (((((((bigop) ((nat) )) (n1)) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) (i)))) (((((((bigop) ((nat) )) (n1)) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((mod) ) ((f) (i))) (p)))) (p). (\lambda p : (nat) . \lambda posp : (((lt) ) ((O) )) (p). (((((((eq_ind_r) ((nat) )) ((((times) ) ((f) (n1))) (((((((bigop) ((nat) )) (n1)) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) (i))))) (\lambda x : (nat) . ((((congruent) ) (x)) (((((((bigop) ((nat) )) (((S) ) (n1))) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((mod) ) ((f) (i))) (p)))) (p))) (((((sym_eq_bigop_S) ((nat) )) (n1)) (\lambda y : (((nat) ) -> (bool) ) -> ((nat) ) -> (((nat) ) -> ((nat) ) -> (nat) ) -> (((nat) ) -> (nat) ) -> (nat) . ((((congruent) ) ((((times) ) ((f) (n1))) (((((((bigop) ((nat) )) (n1)) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) (i))))) (((((y) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((mod) ) ((f) (i))) (p)))) (p))) (((((sym_eq_bigop_body_S) ((nat) )) (n1)) (\lambda y : (((nat) ) -> (bool) ) -> ((nat) ) -> (((nat) ) -> ((nat) ) -> (nat) ) -> (((nat) ) -> (nat) ) -> (nat) . ((((congruent) ) ((((times) ) ((f) (n1))) (((((((bigop) ((nat) )) (n1)) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) (i))))) (((((y) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((mod) ) ((f) (i))) (p)))) (p))) ((((((sym_eq_match_bool_type_true) ((nat) )) ((((times) ) ((((mod) ) ((f) (n1))) (p))) (((((((bigop) ((nat) )) (n1)) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((mod) ) ((f) (i))) (p))))) (((((((bigop) ((nat) )) (n1)) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((mod) ) ((f) (i))) (p)))) (\lambda y : (nat) . ((((congruent) ) ((((times) ) ((f) (n1))) (((((((bigop) ((nat) )) (n1)) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) (i))))) (y)) (p))) (((((((((congruent_times) ((f) (n1))) (((((((bigop) ((nat) )) (n1)) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) (i)))) ((((mod) ) ((f) (n1))) (p))) (((((((bigop) ((nat) )) (n1)) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((mod) ) ((f) (i))) (p)))) (p)) (posp)) ((((congruent_n_mod_n) ((f) (n1))) (p)) (posp))) (((Hind) (p)) (posp))))))) (((((((bigop) ((nat) )) (((S) ) (n1))) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (f) (i)))) ((((((((bigop_Strue) ((nat) )) (n1)) (\lambda j__ : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (f)) (((refl) ((bool) )) ((true) ))))))) (n).
definition congruent_exp_pred_SO : \forall (p:(nat) ). \forall (a:(nat) ). (((prime) ) (p)) -> (((Not) ) ((((divides) ) (p)) (a))) -> ((((congruent) ) ((((exp) ) (a)) (((pred) ) (p)))) (((S) ) ((O) ))) (p) := \lambda p : (nat) . \lambda a : (nat) . \lambda primep : ((prime) ) (p). (\lambda ndiv : ((Not) ) ((((divides) ) (p)) (a)). (((((((divides_to_congruent) ((((exp) ) (a)) (((pred) ) (p)))) (((S) ) ((O) ))) (p)) (((prime_to_lt_O) (p)) (primep))) ((((lt_O_exp) (a)) (((pred) ) (p))) ((((((match_nat_prop) (\lambda j__ : (nat) . (((Not) ) ((((divides) ) (p)) (j__))) -> (((lt) ) ((O) )) (j__))) (\lambda j_clearme : ((Not) ) ((((divides) ) (p)) ((O) )). (((((Not_ind) ((((divides) ) (p)) ((O) ))) ((((lt) ) ((O) )) ((O) ))) (\lambda div0 : ((((divides) ) (p)) ((O) )) -> (False) . (((falsity) ((((lt) ) ((O) )) ((O) ))) ((div0) (((((quotient) (p)) ((O) )) ((O) )) (((((((rewrite_l) ((nat) )) ((O) )) (\lambda j__ : (nat) . (((eq) ((nat) )) ((O) )) (j__))) (((refl) ((nat) )) ((O) ))) ((((times) ) (p)) ((O) ))) ((times_n_O) (p)))))))) (j_clearme)))) (\lambda auto : (nat) . \lambda auto' : ((Not) ) ((((divides) ) (p)) (((S) ) (auto))). ((lt_O_S) (auto)))) (a)) (ndiv)))) (((((((match_Or_prop) ((((divides) ) (p)) ((((minus) ) ((((exp) ) (a)) (((pred) ) (p)))) (((S) ) ((O) ))))) ((((divides) ) (p)) (((fact) ) (((pred) ) (p))))) ((((divides) ) (p)) ((((minus) ) ((((exp) ) (a)) (((pred) ) (p)))) (((S) ) ((O) ))))) (\lambda auto : (((divides) ) (p)) ((((minus) ) ((((exp) ) (a)) (((pred) ) (p)))) (((S) ) ((O) ))). (auto))) (\lambda Hdiv : (((divides) ) (p)) (((fact) ) (((pred) ) (p))). (((falsity) ((((divides) ) (p)) ((((minus) ) ((((exp) ) (a)) (((pred) ) (p)))) (((S) ) ((O) ))))) ((((absurd) ((((divides) ) (p)) (((fact) ) (((pred) ) (p))))) (Hdiv)) (((((prime_to_not_divides_fact) (p)) (primep)) (((pred) ) (p))) ((((le_S_S_to_le) (((S) ) (((pred) ) (p)))) (p)) (((((((eq_ind_r) ((nat) )) (p)) (\lambda x : (nat) . (((le) ) (((S) ) (x))) (((S) ) (p)))) ((le_n) (((S) ) (p)))) (((S) ) (((pred) ) (p)))) (((S_pred) (p)) (((prime_to_lt_O) (p)) (primep)))))))))) ((((((divides_times_to_divides) (p)) ((((minus) ) ((((exp) ) (a)) (((pred) ) (p)))) (((S) ) ((O) )))) (((fact) ) (((pred) ) (p)))) (primep)) (((((((eq_ind_r) ((nat) )) ((((times) ) (((fact) ) (((pred) ) (p)))) ((((minus) ) ((((exp) ) (a)) (((pred) ) (p)))) (((S) ) ((O) ))))) (\lambda x : (nat) . (((divides) ) (p)) (x))) (((((((eq_ind_r) ((nat) )) ((((minus) ) ((((times) ) (((fact) ) (((pred) ) (p)))) ((((exp) ) (a)) (((pred) ) (p))))) ((((times) ) (((fact) ) (((pred) ) (p)))) (((S) ) ((O) ))))) (\lambda x : (nat) . (((divides) ) (p)) (x))) (((((((eq_ind) ((nat) )) (((fact) ) (((pred) ) (p)))) (\lambda x_1 : (nat) . (((divides) ) (p)) ((((minus) ) ((((times) ) (((fact) ) (((pred) ) (p)))) ((((exp) ) (a)) (((pred) ) (p))))) (x_1)))) (((((((eq_ind_r) ((nat) )) (((((((bigop) ((nat) )) ((((minus) ) (((S) ) (((pred) ) (p)))) (((S) ) ((O) )))) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((plus) ) (i)) (((S) ) ((O) ))))) (\lambda x : (nat) . (((divides) ) (p)) ((((minus) ) ((((times) ) (x)) ((((exp) ) (a)) (((pred) ) (p))))) (x)))) (((((((eq_ind_r) ((nat) )) ((((times) ) ((((exp) ) (a)) (((pred) ) (p)))) (((((((bigop) ((nat) )) ((((minus) ) (((S) ) (((pred) ) (p)))) (((S) ) ((O) )))) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((plus) ) (i)) (((S) ) ((O) )))))) (\lambda x : (nat) . (((divides) ) (p)) ((((minus) ) (x)) (((((((bigop) ((nat) )) ((((minus) ) (((S) ) (((pred) ) (p)))) (((S) ) ((O) )))) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((plus) ) (i)) (((S) ) ((O) ))))))) (((((((eq_ind_r) ((nat) )) ((((minus) ) (((S) ) (((pred) ) (p)))) (((S) ) ((O) )))) (\lambda x : (nat) . (((divides) ) (p)) ((((minus) ) ((((times) ) ((((exp) ) (a)) (x))) (((((((bigop) ((nat) )) ((((minus) ) (((S) ) (((pred) ) (p)))) (((S) ) ((O) )))) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((plus) ) (i)) (((S) ) ((O) )))))) (((((((bigop) ((nat) )) ((((minus) ) (((S) ) (((pred) ) (p)))) (((S) ) ((O) )))) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((plus) ) (i)) (((S) ) ((O) ))))))) (((((((eq_ind_r) ((nat) )) (((((((bigop) ((nat) )) ((((minus) ) (((S) ) (((pred) ) (p)))) (((S) ) ((O) )))) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((times) ) (a)) ((((plus) ) (i)) (((S) ) ((O) )))))) (\lambda x : (nat) . (((divides) ) (p)) ((((minus) ) (x)) (((((((bigop) ((nat) )) ((((minus) ) (((S) ) (((pred) ) (p)))) (((S) ) ((O) )))) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((plus) ) (i)) (((S) ) ((O) ))))))) ((((((congruent_to_divides) (((((((bigop) ((nat) )) ((((minus) ) (((S) ) (((pred) ) (p)))) (((S) ) ((O) )))) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((times) ) (a)) ((((plus) ) (i)) (((S) ) ((O) )))))) (((((((bigop) ((nat) )) ((((minus) ) (((S) ) (((pred) ) (p)))) (((S) ) ((O) )))) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((plus) ) (i)) (((S) ) ((O) ))))) (p)) (((prime_to_lt_O) (p)) (primep))) (((((((transitive_congruent) (p)) (((((((bigop) ((nat) )) ((((minus) ) (((S) ) (((pred) ) (p)))) (((S) ) ((O) )))) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((times) ) (a)) ((((plus) ) (i)) (((S) ) ((O) )))))) (((((((bigop) ((nat) )) ((((minus) ) (((S) ) (((pred) ) (p)))) (((S) ) ((O) )))) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((mod) ) ((((times) ) (a)) ((((plus) ) (i)) (((S) ) ((O) ))))) (p)))) (((((((bigop) ((nat) )) ((((minus) ) (((S) ) (((pred) ) (p)))) (((S) ) ((O) )))) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((plus) ) (i)) (((S) ) ((O) ))))) (((((congruent_pi) (\lambda m : (nat) . (((times) ) (a)) ((((plus) ) (m)) (((S) ) ((O) ))))) ((((minus) ) (((S) ) (((pred) ) (p)))) (((S) ) ((O) )))) (p)) (((prime_to_lt_O) (p)) (primep)))) (((((((eq_ind) ((nat) )) (((((((bigop) ((nat) )) ((((minus) ) (((S) ) (((pred) ) (p)))) (((S) ) ((O) )))) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((plus) ) (i)) (((S) ) ((O) ))))) (\lambda x_1 : (nat) . ((((congruent) ) (x_1)) (((((((bigop) ((nat) )) ((((minus) ) (((S) ) (((pred) ) (p)))) (((S) ) ((O) )))) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((plus) ) (i)) (((S) ) ((O) ))))) (p))) (((congruent_n_n) (((((((bigop) ((nat) )) ((((minus) ) (((S) ) (((pred) ) (p)))) (((S) ) ((O) )))) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((plus) ) (i)) (((S) ) ((O) ))))) (p))) (((((((bigop) ((nat) )) ((((minus) ) (((S) ) (((pred) ) (p)))) (((S) ) ((O) )))) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((mod) ) ((((times) ) (a)) ((((plus) ) (i)) (((S) ) ((O) ))))) (p)))) (((((((eq_ind_r) ((nat) )) (((((((bigop) ((nat) )) (((S) ) (((pred) ) (p)))) (\lambda i : (nat) . (((andb) ) ((((leb) ) (((S) ) ((O) ))) (i))) ((true) ))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . i))) (\lambda x : (nat) . (((eq) ((nat) )) (x)) (((((((bigop) ((nat) )) ((((minus) ) (((S) ) (((pred) ) (p)))) (((S) ) ((O) )))) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((mod) ) ((((times) ) (a)) ((((plus) ) (i)) (((S) ) ((O) ))))) (p))))) (((((((eq_ind_r) ((nat) )) (((((((bigop) ((nat) )) (((S) ) (((pred) ) (p)))) (\lambda i : (nat) . (((andb) ) ((((leb) ) (((S) ) ((O) ))) (i))) ((true) ))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((mod) ) ((((times) ) (a)) (i))) (p)))) (\lambda x : (nat) . (((eq) ((nat) )) (((((((bigop) ((nat) )) (((S) ) (((pred) ) (p)))) (\lambda i : (nat) . (((andb) ) ((((leb) ) (((S) ) ((O) ))) (i))) ((true) ))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . i))) (x))) (((((sym_eq) ((nat) )) (((((((bigop) ((nat) )) (((S) ) (((pred) ) (p)))) (\lambda i : (nat) . (((andb) ) ((((leb) ) (((S) ) ((O) ))) (i))) ((true) ))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((mod) ) ((((times) ) (a)) (i))) (p)))) (((((((bigop) ((nat) )) (((S) ) (((pred) ) (p)))) (\lambda i : (nat) . (((andb) ) ((((leb) ) (((S) ) ((O) ))) (i))) ((true) ))) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . i))) ((((((((bigop_iso) (((S) ) (((pred) ) (p)))) (((S) ) (((pred) ) (p)))) (\lambda j__ : (nat) . (((andb) ) ((((leb) ) (((S) ) ((O) ))) (j__))) ((true) ))) (\lambda j__ : (nat) . (((andb) ) ((((leb) ) (((S) ) ((O) ))) (j__))) ((true) ))) (\lambda j__ : (nat) . (((mod) ) ((((times) ) (a)) (j__))) (p))) (\lambda j__ : (nat) . j__)) (((((ex_intro) (((nat) ) -> (nat) )) (\lambda x : ((nat) ) -> (nat) . ((ex) (((nat) ) -> (nat) )) (\lambda k : ((nat) ) -> (nat) . (((And) ) ((((And) ) (\forall (i:(nat) ). ((((lt) ) (i)) (((S) ) (((pred) ) (p)))) -> ((((eq) ((bool) )) ((((andb) ) ((((leb) ) (((S) ) ((O) ))) (i))) ((true) ))) ((true) )) -> (((eq) ((nat) )) ((((mod) ) ((((times) ) (a)) (i))) (p))) ((x) (i)))) ((((((((((sub_hk) ) (x)) (k)) (((S) ) (((pred) ) (p)))) (((S) ) (((pred) ) (p)))) (\lambda j_0 : (nat) . (((andb) ) ((((leb) ) (((S) ) ((O) ))) (j_0))) ((true) ))) (\lambda j_0 : (nat) . (((andb) ) ((((leb) ) (((S) ) ((O) ))) (j_0))) ((true) ))) (\lambda j_0 : (nat) . (((mod) ) ((((times) ) (a)) (j_0))) (p))) (\lambda j_0 : (nat) . j_0)))) ((((((((((sub_hk) ) (k)) (x)) (((S) ) (((pred) ) (p)))) (((S) ) (((pred) ) (p)))) (\lambda j_0 : (nat) . (((andb) ) ((((leb) ) (((S) ) ((O) ))) (j_0))) ((true) ))) (\lambda j_0 : (nat) . (((andb) ) ((((leb) ) (((S) ) ((O) ))) (j_0))) ((true) ))) (\lambda j_0 : (nat) . j_0)) (\lambda j_0 : (nat) . (((mod) ) ((((times) ) (a)) (j_0))) (p)))))) (\lambda i : (nat) . (((mod) ) ((((times) ) (a)) (i))) (p))) (((((ex_intro) (((nat) ) -> (nat) )) (\lambda y : ((nat) ) -> (nat) . (((And) ) ((((And) ) (\forall (i:(nat) ). ((((lt) ) (i)) (((S) ) (((pred) ) (p)))) -> ((((eq) ((bool) )) ((((andb) ) ((((leb) ) (((S) ) ((O) ))) (i))) ((true) ))) ((true) )) -> (((eq) ((nat) )) ((((mod) ) ((((times) ) (a)) (i))) (p))) ((((mod) ) ((((times) ) (a)) (i))) (p)))) ((((((((((sub_hk) ) (\lambda i : (nat) . (((mod) ) ((((times) ) (a)) (i))) (p))) (y)) (((S) ) (((pred) ) (p)))) (((S) ) (((pred) ) (p)))) (\lambda j_0 : (nat) . (((andb) ) ((((leb) ) (((S) ) ((O) ))) (j_0))) ((true) ))) (\lambda j_0 : (nat) . (((andb) ) ((((leb) ) (((S) ) ((O) ))) (j_0))) ((true) ))) (\lambda j_0 : (nat) . (((mod) ) ((((times) ) (a)) (j_0))) (p))) (\lambda j_0 : (nat) . j_0)))) ((((((((((sub_hk) ) (y)) (\lambda i : (nat) . (((mod) ) ((((times) ) (a)) (i))) (p))) (((S) ) (((pred) ) (p)))) (((S) ) (((pred) ) (p)))) (\lambda j_0 : (nat) . (((andb) ) ((((leb) ) (((S) ) ((O) ))) (j_0))) ((true) ))) (\lambda j_0 : (nat) . (((andb) ) ((((leb) ) (((S) ) ((O) ))) (j_0))) ((true) ))) (\lambda j_0 : (nat) . j_0)) (\lambda j_0 : (nat) . (((mod) ) ((((times) ) (a)) (j_0))) (p))))) ((((invert_permut) ) (((pred) ) (p))) (\lambda i : (nat) . (((mod) ) ((((times) ) (a)) (i))) (p)))) (((((conj) ((((And) ) (\forall (i:(nat) ). ((((lt) ) (i)) (((S) ) (((pred) ) (p)))) -> ((((eq) ((bool) )) ((((andb) ) ((((leb) ) (((S) ) ((O) ))) (i))) ((true) ))) ((true) )) -> (((eq) ((nat) )) ((((mod) ) ((((times) ) (a)) (i))) (p))) ((((mod) ) ((((times) ) (a)) (i))) (p)))) ((((((((((sub_hk) ) (\lambda i : (nat) . (((mod) ) ((((times) ) (a)) (i))) (p))) ((((invert_permut) ) (((pred) ) (p))) (\lambda i : (nat) . (((mod) ) ((((times) ) (a)) (i))) (p)))) (((S) ) (((pred) ) (p)))) (((S) ) (((pred) ) (p)))) (\lambda j_0 : (nat) . (((andb) ) ((((leb) ) (((S) ) ((O) ))) (j_0))) ((true) ))) (\lambda j_0 : (nat) . (((andb) ) ((((leb) ) (((S) ) ((O) ))) (j_0))) ((true) ))) (\lambda j_0 : (nat) . (((mod) ) ((((times) ) (a)) (j_0))) (p))) (\lambda j_0 : (nat) . j_0)))) ((((((((((sub_hk) ) ((((invert_permut) ) (((pred) ) (p))) (\lambda i : (nat) . (((mod) ) ((((times) ) (a)) (i))) (p)))) (\lambda i : (nat) . (((mod) ) ((((times) ) (a)) (i))) (p))) (((S) ) (((pred) ) (p)))) (((S) ) (((pred) ) (p)))) (\lambda j_0 : (nat) . (((andb) ) ((((leb) ) (((S) ) ((O) ))) (j_0))) ((true) ))) (\lambda j_0 : (nat) . (((andb) ) ((((leb) ) (((S) ) ((O) ))) (j_0))) ((true) ))) (\lambda j_0 : (nat) . j_0)) (\lambda j_0 : (nat) . (((mod) ) ((((times) ) (a)) (j_0))) (p)))) (((((conj) (\forall (x:(nat) ). ((((lt) ) (x)) (((S) ) (((pred) ) (p)))) -> ((((eq) ((bool) )) ((((andb) ) ((((leb) ) (((S) ) ((O) ))) (x))) ((true) ))) ((true) )) -> (((eq) ((nat) )) ((((mod) ) ((((times) ) (a)) (x))) (p))) ((((mod) ) ((((times) ) (a)) (x))) (p)))) ((((((((((sub_hk) ) (\lambda i : (nat) . (((mod) ) ((((times) ) (a)) (i))) (p))) ((((invert_permut) ) (((pred) ) (p))) (\lambda i : (nat) . (((mod) ) ((((times) ) (a)) (i))) (p)))) (((S) ) (((pred) ) (p)))) (((S) ) (((pred) ) (p)))) (\lambda j_0 : (nat) . (((andb) ) ((((leb) ) (((S) ) ((O) ))) (j_0))) ((true) ))) (\lambda j_0 : (nat) . (((andb) ) ((((leb) ) (((S) ) ((O) ))) (j_0))) ((true) ))) (\lambda j_0 : (nat) . (((mod) ) ((((times) ) (a)) (j_0))) (p))) (\lambda j_0 : (nat) . j_0))) (\lambda i : (nat) . \lambda lti : (((lt) ) (i)) (((S) ) (((pred) ) (p))). (\lambda j__ : (((eq) ((bool) )) ((((andb) ) ((((leb) ) (((S) ) ((O) ))) (i))) ((true) ))) ((true) ). (((refl) ((nat) )) ((((mod) ) ((((times) ) (a)) (i))) (p)))))) (\lambda i : (nat) . \lambda lti : (((lt) ) (i)) (((S) ) (((pred) ) (p))). (\lambda posi : (((eq) ((bool) )) ((((andb) ) ((((leb) ) (((S) ) ((O) ))) (i))) ((true) ))) ((true) ). (((((conj) ((((And) ) ((((lt) ) ((((mod) ) ((((times) ) (a)) (i))) (p))) (((S) ) (((pred) ) (p))))) ((((eq) ((bool) )) ((((andb) ) ((((leb) ) (((S) ) ((O) ))) ((((mod) ) ((((times) ) (a)) (i))) (p)))) ((true) ))) ((true) )))) ((((eq) ((nat) )) (((((invert_permut) ) (((pred) ) (p))) (\lambda i0 : (nat) . (((mod) ) ((((times) ) (a)) (i0))) (p))) ((((mod) ) ((((times) ) (a)) (i))) (p)))) (i))) (((((conj) ((((lt) ) ((((mod) ) ((((times) ) (a)) (i))) (p))) (((S) ) (((pred) ) (p))))) ((((eq) ((bool) )) ((((andb) ) ((((leb) ) (((S) ) ((O) ))) ((((mod) ) ((((times) ) (a)) (i))) (p)))) ((true) ))) ((true) ))) (((((((eq_ind_r) ((nat) )) (p)) (\lambda x : (nat) . (((lt) ) ((((mod) ) ((((times) ) (a)) (i))) (p))) (x))) ((((lt_mod_m_m) ((((times) ) (a)) (i))) (p)) (((prime_to_lt_O) (p)) (primep)))) (((S) ) (((pred) ) (p)))) (((S_pred) (p)) (((prime_to_lt_O) (p)) (primep))))) (((((((eq_ind_r) ((bool) )) ((true) )) (\lambda x : (bool) . (((eq) ((bool) )) ((((andb) ) (x)) ((true) ))) ((true) ))) ((((((eq_match_bool_type_true) ((bool) )) ((true) )) ((false) )) (\lambda y : (bool) . (((eq) ((bool) )) ((((andb) ) ((true) )) ((true) ))) (y))) (((refl) ((bool) )) ((((andb) ) ((true) )) ((true) ))))) ((((leb) ) (((S) ) ((O) ))) ((((mod) ) ((((times) ) (a)) (i))) (p)))) ((((le_to_leb_true) (((S) ) ((O) ))) ((((mod) ) ((((times) ) (a)) (i))) (p))) (((((((match_Or_prop) ((((lt) ) ((O) )) ((((mod) ) ((((times) ) (a)) (i))) (p)))) ((((eq) ((nat) )) ((O) )) ((((mod) ) ((((times) ) (a)) (i))) (p)))) ((((le) ) (((S) ) ((O) ))) ((((mod) ) ((((times) ) (a)) (i))) (p)))) (\lambda auto : (((lt) ) ((O) )) ((((mod) ) ((((times) ) (a)) (i))) (p)). (auto))) (\lambda H : (((eq) ((nat) )) ((O) )) ((((mod) ) ((((times) ) (a)) (i))) (p)). (((falsity) ((((le) ) (((S) ) ((O) ))) ((((mod) ) ((((times) ) (a)) (i))) (p)))) ((((absurd) ((((divides) ) (p)) ((((times) ) (a)) (i)))) (((((mod_O_to_divides) (p)) ((((times) ) (a)) (i))) (((prime_to_lt_O) (p)) (primep))) (((((sym_eq) ((nat) )) ((O) )) ((((mod) ) ((((times) ) (a)) (i))) (p))) (H)))) (((((not_to_not) ((((divides) ) (p)) ((((times) ) (a)) (i)))) ((((divides) ) (p)) (a))) (\lambda Hdiv : (((divides) ) (p)) ((((times) ) (a)) (i)). (((((((match_Or_prop) ((((divides) ) (p)) (a))) ((((divides) ) (p)) (i))) ((((divides) ) (p)) (a))) (\lambda auto : (((divides) ) (p)) (a). (auto))) (\lambda divpi : (((divides) ) (p)) (i). (((falsity) ((((divides) ) (p)) (a))) ((((absurd) ((((lt) ) (i)) (((S) ) (((pred) ) (p))))) (lti)) ((((le_to_not_lt) (((S) ) (((pred) ) (p)))) (i)) (((((((eq_ind_r) ((nat) )) (p)) (\lambda x : (nat) . (((le) ) (x)) (i))) (((((divides_to_le) (p)) (i)) ((((leb_true_to_le) (((S) ) ((O) ))) (i)) ((((andb_true_l) ((((leb) ) (((S) ) ((O) ))) (i))) ((true) )) (posi)))) (divpi))) (((S) ) (((pred) ) (p)))) (((S_pred) (p)) (((prime_to_lt_O) (p)) (primep))))))))) ((((((divides_times_to_divides) (p)) (a)) (i)) (primep)) (Hdiv))))) (ndiv)))))) ((((le_to_or_lt_eq) ((O) )) ((((mod) ) ((((times) ) (a)) (i))) (p))) ((le_O_n) ((((mod) ) ((((times) ) (a)) (i))) (p))))))))) ((((((invert_permut_f) (\lambda i0 : (nat) . (((mod) ) ((((times) ) (a)) (i0))) (p))) (((pred) ) (p))) (i)) ((((le_S_S_to_le) (i)) (((pred) ) (p))) (lti))) ((((((match_And_prop) (\forall (i1:(nat) ). ((((le) ) (i1)) (((pred) ) (p))) -> (((le) ) ((((mod) ) ((((times) ) (a)) (i1))) (p))) (((pred) ) (p)))) ((((injn) ) (\lambda n : (nat) . (((mod) ) ((((times) ) (a)) (n))) (p))) (((pred) ) (p)))) ((((injn) ) (\lambda i0 : (nat) . (((mod) ) ((((times) ) (a)) (i0))) (p))) (((pred) ) (p)))) (\lambda auto : \forall (i0:(nat) ). ((((le) ) (i0)) (((pred) ) (p))) -> (((le) ) ((((mod) ) ((((times) ) (a)) (i0))) (p))) (((pred) ) (p)). (\lambda auto' : (((injn) ) (\lambda n : (nat) . (((mod) ) ((((times) ) (a)) (n))) (p))) (((pred) ) (p)). (auto')))) (((((permut_mod) (p)) (a)) (primep)) (ndiv))))))))) ((((((match_And_prop) (\forall (i:(nat) ). ((((le) ) (i)) (((pred) ) (p))) -> (((le) ) (((((invert_permut) ) (((pred) ) (p))) (\lambda n : (nat) . (((mod) ) ((((times) ) (a)) (n))) (p))) (i))) (((pred) ) (p)))) ((((injn) ) ((((invert_permut) ) (((pred) ) (p))) (\lambda n : (nat) . (((mod) ) ((((times) ) (a)) (n))) (p)))) (((pred) ) (p)))) ((((((((((sub_hk) ) ((((invert_permut) ) (((pred) ) (p))) (\lambda i : (nat) . (((mod) ) ((((times) ) (a)) (i))) (p)))) (\lambda i : (nat) . (((mod) ) ((((times) ) (a)) (i))) (p))) (((S) ) (((pred) ) (p)))) (((S) ) (((pred) ) (p)))) (\lambda j_0 : (nat) . (((andb) ) ((((leb) ) (((S) ) ((O) ))) (j_0))) ((true) ))) (\lambda j_0 : (nat) . (((andb) ) ((((leb) ) (((S) ) ((O) ))) (j_0))) ((true) ))) (\lambda j_0 : (nat) . j_0)) (\lambda j_0 : (nat) . (((mod) ) ((((times) ) (a)) (j_0))) (p)))) (\lambda le_invert_permut : \forall (i:(nat) ). ((((le) ) (i)) (((pred) ) (p))) -> (((le) ) (((((invert_permut) ) (((pred) ) (p))) (\lambda n : (nat) . (((mod) ) ((((times) ) (a)) (n))) (p))) (i))) (((pred) ) (p)). (\lambda inj_inv_permut : (((injn) ) ((((invert_permut) ) (((pred) ) (p))) (\lambda n : (nat) . (((mod) ) ((((times) ) (a)) (n))) (p)))) (((pred) ) (p)). (\lambda i : (nat) . \lambda lti : (((lt) ) (i)) (((S) ) (((pred) ) (p))). (\lambda posi : (((eq) ((bool) )) ((((andb) ) ((((leb) ) (((S) ) ((O) ))) (i))) ((true) ))) ((true) ). (((((conj) ((((And) ) ((((lt) ) (((((invert_permut) ) (((pred) ) (p))) (\lambda i0 : (nat) . (((mod) ) ((((times) ) (a)) (i0))) (p))) (i))) (((S) ) (((pred) ) (p))))) ((((eq) ((bool) )) ((((andb) ) ((((leb) ) (((S) ) ((O) ))) (((((invert_permut) ) (((pred) ) (p))) (\lambda i0 : (nat) . (((mod) ) ((((times) ) (a)) (i0))) (p))) (i)))) ((true) ))) ((true) )))) ((((eq) ((nat) )) ((((mod) ) ((((times) ) (a)) (((((invert_permut) ) (((pred) ) (p))) (\lambda i0 : (nat) . (((mod) ) ((((times) ) (a)) (i0))) (p))) (i)))) (p))) (i))) (((((conj) ((((lt) ) (((((invert_permut) ) (((pred) ) (p))) (\lambda i0 : (nat) . (((mod) ) ((((times) ) (a)) (i0))) (p))) (i))) (((S) ) (((pred) ) (p))))) ((((eq) ((bool) )) ((((andb) ) ((((leb) ) (((S) ) ((O) ))) (((((invert_permut) ) (((pred) ) (p))) (\lambda i0 : (nat) . (((mod) ) ((((times) ) (a)) (i0))) (p))) (i)))) ((true) ))) ((true) ))) ((((le_S_S) (((((invert_permut) ) (((pred) ) (p))) (\lambda i0 : (nat) . (((mod) ) ((((times) ) (a)) (i0))) (p))) (i))) (((pred) ) (p))) (((le_invert_permut) (i)) ((((le_S_S_to_le) (i)) (((pred) ) (p))) (lti))))) (((((((eq_ind_r) ((bool) )) ((true) )) (\lambda x : (bool) . (((eq) ((bool) )) ((((andb) ) (x)) ((true) ))) ((true) ))) ((((((eq_match_bool_type_true) ((bool) )) ((true) )) ((false) )) (\lambda y : (bool) . (((eq) ((bool) )) ((((andb) ) ((true) )) ((true) ))) (y))) (((refl) ((bool) )) ((((andb) ) ((true) )) ((true) ))))) ((((leb) ) (((S) ) ((O) ))) (((((invert_permut) ) (((pred) ) (p))) (\lambda i0 : (nat) . (((mod) ) ((((times) ) (a)) (i0))) (p))) (i)))) ((((le_to_leb_true) (((S) ) ((O) ))) (((((invert_permut) ) (((pred) ) (p))) (\lambda i0 : (nat) . (((mod) ) ((((times) ) (a)) (i0))) (p))) (i))) (((((((match_Or_prop) ((((lt) ) ((O) )) (((((invert_permut) ) (((pred) ) (p))) (\lambda i0 : (nat) . (((mod) ) ((((times) ) (a)) (i0))) (p))) (i)))) ((((eq) ((nat) )) ((O) )) (((((invert_permut) ) (((pred) ) (p))) (\lambda i0 : (nat) . (((mod) ) ((((times) ) (a)) (i0))) (p))) (i)))) ((((le) ) (((S) ) ((O) ))) (((((invert_permut) ) (((pred) ) (p))) (\lambda i0 : (nat) . (((mod) ) ((((times) ) (a)) (i0))) (p))) (i)))) (\lambda auto : (((lt) ) ((O) )) (((((invert_permut) ) (((pred) ) (p))) (\lambda i0 : (nat) . (((mod) ) ((((times) ) (a)) (i0))) (p))) (i)). (auto))) (\lambda H : (((eq) ((nat) )) ((O) )) (((((invert_permut) ) (((pred) ) (p))) (\lambda i0 : (nat) . (((mod) ) ((((times) ) (a)) (i0))) (p))) (i)). (((falsity) ((((le) ) (((S) ) ((O) ))) (((((invert_permut) ) (((pred) ) (p))) (\lambda i0 : (nat) . (((mod) ) ((((times) ) (a)) (i0))) (p))) (i)))) ((((((((eq_ind_r) ((nat) )) ((O) )) (\lambda x : (nat) . ((((eq) ((nat) )) (x)) ((((mod) ) ((((times) ) (a)) (((((invert_permut) ) (((pred) ) (p))) (\lambda i0 : (nat) . (((mod) ) ((((times) ) (a)) (i0))) (p))) (i)))) (p))) -> (False) )) (((((((eq_ind_r) ((nat) )) (i)) (\lambda x : (nat) . ((((eq) ((nat) )) ((O) )) (x)) -> (False) )) (\lambda eq0i : (((eq) ((nat) )) ((O) )) (i). ((((((((eq_ind) ((nat) )) ((O) )) (\lambda x_1 : (nat) . ((((eq) ((bool) )) ((((andb) ) ((((leb) ) (((S) ) ((O) ))) (x_1))) ((true) ))) ((true) )) -> (False) )) ((((sym_eq_leb) (((S) ) ((O) ))) (\lambda y : ((nat) ) -> (bool) . ((((eq) ((bool) )) ((((andb) ) ((y) ((O) ))) ((true) ))) ((true) )) -> (False) )) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (bool) )) ((leb_body) )) ((O) )) (\lambda y : ((nat) ) -> (bool) . ((((eq) ((bool) )) ((((andb) ) ((y) ((O) ))) ((true) ))) ((true) )) -> (False) )) ((((sym_eq_leb_body_S) ((O) )) (\lambda y : ((nat) ) -> (bool) . ((((eq) ((bool) )) ((((andb) ) ((y) ((O) ))) ((true) ))) ((true) )) -> (False) )) ((((((sym_eq_match_nat_type_O) ((bool) )) ((false) )) (\lambda q : (nat) . (((leb) ) ((O) )) (q))) (\lambda y : (bool) . ((((eq) ((bool) )) ((((andb) ) (y)) ((true) ))) ((true) )) -> (False) )) ((((((sym_eq_match_bool_type_false) ((bool) )) ((true) )) ((false) )) (\lambda y : (bool) . ((((eq) ((bool) )) (y)) ((true) )) -> (False) )) (\lambda H0 : (((eq) ((bool) )) ((false) )) ((true) ). (((((((eq_match_bool_type_true) (Prop)) (\forall (P:Prop). P)) (\forall (P:Prop). (P) -> P)) (\lambda y : Prop. y)) ((((((eq_match_bool_type_false) (Prop)) (((((match_bool_type) (Prop)) (\forall (P:Prop). (P) -> P)) (\forall (P:Prop). P)) ((true) ))) (((((match_bool_type) (Prop)) (\forall (P:Prop). P)) (\forall (P:Prop). (P) -> P)) ((true) ))) (\lambda y : Prop. y)) ((((bool_discr) ((false) )) ((true) )) (H0)))) ((False) ))))))))) (i)) (eq0i)) (posi)))) ((((mod) ) ((((times) ) (a)) (((((invert_permut) ) (((pred) ) (p))) (\lambda i0 : (nat) . (((mod) ) ((((times) ) (a)) (i0))) (p))) (i)))) (p))) ((((((f_invert_permut) (\lambda i0 : (nat) . (((mod) ) ((((times) ) (a)) (i0))) (p))) (((pred) ) (p))) (i)) ((((le_S_S_to_le) (i)) (((pred) ) (p))) (lti))) (((((permut_mod) (p)) (a)) (primep)) (ndiv))))) ((((mod) ) ((((times) ) (a)) ((O) ))) (p))) (((((((eq_ind) ((nat) )) ((O) )) (\lambda x_1 : (nat) . (((eq) ((nat) )) ((((mod) ) (x_1)) (p))) ((O) ))) (((((((rewrite_r) ((nat) )) ((O) )) (\lambda j__ : (nat) . (((eq) ((nat) )) (j__)) ((O) ))) (((refl) ((nat) )) ((O) ))) ((((mod) ) ((O) )) (p))) ((mod_O_n) (p)))) ((((times) ) (a)) ((O) ))) ((times_n_O) (a)))) (((((((eq_f) ((nat) )) ((nat) )) (\lambda i0 : (nat) . (((mod) ) ((((times) ) (a)) (i0))) (p))) ((O) )) (((((invert_permut) ) (((pred) ) (p))) (\lambda i0 : (nat) . (((mod) ) ((((times) ) (a)) (i0))) (p))) (i))) (((((((rewrite_l) ((nat) )) ((O) )) (\lambda j__ : (nat) . (((eq) ((nat) )) ((O) )) (j__))) (((refl) ((nat) )) ((O) ))) (((((invert_permut) ) (((pred) ) (p))) (\lambda i0 : (nat) . (((mod) ) ((((times) ) (a)) (i0))) (p))) (i))) (H))))))) ((((le_to_or_lt_eq) ((O) )) (((((invert_permut) ) (((pred) ) (p))) (\lambda i0 : (nat) . (((mod) ) ((((times) ) (a)) (i0))) (p))) (i))) ((le_O_n) (((((invert_permut) ) (((pred) ) (p))) (\lambda i0 : (nat) . (((mod) ) ((((times) ) (a)) (i0))) (p))) (i))))))))) ((((((f_invert_permut) (\lambda j__ : (nat) . (((mod) ) ((((times) ) (a)) (j__))) (p))) (((pred) ) (p))) (i)) ((((le_S_S_to_le) (i)) (((pred) ) (p))) (lti))) (((((permut_mod) (p)) (a)) (primep)) (ndiv))))))))) ((((permut_invert_permut) (\lambda n : (nat) . (((mod) ) ((((times) ) (a)) (n))) (p))) (((pred) ) (p))) (((((permut_mod) (p)) (a)) (primep)) (ndiv)))))))))) (((((((bigop) ((nat) )) ((((minus) ) (((S) ) (((pred) ) (p)))) (((S) ) ((O) )))) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((mod) ) ((((times) ) (a)) ((((plus) ) (i)) (((S) ) ((O) ))))) (p)))) ((((((bigop_I_gen) (((S) ) ((O) ))) (((S) ) (((pred) ) (p)))) (\lambda j__ : (nat) . (true) )) (\lambda j__ : (nat) . (((mod) ) ((((times) ) (a)) (j__))) (p))) ((lt_O_S) (((pred) ) (p)))))) (((((((bigop) ((nat) )) ((((minus) ) (((S) ) (((pred) ) (p)))) (((S) ) ((O) )))) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((plus) ) (i)) (((S) ) ((O) ))))) ((((((bigop_I_gen) (((S) ) ((O) ))) (((S) ) (((pred) ) (p)))) (\lambda j__ : (nat) . (true) )) (\lambda j__ : (nat) . j__)) ((lt_O_S) (((pred) ) (p))))))))) ((((times) ) ((((exp) ) (a)) ((((minus) ) (((S) ) (((pred) ) (p)))) (((S) ) ((O) ))))) (((((((bigop) ((nat) )) ((((minus) ) (((S) ) (((pred) ) (p)))) (((S) ) ((O) )))) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((plus) ) (i)) (((S) ) ((O) )))))) (((((exp_pi_bc) (a)) (((S) ) ((O) ))) (((S) ) (((pred) ) (p)))) (\lambda j__ : (nat) . j__)))) (((pred) ) (p))) (((((((rewrite_r) ((nat) )) ((((minus) ) (((pred) ) (p))) ((O) ))) (\lambda j__ : (nat) . (((eq) ((nat) )) (((pred) ) (p))) (j__))) (((((((rewrite_l) ((nat) )) (((pred) ) (p))) (\lambda j__ : (nat) . (((eq) ((nat) )) (((pred) ) (p))) (j__))) (((refl) ((nat) )) (((pred) ) (p)))) ((((minus) ) (((pred) ) (p))) ((O) ))) ((minus_n_O) (((pred) ) (p))))) ((((minus) ) (((S) ) (((pred) ) (p)))) (((S) ) ((O) )))) (((minus_S_S) (((pred) ) (p))) ((O) ))))) ((((times) ) (((((((bigop) ((nat) )) ((((minus) ) (((S) ) (((pred) ) (p)))) (((S) ) ((O) )))) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((plus) ) (i)) (((S) ) ((O) ))))) ((((exp) ) (a)) (((pred) ) (p))))) (((commutative_times) (((((((bigop) ((nat) )) ((((minus) ) (((S) ) (((pred) ) (p)))) (((S) ) ((O) )))) (\lambda i : (nat) . (true) )) (((S) ) ((O) ))) ((times) )) (\lambda i : (nat) . (((plus) ) (i)) (((S) ) ((O) ))))) ((((exp) ) (a)) (((pred) ) (p)))))) (((fact) ) (((pred) ) (p)))) ((eq_fact_pi_p) (((pred) ) (p))))) ((((times) ) (((fact) ) (((pred) ) (p)))) (((S) ) ((O) )))) ((times_n_1) (((fact) ) (((pred) ) (p)))))) ((((times) ) (((fact) ) (((pred) ) (p)))) ((((minus) ) ((((exp) ) (a)) (((pred) ) (p)))) (((S) ) ((O) ))))) ((((distributive_times_minus) (((fact) ) (((pred) ) (p)))) ((((exp) ) (a)) (((pred) ) (p)))) (((S) ) ((O) ))))) ((((times) ) ((((minus) ) ((((exp) ) (a)) (((pred) ) (p)))) (((S) ) ((O) )))) (((fact) ) (((pred) ) (p))))) (((commutative_times) ((((minus) ) ((((exp) ) (a)) (((pred) ) (p)))) (((S) ) ((O) )))) (((fact) ) (((pred) ) (p))))))))).

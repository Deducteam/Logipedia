Require Import bigops.
Require Import bool.
Require Import exp.
Require Import logic.
Require Import nat.
Definition exp_pi_l : forall (n:(nat.nat) ), forall (a:(nat.nat) ), forall (f:((nat.nat) ) -> (nat.nat) ), (((logic.eq) ((nat.nat) )) ((((nat.times) ) ((((exp.exp) ) (a)) (n))) (((((((bigops.bigop) ((nat.nat) )) (n)) (fun (i:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i:(nat.nat) ) => (f) (i))))) (((((((bigops.bigop) ((nat.nat) )) (n)) (fun (i:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i:(nat.nat) ) => (((nat.times) ) (a)) ((f) (i)))) := fun (n:(nat.nat) ) => fun (a:(nat.nat) ) => fun (f:((nat.nat) ) -> (nat.nat) ) => ((((nat.nat_ind) (fun (_x_365:(nat.nat) ) => (((logic.eq) ((nat.nat) )) ((((nat.times) ) ((((exp.exp) ) (a)) (_x_365))) (((((((bigops.bigop) ((nat.nat) )) (_x_365)) (fun (i:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i:(nat.nat) ) => (f) (i))))) (((((((bigops.bigop) ((nat.nat) )) (_x_365)) (fun (i:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i:(nat.nat) ) => (((nat.times) ) (a)) ((f) (i)))))) ((((bigops.sym_eq_bigop_O) ((nat.nat) )) (fun (y:(((nat.nat) ) -> (bool.bool) ) -> ((nat.nat) ) -> (((nat.nat) ) -> ((nat.nat) ) -> (nat.nat) ) -> (((nat.nat) ) -> (nat.nat) ) -> (nat.nat) ) => (((logic.eq) ((nat.nat) )) ((((nat.times) ) ((((exp.exp) ) (a)) ((nat.O) ))) (((((((bigops.bigop) ((nat.nat) )) ((nat.O) )) (fun (i:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i:(nat.nat) ) => (f) (i))))) (((((y) (fun (i:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i:(nat.nat) ) => (((nat.times) ) (a)) ((f) (i)))))) ((((bigops.sym_eq_bigop_body_O) ((nat.nat) )) (fun (y:(((nat.nat) ) -> (bool.bool) ) -> ((nat.nat) ) -> (((nat.nat) ) -> ((nat.nat) ) -> (nat.nat) ) -> (((nat.nat) ) -> (nat.nat) ) -> (nat.nat) ) => (((logic.eq) ((nat.nat) )) ((((nat.times) ) ((((exp.exp) ) (a)) ((nat.O) ))) (((((((bigops.bigop) ((nat.nat) )) ((nat.O) )) (fun (i:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i:(nat.nat) ) => (f) (i))))) (((((y) (fun (i:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i:(nat.nat) ) => (((nat.times) ) (a)) ((f) (i)))))) (((nat.eq_times_body_O) (fun (y:((nat.nat) ) -> (nat.nat) ) => (((logic.eq) ((nat.nat) )) ((((nat.times) ) ((((exp.exp) ) (a)) ((nat.O) ))) (((((((bigops.bigop) ((nat.nat) )) ((nat.O) )) (fun (i:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i:(nat.nat) ) => (f) (i))))) (((nat.S) ) ((y) (((nat.S) ) ((nat.O) )))))) (((((nat.eq_filter_nat_type_O) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) (fun (y:((nat.nat) ) -> (nat.nat) ) => (((logic.eq) ((nat.nat) )) ((((nat.times) ) ((((exp.exp) ) (a)) ((nat.O) ))) (((((((bigops.bigop) ((nat.nat) )) ((nat.O) )) (fun (i:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i:(nat.nat) ) => (f) (i))))) (((nat.S) ) ((y) (((nat.S) ) ((nat.O) )))))) ((((nat.eq_times) ((nat.O) )) (fun (y:((nat.nat) ) -> (nat.nat) ) => (((logic.eq) ((nat.nat) )) ((((nat.times) ) ((((exp.exp) ) (a)) ((nat.O) ))) (((((((bigops.bigop) ((nat.nat) )) ((nat.O) )) (fun (i:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i:(nat.nat) ) => (f) (i))))) (((nat.S) ) ((y) (((nat.S) ) ((nat.O) )))))) (((nat.eq_plus_body_O) (fun (y:((nat.nat) ) -> (nat.nat) ) => (((logic.eq) ((nat.nat) )) ((((nat.times) ) ((((exp.exp) ) (a)) ((nat.O) ))) (((((((bigops.bigop) ((nat.nat) )) ((nat.O) )) (fun (i:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i:(nat.nat) ) => (f) (i))))) (((nat.S) ) ((y) ((((nat.times) ) ((nat.O) )) (((nat.S) ) ((nat.O) ))))))) (((((nat.eq_filter_nat_type_O) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (fun (y:((nat.nat) ) -> (nat.nat) ) => (((logic.eq) ((nat.nat) )) ((((nat.times) ) ((((exp.exp) ) (a)) ((nat.O) ))) (((((((bigops.bigop) ((nat.nat) )) ((nat.O) )) (fun (i:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i:(nat.nat) ) => (f) (i))))) (((nat.S) ) ((y) ((((nat.times) ) ((nat.O) )) (((nat.S) ) ((nat.O) ))))))) ((((nat.eq_plus) ((nat.O) )) (fun (y:((nat.nat) ) -> (nat.nat) ) => (((logic.eq) ((nat.nat) )) ((((nat.times) ) ((((exp.exp) ) (a)) ((nat.O) ))) (((((((bigops.bigop) ((nat.nat) )) ((nat.O) )) (fun (i:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i:(nat.nat) ) => (f) (i))))) (((nat.S) ) ((y) ((((nat.times) ) ((nat.O) )) (((nat.S) ) ((nat.O) ))))))) ((((nat.eq_plus_body_S) ((nat.O) )) (fun (y:((nat.nat) ) -> (nat.nat) ) => (((logic.eq) ((nat.nat) )) ((((nat.times) ) ((((exp.exp) ) (a)) ((nat.O) ))) (((((((bigops.bigop) ((nat.nat) )) ((nat.O) )) (fun (i:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i:(nat.nat) ) => (f) (i))))) ((y) ((((nat.times) ) ((nat.O) )) (((nat.S) ) ((nat.O) )))))) ((((((nat.eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) ((nat.O) )) (fun (y:((nat.nat) ) -> (nat.nat) ) => (((logic.eq) ((nat.nat) )) ((((nat.times) ) ((((exp.exp) ) (a)) ((nat.O) ))) (((((((bigops.bigop) ((nat.nat) )) ((nat.O) )) (fun (i:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i:(nat.nat) ) => (f) (i))))) ((y) ((((nat.times) ) ((nat.O) )) (((nat.S) ) ((nat.O) )))))) ((((nat.eq_plus) (((nat.S) ) ((nat.O) ))) (fun (y:((nat.nat) ) -> (nat.nat) ) => (((logic.eq) ((nat.nat) )) ((((nat.times) ) ((((exp.exp) ) (a)) ((nat.O) ))) (((((((bigops.bigop) ((nat.nat) )) ((nat.O) )) (fun (i:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i:(nat.nat) ) => (f) (i))))) ((y) ((((nat.times) ) ((nat.O) )) (((nat.S) ) ((nat.O) )))))) ((((nat.eq_times_body_S) ((nat.O) )) (fun (y:((nat.nat) ) -> (nat.nat) ) => (((logic.eq) ((nat.nat) )) ((((nat.times) ) ((((exp.exp) ) (a)) ((nat.O) ))) (((((((bigops.bigop) ((nat.nat) )) ((nat.O) )) (fun (i:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i:(nat.nat) ) => (f) (i))))) ((y) (((nat.S) ) ((nat.O) ))))) ((((((nat.eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) ((nat.O) )) (fun (y:((nat.nat) ) -> (nat.nat) ) => (((logic.eq) ((nat.nat) )) ((((nat.times) ) ((((exp.exp) ) (a)) ((nat.O) ))) (((((((bigops.bigop) ((nat.nat) )) ((nat.O) )) (fun (i:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i:(nat.nat) ) => (f) (i))))) ((y) (((nat.S) ) ((nat.O) ))))) ((((nat.eq_times) (((nat.S) ) ((nat.O) ))) (fun (y:((nat.nat) ) -> (nat.nat) ) => (((logic.eq) ((nat.nat) )) ((((nat.times) ) ((((exp.exp) ) (a)) ((nat.O) ))) (((((((bigops.bigop) ((nat.nat) )) ((nat.O) )) (fun (i:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i:(nat.nat) ) => (f) (i))))) ((y) (((nat.S) ) ((nat.O) ))))) ((((((nat.eq_match_nat_type_O) ((nat.nat) )) (((nat.S) ) ((nat.O) ))) (fun (k:(nat.nat) ) => ((((bool.match_bool_type) ((nat.nat) )) ((((nat.times) ) ((((nat.times) ) (a)) ((f) (k)))) (((((((bigops.bigop) ((nat.nat) )) (k)) (fun (i:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i:(nat.nat) ) => (((nat.times) ) (a)) ((f) (i)))))) (((((((bigops.bigop) ((nat.nat) )) (k)) (fun (i:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i:(nat.nat) ) => (((nat.times) ) (a)) ((f) (i))))) ((bool.true) ))) (fun (y:(nat.nat) ) => (((logic.eq) ((nat.nat) )) ((((nat.times) ) ((((exp.exp) ) (a)) ((nat.O) ))) (((((((bigops.bigop) ((nat.nat) )) ((nat.O) )) (fun (i:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i:(nat.nat) ) => (f) (i))))) ((((nat.times) ) (((nat.S) ) ((nat.O) ))) (y)))) ((((exp.eq_exp_body_O) (a)) (fun (y:(nat.nat) ) => (((logic.eq) ((nat.nat) )) ((((nat.times) ) ((((exp.exp) ) (a)) ((nat.O) ))) (((((((bigops.bigop) ((nat.nat) )) ((nat.O) )) (fun (i:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i:(nat.nat) ) => (f) (i))))) ((((nat.times) ) (y)) (((((fun (p:((nat.nat) ) -> (bool.bool) ) => fun (nil:(nat.nat) ) => fun (op:((nat.nat) ) -> ((nat.nat) ) -> (nat.nat) ) => fun (f0:((nat.nat) ) -> (nat.nat) ) => ((((nat.match_nat_type) ((nat.nat) )) (nil)) (fun (k:(nat.nat) ) => ((((bool.match_bool_type) ((nat.nat) )) (((op) ((f0) (k))) (((((((bigops.bigop) ((nat.nat) )) (k)) (p)) (nil)) (op)) (f0)))) (((((((bigops.bigop) ((nat.nat) )) (k)) (p)) (nil)) (op)) (f0))) ((p) (k)))) ((nat.O) )) (fun (i:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i:(nat.nat) ) => (((nat.times) ) (a)) ((f) (i))))))) (((((nat.eq_filter_nat_type_O) ((nat.nat) )) (((exp.exp_body) ) (a))) (fun (y:(nat.nat) ) => (((logic.eq) ((nat.nat) )) ((((nat.times) ) ((((exp.exp) ) (a)) ((nat.O) ))) (((((((bigops.bigop) ((nat.nat) )) ((nat.O) )) (fun (i:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i:(nat.nat) ) => (f) (i))))) ((((nat.times) ) (y)) (((((fun (p:((nat.nat) ) -> (bool.bool) ) => fun (nil:(nat.nat) ) => fun (op:((nat.nat) ) -> ((nat.nat) ) -> (nat.nat) ) => fun (f0:((nat.nat) ) -> (nat.nat) ) => ((((nat.match_nat_type) ((nat.nat) )) (nil)) (fun (k:(nat.nat) ) => ((((bool.match_bool_type) ((nat.nat) )) (((op) ((f0) (k))) (((((((bigops.bigop) ((nat.nat) )) (k)) (p)) (nil)) (op)) (f0)))) (((((((bigops.bigop) ((nat.nat) )) (k)) (p)) (nil)) (op)) (f0))) ((p) (k)))) ((nat.O) )) (fun (i:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i:(nat.nat) ) => (((nat.times) ) (a)) ((f) (i))))))) (((((exp.eq_exp) (a)) ((nat.O) )) (fun (y:(nat.nat) ) => (((logic.eq) ((nat.nat) )) ((((nat.times) ) ((((exp.exp) ) (a)) ((nat.O) ))) (((((((bigops.bigop) ((nat.nat) )) ((nat.O) )) (fun (i:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i:(nat.nat) ) => (f) (i))))) ((((nat.times) ) (y)) (((((fun (p:((nat.nat) ) -> (bool.bool) ) => fun (nil:(nat.nat) ) => fun (op:((nat.nat) ) -> ((nat.nat) ) -> (nat.nat) ) => fun (f0:((nat.nat) ) -> (nat.nat) ) => ((((nat.match_nat_type) ((nat.nat) )) (nil)) (fun (k:(nat.nat) ) => ((((bool.match_bool_type) ((nat.nat) )) (((op) ((f0) (k))) (((((((bigops.bigop) ((nat.nat) )) (k)) (p)) (nil)) (op)) (f0)))) (((((((bigops.bigop) ((nat.nat) )) (k)) (p)) (nil)) (op)) (f0))) ((p) (k)))) ((nat.O) )) (fun (i:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i:(nat.nat) ) => (((nat.times) ) (a)) ((f) (i))))))) ((((((nat.sym_eq_match_nat_type_O) ((nat.nat) )) (((nat.S) ) ((nat.O) ))) (fun (k:(nat.nat) ) => ((((bool.match_bool_type) ((nat.nat) )) ((((nat.times) ) ((((nat.times) ) (a)) ((f) (k)))) (((((((bigops.bigop) ((nat.nat) )) (k)) (fun (i:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i:(nat.nat) ) => (((nat.times) ) (a)) ((f) (i)))))) (((((((bigops.bigop) ((nat.nat) )) (k)) (fun (i:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i:(nat.nat) ) => (((nat.times) ) (a)) ((f) (i))))) ((bool.true) ))) (fun (y:(nat.nat) ) => (((logic.eq) ((nat.nat) )) ((((nat.times) ) ((((exp.exp) ) (a)) ((nat.O) ))) (((((((bigops.bigop) ((nat.nat) )) ((nat.O) )) (fun (i:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i:(nat.nat) ) => (f) (i))))) ((((nat.times) ) ((((exp.exp) ) (a)) ((nat.O) ))) (y)))) ((((bigops.eq_bigop_body_O) ((nat.nat) )) (fun (y:(((nat.nat) ) -> (bool.bool) ) -> ((nat.nat) ) -> (((nat.nat) ) -> ((nat.nat) ) -> (nat.nat) ) -> (((nat.nat) ) -> (nat.nat) ) -> (nat.nat) ) => (((logic.eq) ((nat.nat) )) ((((nat.times) ) ((((exp.exp) ) (a)) ((nat.O) ))) (((((((bigops.bigop) ((nat.nat) )) ((nat.O) )) (fun (i:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i:(nat.nat) ) => (f) (i))))) ((((nat.times) ) ((((exp.exp) ) (a)) ((nat.O) ))) (((((y) (fun (i:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i:(nat.nat) ) => (f) (i)))))) ((((bigops.eq_bigop_O) ((nat.nat) )) (fun (y:(((nat.nat) ) -> (bool.bool) ) -> ((nat.nat) ) -> (((nat.nat) ) -> ((nat.nat) ) -> (nat.nat) ) -> (((nat.nat) ) -> (nat.nat) ) -> (nat.nat) ) => (((logic.eq) ((nat.nat) )) ((((nat.times) ) ((((exp.exp) ) (a)) ((nat.O) ))) (((((((bigops.bigop) ((nat.nat) )) ((nat.O) )) (fun (i:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i:(nat.nat) ) => (f) (i))))) ((((nat.times) ) ((((exp.exp) ) (a)) ((nat.O) ))) (((((y) (fun (i:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i:(nat.nat) ) => (f) (i)))))) (((logic.refl) ((nat.nat) )) ((((nat.times) ) ((((exp.exp) ) (a)) ((nat.O) ))) (((((((bigops.bigop) ((nat.nat) )) ((nat.O) )) (fun (i:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i:(nat.nat) ) => (f) (i))))))))))))))))))))))))))) (fun (i:(nat.nat) ) => fun (Hind:(((logic.eq) ((nat.nat) )) ((((nat.times) ) ((((exp.exp) ) (a)) (i))) (((((((bigops.bigop) ((nat.nat) )) (i)) (fun (i0:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0:(nat.nat) ) => (f) (i0))))) (((((((bigops.bigop) ((nat.nat) )) (i)) (fun (i0:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0:(nat.nat) ) => (((nat.times) ) (a)) ((f) (i0))))) => (((((((logic.eq_ind_r) ((nat.nat) )) ((((nat.times) ) ((f) (i))) (((((((bigops.bigop) ((nat.nat) )) (i)) (fun (i0:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0:(nat.nat) ) => (f) (i0))))) (fun (x:(nat.nat) ) => (((logic.eq) ((nat.nat) )) ((((nat.times) ) ((((exp.exp) ) (a)) (((nat.S) ) (i)))) (x))) (((((((bigops.bigop) ((nat.nat) )) (((nat.S) ) (i))) (fun (i0:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0:(nat.nat) ) => (((nat.times) ) (a)) ((f) (i0)))))) (((((((logic.eq_ind_r) ((nat.nat) )) ((((nat.times) ) ((((nat.times) ) (a)) ((f) (i)))) (((((((bigops.bigop) ((nat.nat) )) (i)) (fun (i0:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0:(nat.nat) ) => (((nat.times) ) (a)) ((f) (i0)))))) (fun (x:(nat.nat) ) => (((logic.eq) ((nat.nat) )) ((((nat.times) ) ((((exp.exp) ) (a)) (((nat.S) ) (i)))) ((((nat.times) ) ((f) (i))) (((((((bigops.bigop) ((nat.nat) )) (i)) (fun (i0:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0:(nat.nat) ) => (f) (i0)))))) (x))) (((((((logic.eq_ind) ((nat.nat) )) ((((nat.times) ) ((((exp.exp) ) (a)) (i))) (((((((bigops.bigop) ((nat.nat) )) (i)) (fun (i0:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0:(nat.nat) ) => (f) (i0))))) (fun (x_1:(nat.nat) ) => (((logic.eq) ((nat.nat) )) ((((nat.times) ) ((((exp.exp) ) (a)) (((nat.S) ) (i)))) ((((nat.times) ) ((f) (i))) (((((((bigops.bigop) ((nat.nat) )) (i)) (fun (i0:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0:(nat.nat) ) => (f) (i0)))))) ((((nat.times) ) ((((nat.times) ) (a)) ((f) (i)))) (x_1)))) (((((((logic.eq_ind) ((nat.nat) )) ((((nat.times) ) ((((nat.times) ) ((((exp.exp) ) (a)) (((nat.S) ) (i)))) ((f) (i)))) (((((((bigops.bigop) ((nat.nat) )) (i)) (fun (i0:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0:(nat.nat) ) => (f) (i0))))) (fun (x_1:(nat.nat) ) => (((logic.eq) ((nat.nat) )) (x_1)) ((((nat.times) ) ((((nat.times) ) (a)) ((f) (i)))) ((((nat.times) ) ((((exp.exp) ) (a)) (i))) (((((((bigops.bigop) ((nat.nat) )) (i)) (fun (i0:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0:(nat.nat) ) => (f) (i0))))))) (((((((logic.eq_ind) ((nat.nat) )) ((((nat.times) ) ((((nat.times) ) ((((nat.times) ) (a)) ((f) (i)))) ((((exp.exp) ) (a)) (i)))) (((((((bigops.bigop) ((nat.nat) )) (i)) (fun (i0:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0:(nat.nat) ) => (f) (i0))))) (fun (x_1:(nat.nat) ) => (((logic.eq) ((nat.nat) )) ((((nat.times) ) ((((nat.times) ) ((((exp.exp) ) (a)) (((nat.S) ) (i)))) ((f) (i)))) (((((((bigops.bigop) ((nat.nat) )) (i)) (fun (i0:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0:(nat.nat) ) => (f) (i0))))) (x_1))) (((((((((((logic.eq_f2) ((nat.nat) )) ((nat.nat) )) ((nat.nat) )) ((nat.times) )) ((((nat.times) ) ((((exp.exp) ) (a)) (((nat.S) ) (i)))) ((f) (i)))) ((((nat.times) ) ((((nat.times) ) (a)) ((f) (i)))) ((((exp.exp) ) (a)) (i)))) (((((((bigops.bigop) ((nat.nat) )) (i)) (fun (i0:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0:(nat.nat) ) => (f) (i0)))) (((((((bigops.bigop) ((nat.nat) )) (i)) (fun (i0:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0:(nat.nat) ) => (f) (i0)))) (((((exp.sym_eq_exp) (a)) (((nat.S) ) (i))) (fun (y:(nat.nat) ) => (((logic.eq) ((nat.nat) )) ((((nat.times) ) (y)) ((f) (i)))) ((((nat.times) ) ((((nat.times) ) (a)) ((f) (i)))) ((((exp.exp) ) (a)) (i))))) ((((((nat.sym_eq_filter_nat_type_S) ((nat.nat) )) (((exp.exp_body) ) (a))) (i)) (fun (y:(nat.nat) ) => (((logic.eq) ((nat.nat) )) ((((nat.times) ) (y)) ((f) (i)))) ((((nat.times) ) ((((nat.times) ) (a)) ((f) (i)))) ((((exp.exp) ) (a)) (i))))) (((((exp.sym_eq_exp_body_S) (a)) (i)) (fun (y:(nat.nat) ) => (((logic.eq) ((nat.nat) )) ((((nat.times) ) (y)) ((f) (i)))) ((((nat.times) ) ((((nat.times) ) (a)) ((f) (i)))) ((((exp.exp) ) (a)) (i))))) (((((((logic.rewrite_r) ((nat.nat) )) ((((nat.times) ) (a)) ((((exp.exp) ) (a)) (i)))) (fun (__:(nat.nat) ) => (((logic.eq) ((nat.nat) )) ((((nat.times) ) (__)) ((f) (i)))) ((((nat.times) ) ((((nat.times) ) (a)) ((f) (i)))) ((((exp.exp) ) (a)) (i))))) (((((((logic.rewrite_r) ((nat.nat) )) ((((nat.times) ) ((f) (i))) ((((nat.times) ) (a)) ((((exp.exp) ) (a)) (i))))) (fun (__:(nat.nat) ) => (((logic.eq) ((nat.nat) )) (__)) ((((nat.times) ) ((((nat.times) ) (a)) ((f) (i)))) ((((exp.exp) ) (a)) (i))))) (((((((logic.rewrite_r) ((nat.nat) )) ((((nat.times) ) (a)) ((((nat.times) ) ((f) (i))) ((((exp.exp) ) (a)) (i))))) (fun (__:(nat.nat) ) => (((logic.eq) ((nat.nat) )) (__)) ((((nat.times) ) ((((nat.times) ) (a)) ((f) (i)))) ((((exp.exp) ) (a)) (i))))) (((((((logic.rewrite_r) ((nat.nat) )) ((((nat.times) ) ((((exp.exp) ) (a)) (i))) ((((nat.times) ) (a)) ((f) (i))))) (fun (__:(nat.nat) ) => (((logic.eq) ((nat.nat) )) ((((nat.times) ) (a)) ((((nat.times) ) ((f) (i))) ((((exp.exp) ) (a)) (i))))) (__))) (((((((logic.rewrite_r) ((nat.nat) )) ((((nat.times) ) (a)) ((((nat.times) ) ((((exp.exp) ) (a)) (i))) ((f) (i))))) (fun (__:(nat.nat) ) => (((logic.eq) ((nat.nat) )) ((((nat.times) ) (a)) ((((nat.times) ) ((f) (i))) ((((exp.exp) ) (a)) (i))))) (__))) (((((((logic.rewrite_r) ((nat.nat) )) ((((nat.times) ) ((f) (i))) ((((exp.exp) ) (a)) (i)))) (fun (__:(nat.nat) ) => (((logic.eq) ((nat.nat) )) ((((nat.times) ) (a)) ((((nat.times) ) ((f) (i))) ((((exp.exp) ) (a)) (i))))) ((((nat.times) ) (a)) (__)))) (((logic.refl) ((nat.nat) )) ((((nat.times) ) (a)) ((((nat.times) ) ((f) (i))) ((((exp.exp) ) (a)) (i)))))) ((((nat.times) ) ((((exp.exp) ) (a)) (i))) ((f) (i)))) (((nat.commutative_times) ((((exp.exp) ) (a)) (i))) ((f) (i))))) ((((nat.times) ) ((((exp.exp) ) (a)) (i))) ((((nat.times) ) (a)) ((f) (i))))) ((((nat.times_times) ((((exp.exp) ) (a)) (i))) (a)) ((f) (i))))) ((((nat.times) ) ((((nat.times) ) (a)) ((f) (i)))) ((((exp.exp) ) (a)) (i)))) (((nat.commutative_times) ((((nat.times) ) (a)) ((f) (i)))) ((((exp.exp) ) (a)) (i))))) ((((nat.times) ) ((f) (i))) ((((nat.times) ) (a)) ((((exp.exp) ) (a)) (i))))) ((((nat.times_times) ((f) (i))) (a)) ((((exp.exp) ) (a)) (i))))) ((((nat.times) ) ((((nat.times) ) (a)) ((((exp.exp) ) (a)) (i)))) ((f) (i)))) (((nat.commutative_times) ((((nat.times) ) (a)) ((((exp.exp) ) (a)) (i)))) ((f) (i))))) ((((nat.times) ) ((((exp.exp) ) (a)) (i))) (a))) (((nat.commutative_times) ((((exp.exp) ) (a)) (i))) (a))))))) (((logic.refl) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) (i)) (fun (i0:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0:(nat.nat) ) => (f) (i0)))))) ((((nat.times) ) ((((nat.times) ) (a)) ((f) (i)))) ((((nat.times) ) ((((exp.exp) ) (a)) (i))) (((((((bigops.bigop) ((nat.nat) )) (i)) (fun (i0:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0:(nat.nat) ) => (f) (i0)))))) ((((nat.associative_times) ((((nat.times) ) (a)) ((f) (i)))) ((((exp.exp) ) (a)) (i))) (((((((bigops.bigop) ((nat.nat) )) (i)) (fun (i0:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0:(nat.nat) ) => (f) (i0)))))) ((((nat.times) ) ((((exp.exp) ) (a)) (((nat.S) ) (i)))) ((((nat.times) ) ((f) (i))) (((((((bigops.bigop) ((nat.nat) )) (i)) (fun (i0:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0:(nat.nat) ) => (f) (i0)))))) ((((nat.associative_times) ((((exp.exp) ) (a)) (((nat.S) ) (i)))) ((f) (i))) (((((((bigops.bigop) ((nat.nat) )) (i)) (fun (i0:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0:(nat.nat) ) => (f) (i0)))))) (((((((bigops.bigop) ((nat.nat) )) (i)) (fun (i0:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0:(nat.nat) ) => (((nat.times) ) (a)) ((f) (i0))))) (Hind))) (((((((bigops.bigop) ((nat.nat) )) (((nat.S) ) (i))) (fun (i0:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0:(nat.nat) ) => (((nat.times) ) (a)) ((f) (i0))))) ((((((((bigops.bigop_Strue) ((nat.nat) )) (i)) (fun (__:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (__:(nat.nat) ) => (((nat.times) ) (a)) ((f) (__)))) (((logic.refl) ((bool.bool) )) ((bool.true) ))))) (((((((bigops.bigop) ((nat.nat) )) (((nat.S) ) (i))) (fun (i0:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0:(nat.nat) ) => (f) (i0)))) ((((((((bigops.bigop_Strue) ((nat.nat) )) (i)) (fun (__:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (f)) (((logic.refl) ((bool.bool) )) ((bool.true) )))))) (n).
Definition exp_pi_bc : forall (a:(nat.nat) ), forall (b:(nat.nat) ), forall (c:(nat.nat) ), forall (f:((nat.nat) ) -> (nat.nat) ), (((logic.eq) ((nat.nat) )) ((((nat.times) ) ((((exp.exp) ) (a)) ((((nat.minus) ) (c)) (b)))) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) (c)) (b))) (fun (i:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i:(nat.nat) ) => (f) ((((nat.plus) ) (i)) (b)))))) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) (c)) (b))) (fun (i:(nat.nat) ) => (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i:(nat.nat) ) => (((nat.times) ) (a)) ((f) ((((nat.plus) ) (i)) (b))))) := fun (a:(nat.nat) ) => fun (b:(nat.nat) ) => fun (c:(nat.nat) ) => fun (f:((nat.nat) ) -> (nat.nat) ) => (((exp_pi_l) ((((nat.minus) ) (c)) (b))) (a)) (fun (__:(nat.nat) ) => (f) ((((nat.plus) ) (__)) (b))).

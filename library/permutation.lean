import .bool
import .connectives
import .leibniz
import .logic
import .nat
import .relations
def permutation.injn : (((nat.nat) ) -> (nat.nat) ) -> ((nat.nat) ) -> Prop := fun (f : ((nat.nat) ) -> (nat.nat) ) , fun (n : (nat.nat) ) , forall (i:(nat.nat) ) , forall (j:(nat.nat) ) , ((((nat.le_) ) (i)) (n)) -> ((((nat.le_) ) (j)) (n)) -> ((((logic.eq_) ((nat.nat) )) ((f) (i))) ((f) (j))) -> (((logic.eq_) ((nat.nat) )) (i)) (j).
theorem permutation.injn_Sn_n : forall (f:((nat.nat) ) -> (nat.nat) ) , forall (n:(nat.nat) ) , ((((permutation.injn) ) (f)) (((nat.S) ) (n))) -> (((permutation.injn) ) (f)) (n) := fun (f : ((nat.nat) ) -> (nat.nat) ) , fun (n : (nat.nat) ) , fun (H : (((permutation.injn) ) (f)) (((nat.S) ) (n))) , (fun (i : (nat.nat) ) , fun (j : (nat.nat) ) , fun (lei : (((nat.le_) ) (i)) (n)) , (fun (lej : (((nat.le_) ) (j)) (n)) , (fun (eqf : (((logic.eq_) ((nat.nat) )) ((f) (i))) ((f) (j))) , ((((((H) (i)) (j)) ((((@nat.le_S) (i)) (n)) (lei))) ((((@nat.le_S) (j)) (n)) (lej))) (((((((@logic.rewrite_l) ((nat.nat) )) ((f) (i))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((f) (i))) (__))) (((@logic.refl_) ((nat.nat) )) ((f) (i)))) ((f) (j))) (eqf)))))).
def permutation.permut : (((nat.nat) ) -> (nat.nat) ) -> ((nat.nat) ) -> Prop := fun (f : ((nat.nat) ) -> (nat.nat) ) , fun (m : (nat.nat) ) , (((connectives.And) ) (forall (i:(nat.nat) ) , ((((nat.le_) ) (i)) (m)) -> (((nat.le_) ) ((f) (i))) (m))) ((((permutation.injn) ) (f)) (m)).
noncomputable def permutation.transpose : ((nat.nat) ) -> ((nat.nat) ) -> ((nat.nat) ) -> (nat.nat)  := fun (i : (nat.nat) ) , fun (j : (nat.nat) ) , fun (n : (nat.nat) ) , ((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((((nat.eqb) ) (n)) (j)))) ((((nat.eqb) ) (n)) (i)).
theorem permutation.transpose_i_j_i : forall (i:(nat.nat) ) , forall (j:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((((permutation.transpose) ) (i)) (j)) (i))) (j) := fun (i : (nat.nat) ) , fun (j : (nat.nat) ) , ((((((@logic.eq_ind_r) ((bool.bool) )) ((bool.true) )) (fun (x : (bool.bool) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (i)) ((((nat.eqb) ) (i)) (j)))) (x))) (j))) ((((((@bool.eq_match_bool_type_true) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (i)) ((((nat.eqb) ) (i)) (j)))) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (i)) ((((nat.eqb) ) (i)) (j)))) ((bool.true) ))) (y))) (((@logic.refl_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (i)) ((((nat.eqb) ) (i)) (j)))) ((bool.true) ))))) ((((nat.eqb) ) (i)) (i))) ((@nat.eqb_n_n) (i)).
theorem permutation.transpose_i_j_j : forall (i:(nat.nat) ) , forall (j:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((((permutation.transpose) ) (i)) (j)) (j))) (i) := fun (i : (nat.nat) ) , fun (j : (nat.nat) ) , ((((((@connectives.match_Or_prop) ((((logic.eq_) ((bool.bool) )) ((((nat.eqb) ) (j)) (i))) ((bool.true) ))) ((((logic.eq_) ((bool.bool) )) ((((nat.eqb) ) (j)) (i))) ((bool.false) ))) ((((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (j)) ((((nat.eqb) ) (j)) (j)))) ((((nat.eqb) ) (j)) (i)))) (i))) (fun (Hc : (((logic.eq_) ((bool.bool) )) ((((nat.eqb) ) (j)) (i))) ((bool.true) )) , (((((((@logic.eq_ind_r) ((bool.bool) )) ((bool.true) )) (fun (x : (bool.bool) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (j)) ((((nat.eqb) ) (j)) (j)))) (x))) (i))) ((((((@bool.sym_eq_match_bool_type_true) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (j)) ((((nat.eqb) ) (j)) (j)))) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (y)) (i))) (((((((@logic.eq_ind_r) ((nat.nat) )) (i)) (fun (x : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (x)) (i))) (((@logic.refl_) ((nat.nat) )) (i))) (j)) ((((@nat.eqb_true_to_eq) (j)) (i)) (Hc))))) ((((nat.eqb) ) (j)) (i))) (Hc)))) (fun (Hc : (((logic.eq_) ((bool.bool) )) ((((nat.eqb) ) (j)) (i))) ((bool.false) )) , (((((((@logic.eq_ind_r) ((bool.bool) )) ((bool.false) )) (fun (x : (bool.bool) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (j)) ((((nat.eqb) ) (j)) (j)))) (x))) (i))) (((((((@logic.eq_ind_r) ((bool.bool) )) ((bool.true) )) (fun (x : (bool.bool) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (j)) (x))) ((bool.false) ))) (i))) ((((((@bool.sym_eq_match_bool_type_false) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (j)) ((bool.true) ))) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (y)) (i))) ((((((@bool.eq_match_bool_type_true) ((nat.nat) )) (i)) (j)) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (i)) (j)) ((bool.true) ))) (y))) ((((((@bool.eq_match_bool_type_false) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (j)) ((bool.true) ))) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (i)) (j)) ((bool.true) ))) (y))) ((((((@bool.eq_match_bool_type_false) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (j)) ((bool.true) ))) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (y)) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (j)) ((bool.true) ))) ((bool.false) )))) (((@logic.refl_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (j)) ((bool.true) ))) ((bool.false) )))))))) ((((nat.eqb) ) (j)) (j))) ((@nat.eqb_n_n) (j)))) ((((nat.eqb) ) (j)) (i))) (Hc)))) ((@bool.true_or_false) ((((nat.eqb) ) (j)) (i))).
theorem permutation.transpose_i_j_j_i : forall (i:(nat.nat) ) , forall (j:(nat.nat) ) , forall (n:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((((permutation.transpose) ) (i)) (j)) (n))) (((((permutation.transpose) ) (j)) (i)) (n)) := fun (i : (nat.nat) ) , fun (j : (nat.nat) ) , fun (n : (nat.nat) ) , ((((((@connectives.match_Or_prop) ((((logic.eq_) ((bool.bool) )) ((((nat.eqb) ) (n)) (i))) ((bool.true) ))) ((((logic.eq_) ((bool.bool) )) ((((nat.eqb) ) (n)) (i))) ((bool.false) ))) ((((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((((nat.eqb) ) (n)) (j)))) ((((nat.eqb) ) (n)) (i)))) (((((bool.match_bool_type) ((nat.nat) )) (i)) (((((bool.match_bool_type) ((nat.nat) )) (j)) (n)) ((((nat.eqb) ) (n)) (i)))) ((((nat.eqb) ) (n)) (j))))) (fun (Hni : (((logic.eq_) ((bool.bool) )) ((((nat.eqb) ) (n)) (i))) ((bool.true) )) , (((((((@logic.eq_ind_r) ((bool.bool) )) ((bool.true) )) (fun (x : (bool.bool) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((((nat.eqb) ) (n)) (j)))) (x))) (((((bool.match_bool_type) ((nat.nat) )) (i)) (((((bool.match_bool_type) ((nat.nat) )) (j)) (n)) (x))) ((((nat.eqb) ) (n)) (j))))) (((((((@connectives.match_Or_prop) ((((logic.eq_) ((bool.bool) )) ((((nat.eqb) ) (n)) (j))) ((bool.true) ))) ((((logic.eq_) ((bool.bool) )) ((((nat.eqb) ) (n)) (j))) ((bool.false) ))) ((((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((((nat.eqb) ) (n)) (j)))) ((bool.true) ))) (((((bool.match_bool_type) ((nat.nat) )) (i)) (((((bool.match_bool_type) ((nat.nat) )) (j)) (n)) ((bool.true) ))) ((((nat.eqb) ) (n)) (j))))) (fun (Hnj : (((logic.eq_) ((bool.bool) )) ((((nat.eqb) ) (n)) (j))) ((bool.true) )) , (((((((@logic.eq_ind_r) ((bool.bool) )) ((bool.true) )) (fun (x : (bool.bool) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) (x))) ((bool.true) ))) (((((bool.match_bool_type) ((nat.nat) )) (i)) (((((bool.match_bool_type) ((nat.nat) )) (j)) (n)) ((bool.true) ))) (x)))) ((((((@bool.sym_eq_match_bool_type_true) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((bool.true) ))) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (y)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (((((bool.match_bool_type) ((nat.nat) )) (j)) (n)) ((bool.true) ))) ((bool.true) )))) ((((((@bool.sym_eq_match_bool_type_true) ((nat.nat) )) (i)) (((((bool.match_bool_type) ((nat.nat) )) (j)) (n)) ((bool.true) ))) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (j)) (y))) (((((((@logic.eq_ind) ((nat.nat) )) (n)) (fun (x_1 : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (j)) (x_1))) (((((((@logic.eq_ind) ((nat.nat) )) (n)) (fun (x_1 : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (x_1)) (n))) (((@logic.refl_) ((nat.nat) )) (n))) (j)) ((((@nat.eqb_true_to_eq) (n)) (j)) (Hnj)))) (i)) ((((@nat.eqb_true_to_eq) (n)) (i)) (Hni)))))) ((((nat.eqb) ) (n)) (j))) (Hnj)))) (fun (Hnj : (((logic.eq_) ((bool.bool) )) ((((nat.eqb) ) (n)) (j))) ((bool.false) )) , (((((((@logic.eq_ind_r) ((bool.bool) )) ((bool.false) )) (fun (x : (bool.bool) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) (x))) ((bool.true) ))) (((((bool.match_bool_type) ((nat.nat) )) (i)) (((((bool.match_bool_type) ((nat.nat) )) (j)) (n)) ((bool.true) ))) (x)))) ((((((@bool.sym_eq_match_bool_type_false) ((nat.nat) )) (i)) (n)) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (y)) ((bool.true) ))) (((((bool.match_bool_type) ((nat.nat) )) (i)) (((((bool.match_bool_type) ((nat.nat) )) (j)) (n)) ((bool.true) ))) ((bool.false) )))) ((((((@bool.sym_eq_match_bool_type_false) ((nat.nat) )) (i)) (((((bool.match_bool_type) ((nat.nat) )) (j)) (n)) ((bool.true) ))) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (n)) ((bool.true) ))) (y))) ((((((@bool.sym_eq_match_bool_type_true) ((nat.nat) )) (j)) (n)) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (n)) ((bool.true) ))) (y))) ((((((@bool.sym_eq_match_bool_type_true) ((nat.nat) )) (j)) (n)) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (y)) (j))) (((@logic.refl_) ((nat.nat) )) (j))))))) ((((nat.eqb) ) (n)) (j))) (Hnj)))) ((@bool.true_or_false) ((((nat.eqb) ) (n)) (j))))) ((((nat.eqb) ) (n)) (i))) (Hni)))) (fun (Hni : (((logic.eq_) ((bool.bool) )) ((((nat.eqb) ) (n)) (i))) ((bool.false) )) , (((((((@logic.eq_ind_r) ((bool.bool) )) ((bool.false) )) (fun (x : (bool.bool) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((((nat.eqb) ) (n)) (j)))) (x))) (((((bool.match_bool_type) ((nat.nat) )) (i)) (((((bool.match_bool_type) ((nat.nat) )) (j)) (n)) (x))) ((((nat.eqb) ) (n)) (j))))) (((((((@connectives.match_Or_prop) ((((logic.eq_) ((bool.bool) )) ((((nat.eqb) ) (n)) (j))) ((bool.true) ))) ((((logic.eq_) ((bool.bool) )) ((((nat.eqb) ) (n)) (j))) ((bool.false) ))) ((((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((((nat.eqb) ) (n)) (j)))) ((bool.false) ))) (((((bool.match_bool_type) ((nat.nat) )) (i)) (((((bool.match_bool_type) ((nat.nat) )) (j)) (n)) ((bool.false) ))) ((((nat.eqb) ) (n)) (j))))) (fun (Hnj : (((logic.eq_) ((bool.bool) )) ((((nat.eqb) ) (n)) (j))) ((bool.true) )) , (((((((@logic.eq_ind_r) ((bool.bool) )) ((bool.true) )) (fun (x : (bool.bool) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) (x))) ((bool.false) ))) (((((bool.match_bool_type) ((nat.nat) )) (i)) (((((bool.match_bool_type) ((nat.nat) )) (j)) (n)) ((bool.false) ))) (x)))) ((((((@bool.sym_eq_match_bool_type_false) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((bool.true) ))) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (y)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (((((bool.match_bool_type) ((nat.nat) )) (j)) (n)) ((bool.false) ))) ((bool.true) )))) ((((((@bool.sym_eq_match_bool_type_false) ((nat.nat) )) (j)) (n)) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((bool.true) ))) (((((bool.match_bool_type) ((nat.nat) )) (i)) (y)) ((bool.true) )))) ((((((@bool.sym_eq_match_bool_type_true) ((nat.nat) )) (i)) (n)) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((bool.true) ))) (y))) ((((((@bool.sym_eq_match_bool_type_true) ((nat.nat) )) (i)) (n)) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (y)) (i))) (((@logic.refl_) ((nat.nat) )) (i))))))) ((((nat.eqb) ) (n)) (j))) (Hnj)))) (fun (Hnj : (((logic.eq_) ((bool.bool) )) ((((nat.eqb) ) (n)) (j))) ((bool.false) )) , (((((((@logic.eq_ind_r) ((bool.bool) )) ((bool.false) )) (fun (x : (bool.bool) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) (x))) ((bool.false) ))) (((((bool.match_bool_type) ((nat.nat) )) (i)) (((((bool.match_bool_type) ((nat.nat) )) (j)) (n)) ((bool.false) ))) (x)))) ((((((@bool.sym_eq_match_bool_type_false) ((nat.nat) )) (i)) (n)) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (y)) ((bool.false) ))) (((((bool.match_bool_type) ((nat.nat) )) (i)) (((((bool.match_bool_type) ((nat.nat) )) (j)) (n)) ((bool.false) ))) ((bool.false) )))) ((((((@bool.sym_eq_match_bool_type_false) ((nat.nat) )) (j)) (n)) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (n)) ((bool.false) ))) (((((bool.match_bool_type) ((nat.nat) )) (i)) (y)) ((bool.false) )))) ((((((@bool.sym_eq_match_bool_type_false) ((nat.nat) )) (j)) (n)) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (y)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((bool.false) )))) ((((((@bool.sym_eq_match_bool_type_false) ((nat.nat) )) (i)) (n)) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (n)) (y))) (((@logic.refl_) ((nat.nat) )) (n))))))) ((((nat.eqb) ) (n)) (j))) (Hnj)))) ((@bool.true_or_false) ((((nat.eqb) ) (n)) (j))))) ((((nat.eqb) ) (n)) (i))) (Hni)))) ((@bool.true_or_false) ((((nat.eqb) ) (n)) (i))).
theorem permutation.transpose_transpose : forall (i:(nat.nat) ) , forall (j:(nat.nat) ) , forall (n:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((((permutation.transpose) ) (i)) (j)) (((((permutation.transpose) ) (i)) (j)) (n)))) (n) := fun (i : (nat.nat) ) , fun (j : (nat.nat) ) , fun (n : (nat.nat) ) , ((((((@connectives.match_Or_prop) ((((logic.eq_) ((bool.bool) )) ((((nat.eqb) ) (n)) (i))) ((bool.true) ))) ((((logic.eq_) ((bool.bool) )) ((((nat.eqb) ) (n)) (i))) ((bool.false) ))) ((((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((((nat.eqb) ) (n)) (j)))) ((((nat.eqb) ) (n)) (i)))) ((((nat.eqb) ) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((((nat.eqb) ) (n)) (j)))) ((((nat.eqb) ) (n)) (i)))) (j)))) ((((nat.eqb) ) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((((nat.eqb) ) (n)) (j)))) ((((nat.eqb) ) (n)) (i)))) (i)))) (n))) (fun (Hni : (((logic.eq_) ((bool.bool) )) ((((nat.eqb) ) (n)) (i))) ((bool.true) )) , (((((((@logic.eq_ind_r) ((bool.bool) )) ((bool.true) )) (fun (x : (bool.bool) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((((nat.eqb) ) (n)) (j)))) (x))) ((((nat.eqb) ) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((((nat.eqb) ) (n)) (j)))) (x))) (j)))) ((((nat.eqb) ) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((((nat.eqb) ) (n)) (j)))) (x))) (i)))) (n))) ((((((@bool.sym_eq_match_bool_type_true) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((((nat.eqb) ) (n)) (j)))) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((((nat.eqb) ) (n)) (j)))) ((bool.true) ))) ((((nat.eqb) ) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((((nat.eqb) ) (n)) (j)))) ((bool.true) ))) (j)))) ((((nat.eqb) ) (y)) (i)))) (n))) ((((((@bool.sym_eq_match_bool_type_true) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((((nat.eqb) ) (n)) (j)))) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((((nat.eqb) ) (n)) (j)))) ((bool.true) ))) ((((nat.eqb) ) (y)) (j)))) ((((nat.eqb) ) (j)) (i)))) (n))) ((((((@bool.sym_eq_match_bool_type_true) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((((nat.eqb) ) (n)) (j)))) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (y)) ((((nat.eqb) ) (j)) (j)))) ((((nat.eqb) ) (j)) (i)))) (n))) (((((((@connectives.match_Or_prop) ((((logic.eq_) ((bool.bool) )) ((((nat.eqb) ) (j)) (i))) ((bool.true) ))) ((((logic.eq_) ((bool.bool) )) ((((nat.eqb) ) (j)) (i))) ((bool.false) ))) ((((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (j)) ((((nat.eqb) ) (j)) (j)))) ((((nat.eqb) ) (j)) (i)))) (n))) (fun (Hji : (((logic.eq_) ((bool.bool) )) ((((nat.eqb) ) (j)) (i))) ((bool.true) )) , (((((((@logic.eq_ind_r) ((bool.bool) )) ((bool.true) )) (fun (x : (bool.bool) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (j)) ((((nat.eqb) ) (j)) (j)))) (x))) (n))) ((((((@bool.sym_eq_match_bool_type_true) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (j)) ((((nat.eqb) ) (j)) (j)))) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (y)) (n))) (((((((@logic.eq_ind_r) ((nat.nat) )) (i)) (fun (x : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (j)) (x))) ((((@nat.eqb_true_to_eq) (j)) (i)) (Hji))) (n)) ((((@nat.eqb_true_to_eq) (n)) (i)) (Hni))))) ((((nat.eqb) ) (j)) (i))) (Hji)))) (fun (Hji : (((logic.eq_) ((bool.bool) )) ((((nat.eqb) ) (j)) (i))) ((bool.false) )) , (((((((@logic.eq_ind_r) ((bool.bool) )) ((bool.false) )) (fun (x : (bool.bool) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (j)) ((((nat.eqb) ) (j)) (j)))) (x))) (n))) ((((((@bool.sym_eq_match_bool_type_false) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (j)) ((((nat.eqb) ) (j)) (j)))) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (y)) (n))) (((((((@logic.eq_ind_r) ((bool.bool) )) ((bool.true) )) (fun (x : (bool.bool) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (i)) (j)) (x))) (n))) ((((((@bool.sym_eq_match_bool_type_true) ((nat.nat) )) (i)) (j)) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (y)) (n))) (((((@logic.sym_eq) ((nat.nat) )) (n)) (i)) ((((@nat.eqb_true_to_eq) (n)) (i)) (Hni))))) ((((nat.eqb) ) (j)) (j))) ((@nat.eqb_n_n) (j))))) ((((nat.eqb) ) (j)) (i))) (Hji)))) ((@bool.true_or_false) ((((nat.eqb) ) (j)) (i)))))))) ((((nat.eqb) ) (n)) (i))) (Hni)))) (fun (Hni : (((logic.eq_) ((bool.bool) )) ((((nat.eqb) ) (n)) (i))) ((bool.false) )) , (((((((@logic.eq_ind_r) ((bool.bool) )) ((bool.false) )) (fun (x : (bool.bool) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((((nat.eqb) ) (n)) (j)))) (x))) ((((nat.eqb) ) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((((nat.eqb) ) (n)) (j)))) (x))) (j)))) ((((nat.eqb) ) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((((nat.eqb) ) (n)) (j)))) (x))) (i)))) (n))) ((((((@bool.sym_eq_match_bool_type_false) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((((nat.eqb) ) (n)) (j)))) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((((nat.eqb) ) (n)) (j)))) ((bool.false) ))) ((((nat.eqb) ) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((((nat.eqb) ) (n)) (j)))) ((bool.false) ))) (j)))) ((((nat.eqb) ) (y)) (i)))) (n))) ((((((@bool.sym_eq_match_bool_type_false) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((((nat.eqb) ) (n)) (j)))) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((((nat.eqb) ) (n)) (j)))) ((bool.false) ))) ((((nat.eqb) ) (y)) (j)))) ((((nat.eqb) ) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((((nat.eqb) ) (n)) (j)))) (i)))) (n))) ((((((@bool.sym_eq_match_bool_type_false) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((((nat.eqb) ) (n)) (j)))) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (y)) ((((nat.eqb) ) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((((nat.eqb) ) (n)) (j)))) (j)))) ((((nat.eqb) ) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((((nat.eqb) ) (n)) (j)))) (i)))) (n))) (((((((@connectives.match_Or_prop) ((((logic.eq_) ((bool.bool) )) ((((nat.eqb) ) (n)) (j))) ((bool.true) ))) ((((logic.eq_) ((bool.bool) )) ((((nat.eqb) ) (n)) (j))) ((bool.false) ))) ((((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((((nat.eqb) ) (n)) (j)))) ((((nat.eqb) ) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((((nat.eqb) ) (n)) (j)))) (j)))) ((((nat.eqb) ) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((((nat.eqb) ) (n)) (j)))) (i)))) (n))) (fun (Hnj : (((logic.eq_) ((bool.bool) )) ((((nat.eqb) ) (n)) (j))) ((bool.true) )) , (((((((@logic.eq_ind_r) ((bool.bool) )) ((bool.true) )) (fun (x : (bool.bool) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) (x))) ((((nat.eqb) ) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) (x))) (j)))) ((((nat.eqb) ) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) (x))) (i)))) (n))) ((((((@bool.sym_eq_match_bool_type_true) ((nat.nat) )) (i)) (n)) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((bool.true) ))) ((((nat.eqb) ) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((bool.true) ))) (j)))) ((((nat.eqb) ) (y)) (i)))) (n))) ((((((@bool.sym_eq_match_bool_type_true) ((nat.nat) )) (i)) (n)) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((bool.true) ))) ((((nat.eqb) ) (y)) (j)))) ((((nat.eqb) ) (i)) (i)))) (n))) ((((((@bool.sym_eq_match_bool_type_true) ((nat.nat) )) (i)) (n)) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (y)) ((((nat.eqb) ) (i)) (j)))) ((((nat.eqb) ) (i)) (i)))) (n))) (((((((@logic.eq_ind_r) ((bool.bool) )) ((bool.true) )) (fun (x : (bool.bool) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (i)) ((((nat.eqb) ) (i)) (j)))) (x))) (n))) ((((((@bool.sym_eq_match_bool_type_true) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (i)) ((((nat.eqb) ) (i)) (j)))) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (y)) (n))) (((((@logic.sym_eq) ((nat.nat) )) (n)) (j)) ((((@nat.eqb_true_to_eq) (n)) (j)) (Hnj))))) ((((nat.eqb) ) (i)) (i))) ((@nat.eqb_n_n) (i))))))) ((((nat.eqb) ) (n)) (j))) (Hnj)))) (fun (Hnj : (((logic.eq_) ((bool.bool) )) ((((nat.eqb) ) (n)) (j))) ((bool.false) )) , (((((((@logic.eq_ind_r) ((bool.bool) )) ((bool.false) )) (fun (x : (bool.bool) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) (x))) ((((nat.eqb) ) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) (x))) (j)))) ((((nat.eqb) ) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) (x))) (i)))) (n))) ((((((@bool.sym_eq_match_bool_type_false) ((nat.nat) )) (i)) (n)) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((bool.false) ))) ((((nat.eqb) ) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((bool.false) ))) (j)))) ((((nat.eqb) ) (y)) (i)))) (n))) ((((((@bool.sym_eq_match_bool_type_false) ((nat.nat) )) (i)) (n)) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((bool.false) ))) ((((nat.eqb) ) (y)) (j)))) ((((nat.eqb) ) (n)) (i)))) (n))) ((((((@bool.sym_eq_match_bool_type_false) ((nat.nat) )) (i)) (n)) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (y)) ((((nat.eqb) ) (n)) (j)))) ((((nat.eqb) ) (n)) (i)))) (n))) (((((((@logic.eq_ind_r) ((bool.bool) )) ((bool.false) )) (fun (x : (bool.bool) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((((nat.eqb) ) (n)) (j)))) (x))) (n))) (((((((@logic.eq_ind_r) ((bool.bool) )) ((bool.false) )) (fun (x : (bool.bool) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) (x))) ((bool.false) ))) (n))) ((((((@bool.eq_match_bool_type_false) ((nat.nat) )) (i)) (n)) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((bool.false) ))) ((bool.false) ))) (y))) ((((((@bool.eq_match_bool_type_false) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((bool.false) ))) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((bool.false) ))) ((bool.false) ))) (y))) (((@logic.refl_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (n)) ((bool.false) ))) ((bool.false) )))))) ((((nat.eqb) ) (n)) (j))) (Hnj))) ((((nat.eqb) ) (n)) (i))) (Hni)))))) ((((nat.eqb) ) (n)) (j))) (Hnj)))) ((@bool.true_or_false) ((((nat.eqb) ) (n)) (j)))))))) ((((nat.eqb) ) (n)) (i))) (Hni)))) ((@bool.true_or_false) ((((nat.eqb) ) (n)) (i))).
theorem permutation.injective_transpose : forall (i:(nat.nat) ) , forall (j:(nat.nat) ) , ((relations.injective) ((nat.nat) ) ((nat.nat) )) ((((permutation.transpose) ) (i)) (j)) := fun (i : (nat.nat) ) , fun (j : (nat.nat) ) , fun (x : (nat.nat) ) , fun (y : (nat.nat) ) , fun (auto : (((logic.eq_) ((nat.nat) )) (((((permutation.transpose) ) (i)) (j)) (x))) (((((permutation.transpose) ) (i)) (j)) (y))) , (((((((@logic.rewrite_r) ((nat.nat) )) (y)) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (__)) (y))) (((@logic.refl_) ((nat.nat) )) (y))) (x)) (((((((@logic.rewrite_l) ((nat.nat) )) (((((permutation.transpose) ) (i)) (j)) (((((permutation.transpose) ) (i)) (j)) (x)))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (__)) (y))) (((((((@logic.rewrite_r) ((nat.nat) )) (((((permutation.transpose) ) (i)) (j)) (y))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((((permutation.transpose) ) (i)) (j)) (__))) (y))) ((((@permutation.transpose_transpose) (i)) (j)) (y))) (((((permutation.transpose) ) (i)) (j)) (x))) (auto))) (x)) ((((@permutation.transpose_transpose) (i)) (j)) (x)))).
theorem permutation.permut_S_to_permut_transpose : forall (f:((nat.nat) ) -> (nat.nat) ) , forall (m:(nat.nat) ) , ((((permutation.permut) ) (f)) (((nat.S) ) (m))) -> (((permutation.permut) ) (fun (n : (nat.nat) ) , ((((permutation.transpose) ) ((f) (((nat.S) ) (m)))) (((nat.S) ) (m))) ((f) (n)))) (m) := fun (f : ((nat.nat) ) -> (nat.nat) ) , fun (m : (nat.nat) ) , fun (_clearme : (((permutation.permut) ) (f)) (((nat.S) ) (m))) , ((((((@connectives.match_And_prop) (forall (i:(nat.nat) ) , ((((nat.le_) ) (i)) (((nat.S) ) (m))) -> (((nat.le_) ) ((f) (i))) (((nat.S) ) (m)))) ((((permutation.injn) ) (f)) (((nat.S) ) (m)))) ((((permutation.permut) ) (fun (n : (nat.nat) ) , ((((permutation.transpose) ) ((f) (((nat.S) ) (m)))) (((nat.S) ) (m))) ((f) (n)))) (m))) (fun (permf1 : forall (i:(nat.nat) ) , ((((nat.le_) ) (i)) (((nat.S) ) (m))) -> (((nat.le_) ) ((f) (i))) (((nat.S) ) (m))) , (fun (permf2 : (((permutation.injn) ) (f)) (((nat.S) ) (m))) , (((((@connectives.conj) (forall (x:(nat.nat) ) , ((((nat.le_) ) (x)) (m)) -> (((nat.le_) ) (((((permutation.transpose) ) ((f) (((nat.S) ) (m)))) (((nat.S) ) (m))) ((f) (x)))) (m))) ((((permutation.injn) ) (fun (n : (nat.nat) ) , ((((permutation.transpose) ) ((f) (((nat.S) ) (m)))) (((nat.S) ) (m))) ((f) (n)))) (m))) (fun (i : (nat.nat) ) , fun (leim : (((nat.le_) ) (i)) (m)) , (((((((@logic.eq_ind_r) ((bool.bool) )) ((bool.false) )) (fun (x : (bool.bool) ) , (((nat.le_) ) (((((bool.match_bool_type) ((nat.nat) )) (((nat.S) ) (m))) (((((bool.match_bool_type) ((nat.nat) )) ((f) (((nat.S) ) (m)))) ((f) (i))) ((((nat.eqb) ) ((f) (i))) (((nat.S) ) (m))))) (x))) (m))) ((((((@bool.sym_eq_match_bool_type_false) ((nat.nat) )) (((nat.S) ) (m))) (((((bool.match_bool_type) ((nat.nat) )) ((f) (((nat.S) ) (m)))) ((f) (i))) ((((nat.eqb) ) ((f) (i))) (((nat.S) ) (m))))) (fun (y : (nat.nat) ) , (((nat.le_) ) (y)) (m))) (((((((@connectives.match_Or_prop) ((((nat.lt_) ) ((f) (i))) (((nat.S) ) (m)))) ((((logic.eq_) ((nat.nat) )) ((f) (i))) (((nat.S) ) (m)))) ((((nat.le_) ) (((((bool.match_bool_type) ((nat.nat) )) ((f) (((nat.S) ) (m)))) ((f) (i))) ((((nat.eqb) ) ((f) (i))) (((nat.S) ) (m))))) (m))) (fun (Hfi : (((nat.lt_) ) ((f) (i))) (((nat.S) ) (m))) , (((((((@logic.eq_ind_r) ((bool.bool) )) ((bool.false) )) (fun (x : (bool.bool) ) , (((nat.le_) ) (((((bool.match_bool_type) ((nat.nat) )) ((f) (((nat.S) ) (m)))) ((f) (i))) (x))) (m))) ((((((@bool.sym_eq_match_bool_type_false) ((nat.nat) )) ((f) (((nat.S) ) (m)))) ((f) (i))) (fun (y : (nat.nat) ) , (((nat.le_) ) (y)) (m))) ((((@nat.le_S_S_to_le) ((f) (i))) (m)) (Hfi)))) ((((nat.eqb) ) ((f) (i))) (((nat.S) ) (m)))) ((((@nat.not_eq_to_eqb_false) ((f) (i))) (((nat.S) ) (m))) ((((@nat.lt_to_not_eq) ((f) (i))) (((nat.S) ) (m))) (Hfi)))))) (fun (Hfi : (((logic.eq_) ((nat.nat) )) ((f) (i))) (((nat.S) ) (m))) , (((((((@logic.eq_ind_r) ((bool.bool) )) ((bool.true) )) (fun (x : (bool.bool) ) , (((nat.le_) ) (((((bool.match_bool_type) ((nat.nat) )) ((f) (((nat.S) ) (m)))) ((f) (i))) (x))) (m))) ((((((@bool.sym_eq_match_bool_type_true) ((nat.nat) )) ((f) (((nat.S) ) (m)))) ((f) (i))) (fun (y : (nat.nat) ) , (((nat.le_) ) (y)) (m))) (((((((@connectives.match_Or_prop) ((((nat.lt_) ) ((f) (((nat.S) ) (m)))) (((nat.S) ) (m)))) ((((logic.eq_) ((nat.nat) )) ((f) (((nat.S) ) (m)))) (((nat.S) ) (m)))) ((((nat.le_) ) ((f) (((nat.S) ) (m)))) (m))) (fun (H : (((nat.lt_) ) ((f) (((nat.S) ) (m)))) (((nat.S) ) (m))) , ((((@nat.le_S_S_to_le) ((f) (((nat.S) ) (m)))) (m)) (H)))) (fun (H : (((logic.eq_) ((nat.nat) )) ((f) (((nat.S) ) (m)))) (((nat.S) ) (m))) , (((@connectives.falsity) ((((nat.le_) ) ((f) (((nat.S) ) (m)))) (m))) ((((@logic.absurd) ((((logic.eq_) ((nat.nat) )) (i)) (((nat.S) ) (m)))) ((((((permf2) (i)) (((nat.S) ) (m))) ((((@nat.le_S) (i)) (m)) (leim))) ((@nat.le_n) (((nat.S) ) (m)))) (((((((@logic.rewrite_l) ((nat.nat) )) ((f) (i))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((f) (i))) ((f) (__)))) (((((((@logic.rewrite_r) ((nat.nat) )) ((f) (i))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((f) (i))) (__))) (((@logic.refl_) ((nat.nat) )) ((f) (i)))) ((f) ((f) (i)))) (((((((@logic.rewrite_r) ((nat.nat) )) (((nat.S) ) (m))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((f) ((f) (i)))) (__))) (((((((@logic.rewrite_r) ((nat.nat) )) (((nat.S) ) (m))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((f) (__))) (((nat.S) ) (m)))) (H)) ((f) (i))) (Hfi))) ((f) (i))) (Hfi)))) (((nat.S) ) (m))) (Hfi)))) (((((@logic.not_to_not) ((((logic.eq_) ((nat.nat) )) (i)) (((nat.S) ) (m)))) ((((nat.le_) ) (((nat.S) ) (m))) (m))) (fun (auto : (((logic.eq_) ((nat.nat) )) (i)) (((nat.S) ) (m))) , (((((@logic.eq_coerc) ((((nat.le_) ) (i)) (m))) ((((nat.le_) ) (((nat.S) ) (m))) (m))) (leim)) (((((((@logic.rewrite_l) ((nat.nat) )) (i)) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) (i)) (m))) ((((nat.le_) ) (__)) (m)))) (((@logic.refl_) (Prop)) ((((nat.le_) ) (i)) (m)))) (((nat.S) ) (m))) (auto))))) ((((@nat.lt_to_not_le) (m)) (((nat.S) ) (m))) ((@nat.le_n) (((nat.S) ) (m))))))))) ((((@nat.le_to_or_lt_eq) ((f) (((nat.S) ) (m)))) (((nat.S) ) (m))) (((permf1) (((nat.S) ) (m))) ((@nat.le_n) (((nat.S) ) (m)))))))) ((((nat.eqb) ) ((f) (i))) (((nat.S) ) (m)))) ((((@nat.eq_to_eqb_true) ((f) (i))) (((nat.S) ) (m))) (Hfi))))) ((((@nat.le_to_or_lt_eq) ((f) (i))) (((nat.S) ) (m))) (((permf1) (i)) ((((@nat.le_S) (i)) (m)) (leim))))))) ((((nat.eqb) ) ((f) (i))) ((f) (((nat.S) ) (m))))) ((((@nat.not_eq_to_eqb_false) ((f) (i))) ((f) (((nat.S) ) (m)))) (((@connectives.nmk) ((((logic.eq_) ((nat.nat) )) ((f) (i))) ((f) (((nat.S) ) (m))))) (fun (H : (((logic.eq_) ((nat.nat) )) ((f) (i))) ((f) (((nat.S) ) (m)))) , ((((@logic.absurd) ((((logic.eq_) ((nat.nat) )) (i)) (((nat.S) ) (m)))) ((((((permf2) (i)) (((nat.S) ) (m))) ((((@nat.le_S) (i)) (m)) (leim))) ((@nat.le_n) (((nat.S) ) (m)))) (H))) ((((@nat.lt_to_not_eq) (i)) (((nat.S) ) (m))) ((((@nat.le_S_S) (i)) (m)) (leim)))))))))) (fun (a : (nat.nat) ) , fun (b : (nat.nat) ) , fun (leam : (((nat.le_) ) (a)) (m)) , (fun (lebm : (((nat.le_) ) (b)) (m)) , (fun (H : (((logic.eq_) ((nat.nat) )) (((((permutation.transpose) ) ((f) (((nat.S) ) (m)))) (((nat.S) ) (m))) ((f) (a)))) (((((permutation.transpose) ) ((f) (((nat.S) ) (m)))) (((nat.S) ) (m))) ((f) (b)))) , ((((((permf2) (a)) (b)) ((((@nat.le_S) (a)) (m)) (leam))) ((((@nat.le_S) (b)) (m)) (lebm))) ((((((@permutation.injective_transpose) ((f) (((nat.S) ) (m)))) (((nat.S) ) (m))) ((f) (a))) ((f) (b))) (H)))))))))) (_clearme)).
def permutation.bijn : (((nat.nat) ) -> (nat.nat) ) -> ((nat.nat) ) -> Prop := fun (f : ((nat.nat) ) -> (nat.nat) ) , fun (n : (nat.nat) ) , forall (m:(nat.nat) ) , ((((nat.le_) ) (m)) (n)) -> ((connectives.ex) ((nat.nat) )) (fun (p : (nat.nat) ) , (((connectives.And) ) ((((nat.le_) ) (p)) (n))) ((((logic.eq_) ((nat.nat) )) ((f) (p))) (m))).
theorem permutation.eq_to_bijn : forall (f:((nat.nat) ) -> (nat.nat) ) , forall (g:((nat.nat) ) -> (nat.nat) ) , forall (n:(nat.nat) ) , (forall (i:(nat.nat) ) , ((((nat.le_) ) (i)) (n)) -> (((logic.eq_) ((nat.nat) )) ((f) (i))) ((g) (i))) -> ((((permutation.bijn) ) (f)) (n)) -> (((permutation.bijn) ) (g)) (n) := fun (f : ((nat.nat) ) -> (nat.nat) ) , fun (g : ((nat.nat) ) -> (nat.nat) ) , fun (n : (nat.nat) ) , fun (H : forall (i:(nat.nat) ) , ((((nat.le_) ) (i)) (n)) -> (((logic.eq_) ((nat.nat) )) ((f) (i))) ((g) (i))) , (fun (bijf : (((permutation.bijn) ) (f)) (n)) , (fun (i : (nat.nat) ) , fun (lein : (((nat.le_) ) (i)) (n)) , ((((((@connectives.match_ex_prop) ((nat.nat) )) (fun (p : (nat.nat) ) , (((connectives.And) ) ((((nat.le_) ) (p)) (n))) ((((logic.eq_) ((nat.nat) )) ((f) (p))) (i)))) (((connectives.ex) ((nat.nat) )) (fun (p : (nat.nat) ) , (((connectives.And) ) ((((nat.le_) ) (p)) (n))) ((((logic.eq_) ((nat.nat) )) ((g) (p))) (i))))) (fun (a : (nat.nat) ) , fun (_clearme : (((connectives.And) ) ((((nat.le_) ) (a)) (n))) ((((logic.eq_) ((nat.nat) )) ((f) (a))) (i))) , ((((((@connectives.match_And_prop) ((((nat.le_) ) (a)) (n))) ((((logic.eq_) ((nat.nat) )) ((f) (a))) (i))) (((connectives.ex) ((nat.nat) )) (fun (p : (nat.nat) ) , (((connectives.And) ) ((((nat.le_) ) (p)) (n))) ((((logic.eq_) ((nat.nat) )) ((g) (p))) (i))))) (fun (lean : (((nat.le_) ) (a)) (n)) , (fun (fa : (((logic.eq_) ((nat.nat) )) ((f) (a))) (i)) , (((((@connectives.ex_intro) ((nat.nat) )) (fun (x : (nat.nat) ) , (((connectives.And) ) ((((nat.le_) ) (x)) (n))) ((((logic.eq_) ((nat.nat) )) ((g) (x))) (i)))) (a)) (((((@connectives.conj) ((((nat.le_) ) (a)) (n))) ((((logic.eq_) ((nat.nat) )) ((g) (a))) (i))) (lean)) (((((((@logic.eq_ind) ((nat.nat) )) ((f) (a))) (fun (x_1 : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((g) (a))) (x_1))) (((((@logic.sym_eq) ((nat.nat) )) ((f) (a))) ((g) (a))) (((H) (a)) (lean)))) (i)) (fa))))))) (_clearme)))) (((bijf) (i)) (lein))))).
theorem permutation.bijn_n_Sn : forall (f:((nat.nat) ) -> (nat.nat) ) , forall (n:(nat.nat) ) , ((((permutation.bijn) ) (f)) (n)) -> ((((logic.eq_) ((nat.nat) )) ((f) (((nat.S) ) (n)))) (((nat.S) ) (n))) -> (((permutation.bijn) ) (f)) (((nat.S) ) (n)) := fun (f : ((nat.nat) ) -> (nat.nat) ) , fun (n : (nat.nat) ) , fun (bijf : (((permutation.bijn) ) (f)) (n)) , (fun (fS : (((logic.eq_) ((nat.nat) )) ((f) (((nat.S) ) (n)))) (((nat.S) ) (n))) , (fun (i : (nat.nat) ) , fun (lein : (((nat.le_) ) (i)) (((nat.S) ) (n))) , (((((((@connectives.match_Or_prop) ((((nat.lt_) ) (i)) (((nat.S) ) (n)))) ((((logic.eq_) ((nat.nat) )) (i)) (((nat.S) ) (n)))) (((connectives.ex) ((nat.nat) )) (fun (p : (nat.nat) ) , (((connectives.And) ) ((((nat.le_) ) (p)) (((nat.S) ) (n)))) ((((logic.eq_) ((nat.nat) )) ((f) (p))) (i))))) (fun (Hi : (((nat.lt_) ) (i)) (((nat.S) ) (n))) , ((((((@connectives.match_ex_prop) ((nat.nat) )) (fun (p : (nat.nat) ) , (((connectives.And) ) ((((nat.le_) ) (p)) (n))) ((((logic.eq_) ((nat.nat) )) ((f) (p))) (i)))) (((connectives.ex) ((nat.nat) )) (fun (p : (nat.nat) ) , (((connectives.And) ) ((((nat.le_) ) (p)) (((nat.S) ) (n)))) ((((logic.eq_) ((nat.nat) )) ((f) (p))) (i))))) (fun (a : (nat.nat) ) , fun (_clearme : (((connectives.And) ) ((((nat.le_) ) (a)) (n))) ((((logic.eq_) ((nat.nat) )) ((f) (a))) (i))) , ((((((@connectives.match_And_prop) ((((nat.le_) ) (a)) (n))) ((((logic.eq_) ((nat.nat) )) ((f) (a))) (i))) (((connectives.ex) ((nat.nat) )) (fun (p : (nat.nat) ) , (((connectives.And) ) ((((nat.le_) ) (p)) (((nat.S) ) (n)))) ((((logic.eq_) ((nat.nat) )) ((f) (p))) (i))))) (fun (lean : (((nat.le_) ) (a)) (n)) , (fun (fa : (((logic.eq_) ((nat.nat) )) ((f) (a))) (i)) , (((((@connectives.ex_intro) ((nat.nat) )) (fun (x : (nat.nat) ) , (((connectives.And) ) ((((nat.le_) ) (x)) (((nat.S) ) (n)))) ((((logic.eq_) ((nat.nat) )) ((f) (x))) (i)))) (a)) (((((@connectives.conj) ((((nat.le_) ) (a)) (((nat.S) ) (n)))) ((((logic.eq_) ((nat.nat) )) ((f) (a))) (i))) ((((@nat.le_S) (a)) (n)) (lean))) (((((((@logic.rewrite_r) ((nat.nat) )) (i)) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (__)) (i))) (((@logic.refl_) ((nat.nat) )) (i))) ((f) (a))) (fa))))))) (_clearme)))) (((bijf) (i)) ((((@nat.le_S_S_to_le) (i)) (n)) (Hi)))))) (fun (Hi : (((logic.eq_) ((nat.nat) )) (i)) (((nat.S) ) (n))) , (((((@connectives.ex_intro) ((nat.nat) )) (fun (x : (nat.nat) ) , (((connectives.And) ) ((((nat.le_) ) (x)) (((nat.S) ) (n)))) ((((logic.eq_) ((nat.nat) )) ((f) (x))) (i)))) (i)) (((((@connectives.conj) ((((nat.le_) ) (i)) (((nat.S) ) (n)))) ((((logic.eq_) ((nat.nat) )) ((f) (i))) (i))) (((((@logic.eq_coerc) ((((nat.le_) ) (i)) (i))) ((((nat.le_) ) (i)) (((nat.S) ) (n)))) ((@nat.le_n) (i))) (((((((@logic.rewrite_l) ((nat.nat) )) (i)) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) (i)) (i))) ((((nat.le_) ) (i)) (__)))) (((@logic.refl_) (Prop)) ((((nat.le_) ) (i)) (i)))) (((nat.S) ) (n))) (Hi)))) (((((((@logic.rewrite_r) ((nat.nat) )) (i)) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (__)) (i))) (((@logic.refl_) ((nat.nat) )) (i))) ((f) (i))) (((((((@logic.rewrite_r) ((nat.nat) )) (((nat.S) ) (n))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((f) (i))) (__))) (((((((@logic.rewrite_r) ((nat.nat) )) (((nat.S) ) (n))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((f) (__))) (((nat.S) ) (n)))) (fS)) (i)) (Hi))) (i)) (Hi))))))) ((((@nat.le_to_or_lt_eq) (i)) (((nat.S) ) (n))) (lein))))).
theorem permutation.bijn_fg : forall (f:((nat.nat) ) -> (nat.nat) ) , forall (g:((nat.nat) ) -> (nat.nat) ) , forall (n:(nat.nat) ) , ((((permutation.bijn) ) (f)) (n)) -> ((((permutation.bijn) ) (g)) (n)) -> (((permutation.bijn) ) (fun (p : (nat.nat) ) , (f) ((g) (p)))) (n) := fun (f : ((nat.nat) ) -> (nat.nat) ) , fun (g : ((nat.nat) ) -> (nat.nat) ) , fun (n : (nat.nat) ) , fun (bijf : (((permutation.bijn) ) (f)) (n)) , (fun (bijg : (((permutation.bijn) ) (g)) (n)) , (fun (i : (nat.nat) ) , fun (lein : (((nat.le_) ) (i)) (n)) , ((((((@connectives.match_ex_prop) ((nat.nat) )) (fun (p : (nat.nat) ) , (((connectives.And) ) ((((nat.le_) ) (p)) (n))) ((((logic.eq_) ((nat.nat) )) ((f) (p))) (i)))) (((connectives.ex) ((nat.nat) )) (fun (p : (nat.nat) ) , (((connectives.And) ) ((((nat.le_) ) (p)) (n))) ((((logic.eq_) ((nat.nat) )) ((f) ((g) (p)))) (i))))) (fun (a : (nat.nat) ) , fun (_clearme : (((connectives.And) ) ((((nat.le_) ) (a)) (n))) ((((logic.eq_) ((nat.nat) )) ((f) (a))) (i))) , ((((((@connectives.match_And_prop) ((((nat.le_) ) (a)) (n))) ((((logic.eq_) ((nat.nat) )) ((f) (a))) (i))) (((connectives.ex) ((nat.nat) )) (fun (p : (nat.nat) ) , (((connectives.And) ) ((((nat.le_) ) (p)) (n))) ((((logic.eq_) ((nat.nat) )) ((f) ((g) (p)))) (i))))) (fun (lean : (((nat.le_) ) (a)) (n)) , (fun (ga : (((logic.eq_) ((nat.nat) )) ((f) (a))) (i)) , ((((((@connectives.match_ex_prop) ((nat.nat) )) (fun (p : (nat.nat) ) , (((connectives.And) ) ((((nat.le_) ) (p)) (n))) ((((logic.eq_) ((nat.nat) )) ((g) (p))) (a)))) (((connectives.ex) ((nat.nat) )) (fun (p : (nat.nat) ) , (((connectives.And) ) ((((nat.le_) ) (p)) (n))) ((((logic.eq_) ((nat.nat) )) ((f) ((g) (p)))) (i))))) (fun (b : (nat.nat) ) , fun (_clearme0 : (((connectives.And) ) ((((nat.le_) ) (b)) (n))) ((((logic.eq_) ((nat.nat) )) ((g) (b))) (a))) , ((((((@connectives.match_And_prop) ((((nat.le_) ) (b)) (n))) ((((logic.eq_) ((nat.nat) )) ((g) (b))) (a))) (((connectives.ex) ((nat.nat) )) (fun (p : (nat.nat) ) , (((connectives.And) ) ((((nat.le_) ) (p)) (n))) ((((logic.eq_) ((nat.nat) )) ((f) ((g) (p)))) (i))))) (fun (lebn : (((nat.le_) ) (b)) (n)) , (fun (gb : (((logic.eq_) ((nat.nat) )) ((g) (b))) (a)) , (((((@connectives.ex_intro) ((nat.nat) )) (fun (x : (nat.nat) ) , (((connectives.And) ) ((((nat.le_) ) (x)) (n))) ((((logic.eq_) ((nat.nat) )) ((f) ((g) (x)))) (i)))) (b)) (((((@connectives.conj) ((((nat.le_) ) (b)) (n))) ((((logic.eq_) ((nat.nat) )) ((f) ((g) (b)))) (i))) (lebn)) (((((((@logic.rewrite_r) ((nat.nat) )) (a)) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((f) (__))) (i))) (((((((@logic.rewrite_r) ((nat.nat) )) (i)) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (__)) (i))) (((@logic.refl_) ((nat.nat) )) (i))) ((f) (a))) (ga))) ((g) (b))) (gb))))))) (_clearme0)))) (((bijg) (a)) (lean)))))) (_clearme)))) (((bijf) (i)) (lein))))).
theorem permutation.bijn_transpose : forall (n:(nat.nat) ) , forall (i:(nat.nat) ) , forall (j:(nat.nat) ) , ((((nat.le_) ) (i)) (n)) -> ((((nat.le_) ) (j)) (n)) -> (((permutation.bijn) ) ((((permutation.transpose) ) (i)) (j))) (n) := fun (n : (nat.nat) ) , fun (i : (nat.nat) ) , fun (j : (nat.nat) ) , fun (lein : (((nat.le_) ) (i)) (n)) , (fun (lejn : (((nat.le_) ) (j)) (n)) , (fun (a : (nat.nat) ) , fun (lean : (((nat.le_) ) (a)) (n)) , (((((((@connectives.match_Or_prop) ((((logic.eq_) ((bool.bool) )) ((((nat.eqb) ) (a)) (i))) ((bool.true) ))) ((((logic.eq_) ((bool.bool) )) ((((nat.eqb) ) (a)) (i))) ((bool.false) ))) (((connectives.ex) ((nat.nat) )) (fun (p : (nat.nat) ) , (((connectives.And) ) ((((nat.le_) ) (p)) (n))) ((((logic.eq_) ((nat.nat) )) (((((permutation.transpose) ) (i)) (j)) (p))) (a))))) (fun (Hi : (((logic.eq_) ((bool.bool) )) ((((nat.eqb) ) (a)) (i))) ((bool.true) )) , (((((@connectives.ex_intro) ((nat.nat) )) (fun (x : (nat.nat) ) , (((connectives.And) ) ((((nat.le_) ) (x)) (n))) ((((logic.eq_) ((nat.nat) )) (((((permutation.transpose) ) (i)) (j)) (x))) (a)))) (j)) (((((@connectives.conj) ((((nat.le_) ) (j)) (n))) ((((logic.eq_) ((nat.nat) )) (((((permutation.transpose) ) (i)) (j)) (j))) (a))) (lejn)) (((((((@logic.eq_ind_r) ((nat.nat) )) (i)) (fun (x : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (x)) (a))) (((((@logic.sym_eq) ((nat.nat) )) (a)) (i)) ((((@nat.eqb_true_to_eq) (a)) (i)) (Hi)))) (((((permutation.transpose) ) (i)) (j)) (j))) (((@permutation.transpose_i_j_j) (i)) (j))))))) (fun (Hi : (((logic.eq_) ((bool.bool) )) ((((nat.eqb) ) (a)) (i))) ((bool.false) )) , (((((((@connectives.match_Or_prop) ((((logic.eq_) ((bool.bool) )) ((((nat.eqb) ) (a)) (j))) ((bool.true) ))) ((((logic.eq_) ((bool.bool) )) ((((nat.eqb) ) (a)) (j))) ((bool.false) ))) (((connectives.ex) ((nat.nat) )) (fun (p : (nat.nat) ) , (((connectives.And) ) ((((nat.le_) ) (p)) (n))) ((((logic.eq_) ((nat.nat) )) (((((permutation.transpose) ) (i)) (j)) (p))) (a))))) (fun (Hj : (((logic.eq_) ((bool.bool) )) ((((nat.eqb) ) (a)) (j))) ((bool.true) )) , (((((@connectives.ex_intro) ((nat.nat) )) (fun (x : (nat.nat) ) , (((connectives.And) ) ((((nat.le_) ) (x)) (n))) ((((logic.eq_) ((nat.nat) )) (((((permutation.transpose) ) (i)) (j)) (x))) (a)))) (i)) (((((@connectives.conj) ((((nat.le_) ) (i)) (n))) ((((logic.eq_) ((nat.nat) )) (((((permutation.transpose) ) (i)) (j)) (i))) (a))) (lein)) (((((((@logic.eq_ind_r) ((nat.nat) )) (j)) (fun (x : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (x)) (a))) (((((@logic.sym_eq) ((nat.nat) )) (a)) (j)) ((((@nat.eqb_true_to_eq) (a)) (j)) (Hj)))) (((((permutation.transpose) ) (i)) (j)) (i))) (((@permutation.transpose_i_j_i) (i)) (j))))))) (fun (Hj : (((logic.eq_) ((bool.bool) )) ((((nat.eqb) ) (a)) (j))) ((bool.false) )) , (((((@connectives.ex_intro) ((nat.nat) )) (fun (x : (nat.nat) ) , (((connectives.And) ) ((((nat.le_) ) (x)) (n))) ((((logic.eq_) ((nat.nat) )) (((((permutation.transpose) ) (i)) (j)) (x))) (a)))) (a)) (((((@connectives.conj) ((((nat.le_) ) (a)) (n))) ((((logic.eq_) ((nat.nat) )) (((((permutation.transpose) ) (i)) (j)) (a))) (a))) (lean)) (((((((@logic.eq_ind_r) ((bool.bool) )) ((bool.false) )) (fun (x : (bool.bool) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (a)) ((((nat.eqb) ) (a)) (j)))) (x))) (a))) (((((((@logic.eq_ind_r) ((bool.bool) )) ((bool.false) )) (fun (x : (bool.bool) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (a)) (x))) ((bool.false) ))) (a))) ((((((@bool.eq_match_bool_type_false) ((nat.nat) )) (i)) (a)) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (a)) ((bool.false) ))) ((bool.false) ))) (y))) ((((((@bool.eq_match_bool_type_false) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (a)) ((bool.false) ))) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (a)) ((bool.false) ))) ((bool.false) ))) (y))) (((@logic.refl_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (j)) (((((bool.match_bool_type) ((nat.nat) )) (i)) (a)) ((bool.false) ))) ((bool.false) )))))) ((((nat.eqb) ) (a)) (j))) (Hj))) ((((nat.eqb) ) (a)) (i))) (Hi)))))) ((@bool.true_or_false) ((((nat.eqb) ) (a)) (j)))))) ((@bool.true_or_false) ((((nat.eqb) ) (a)) (i)))))).
theorem permutation.permut_to_bijn : forall (n:(nat.nat) ) , forall (f:((nat.nat) ) -> (nat.nat) ) , ((((permutation.permut) ) (f)) (n)) -> (((permutation.bijn) ) (f)) (n) := fun (n : (nat.nat) ) , ((((@nat.nat_ind) (fun (_x_365 : (nat.nat) ) , forall (f:((nat.nat) ) -> (nat.nat) ) , ((((permutation.permut) ) (f)) (_x_365)) -> (((permutation.bijn) ) (f)) (_x_365))) (fun (f : ((nat.nat) ) -> (nat.nat) ) , fun (_clearme : (((connectives.And) ) (forall (i:(nat.nat) ) , ((((nat.le_) ) (i)) ((nat.O) )) -> (((nat.le_) ) ((f) (i))) ((nat.O) ))) (forall (i:(nat.nat) ) , forall (j:(nat.nat) ) , ((((nat.le_) ) (i)) ((nat.O) )) -> ((((nat.le_) ) (j)) ((nat.O) )) -> ((((logic.eq_) ((nat.nat) )) ((f) (i))) ((f) (j))) -> (((logic.eq_) ((nat.nat) )) (i)) (j))) , ((((((@connectives.match_And_prop) (forall (i:(nat.nat) ) , ((((nat.le_) ) (i)) ((nat.O) )) -> (((nat.le_) ) ((f) (i))) ((nat.O) ))) (forall (i:(nat.nat) ) , forall (j:(nat.nat) ) , ((((nat.le_) ) (i)) ((nat.O) )) -> ((((nat.le_) ) (j)) ((nat.O) )) -> ((((logic.eq_) ((nat.nat) )) ((f) (i))) ((f) (j))) -> (((logic.eq_) ((nat.nat) )) (i)) (j))) (forall (m:(nat.nat) ) , ((((nat.le_) ) (m)) ((nat.O) )) -> ((connectives.ex) ((nat.nat) )) (fun (p : (nat.nat) ) , (((connectives.And) ) ((((nat.le_) ) (p)) ((nat.O) ))) ((((logic.eq_) ((nat.nat) )) ((f) (p))) (m))))) (fun (H : forall (i:(nat.nat) ) , ((((nat.le_) ) (i)) ((nat.O) )) -> (((nat.le_) ) ((f) (i))) ((nat.O) )) , (fun (H1 : forall (i:(nat.nat) ) , forall (j:(nat.nat) ) , ((((nat.le_) ) (i)) ((nat.O) )) -> ((((nat.le_) ) (j)) ((nat.O) )) -> ((((logic.eq_) ((nat.nat) )) ((f) (i))) ((f) (j))) -> (((logic.eq_) ((nat.nat) )) (i)) (j)) , (fun (m : (nat.nat) ) , fun (lem0 : (((nat.le_) ) (m)) ((nat.O) )) , (((((@connectives.ex_intro) ((nat.nat) )) (fun (x : (nat.nat) ) , (((connectives.And) ) ((((nat.le_) ) (x)) ((nat.O) ))) ((((logic.eq_) ((nat.nat) )) ((f) (x))) (m)))) ((nat.O) )) (((((@connectives.conj) ((((nat.le_) ) ((nat.O) )) ((nat.O) ))) ((((logic.eq_) ((nat.nat) )) ((f) ((nat.O) ))) (m))) ((@nat.le_O_n) ((nat.O) ))) (((((@nat.le_n_O_elim) (m)) (lem0)) (((logic.eq_) ((nat.nat) )) ((f) ((nat.O) )))) (((((@logic.sym_eq) ((nat.nat) )) ((nat.O) )) ((f) ((nat.O) ))) (((@nat.le_n_O_to_eq) ((f) ((nat.O) ))) (((H) ((nat.O) )) ((@nat.le_O_n) ((nat.O) )))))))))))) (_clearme)))) (fun (m : (nat.nat) ) , fun (Hind : forall (f:((nat.nat) ) -> (nat.nat) ) , ((((permutation.permut) ) (f)) (m)) -> (((permutation.bijn) ) (f)) (m)) , (fun (f : ((nat.nat) ) -> (nat.nat) ) , fun (permf : (((permutation.permut) ) (f)) (((nat.S) ) (m))) , ((((((@permutation.eq_to_bijn) (fun (p : (nat.nat) ) , ((((permutation.transpose) ) ((f) (((nat.S) ) (m)))) (((nat.S) ) (m))) (((((permutation.transpose) ) ((f) (((nat.S) ) (m)))) (((nat.S) ) (m))) ((f) (p))))) (f)) (((nat.S) ) (m))) (fun (i : (nat.nat) ) , fun (lei : (((nat.le_) ) (i)) (((nat.S) ) (m))) , ((((@permutation.transpose_transpose) ((f) (((nat.S) ) (m)))) (((nat.S) ) (m))) ((f) (i))))) ((((((@permutation.bijn_fg) ((((permutation.transpose) ) ((f) (((nat.S) ) (m)))) (((nat.S) ) (m)))) (fun (__ : (nat.nat) ) , ((((permutation.transpose) ) ((f) (((nat.S) ) (m)))) (((nat.S) ) (m))) ((f) (__)))) (((nat.S) ) (m))) ((((((@connectives.match_And_prop) (forall (i:(nat.nat) ) , ((((nat.le_) ) (i)) (((nat.S) ) (m))) -> (((nat.le_) ) ((f) (i))) (((nat.S) ) (m)))) ((((permutation.injn) ) (f)) (((nat.S) ) (m)))) ((((permutation.bijn) ) ((((permutation.transpose) ) ((f) (((nat.S) ) (m)))) (((nat.S) ) (m)))) (((nat.S) ) (m)))) (fun (lef : forall (i:(nat.nat) ) , ((((nat.le_) ) (i)) (((nat.S) ) (m))) -> (((nat.le_) ) ((f) (i))) (((nat.S) ) (m))) , (fun (__ : (((permutation.injn) ) (f)) (((nat.S) ) (m))) , ((((((@permutation.bijn_transpose) (((nat.S) ) (m))) ((f) (((nat.S) ) (m)))) (((nat.S) ) (m))) (((lef) (((nat.S) ) (m))) ((@nat.le_n) (((nat.S) ) (m))))) ((@nat.le_n) (((nat.S) ) (m))))))) (permf))) (((((@permutation.bijn_n_Sn) (fun (__ : (nat.nat) ) , ((((permutation.transpose) ) ((f) (((nat.S) ) (m)))) (((nat.S) ) (m))) ((f) (__)))) (m)) (((Hind) (fun (__ : (nat.nat) ) , ((((permutation.transpose) ) ((f) (((nat.S) ) (m)))) (((nat.S) ) (m))) ((f) (__)))) ((((@permutation.permut_S_to_permut_transpose) (f)) (m)) (permf)))) (((((((@logic.eq_ind_r) ((bool.bool) )) ((bool.true) )) (fun (x : (bool.bool) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (((nat.S) ) (m))) (((((bool.match_bool_type) ((nat.nat) )) ((f) (((nat.S) ) (m)))) ((f) (((nat.S) ) (m)))) ((((nat.eqb) ) ((f) (((nat.S) ) (m)))) (((nat.S) ) (m))))) (x))) (((nat.S) ) (m)))) ((((((@bool.eq_match_bool_type_true) ((nat.nat) )) (((nat.S) ) (m))) (((((bool.match_bool_type) ((nat.nat) )) ((f) (((nat.S) ) (m)))) ((f) (((nat.S) ) (m)))) ((((nat.eqb) ) ((f) (((nat.S) ) (m)))) (((nat.S) ) (m))))) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (((nat.S) ) (m))) (((((bool.match_bool_type) ((nat.nat) )) ((f) (((nat.S) ) (m)))) ((f) (((nat.S) ) (m)))) ((((nat.eqb) ) ((f) (((nat.S) ) (m)))) (((nat.S) ) (m))))) ((bool.true) ))) (y))) (((@logic.refl_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (((nat.S) ) (m))) (((((bool.match_bool_type) ((nat.nat) )) ((f) (((nat.S) ) (m)))) ((f) (((nat.S) ) (m)))) ((((nat.eqb) ) ((f) (((nat.S) ) (m)))) (((nat.S) ) (m))))) ((bool.true) ))))) ((((nat.eqb) ) ((f) (((nat.S) ) (m)))) ((f) (((nat.S) ) (m))))) ((@nat.eqb_n_n) ((f) (((nat.S) ) (m))))))))))) (n).
constant permutation.invert_permut : ((nat.nat) ) -> (((nat.nat) ) -> (nat.nat) ) -> ((nat.nat) ) -> (nat.nat) .
constant permutation.invert_permut_body : ((nat.nat) ) -> (((nat.nat) ) -> (nat.nat) ) -> ((nat.nat) ) -> (nat.nat) .
axiom permutation.axiom_invert_permut : forall (n:(nat.nat) ) , (((connectives.equal) ((((nat.nat) ) -> (nat.nat) ) -> ((nat.nat) ) -> (nat.nat) )) (((permutation.invert_permut) ) (n))) ((((nat.filter_nat_type) ((((nat.nat) ) -> (nat.nat) ) -> ((nat.nat) ) -> (nat.nat) )) ((permutation.invert_permut_body) )) (n)).
theorem permutation.eq_invert_permut : forall (n:(nat.nat) ) , (((leibniz.leibniz) ((((nat.nat) ) -> (nat.nat) ) -> ((nat.nat) ) -> (nat.nat) )) (((permutation.invert_permut) ) (n))) ((((nat.filter_nat_type) ((((nat.nat) ) -> (nat.nat) ) -> ((nat.nat) ) -> (nat.nat) )) ((permutation.invert_permut_body) )) (n)) := fun (n : (nat.nat) ) , ((((@connectives.equal_leibniz) ((((nat.nat) ) -> (nat.nat) ) -> ((nat.nat) ) -> (nat.nat) )) (((permutation.invert_permut) ) (n))) ((((nat.filter_nat_type) ((((nat.nat) ) -> (nat.nat) ) -> ((nat.nat) ) -> (nat.nat) )) ((permutation.invert_permut_body) )) (n))) ((@permutation.axiom_invert_permut) (n)).
theorem permutation.sym_eq_invert_permut : forall (n:(nat.nat) ) , (((leibniz.leibniz) ((((nat.nat) ) -> (nat.nat) ) -> ((nat.nat) ) -> (nat.nat) )) ((((nat.filter_nat_type) ((((nat.nat) ) -> (nat.nat) ) -> ((nat.nat) ) -> (nat.nat) )) ((permutation.invert_permut_body) )) (n))) (((permutation.invert_permut) ) (n)) := fun (n : (nat.nat) ) , ((((@leibniz.sym_leibniz) ((((nat.nat) ) -> (nat.nat) ) -> ((nat.nat) ) -> (nat.nat) )) (((permutation.invert_permut) ) (n))) ((((nat.filter_nat_type) ((((nat.nat) ) -> (nat.nat) ) -> ((nat.nat) ) -> (nat.nat) )) ((permutation.invert_permut_body) )) (n))) ((@permutation.eq_invert_permut) (n)).
axiom permutation.axiom_invert_permut_body_O : (((connectives.equal) ((((nat.nat) ) -> (nat.nat) ) -> ((nat.nat) ) -> (nat.nat) )) (((permutation.invert_permut_body) ) ((nat.O) ))) (fun (f : ((nat.nat) ) -> (nat.nat) ) , fun (m : (nat.nat) ) , ((((bool.match_bool_type) ((nat.nat) )) ((nat.O) )) ((nat.O) )) ((((nat.eqb) ) (m)) ((f) ((nat.O) )))).
theorem permutation.eq_invert_permut_body_O : (((leibniz.leibniz) ((((nat.nat) ) -> (nat.nat) ) -> ((nat.nat) ) -> (nat.nat) )) (((permutation.invert_permut_body) ) ((nat.O) ))) (fun (f : ((nat.nat) ) -> (nat.nat) ) , fun (m : (nat.nat) ) , ((((bool.match_bool_type) ((nat.nat) )) ((nat.O) )) ((nat.O) )) ((((nat.eqb) ) (m)) ((f) ((nat.O) )))) := ((((@connectives.equal_leibniz) ((((nat.nat) ) -> (nat.nat) ) -> ((nat.nat) ) -> (nat.nat) )) (((permutation.invert_permut_body) ) ((nat.O) ))) (fun (f : ((nat.nat) ) -> (nat.nat) ) , fun (m : (nat.nat) ) , ((((bool.match_bool_type) ((nat.nat) )) ((nat.O) )) ((nat.O) )) ((((nat.eqb) ) (m)) ((f) ((nat.O) ))))) (@permutation.axiom_invert_permut_body_O).
theorem permutation.sym_eq_invert_permut_body_O : (((leibniz.leibniz) ((((nat.nat) ) -> (nat.nat) ) -> ((nat.nat) ) -> (nat.nat) )) (fun (f : ((nat.nat) ) -> (nat.nat) ) , fun (m : (nat.nat) ) , ((((bool.match_bool_type) ((nat.nat) )) ((nat.O) )) ((nat.O) )) ((((nat.eqb) ) (m)) ((f) ((nat.O) ))))) (((permutation.invert_permut_body) ) ((nat.O) )) := ((((@leibniz.sym_leibniz) ((((nat.nat) ) -> (nat.nat) ) -> ((nat.nat) ) -> (nat.nat) )) (((permutation.invert_permut_body) ) ((nat.O) ))) (fun (f : ((nat.nat) ) -> (nat.nat) ) , fun (m : (nat.nat) ) , ((((bool.match_bool_type) ((nat.nat) )) ((nat.O) )) ((nat.O) )) ((((nat.eqb) ) (m)) ((f) ((nat.O) ))))) (@permutation.eq_invert_permut_body_O).
axiom permutation.axiom_invert_permut_body_S : forall (n:(nat.nat) ) , (((connectives.equal) ((((nat.nat) ) -> (nat.nat) ) -> ((nat.nat) ) -> (nat.nat) )) (((permutation.invert_permut_body) ) (((nat.S) ) (n)))) (fun (f : ((nat.nat) ) -> (nat.nat) ) , fun (m : (nat.nat) ) , ((((bool.match_bool_type) ((nat.nat) )) (((nat.S) ) (n))) (((((permutation.invert_permut) ) (n)) (f)) (m))) ((((nat.eqb) ) (m)) ((f) (((nat.S) ) (n))))).
theorem permutation.eq_invert_permut_body_S : forall (n:(nat.nat) ) , (((leibniz.leibniz) ((((nat.nat) ) -> (nat.nat) ) -> ((nat.nat) ) -> (nat.nat) )) (((permutation.invert_permut_body) ) (((nat.S) ) (n)))) (fun (f : ((nat.nat) ) -> (nat.nat) ) , fun (m : (nat.nat) ) , ((((bool.match_bool_type) ((nat.nat) )) (((nat.S) ) (n))) (((((permutation.invert_permut) ) (n)) (f)) (m))) ((((nat.eqb) ) (m)) ((f) (((nat.S) ) (n))))) := fun (n : (nat.nat) ) , ((((@connectives.equal_leibniz) ((((nat.nat) ) -> (nat.nat) ) -> ((nat.nat) ) -> (nat.nat) )) (((permutation.invert_permut_body) ) (((nat.S) ) (n)))) (fun (f : ((nat.nat) ) -> (nat.nat) ) , fun (m : (nat.nat) ) , ((((bool.match_bool_type) ((nat.nat) )) (((nat.S) ) (n))) (((((permutation.invert_permut) ) (n)) (f)) (m))) ((((nat.eqb) ) (m)) ((f) (((nat.S) ) (n)))))) ((@permutation.axiom_invert_permut_body_S) (n)).
theorem permutation.sym_eq_invert_permut_body_S : forall (n:(nat.nat) ) , (((leibniz.leibniz) ((((nat.nat) ) -> (nat.nat) ) -> ((nat.nat) ) -> (nat.nat) )) (fun (f : ((nat.nat) ) -> (nat.nat) ) , fun (m : (nat.nat) ) , ((((bool.match_bool_type) ((nat.nat) )) (((nat.S) ) (n))) (((((permutation.invert_permut) ) (n)) (f)) (m))) ((((nat.eqb) ) (m)) ((f) (((nat.S) ) (n)))))) (((permutation.invert_permut_body) ) (((nat.S) ) (n))) := fun (n : (nat.nat) ) , ((((@leibniz.sym_leibniz) ((((nat.nat) ) -> (nat.nat) ) -> ((nat.nat) ) -> (nat.nat) )) (((permutation.invert_permut_body) ) (((nat.S) ) (n)))) (fun (f : ((nat.nat) ) -> (nat.nat) ) , fun (m : (nat.nat) ) , ((((bool.match_bool_type) ((nat.nat) )) (((nat.S) ) (n))) (((((permutation.invert_permut) ) (n)) (f)) (m))) ((((nat.eqb) ) (m)) ((f) (((nat.S) ) (n)))))) ((@permutation.eq_invert_permut_body_S) (n)).
theorem permutation.invert_permut_f : forall (f:((nat.nat) ) -> (nat.nat) ) , forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , ((((nat.le_) ) (m)) (n)) -> ((((permutation.injn) ) (f)) (n)) -> (((logic.eq_) ((nat.nat) )) (((((permutation.invert_permut) ) (n)) (f)) ((f) (m)))) (m) := fun (f : ((nat.nat) ) -> (nat.nat) ) , fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , fun (lenm : (((nat.le_) ) (m)) (n)) , (((((((@nat.le_ind) (m)) (fun (x_417 : (nat.nat) ) , ((((permutation.injn) ) (f)) (x_417)) -> (((logic.eq_) ((nat.nat) )) (((((permutation.invert_permut) ) (x_417)) (f)) ((f) (m)))) (m))) (((((@nat.match_nat_prop) (fun (__ : (nat.nat) ) , ((((permutation.injn) ) (f)) (__)) -> (((logic.eq_) ((nat.nat) )) (((((permutation.invert_permut) ) (__)) (f)) ((f) (__)))) (__))) ((((@permutation.sym_eq_invert_permut) ((nat.O) )) (fun (y : (((nat.nat) ) -> (nat.nat) ) -> ((nat.nat) ) -> (nat.nat) ) , ((((permutation.injn) ) (f)) ((nat.O) )) -> (((logic.eq_) ((nat.nat) )) (((y) (f)) ((f) ((nat.O) )))) ((nat.O) ))) (((((@nat.sym_eq_filter_nat_type_O) ((((nat.nat) ) -> (nat.nat) ) -> ((nat.nat) ) -> (nat.nat) )) ((permutation.invert_permut_body) )) (fun (y : (((nat.nat) ) -> (nat.nat) ) -> ((nat.nat) ) -> (nat.nat) ) , ((((permutation.injn) ) (f)) ((nat.O) )) -> (((logic.eq_) ((nat.nat) )) (((y) (f)) ((f) ((nat.O) )))) ((nat.O) ))) (((@permutation.sym_eq_invert_permut_body_O) (fun (y : (((nat.nat) ) -> (nat.nat) ) -> ((nat.nat) ) -> (nat.nat) ) , ((((permutation.injn) ) (f)) ((nat.O) )) -> (((logic.eq_) ((nat.nat) )) (((y) (f)) ((f) ((nat.O) )))) ((nat.O) ))) (((((((@logic.eq_ind_r) ((bool.bool) )) ((bool.true) )) (fun (x : (bool.bool) ) , (forall (i:(nat.nat) ) , forall (j:(nat.nat) ) , ((((nat.le_) ) (i)) ((nat.O) )) -> ((((nat.le_) ) (j)) ((nat.O) )) -> ((((logic.eq_) ((nat.nat) )) ((f) (i))) ((f) (j))) -> (((logic.eq_) ((nat.nat) )) (i)) (j)) -> (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) ((nat.O) )) ((nat.O) )) (x))) ((nat.O) ))) (fun (auto : forall (i:(nat.nat) ) , forall (j:(nat.nat) ) , ((((nat.le_) ) (i)) ((nat.O) )) -> ((((nat.le_) ) (j)) ((nat.O) )) -> ((((logic.eq_) ((nat.nat) )) ((f) (i))) ((f) (j))) -> (((logic.eq_) ((nat.nat) )) (i)) (j)) , ((((((@bool.eq_match_bool_type_true) ((nat.nat) )) ((nat.O) )) ((nat.O) )) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) ((nat.O) )) ((nat.O) )) ((bool.true) ))) (y))) (((@logic.refl_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) ((nat.O) )) ((nat.O) )) ((bool.true) )))))) ((((nat.eqb) ) ((f) ((nat.O) ))) ((f) ((nat.O) )))) ((@nat.eqb_n_n) ((f) ((nat.O) )))))))) (fun (a : (nat.nat) ) , (((@permutation.sym_eq_invert_permut) (((nat.S) ) (a))) (fun (y : (((nat.nat) ) -> (nat.nat) ) -> ((nat.nat) ) -> (nat.nat) ) , ((((permutation.injn) ) (f)) (((nat.S) ) (a))) -> (((logic.eq_) ((nat.nat) )) (((y) (f)) ((f) (((nat.S) ) (a))))) (((nat.S) ) (a)))) ((((((@nat.sym_eq_filter_nat_type_S) ((((nat.nat) ) -> (nat.nat) ) -> ((nat.nat) ) -> (nat.nat) )) ((permutation.invert_permut_body) )) (a)) (fun (y : (((nat.nat) ) -> (nat.nat) ) -> ((nat.nat) ) -> (nat.nat) ) , ((((permutation.injn) ) (f)) (((nat.S) ) (a))) -> (((logic.eq_) ((nat.nat) )) (((y) (f)) ((f) (((nat.S) ) (a))))) (((nat.S) ) (a)))) ((((@permutation.sym_eq_invert_permut_body_S) (a)) (fun (y : (((nat.nat) ) -> (nat.nat) ) -> ((nat.nat) ) -> (nat.nat) ) , ((((permutation.injn) ) (f)) (((nat.S) ) (a))) -> (((logic.eq_) ((nat.nat) )) (((y) (f)) ((f) (((nat.S) ) (a))))) (((nat.S) ) (a)))) (((((((@logic.eq_ind_r) ((bool.bool) )) ((bool.true) )) (fun (x : (bool.bool) ) , (forall (i:(nat.nat) ) , forall (j:(nat.nat) ) , ((((nat.le_) ) (i)) (((nat.S) ) (a))) -> ((((nat.le_) ) (j)) (((nat.S) ) (a))) -> ((((logic.eq_) ((nat.nat) )) ((f) (i))) ((f) (j))) -> (((logic.eq_) ((nat.nat) )) (i)) (j)) -> (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (((nat.S) ) (a))) (((((permutation.invert_permut) ) (a)) (f)) ((f) (((nat.S) ) (a))))) (x))) (((nat.S) ) (a)))) (fun (auto : forall (i:(nat.nat) ) , forall (j:(nat.nat) ) , ((((nat.le_) ) (i)) (((nat.S) ) (a))) -> ((((nat.le_) ) (j)) (((nat.S) ) (a))) -> ((((logic.eq_) ((nat.nat) )) ((f) (i))) ((f) (j))) -> (((logic.eq_) ((nat.nat) )) (i)) (j)) , ((((((@bool.eq_match_bool_type_true) ((nat.nat) )) (((nat.S) ) (a))) (((((permutation.invert_permut) ) (a)) (f)) ((f) (((nat.S) ) (a))))) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (((nat.S) ) (a))) (((((permutation.invert_permut) ) (a)) (f)) ((f) (((nat.S) ) (a))))) ((bool.true) ))) (y))) (((@logic.refl_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (((nat.S) ) (a))) (((((permutation.invert_permut) ) (a)) (f)) ((f) (((nat.S) ) (a))))) ((bool.true) )))))) ((((nat.eqb) ) ((f) (((nat.S) ) (a)))) ((f) (((nat.S) ) (a))))) ((@nat.eqb_n_n) ((f) (((nat.S) ) (a))))))))) (m))) (fun (m0 : (nat.nat) ) , (((@permutation.sym_eq_invert_permut) (((nat.S) ) (m0))) (fun (y : (((nat.nat) ) -> (nat.nat) ) -> ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) (m)) (m0)) -> (((((permutation.injn) ) (f)) (m0)) -> (((logic.eq_) ((nat.nat) )) (((((permutation.invert_permut) ) (m0)) (f)) ((f) (m)))) (m)) -> ((((permutation.injn) ) (f)) (((nat.S) ) (m0))) -> (((logic.eq_) ((nat.nat) )) (((y) (f)) ((f) (m)))) (m))) ((((((@nat.sym_eq_filter_nat_type_S) ((((nat.nat) ) -> (nat.nat) ) -> ((nat.nat) ) -> (nat.nat) )) ((permutation.invert_permut_body) )) (m0)) (fun (y : (((nat.nat) ) -> (nat.nat) ) -> ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) (m)) (m0)) -> (((((permutation.injn) ) (f)) (m0)) -> (((logic.eq_) ((nat.nat) )) (((((permutation.invert_permut) ) (m0)) (f)) ((f) (m)))) (m)) -> ((((permutation.injn) ) (f)) (((nat.S) ) (m0))) -> (((logic.eq_) ((nat.nat) )) (((y) (f)) ((f) (m)))) (m))) ((((@permutation.sym_eq_invert_permut_body_S) (m0)) (fun (y : (((nat.nat) ) -> (nat.nat) ) -> ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) (m)) (m0)) -> (((((permutation.injn) ) (f)) (m0)) -> (((logic.eq_) ((nat.nat) )) (((((permutation.invert_permut) ) (m0)) (f)) ((f) (m)))) (m)) -> ((((permutation.injn) ) (f)) (((nat.S) ) (m0))) -> (((logic.eq_) ((nat.nat) )) (((y) (f)) ((f) (m)))) (m))) (fun (lem : (((nat.le_) ) (m)) (m0)) , (fun (H : ((((permutation.injn) ) (f)) (m0)) -> (((logic.eq_) ((nat.nat) )) (((((permutation.invert_permut) ) (m0)) (f)) ((f) (m)))) (m)) , (fun (H1 : (((permutation.injn) ) (f)) (((nat.S) ) (m0))) , (((((((@logic.eq_ind_r) ((bool.bool) )) ((bool.false) )) (fun (x : (bool.bool) ) , (((logic.eq_) ((nat.nat) )) (((((bool.match_bool_type) ((nat.nat) )) (((nat.S) ) (m0))) (((((permutation.invert_permut) ) (m0)) (f)) ((f) (m)))) (x))) (m))) ((((((@bool.sym_eq_match_bool_type_false) ((nat.nat) )) (((nat.S) ) (m0))) (((((permutation.invert_permut) ) (m0)) (f)) ((f) (m)))) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (y)) (m))) ((H) ((((@permutation.injn_Sn_n) (f)) (m0)) (H1))))) ((((nat.eqb) ) ((f) (m))) ((f) (((nat.S) ) (m0))))) ((((@nat.not_eq_to_eqb_false) ((f) (m))) ((f) (((nat.S) ) (m0)))) (((@connectives.nmk) ((((logic.eq_) ((nat.nat) )) ((f) (m))) ((f) (((nat.S) ) (m0))))) (fun (eqf : (((logic.eq_) ((nat.nat) )) ((f) (m))) ((f) (((nat.S) ) (m0)))) , ((((@logic.absurd) ((((logic.eq_) ((nat.nat) )) (m)) (((nat.S) ) (m0)))) ((((((H1) (m)) (((nat.S) ) (m0))) ((((@nat.le_S) (m)) (m0)) (lem))) ((@nat.le_n) (((nat.S) ) (m0)))) (((((((@logic.rewrite_l) ((nat.nat) )) ((f) (m))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((f) (m))) (__))) (((@logic.refl_) ((nat.nat) )) ((f) (m)))) ((f) (((nat.S) ) (m0)))) (eqf)))) ((((@nat.lt_to_not_eq) (m)) (((nat.S) ) (m0))) ((((@nat.le_S_S) (m)) (m0)) (lem))))))))))))))) (n)) (lenm)).
theorem permutation.let_clause_1063 : forall (f:((nat.nat) ) -> (nat.nat) ) , forall (n:(nat.nat) ) , ((((permutation.permut) ) (f)) (n)) -> forall (i:(nat.nat) ) , forall (j:(nat.nat) ) , ((((nat.le_) ) (i)) (n)) -> ((((nat.le_) ) (j)) (n)) -> forall (a:(nat.nat) ) , ((((connectives.And) ) ((((nat.le_) ) (a)) (n))) ((((logic.eq_) ((nat.nat) )) ((f) (a))) (i))) -> ((((nat.le_) ) (a)) (n)) -> ((((logic.eq_) ((nat.nat) )) ((f) (a))) (i)) -> forall (b:(nat.nat) ) , ((((connectives.And) ) ((((nat.le_) ) (b)) (n))) ((((logic.eq_) ((nat.nat) )) ((f) (b))) (j))) -> ((((nat.le_) ) (b)) (n)) -> ((((logic.eq_) ((nat.nat) )) ((f) (b))) (j)) -> (forall (i0:(nat.nat) ) , ((((nat.le_) ) (i0)) (n)) -> (((nat.le_) ) ((f) (i0))) (n)) -> ((((permutation.injn) ) (f)) (n)) -> ((((logic.eq_) ((nat.nat) )) (a)) (b)) -> (((logic.eq_) ((nat.nat) )) ((f) (a))) (j) := fun (f : ((nat.nat) ) -> (nat.nat) ) , fun (n : (nat.nat) ) , fun (permf : (((permutation.permut) ) (f)) (n)) , (fun (i : (nat.nat) ) , fun (j : (nat.nat) ) , fun (lein : (((nat.le_) ) (i)) (n)) , (fun (lejn : (((nat.le_) ) (j)) (n)) , (fun (a : (nat.nat) ) , fun (_clearme : (((connectives.And) ) ((((nat.le_) ) (a)) (n))) ((((logic.eq_) ((nat.nat) )) ((f) (a))) (i))) , (fun (lean : (((nat.le_) ) (a)) (n)) , (fun (fa : (((logic.eq_) ((nat.nat) )) ((f) (a))) (i)) , (fun (b : (nat.nat) ) , fun (_clearme0 : (((connectives.And) ) ((((nat.le_) ) (b)) (n))) ((((logic.eq_) ((nat.nat) )) ((f) (b))) (j))) , (fun (lebn : (((nat.le_) ) (b)) (n)) , (fun (fb : (((logic.eq_) ((nat.nat) )) ((f) (b))) (j)) , (fun (__ : forall (i0:(nat.nat) ) , ((((nat.le_) ) (i0)) (n)) -> (((nat.le_) ) ((f) (i0))) (n)) , (fun (injf : (((permutation.injn) ) (f)) (n)) , (fun (auto : (((logic.eq_) ((nat.nat) )) (a)) (b)) , (((((((@logic.rewrite_r) ((nat.nat) )) (b)) (fun (__1 : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((f) (__1))) (j))) (fb)) (a)) (auto))))))))))))).
theorem permutation.let_clause_1068 : forall (f:((nat.nat) ) -> (nat.nat) ) , forall (n:(nat.nat) ) , ((((permutation.permut) ) (f)) (n)) -> forall (i:(nat.nat) ) , forall (j:(nat.nat) ) , ((((nat.le_) ) (i)) (n)) -> ((((nat.le_) ) (j)) (n)) -> forall (a:(nat.nat) ) , ((((connectives.And) ) ((((nat.le_) ) (a)) (n))) ((((logic.eq_) ((nat.nat) )) ((f) (a))) (i))) -> ((((nat.le_) ) (a)) (n)) -> ((((logic.eq_) ((nat.nat) )) ((f) (a))) (i)) -> forall (b:(nat.nat) ) , ((((connectives.And) ) ((((nat.le_) ) (b)) (n))) ((((logic.eq_) ((nat.nat) )) ((f) (b))) (j))) -> ((((nat.le_) ) (b)) (n)) -> ((((logic.eq_) ((nat.nat) )) ((f) (b))) (j)) -> (forall (i0:(nat.nat) ) , ((((nat.le_) ) (i0)) (n)) -> (((nat.le_) ) ((f) (i0))) (n)) -> ((((permutation.injn) ) (f)) (n)) -> ((((logic.eq_) ((nat.nat) )) (a)) (b)) -> (((logic.eq_) ((nat.nat) )) ((f) (a))) (i) := fun (f : ((nat.nat) ) -> (nat.nat) ) , fun (n : (nat.nat) ) , fun (permf : (((permutation.permut) ) (f)) (n)) , (fun (i : (nat.nat) ) , fun (j : (nat.nat) ) , fun (lein : (((nat.le_) ) (i)) (n)) , (fun (lejn : (((nat.le_) ) (j)) (n)) , (fun (a : (nat.nat) ) , fun (_clearme : (((connectives.And) ) ((((nat.le_) ) (a)) (n))) ((((logic.eq_) ((nat.nat) )) ((f) (a))) (i))) , (fun (lean : (((nat.le_) ) (a)) (n)) , (fun (fa : (((logic.eq_) ((nat.nat) )) ((f) (a))) (i)) , (fun (b : (nat.nat) ) , fun (_clearme0 : (((connectives.And) ) ((((nat.le_) ) (b)) (n))) ((((logic.eq_) ((nat.nat) )) ((f) (b))) (j))) , (fun (lebn : (((nat.le_) ) (b)) (n)) , (fun (fb : (((logic.eq_) ((nat.nat) )) ((f) (b))) (j)) , (fun (__ : forall (i0:(nat.nat) ) , ((((nat.le_) ) (i0)) (n)) -> (((nat.le_) ) ((f) (i0))) (n)) , (fun (injf : (((permutation.injn) ) (f)) (n)) , (fun (auto : (((logic.eq_) ((nat.nat) )) (a)) (b)) , (((((((@logic.rewrite_l) ((nat.nat) )) (j)) (fun (__1 : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((f) (a))) (__1))) (((((((((((((((((((@permutation.let_clause_1063) (f)) (n)) (permf)) (i)) (j)) (lein)) (lejn)) (a)) (_clearme)) (lean)) (fa)) (b)) (_clearme0)) (lebn)) (fb)) (__)) (injf)) (auto))) (i)) (((((((@logic.rewrite_l) ((nat.nat) )) ((f) (a))) (fun (__1 : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (__1)) (i))) (fa)) (j)) (((((((((((((((((((@permutation.let_clause_1063) (f)) (n)) (permf)) (i)) (j)) (lein)) (lejn)) (a)) (_clearme)) (lean)) (fa)) (b)) (_clearme0)) (lebn)) (fb)) (__)) (injf)) (auto))))))))))))))).
theorem permutation.injective_invert_permut : forall (f:((nat.nat) ) -> (nat.nat) ) , forall (n:(nat.nat) ) , ((((permutation.permut) ) (f)) (n)) -> (((permutation.injn) ) ((((permutation.invert_permut) ) (n)) (f))) (n) := fun (f : ((nat.nat) ) -> (nat.nat) ) , fun (n : (nat.nat) ) , fun (permf : (((permutation.permut) ) (f)) (n)) , (fun (i : (nat.nat) ) , fun (j : (nat.nat) ) , fun (lein : (((nat.le_) ) (i)) (n)) , (fun (lejn : (((nat.le_) ) (j)) (n)) , ((((((@connectives.match_ex_prop) ((nat.nat) )) (fun (p : (nat.nat) ) , (((connectives.And) ) ((((nat.le_) ) (p)) (n))) ((((logic.eq_) ((nat.nat) )) ((f) (p))) (i)))) (((((logic.eq_) ((nat.nat) )) (((((permutation.invert_permut) ) (n)) (f)) (i))) (((((permutation.invert_permut) ) (n)) (f)) (j))) -> (((logic.eq_) ((nat.nat) )) (i)) (j))) (fun (a : (nat.nat) ) , fun (_clearme : (((connectives.And) ) ((((nat.le_) ) (a)) (n))) ((((logic.eq_) ((nat.nat) )) ((f) (a))) (i))) , ((((((@connectives.match_And_prop) ((((nat.le_) ) (a)) (n))) ((((logic.eq_) ((nat.nat) )) ((f) (a))) (i))) (((((logic.eq_) ((nat.nat) )) (((((permutation.invert_permut) ) (n)) (f)) (i))) (((((permutation.invert_permut) ) (n)) (f)) (j))) -> (((logic.eq_) ((nat.nat) )) (i)) (j))) (fun (lean : (((nat.le_) ) (a)) (n)) , (fun (fa : (((logic.eq_) ((nat.nat) )) ((f) (a))) (i)) , ((((((@connectives.match_ex_prop) ((nat.nat) )) (fun (p : (nat.nat) ) , (((connectives.And) ) ((((nat.le_) ) (p)) (n))) ((((logic.eq_) ((nat.nat) )) ((f) (p))) (j)))) (((((logic.eq_) ((nat.nat) )) (((((permutation.invert_permut) ) (n)) (f)) (i))) (((((permutation.invert_permut) ) (n)) (f)) (j))) -> (((logic.eq_) ((nat.nat) )) (i)) (j))) (fun (b : (nat.nat) ) , fun (_clearme0 : (((connectives.And) ) ((((nat.le_) ) (b)) (n))) ((((logic.eq_) ((nat.nat) )) ((f) (b))) (j))) , ((((((@connectives.match_And_prop) ((((nat.le_) ) (b)) (n))) ((((logic.eq_) ((nat.nat) )) ((f) (b))) (j))) (((((logic.eq_) ((nat.nat) )) (((((permutation.invert_permut) ) (n)) (f)) (i))) (((((permutation.invert_permut) ) (n)) (f)) (j))) -> (((logic.eq_) ((nat.nat) )) (i)) (j))) (fun (lebn : (((nat.le_) ) (b)) (n)) , (fun (fb : (((logic.eq_) ((nat.nat) )) ((f) (b))) (j)) , ((((((@connectives.match_And_prop) (forall (i1:(nat.nat) ) , ((((nat.le_) ) (i1)) (n)) -> (((nat.le_) ) ((f) (i1))) (n))) ((((permutation.injn) ) (f)) (n))) (((((logic.eq_) ((nat.nat) )) (((((permutation.invert_permut) ) (n)) (f)) (i))) (((((permutation.invert_permut) ) (n)) (f)) (j))) -> (((logic.eq_) ((nat.nat) )) (i)) (j))) (fun (__ : forall (i0:(nat.nat) ) , ((((nat.le_) ) (i0)) (n)) -> (((nat.le_) ) ((f) (i0))) (n)) , (fun (injf : (((permutation.injn) ) (f)) (n)) , (((((((@logic.eq_ind) ((nat.nat) )) ((f) (a))) (fun (x_1 : (nat.nat) ) , ((((logic.eq_) ((nat.nat) )) (((((permutation.invert_permut) ) (n)) (f)) (x_1))) (((((permutation.invert_permut) ) (n)) (f)) (j))) -> (((logic.eq_) ((nat.nat) )) (x_1)) (j))) (((((((@logic.eq_ind) ((nat.nat) )) ((f) (b))) (fun (x_1 : (nat.nat) ) , ((((logic.eq_) ((nat.nat) )) (((((permutation.invert_permut) ) (n)) (f)) ((f) (a)))) (((((permutation.invert_permut) ) (n)) (f)) (x_1))) -> (((logic.eq_) ((nat.nat) )) ((f) (a))) (x_1))) (((((((@logic.eq_ind_r) ((nat.nat) )) (a)) (fun (x : (nat.nat) ) , ((((logic.eq_) ((nat.nat) )) (x)) (((((permutation.invert_permut) ) (n)) (f)) ((f) (b)))) -> (((logic.eq_) ((nat.nat) )) ((f) (a))) ((f) (b)))) (((((((@logic.eq_ind_r) ((nat.nat) )) (b)) (fun (x : (nat.nat) ) , ((((logic.eq_) ((nat.nat) )) (a)) (x)) -> (((logic.eq_) ((nat.nat) )) ((f) (a))) ((f) (b)))) (fun (auto : (((logic.eq_) ((nat.nat) )) (a)) (b)) , (((((((@logic.rewrite_r) ((nat.nat) )) (i)) (fun (__1 : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (__1)) ((f) (b)))) (((((((@logic.rewrite_l) ((nat.nat) )) (a)) (fun (__1 : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (i)) ((f) (__1)))) (((((((@logic.rewrite_r) ((nat.nat) )) (i)) (fun (__1 : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (i)) (__1))) (((@logic.refl_) ((nat.nat) )) (i))) ((f) (a))) (((((((((((((((((((@permutation.let_clause_1068) (f)) (n)) (permf)) (i)) (j)) (lein)) (lejn)) (a)) (_clearme)) (lean)) (fa)) (b)) (_clearme0)) (lebn)) (fb)) (__)) (injf)) (auto)))) (b)) (auto))) ((f) (a))) (((((((((((((((((((@permutation.let_clause_1068) (f)) (n)) (permf)) (i)) (j)) (lein)) (lejn)) (a)) (_clearme)) (lean)) (fa)) (b)) (_clearme0)) (lebn)) (fb)) (__)) (injf)) (auto))))) (((((permutation.invert_permut) ) (n)) (f)) ((f) (b)))) ((((((@permutation.invert_permut_f) (f)) (n)) (b)) (lebn)) (injf)))) (((((permutation.invert_permut) ) (n)) (f)) ((f) (a)))) ((((((@permutation.invert_permut_f) (f)) (n)) (a)) (lean)) (injf)))) (j)) (fb))) (i)) (fa))))) (permf))))) (_clearme0)))) ((((((@permutation.permut_to_bijn) (n)) (f)) (permf)) (j)) (lejn)))))) (_clearme)))) ((((((@permutation.permut_to_bijn) (n)) (f)) (permf)) (i)) (lein))))).
theorem permutation.permut_invert_permut : forall (f:((nat.nat) ) -> (nat.nat) ) , forall (n:(nat.nat) ) , ((((permutation.permut) ) (f)) (n)) -> (((permutation.permut) ) ((((permutation.invert_permut) ) (n)) (f))) (n) := fun (f : ((nat.nat) ) -> (nat.nat) ) , fun (n : (nat.nat) ) , fun (permf : (((permutation.permut) ) (f)) (n)) , (((((@connectives.conj) (forall (x:(nat.nat) ) , ((((nat.le_) ) (x)) (n)) -> (((nat.le_) ) (((((permutation.invert_permut) ) (n)) (f)) (x))) (n))) ((((permutation.injn) ) ((((permutation.invert_permut) ) (n)) (f))) (n))) (fun (i : (nat.nat) ) , fun (lein : (((nat.le_) ) (i)) (n)) , (((((@nat.nat_ind) (fun (_x_365 : (nat.nat) ) , (((nat.le_) ) (((((permutation.invert_permut) ) (_x_365)) (f)) (i))) (_x_365))) ((((@permutation.sym_eq_invert_permut) ((nat.O) )) (fun (y : (((nat.nat) ) -> (nat.nat) ) -> ((nat.nat) ) -> (nat.nat) ) , (((nat.le_) ) (((y) (f)) (i))) ((nat.O) ))) (((((@nat.sym_eq_filter_nat_type_O) ((((nat.nat) ) -> (nat.nat) ) -> ((nat.nat) ) -> (nat.nat) )) ((permutation.invert_permut_body) )) (fun (y : (((nat.nat) ) -> (nat.nat) ) -> ((nat.nat) ) -> (nat.nat) ) , (((nat.le_) ) (((y) (f)) (i))) ((nat.O) ))) (((@permutation.sym_eq_invert_permut_body_O) (fun (y : (((nat.nat) ) -> (nat.nat) ) -> ((nat.nat) ) -> (nat.nat) ) , (((nat.le_) ) (((y) (f)) (i))) ((nat.O) ))) (((((@bool.match_bool_prop) (fun (__ : (bool.bool) ) , (((nat.le_) ) (((((bool.match_bool_type) ((nat.nat) )) ((nat.O) )) ((nat.O) )) (__))) ((nat.O) ))) ((((((@bool.eq_match_bool_type_true) ((nat.nat) )) ((nat.O) )) ((nat.O) )) (fun (y : (nat.nat) ) , (((nat.le_) ) (((((bool.match_bool_type) ((nat.nat) )) ((nat.O) )) ((nat.O) )) ((bool.true) ))) (y))) ((@nat.le_n) (((((bool.match_bool_type) ((nat.nat) )) ((nat.O) )) ((nat.O) )) ((bool.true) ))))) ((((((@bool.eq_match_bool_type_false) ((nat.nat) )) ((nat.O) )) ((nat.O) )) (fun (y : (nat.nat) ) , (((nat.le_) ) (((((bool.match_bool_type) ((nat.nat) )) ((nat.O) )) ((nat.O) )) ((bool.false) ))) (y))) ((@nat.le_n) (((((bool.match_bool_type) ((nat.nat) )) ((nat.O) )) ((nat.O) )) ((bool.false) ))))) ((((nat.eqb) ) (i)) ((f) ((nat.O) )))))))) (fun (n1 : (nat.nat) ) , (((@permutation.sym_eq_invert_permut) (((nat.S) ) (n1))) (fun (y : (((nat.nat) ) -> (nat.nat) ) -> ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) (((((permutation.invert_permut) ) (n1)) (f)) (i))) (n1)) -> (((nat.le_) ) (((y) (f)) (i))) (((nat.S) ) (n1)))) ((((((@nat.sym_eq_filter_nat_type_S) ((((nat.nat) ) -> (nat.nat) ) -> ((nat.nat) ) -> (nat.nat) )) ((permutation.invert_permut_body) )) (n1)) (fun (y : (((nat.nat) ) -> (nat.nat) ) -> ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) (((((permutation.invert_permut) ) (n1)) (f)) (i))) (n1)) -> (((nat.le_) ) (((y) (f)) (i))) (((nat.S) ) (n1)))) ((((@permutation.sym_eq_invert_permut_body_S) (n1)) (fun (y : (((nat.nat) ) -> (nat.nat) ) -> ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) (((((permutation.invert_permut) ) (n1)) (f)) (i))) (n1)) -> (((nat.le_) ) (((y) (f)) (i))) (((nat.S) ) (n1)))) (fun (Hind : (((nat.le_) ) (((((permutation.invert_permut) ) (n1)) (f)) (i))) (n1)) , (((((@bool.match_bool_prop) (fun (__ : (bool.bool) ) , (((nat.le_) ) (((((bool.match_bool_type) ((nat.nat) )) (((nat.S) ) (n1))) (((((permutation.invert_permut) ) (n1)) (f)) (i))) (__))) (((nat.S) ) (n1)))) ((((((@bool.eq_match_bool_type_true) ((nat.nat) )) (((nat.S) ) (n1))) (((((permutation.invert_permut) ) (n1)) (f)) (i))) (fun (y : (nat.nat) ) , (((nat.le_) ) (((((bool.match_bool_type) ((nat.nat) )) (((nat.S) ) (n1))) (((((permutation.invert_permut) ) (n1)) (f)) (i))) ((bool.true) ))) (y))) ((@nat.le_n) (((((bool.match_bool_type) ((nat.nat) )) (((nat.S) ) (n1))) (((((permutation.invert_permut) ) (n1)) (f)) (i))) ((bool.true) ))))) ((((((@bool.sym_eq_match_bool_type_false) ((nat.nat) )) (((nat.S) ) (n1))) (((((permutation.invert_permut) ) (n1)) (f)) (i))) (fun (y : (nat.nat) ) , (((nat.le_) ) (y)) (((nat.S) ) (n1)))) ((((@nat.le_S) (((((permutation.invert_permut) ) (n1)) (f)) (i))) (n1)) (Hind)))) ((((nat.eqb) ) (i)) ((f) (((nat.S) ) (n1)))))))))) (n)))) ((((@permutation.injective_invert_permut) (f)) (n)) (permf))).
theorem permutation.f_invert_permut : forall (f:((nat.nat) ) -> (nat.nat) ) , forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , ((((nat.le_) ) (m)) (n)) -> ((((permutation.permut) ) (f)) (n)) -> (((logic.eq_) ((nat.nat) )) ((f) (((((permutation.invert_permut) ) (n)) (f)) (m)))) (m) := fun (f : ((nat.nat) ) -> (nat.nat) ) , fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , fun (lemn : (((nat.le_) ) (m)) (n)) , (fun (permf : (((permutation.permut) ) (f)) (n)) , ((((((@connectives.match_And_prop) (forall (i:(nat.nat) ) , ((((nat.le_) ) (i)) (n)) -> (((nat.le_) ) (((((permutation.invert_permut) ) (n)) (f)) (i))) (n))) ((((permutation.injn) ) ((((permutation.invert_permut) ) (n)) (f))) (n))) ((((logic.eq_) ((nat.nat) )) ((f) (((((permutation.invert_permut) ) (n)) (f)) (m)))) (m))) (fun (Hle : forall (i:(nat.nat) ) , ((((nat.le_) ) (i)) (n)) -> (((nat.le_) ) (((((permutation.invert_permut) ) (n)) (f)) (i))) (n)) , (fun (Hinj : (((permutation.injn) ) ((((permutation.invert_permut) ) (n)) (f))) (n)) , ((((((@connectives.match_And_prop) (forall (i:(nat.nat) ) , ((((nat.le_) ) (i)) (n)) -> (((nat.le_) ) ((f) (i))) (n))) ((((permutation.injn) ) (f)) (n))) ((((logic.eq_) ((nat.nat) )) ((f) (((((permutation.invert_permut) ) (n)) (f)) (m)))) (m))) (fun (lef : forall (i:(nat.nat) ) , ((((nat.le_) ) (i)) (n)) -> (((nat.le_) ) ((f) (i))) (n)) , (fun (injf : (((permutation.injn) ) (f)) (n)) , (((((((((@permutation.injective_invert_permut) (f)) (n)) (permf)) ((f) (((((permutation.invert_permut) ) (n)) (f)) (m)))) (m)) (((lef) (((((permutation.invert_permut) ) (n)) (f)) (m))) (((Hle) (m)) (lemn)))) (lemn)) ((((((@permutation.invert_permut_f) (f)) (n)) (((((permutation.invert_permut) ) (n)) (f)) (m))) (((Hle) (m)) (lemn))) (injf)))))) (permf))))) ((((@permutation.permut_invert_permut) (f)) (n)) (permf)))).

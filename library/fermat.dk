#NAME fermat.

def prime_to_not_divides_fact :
  sttfa.eps 
    (sttfa.forall nat.nat 
       (p:(sttfa.etap (sttfa.p nat.nat)) =>
        sttfa.impl (primes.prime p) 
          (sttfa.forall nat.nat 
             (n:(sttfa.etap (sttfa.p nat.nat)) =>
              sttfa.impl (nat.lt n p) 
                (connectives.Not (primes.divides p (fact.fact n)))))))
  :=
  p:(sttfa.etap (sttfa.p nat.nat)) =>
  primep:(sttfa.eps (primes.prime p)) =>
  n:(sttfa.etap (sttfa.p nat.nat)) =>
  nat.nat_ind 
    (_x_365:(sttfa.etap (sttfa.p nat.nat)) =>
     sttfa.impl (nat.lt _x_365 p) 
       (connectives.Not (primes.divides p (fact.fact _x_365)))) 
    (fact.sym_eq_fact nat.O 
       (y:(sttfa.etap (sttfa.p nat.nat)) =>
        sttfa.impl (nat.lt nat.O p) (connectives.Not (primes.divides p y))) 
       (nat.sym_eq_filter_nat_type_O nat.nat fact.fact_body 
          (y:(sttfa.etap (sttfa.p nat.nat)) =>
           sttfa.impl (nat.lt nat.O p) (connectives.Not (primes.divides p y))) 
          (fact.sym_eq_fact_body_O 
             (y:(sttfa.etap (sttfa.p nat.nat)) =>
              sttfa.impl (nat.lt nat.O p) 
                (connectives.Not (primes.divides p y))) 
             (__:(sttfa.eps (nat.le (nat.S nat.O) p)) =>
              divp:(sttfa.eps (primes.divides p (nat.S nat.O))) =>
              logic.absurd (nat.le p (nat.S nat.O)) 
                (primes.divides_to_le p (nat.S nat.O) (nat.lt_O_S nat.O) divp) 
                (nat.lt_to_not_le (nat.S nat.O) p 
                   (primes.prime_to_lt_SO p primep)))))) 
    (n1:(sttfa.etap (sttfa.p nat.nat)) =>
     fact.sym_eq_fact (nat.S n1) 
       (y:(sttfa.etap (sttfa.p nat.nat)) =>
        sttfa.impl 
          (sttfa.impl (nat.lt n1 p) 
             (connectives.Not (primes.divides p (fact.fact n1)))) 
          (sttfa.impl (nat.lt (nat.S n1) p) 
             (connectives.Not (primes.divides p y)))) 
       (nat.sym_eq_filter_nat_type_S nat.nat fact.fact_body n1 
          (y:(sttfa.etap (sttfa.p nat.nat)) =>
           sttfa.impl 
             (sttfa.impl (nat.lt n1 p) 
                (connectives.Not (primes.divides p (fact.fact n1)))) 
             (sttfa.impl (nat.lt (nat.S n1) p) 
                (connectives.Not (primes.divides p y)))) 
          (fact.sym_eq_fact_body_S n1 
             (y:(sttfa.etap (sttfa.p nat.nat)) =>
              sttfa.impl 
                (sttfa.impl (nat.lt n1 p) 
                   (connectives.Not (primes.divides p (fact.fact n1)))) 
                (sttfa.impl (nat.lt (nat.S n1) p) 
                   (connectives.Not (primes.divides p y)))) 
             (Hind:
              (sttfa.eps 
                 (sttfa.impl (nat.lt n1 p) 
                    (connectives.Not (primes.divides p (fact.fact n1))))) =>
              ltn1:(sttfa.eps (nat.lt (nat.S n1) p)) =>
              Hdiv:
              (sttfa.eps 
                 (primes.divides p (nat.times (fact.fact n1) (nat.S n1)))) =>
              logic.match_Or_prop (primes.divides p (fact.fact n1)) 
                (primes.divides p (nat.S n1)) connectives.False 
                (Hdiv0:(sttfa.eps (primes.divides p (fact.fact n1))) =>
                 logic.absurd (primes.divides p (fact.fact n1)) Hdiv0 
                   (Hind (nat.lt_to_le (nat.S n1) p ltn1))) 
                (Hdiv0:(sttfa.eps (primes.divides p (nat.S n1))) =>
                 logic.absurd (nat.le p (nat.S n1)) 
                   (primes.divides_to_le p (nat.S n1) (nat.lt_O_S n1) Hdiv0) 
                   (nat.lt_to_not_le (nat.S n1) p ltn1)) 
                (gcd.divides_times_to_divides p (fact.fact n1) (nat.S n1) 
                   primep Hdiv))))) n.

def permut_mod :
  sttfa.eps 
    (sttfa.forall nat.nat 
       (p:(sttfa.etap (sttfa.p nat.nat)) =>
        sttfa.forall nat.nat 
          (a:(sttfa.etap (sttfa.p nat.nat)) =>
           sttfa.impl (primes.prime p) 
             (sttfa.impl (connectives.Not (primes.divides p a)) 
                (permutation.permut 
                   (n:(sttfa.etap (sttfa.p nat.nat)) =>
                    div_mod.mod (nat.times a n) p) (nat.pred p))))))
  :=
  p:(sttfa.etap (sttfa.p nat.nat)) =>
  a:(sttfa.etap (sttfa.p nat.nat)) =>
  primep:(sttfa.eps (primes.prime p)) =>
  ndiv:(sttfa.eps (connectives.Not (primes.divides p a))) =>
  z:(sttfa.etap (sttfa.p sttfa.bool)) =>
  f:
  (sttfa.eps 
     (sttfa.impl 
        (sttfa.forall nat.nat 
           (x:(sttfa.etap (sttfa.p nat.nat)) =>
            sttfa.impl (nat.le x (nat.pred p)) 
              (nat.le (div_mod.mod (nat.times a x) p) (nat.pred p)))) 
        (sttfa.impl 
           (permutation.injn 
              (n:(sttfa.etap (sttfa.p nat.nat)) =>
               div_mod.mod (nat.times a n) p) (nat.pred p)) z))) =>
  f 
    (i:(sttfa.etap (sttfa.p nat.nat)) =>
     lei:(sttfa.eps (nat.le i (nat.pred p))) =>
     nat.le_S_S_to_le (div_mod.mod (nat.times a i) p) (nat.pred p) 
       (nat.transitive_le (nat.S (div_mod.mod (nat.times a i) p)) p 
          (nat.S (nat.pred p)) 
          (div_mod.lt_mod_m_m (nat.times a i) p 
             (primes.prime_to_lt_O p primep)) 
          (logic.eq_ind_r nat.nat p 
             (x:(sttfa.etap (sttfa.p nat.nat)) => nat.le p x) (nat.le_n p) 
             (nat.S (nat.pred p)) 
             (nat.S_pred p (primes.prime_to_lt_O p primep))))) 
    (i:(sttfa.etap (sttfa.p nat.nat)) =>
     j:(sttfa.etap (sttfa.p nat.nat)) =>
     lei:(sttfa.eps (nat.le i (nat.pred p))) =>
     lej:(sttfa.eps (nat.le j (nat.pred p))) =>
     H:
     (sttfa.eps 
        (logic.eq nat.nat (div_mod.mod (nat.times a i) p) 
           (div_mod.mod (nat.times a j) p))) =>
     logic.match_Or_prop (nat.lt i j) (connectives.Not (nat.lt i j)) 
       (logic.eq nat.nat i j) 
       (ltij:(sttfa.eps (nat.lt i j)) =>
        logic.falsity (logic.eq nat.nat i j) 
          (logic.absurd (nat.lt (nat.minus j i) p) 
             (logic.eq_ind nat.nat (nat.S (nat.pred p)) 
                (x_1:(sttfa.etap (sttfa.p nat.nat)) =>
                 nat.lt (nat.minus j i) x_1) 
                (nat.le_S_S (nat.minus j i) (nat.pred p) 
                   (nat.le_plus_to_minus j i (nat.pred p) 
                      (nat.transitive_le j (nat.pred p) 
                         (nat.plus (nat.pred p) i) lej 
                         (nat.le_plus_n_r i (nat.pred p))))) p 
                (nat.S_pred p (primes.prime_to_lt_O p primep))) 
             (nat.le_to_not_lt p (nat.minus j i) 
                (primes.divides_to_le p (nat.minus j i) 
                   (nat.lt_plus_to_minus_r nat.O i j 
                      (nat.sym_eq_plus nat.O 
                         (y:
                          (sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) =>
                          nat.le (nat.S (y i)) j) 
                         (nat.sym_eq_filter_nat_type_O 
                            (sttfa.arrow nat.nat nat.nat) nat.plus_body 
                            (y:
                             (sttfa.etap 
                                (sttfa.p (sttfa.arrow nat.nat nat.nat))) =>
                             nat.le (nat.S (y i)) j) 
                            (nat.sym_eq_plus_body_O 
                               (y:
                                (sttfa.etap 
                                   (sttfa.p (sttfa.arrow nat.nat nat.nat))) =>
                                nat.le (nat.S (y i)) j) ltij)))) 
                   (logic.match_Or_prop (primes.divides p a) 
                      (primes.divides p (nat.minus j i)) 
                      (primes.divides p (nat.minus j i)) 
                      (Hdiv:(sttfa.eps (primes.divides p a)) =>
                       logic.falsity (primes.divides p (nat.minus j i)) 
                         (logic.absurd (primes.divides p a) Hdiv ndiv)) 
                      (auto:(sttfa.eps (primes.divides p (nat.minus j i))) =>
                       auto) 
                      (gcd.divides_times_to_divides p a (nat.minus j i) 
                         primep 
                         (logic.eq_ind_r nat.nat 
                            (nat.minus (nat.times a j) (nat.times a i)) 
                            (x:(sttfa.etap (sttfa.p nat.nat)) =>
                             primes.divides p x) 
                            (primes.eq_mod_to_divides (nat.times a j) 
                               (nat.times a i) p 
                               (primes.prime_to_lt_O p primep) 
                               (logic.rewrite_l nat.nat 
                                  (div_mod.mod (nat.times a i) p) 
                                  (__:(sttfa.etap (sttfa.p nat.nat)) =>
                                   logic.eq nat.nat __ 
                                     (div_mod.mod (nat.times a i) p)) 
                                  (logic.refl nat.nat 
                                     (div_mod.mod (nat.times a i) p)) 
                                  (div_mod.mod (nat.times a j) p) H)) 
                            (nat.times a (nat.minus j i)) 
                            (nat.distributive_times_minus a j i)))))))) 
       (Hij:(sttfa.eps (connectives.Not (nat.lt i j))) =>
        logic.match_Or_prop (nat.lt j i) (logic.eq nat.nat j i) 
          (logic.eq nat.nat i j) 
          (Hij0:(sttfa.eps (nat.lt j i)) =>
           logic.falsity (logic.eq nat.nat i j) 
             (logic.absurd (nat.lt (nat.minus i j) p) 
                (logic.eq_ind nat.nat (nat.S (nat.pred p)) 
                   (x_1:(sttfa.etap (sttfa.p nat.nat)) =>
                    nat.lt (nat.minus i j) x_1) 
                   (nat.le_S_S (nat.minus i j) (nat.pred p) 
                      (nat.le_plus_to_minus i j (nat.pred p) 
                         (nat.transitive_le i (nat.pred p) 
                            (nat.plus (nat.pred p) j) lei 
                            (nat.le_plus_n_r j (nat.pred p))))) p 
                   (nat.S_pred p (primes.prime_to_lt_O p primep))) 
                (nat.le_to_not_lt p (nat.minus i j) 
                   (primes.divides_to_le p (nat.minus i j) 
                      (nat.lt_plus_to_minus_r nat.O j i 
                         (nat.sym_eq_plus nat.O 
                            (y:
                             (sttfa.etap 
                                (sttfa.p (sttfa.arrow nat.nat nat.nat))) =>
                             nat.le (nat.S (y j)) i) 
                            (nat.sym_eq_filter_nat_type_O 
                               (sttfa.arrow nat.nat nat.nat) nat.plus_body 
                               (y:
                                (sttfa.etap 
                                   (sttfa.p (sttfa.arrow nat.nat nat.nat))) =>
                                nat.le (nat.S (y j)) i) 
                               (nat.sym_eq_plus_body_O 
                                  (y:
                                   (sttfa.etap 
                                      (sttfa.p (sttfa.arrow nat.nat nat.nat))) =>
                                   nat.le (nat.S (y j)) i) Hij0)))) 
                      (logic.match_Or_prop (primes.divides p a) 
                         (primes.divides p (nat.minus i j)) 
                         (primes.divides p (nat.minus i j)) 
                         (Hdiv:(sttfa.eps (primes.divides p a)) =>
                          logic.falsity (primes.divides p (nat.minus i j)) 
                            (logic.absurd (primes.divides p a) Hdiv ndiv)) 
                         (auto:
                          (sttfa.eps (primes.divides p (nat.minus i j))) =>
                          auto) 
                         (gcd.divides_times_to_divides p a (nat.minus i j) 
                            primep 
                            (logic.eq_ind_r nat.nat 
                               (nat.minus (nat.times a i) (nat.times a j)) 
                               (x:(sttfa.etap (sttfa.p nat.nat)) =>
                                primes.divides p x) 
                               (primes.eq_mod_to_divides (nat.times a i) 
                                  (nat.times a j) p 
                                  (primes.prime_to_lt_O p primep) 
                                  (logic.rewrite_l nat.nat 
                                     (div_mod.mod (nat.times a i) p) 
                                     (__:(sttfa.etap (sttfa.p nat.nat)) =>
                                      logic.eq nat.nat 
                                        (div_mod.mod (nat.times a i) p) __) 
                                     (logic.refl nat.nat 
                                        (div_mod.mod (nat.times a i) p)) 
                                     (div_mod.mod (nat.times a j) p) H)) 
                               (nat.times a (nat.minus i j)) 
                               (nat.distributive_times_minus a i j)))))))) 
          (Hij0:(sttfa.eps (logic.eq nat.nat j i)) =>
           logic.rewrite_r nat.nat i 
             (__:(sttfa.etap (sttfa.p nat.nat)) => logic.eq nat.nat i __) 
             (logic.refl nat.nat i) j Hij0) 
          (nat.le_to_or_lt_eq j i (nat.not_lt_to_le i j Hij))) 
       (nat.decidable_lt i j)).

def eq_fact_pi_p :
  sttfa.eps 
    (sttfa.forall nat.nat 
       (n:(sttfa.etap (sttfa.p nat.nat)) =>
        logic.eq nat.nat (fact.fact n) 
          (bigops.bigop nat.nat (nat.minus (nat.S n) (nat.S nat.O)) 
             (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) (nat.S nat.O) 
             nat.times 
             (i:(sttfa.etap (sttfa.p nat.nat)) => nat.plus i (nat.S nat.O)))))
  :=
  n:(sttfa.etap (sttfa.p nat.nat)) =>
  nat.nat_ind 
    (_x_365:(sttfa.etap (sttfa.p nat.nat)) =>
     logic.eq nat.nat (fact.fact _x_365) 
       (bigops.bigop nat.nat (nat.minus (nat.S _x_365) (nat.S nat.O)) 
          (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) (nat.S nat.O) 
          nat.times 
          (i:(sttfa.etap (sttfa.p nat.nat)) => nat.plus i (nat.S nat.O)))) 
    (nat.sym_eq_minus (nat.S nat.O) 
       (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) =>
        logic.eq nat.nat (fact.fact nat.O) 
          (bigops.bigop nat.nat (y (nat.S nat.O)) 
             (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) (nat.S nat.O) 
             nat.times 
             (i:(sttfa.etap (sttfa.p nat.nat)) => nat.plus i (nat.S nat.O)))) 
       (nat.sym_eq_filter_nat_type_S (sttfa.arrow nat.nat nat.nat) 
          nat.minus_body nat.O 
          (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) =>
           logic.eq nat.nat (fact.fact nat.O) 
             (bigops.bigop nat.nat (y (nat.S nat.O)) 
                (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) 
                (nat.S nat.O) nat.times 
                (i:(sttfa.etap (sttfa.p nat.nat)) => nat.plus i (nat.S nat.O)))) 
          (nat.sym_eq_minus_body_S nat.O 
             (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) =>
              logic.eq nat.nat (fact.fact nat.O) 
                (bigops.bigop nat.nat (y (nat.S nat.O)) 
                   (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) 
                   (nat.S nat.O) nat.times 
                   (i:(sttfa.etap (sttfa.p nat.nat)) =>
                    nat.plus i (nat.S nat.O)))) 
             (nat.sym_eq_match_nat_type_S nat.nat (nat.S nat.O) 
                (q:(sttfa.etap (sttfa.p nat.nat)) => nat.minus nat.O q) 
                nat.O 
                (y:(sttfa.etap (sttfa.p nat.nat)) =>
                 logic.eq nat.nat (fact.fact nat.O) 
                   (bigops.bigop nat.nat y 
                      (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) 
                      (nat.S nat.O) nat.times 
                      (i:(sttfa.etap (sttfa.p nat.nat)) =>
                       nat.plus i (nat.S nat.O)))) 
                (nat.sym_eq_minus nat.O 
                   (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) =>
                    logic.eq nat.nat (fact.fact nat.O) 
                      (bigops.bigop nat.nat (y nat.O) 
                         (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) 
                         (nat.S nat.O) nat.times 
                         (i:(sttfa.etap (sttfa.p nat.nat)) =>
                          nat.plus i (nat.S nat.O)))) 
                   (nat.sym_eq_filter_nat_type_O 
                      (sttfa.arrow nat.nat nat.nat) nat.minus_body 
                      (y:
                       (sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) =>
                       logic.eq nat.nat (fact.fact nat.O) 
                         (bigops.bigop nat.nat (y nat.O) 
                            (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) 
                            (nat.S nat.O) nat.times 
                            (i:(sttfa.etap (sttfa.p nat.nat)) =>
                             nat.plus i (nat.S nat.O)))) 
                      (nat.sym_eq_minus_body_O 
                         (y:
                          (sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) =>
                          logic.eq nat.nat (fact.fact nat.O) 
                            (bigops.bigop nat.nat (y nat.O) 
                               (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) 
                               (nat.S nat.O) nat.times 
                               (i:(sttfa.etap (sttfa.p nat.nat)) =>
                                nat.plus i (nat.S nat.O)))) 
                         (bigops.sym_eq_bigop_O nat.nat 
                            (y:
                             (sttfa.etap 
                                (sttfa.p 
                                   (sttfa.arrow 
                                      (sttfa.arrow nat.nat bool.bool) 
                                      (sttfa.arrow nat.nat 
                                         (sttfa.arrow 
                                            (sttfa.arrow nat.nat 
                                               (sttfa.arrow nat.nat nat.nat)) 
                                            (sttfa.arrow 
                                               (sttfa.arrow nat.nat nat.nat) 
                                               nat.nat)))))) =>
                             logic.eq nat.nat (fact.fact nat.O) 
                               (y 
                                  (i:(sttfa.etap (sttfa.p nat.nat)) =>
                                   bool.true) (nat.S nat.O) nat.times 
                                  (i:(sttfa.etap (sttfa.p nat.nat)) =>
                                   nat.plus i (nat.S nat.O)))) 
                            (bigops.sym_eq_bigop_body_O nat.nat 
                               (y:
                                (sttfa.etap 
                                   (sttfa.p 
                                      (sttfa.arrow 
                                         (sttfa.arrow nat.nat bool.bool) 
                                         (sttfa.arrow nat.nat 
                                            (sttfa.arrow 
                                               (sttfa.arrow nat.nat 
                                                  (sttfa.arrow nat.nat 
                                                     nat.nat)) 
                                               (sttfa.arrow 
                                                  (sttfa.arrow nat.nat 
                                                     nat.nat) nat.nat)))))) =>
                                logic.eq nat.nat (fact.fact nat.O) 
                                  (y 
                                     (i:(sttfa.etap (sttfa.p nat.nat)) =>
                                      bool.true) (nat.S nat.O) nat.times 
                                     (i:(sttfa.etap (sttfa.p nat.nat)) =>
                                      nat.plus i (nat.S nat.O)))) 
                               (fact.eq_fact_body_O 
                                  (y:(sttfa.etap (sttfa.p nat.nat)) =>
                                   logic.eq nat.nat (fact.fact nat.O) y) 
                                  (nat.eq_filter_nat_type_O nat.nat 
                                     fact.fact_body 
                                     (y:(sttfa.etap (sttfa.p nat.nat)) =>
                                      logic.eq nat.nat (fact.fact nat.O) y) 
                                     (fact.eq_fact nat.O 
                                        (y:(sttfa.etap (sttfa.p nat.nat)) =>
                                         logic.eq nat.nat (fact.fact nat.O) y) 
                                        (logic.refl nat.nat (fact.fact nat.O)))))))))))))) 
    (n1:(sttfa.etap (sttfa.p nat.nat)) =>
     fact.sym_eq_fact (nat.S n1) 
       (y:(sttfa.etap (sttfa.p nat.nat)) =>
        sttfa.impl 
          (logic.eq nat.nat (fact.fact n1) 
             (bigops.bigop nat.nat (nat.minus (nat.S n1) (nat.S nat.O)) 
                (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) 
                (nat.S nat.O) nat.times 
                (i:(sttfa.etap (sttfa.p nat.nat)) => nat.plus i (nat.S nat.O)))) 
          (logic.eq nat.nat y 
             (bigops.bigop nat.nat 
                (nat.minus (nat.S (nat.S n1)) (nat.S nat.O)) 
                (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) 
                (nat.S nat.O) nat.times 
                (i:(sttfa.etap (sttfa.p nat.nat)) => nat.plus i (nat.S nat.O))))) 
       (nat.sym_eq_filter_nat_type_S nat.nat fact.fact_body n1 
          (y:(sttfa.etap (sttfa.p nat.nat)) =>
           sttfa.impl 
             (logic.eq nat.nat (fact.fact n1) 
                (bigops.bigop nat.nat (nat.minus (nat.S n1) (nat.S nat.O)) 
                   (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) 
                   (nat.S nat.O) nat.times 
                   (i:(sttfa.etap (sttfa.p nat.nat)) =>
                    nat.plus i (nat.S nat.O)))) 
             (logic.eq nat.nat y 
                (bigops.bigop nat.nat 
                   (nat.minus (nat.S (nat.S n1)) (nat.S nat.O)) 
                   (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) 
                   (nat.S nat.O) nat.times 
                   (i:(sttfa.etap (sttfa.p nat.nat)) =>
                    nat.plus i (nat.S nat.O))))) 
          (fact.sym_eq_fact_body_S n1 
             (y:(sttfa.etap (sttfa.p nat.nat)) =>
              sttfa.impl 
                (logic.eq nat.nat (fact.fact n1) 
                   (bigops.bigop nat.nat 
                      (nat.minus (nat.S n1) (nat.S nat.O)) 
                      (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) 
                      (nat.S nat.O) nat.times 
                      (i:(sttfa.etap (sttfa.p nat.nat)) =>
                       nat.plus i (nat.S nat.O)))) 
                (logic.eq nat.nat y 
                   (bigops.bigop nat.nat 
                      (nat.minus (nat.S (nat.S n1)) (nat.S nat.O)) 
                      (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) 
                      (nat.S nat.O) nat.times 
                      (i:(sttfa.etap (sttfa.p nat.nat)) =>
                       nat.plus i (nat.S nat.O))))) 
             (Hind:
              (sttfa.eps 
                 (logic.eq nat.nat (fact.fact n1) 
                    (bigops.bigop nat.nat 
                       (nat.minus (nat.S n1) (nat.S nat.O)) 
                       (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) 
                       (nat.S nat.O) nat.times 
                       (i:(sttfa.etap (sttfa.p nat.nat)) =>
                        nat.plus i (nat.S nat.O))))) =>
              logic.eq_ind_r nat.nat (nat.times (nat.S n1) (fact.fact n1)) 
                (x:(sttfa.etap (sttfa.p nat.nat)) =>
                 logic.eq nat.nat x 
                   (bigops.bigop nat.nat 
                      (nat.minus (nat.S (nat.S n1)) (nat.S nat.O)) 
                      (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) 
                      (nat.S nat.O) nat.times 
                      (i:(sttfa.etap (sttfa.p nat.nat)) =>
                       nat.plus i (nat.S nat.O)))) 
                (nat.sym_eq_minus (nat.S (nat.S n1)) 
                   (y:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) =>
                    logic.eq nat.nat (nat.times (nat.S n1) (fact.fact n1)) 
                      (bigops.bigop nat.nat (y (nat.S nat.O)) 
                         (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) 
                         (nat.S nat.O) nat.times 
                         (i:(sttfa.etap (sttfa.p nat.nat)) =>
                          nat.plus i (nat.S nat.O)))) 
                   (nat.sym_eq_filter_nat_type_S 
                      (sttfa.arrow nat.nat nat.nat) nat.minus_body 
                      (nat.S n1) 
                      (y:
                       (sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) =>
                       logic.eq nat.nat 
                         (nat.times (nat.S n1) (fact.fact n1)) 
                         (bigops.bigop nat.nat (y (nat.S nat.O)) 
                            (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) 
                            (nat.S nat.O) nat.times 
                            (i:(sttfa.etap (sttfa.p nat.nat)) =>
                             nat.plus i (nat.S nat.O)))) 
                      (nat.sym_eq_minus_body_S (nat.S n1) 
                         (y:
                          (sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) =>
                          logic.eq nat.nat 
                            (nat.times (nat.S n1) (fact.fact n1)) 
                            (bigops.bigop nat.nat (y (nat.S nat.O)) 
                               (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) 
                               (nat.S nat.O) nat.times 
                               (i:(sttfa.etap (sttfa.p nat.nat)) =>
                                nat.plus i (nat.S nat.O)))) 
                         (nat.sym_eq_match_nat_type_S nat.nat 
                            (nat.S (nat.S n1)) 
                            (q:(sttfa.etap (sttfa.p nat.nat)) =>
                             nat.minus (nat.S n1) q) nat.O 
                            (y:(sttfa.etap (sttfa.p nat.nat)) =>
                             logic.eq nat.nat 
                               (nat.times (nat.S n1) (fact.fact n1)) 
                               (bigops.bigop nat.nat y 
                                  (i:(sttfa.etap (sttfa.p nat.nat)) =>
                                   bool.true) (nat.S nat.O) nat.times 
                                  (i:(sttfa.etap (sttfa.p nat.nat)) =>
                                   nat.plus i (nat.S nat.O)))) 
                            (nat.sym_eq_minus (nat.S n1) 
                               (y:
                                (sttfa.etap 
                                   (sttfa.p (sttfa.arrow nat.nat nat.nat))) =>
                                logic.eq nat.nat 
                                  (nat.times (nat.S n1) (fact.fact n1)) 
                                  (bigops.bigop nat.nat (y nat.O) 
                                     (i:(sttfa.etap (sttfa.p nat.nat)) =>
                                      bool.true) (nat.S nat.O) nat.times 
                                     (i:(sttfa.etap (sttfa.p nat.nat)) =>
                                      nat.plus i (nat.S nat.O)))) 
                               (nat.sym_eq_filter_nat_type_S 
                                  (sttfa.arrow nat.nat nat.nat) 
                                  nat.minus_body n1 
                                  (y:
                                   (sttfa.etap 
                                      (sttfa.p (sttfa.arrow nat.nat nat.nat))) =>
                                   logic.eq nat.nat 
                                     (nat.times (nat.S n1) (fact.fact n1)) 
                                     (bigops.bigop nat.nat (y nat.O) 
                                        (i:(sttfa.etap (sttfa.p nat.nat)) =>
                                         bool.true) (nat.S nat.O) nat.times 
                                        (i:(sttfa.etap (sttfa.p nat.nat)) =>
                                         nat.plus i (nat.S nat.O)))) 
                                  (nat.sym_eq_minus_body_S n1 
                                     (y:
                                      (sttfa.etap 
                                         (sttfa.p 
                                            (sttfa.arrow nat.nat nat.nat))) =>
                                      logic.eq nat.nat 
                                        (nat.times (nat.S n1) (fact.fact n1)) 
                                        (bigops.bigop nat.nat (y nat.O) 
                                           (i:
                                            (sttfa.etap (sttfa.p nat.nat)) =>
                                            bool.true) (nat.S nat.O) 
                                           nat.times 
                                           (i:
                                            (sttfa.etap (sttfa.p nat.nat)) =>
                                            nat.plus i (nat.S nat.O)))) 
                                     (nat.sym_eq_match_nat_type_O nat.nat 
                                        (nat.S n1) 
                                        (q:(sttfa.etap (sttfa.p nat.nat)) =>
                                         nat.minus n1 q) 
                                        (y:(sttfa.etap (sttfa.p nat.nat)) =>
                                         logic.eq nat.nat 
                                           (nat.times (nat.S n1) 
                                              (fact.fact n1)) 
                                           (bigops.bigop nat.nat y 
                                              (i:
                                               (sttfa.etap (sttfa.p nat.nat)) =>
                                               bool.true) (nat.S nat.O) 
                                              nat.times 
                                              (i:
                                               (sttfa.etap (sttfa.p nat.nat)) =>
                                               nat.plus i (nat.S nat.O)))) 
                                        (logic.eq_ind_r nat.nat 
                                           (nat.times 
                                              (nat.plus n1 (nat.S nat.O)) 
                                              (bigops.bigop nat.nat n1 
                                                 (i:
                                                  (sttfa.etap 
                                                     (sttfa.p nat.nat)) =>
                                                  bool.true) (nat.S nat.O) 
                                                 nat.times 
                                                 (i:
                                                  (sttfa.etap 
                                                     (sttfa.p nat.nat)) =>
                                                  nat.plus i (nat.S nat.O)))) 
                                           (x:
                                            (sttfa.etap (sttfa.p nat.nat)) =>
                                            logic.eq nat.nat 
                                              (nat.times (nat.S n1) 
                                                 (fact.fact n1)) x) 
                                           (logic.eq_ind nat.nat 
                                              (nat.S (nat.plus n1 nat.O)) 
                                              (x_1:
                                               (sttfa.etap (sttfa.p nat.nat)) =>
                                               logic.eq nat.nat 
                                                 (nat.times (nat.S n1) 
                                                    (fact.fact n1)) 
                                                 (nat.times x_1 
                                                    (bigops.bigop nat.nat n1 
                                                       (i:
                                                        (sttfa.etap 
                                                           (sttfa.p nat.nat)) =>
                                                        bool.true) 
                                                       (nat.S nat.O) 
                                                       nat.times 
                                                       (i:
                                                        (sttfa.etap 
                                                           (sttfa.p nat.nat)) =>
                                                        nat.plus i 
                                                          (nat.S nat.O))))) 
                                              (logic.eq_ind nat.nat n1 
                                                 (x_1:
                                                  (sttfa.etap 
                                                     (sttfa.p nat.nat)) =>
                                                  logic.eq nat.nat 
                                                    (nat.times (nat.S n1) 
                                                       (fact.fact n1)) 
                                                    (nat.times (nat.S x_1) 
                                                       (bigops.bigop nat.nat 
                                                          n1 
                                                          (i:
                                                           (sttfa.etap 
                                                              (sttfa.p 
                                                                 nat.nat)) =>
                                                           bool.true) 
                                                          (nat.S nat.O) 
                                                          nat.times 
                                                          (i:
                                                           (sttfa.etap 
                                                              (sttfa.p 
                                                                 nat.nat)) =>
                                                           nat.plus i 
                                                             (nat.S nat.O))))) 
                                                 (logic.eq_f nat.nat nat.nat 
                                                    (nat.times (nat.S n1)) 
                                                    (fact.fact n1) 
                                                    (bigops.bigop nat.nat n1 
                                                       (i:
                                                        (sttfa.etap 
                                                           (sttfa.p nat.nat)) =>
                                                        bool.true) 
                                                       (nat.S nat.O) 
                                                       nat.times 
                                                       (i:
                                                        (sttfa.etap 
                                                           (sttfa.p nat.nat)) =>
                                                        nat.plus i 
                                                          (nat.S nat.O))) 
                                                    (logic.eq_ind nat.nat 
                                                       (nat.minus (nat.S n1) 
                                                          (nat.S nat.O)) 
                                                       (x_1:
                                                        (sttfa.etap 
                                                           (sttfa.p nat.nat)) =>
                                                        logic.eq nat.nat 
                                                          (fact.fact n1) 
                                                          (bigops.bigop 
                                                             nat.nat x_1 
                                                             (i:
                                                              (sttfa.etap 
                                                                 (sttfa.p 
                                                                    nat.nat)) =>
                                                              bool.true) 
                                                             (nat.S nat.O) 
                                                             nat.times 
                                                             (i:
                                                              (sttfa.etap 
                                                                 (sttfa.p 
                                                                    nat.nat)) =>
                                                              nat.plus i 
                                                                (nat.S nat.O)))) 
                                                       Hind n1 
                                                       (nat.sym_eq_minus 
                                                          (nat.S n1) 
                                                          (y:
                                                           (sttfa.etap 
                                                              (sttfa.p 
                                                                 (sttfa.arrow 
                                                                    nat.nat 
                                                                    nat.nat))) =>
                                                           logic.eq nat.nat 
                                                             (y (nat.S nat.O)) 
                                                             n1) 
                                                          (nat.sym_eq_filter_nat_type_S 
                                                             (sttfa.arrow 
                                                                nat.nat 
                                                                nat.nat) 
                                                             nat.minus_body 
                                                             n1 
                                                             (y:
                                                              (sttfa.etap 
                                                                 (sttfa.p 
                                                                    (
                                                                    sttfa.arrow 
                                                                    nat.nat 
                                                                    nat.nat))) =>
                                                              logic.eq 
                                                                nat.nat 
                                                                (y 
                                                                   (nat.S 
                                                                    nat.O)) 
                                                                n1) 
                                                             (nat.sym_eq_minus_body_S 
                                                                n1 
                                                                (y:
                                                                 (sttfa.etap 
                                                                    (
                                                                    sttfa.p 
                                                                    (sttfa.arrow 
                                                                    nat.nat 
                                                                    nat.nat))) =>
                                                                 logic.eq 
                                                                   nat.nat 
                                                                   (y 
                                                                    (nat.S 
                                                                    nat.O)) 
                                                                   n1) 
                                                                (nat.sym_eq_match_nat_type_S 
                                                                   nat.nat 
                                                                   (nat.S n1) 
                                                                   (q:
                                                                    (
                                                                    sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    nat.minus 
                                                                    n1 q) 
                                                                   nat.O 
                                                                   (y:
                                                                    (
                                                                    sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    logic.eq 
                                                                    nat.nat 
                                                                    y n1) 
                                                                   (logic.rewrite_l 
                                                                    nat.nat 
                                                                    n1 
                                                                    (__:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    logic.eq 
                                                                    nat.nat 
                                                                    __ n1) 
                                                                    (logic.refl 
                                                                    nat.nat 
                                                                    n1) 
                                                                    (nat.minus 
                                                                    n1 nat.O) 
                                                                    (nat.minus_n_O 
                                                                    n1)))))))) 
                                                 (nat.plus n1 nat.O) 
                                                 (nat.plus_n_O n1)) 
                                              (nat.plus n1 (nat.S nat.O)) 
                                              (nat.plus_n_Sm n1 nat.O)) 
                                           (bigops.bigop nat.nat (nat.S n1) 
                                              (i:
                                               (sttfa.etap (sttfa.p nat.nat)) =>
                                               bool.true) (nat.S nat.O) 
                                              nat.times 
                                              (i:
                                               (sttfa.etap (sttfa.p nat.nat)) =>
                                               nat.plus i (nat.S nat.O))) 
                                           (bigops.bigop_Strue nat.nat n1 
                                              (__:
                                               (sttfa.etap (sttfa.p nat.nat)) =>
                                               bool.true) (nat.S nat.O) 
                                              nat.times 
                                              (__:
                                               (sttfa.etap (sttfa.p nat.nat)) =>
                                               nat.plus __ (nat.S nat.O)) 
                                              (logic.refl bool.bool bool.true))))))))))) 
                (nat.times (fact.fact n1) (nat.S n1)) 
                (nat.commutative_times (fact.fact n1) (nat.S n1)))))) n.

def congruent_pi :
  sttfa.eps 
    (sttfa.forall (sttfa.arrow nat.nat nat.nat) 
       (f:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) =>
        sttfa.forall nat.nat 
          (n:(sttfa.etap (sttfa.p nat.nat)) =>
           sttfa.forall nat.nat 
             (p:(sttfa.etap (sttfa.p nat.nat)) =>
              sttfa.impl (nat.lt nat.O p) 
                (cong.congruent 
                   (bigops.bigop nat.nat n 
                      (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) 
                      (nat.S nat.O) nat.times 
                      (i:(sttfa.etap (sttfa.p nat.nat)) => f i)) 
                   (bigops.bigop nat.nat n 
                      (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) 
                      (nat.S nat.O) nat.times 
                      (i:(sttfa.etap (sttfa.p nat.nat)) =>
                       div_mod.mod (f i) p)) p)))))
  :=
  f:(sttfa.etap (sttfa.p (sttfa.arrow nat.nat nat.nat))) =>
  n:(sttfa.etap (sttfa.p nat.nat)) =>
  nat.nat_ind 
    (_x_365:(sttfa.etap (sttfa.p nat.nat)) =>
     sttfa.forall nat.nat 
       (p:(sttfa.etap (sttfa.p nat.nat)) =>
        sttfa.impl (nat.lt nat.O p) 
          (cong.congruent 
             (bigops.bigop nat.nat _x_365 
                (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) 
                (nat.S nat.O) nat.times 
                (i:(sttfa.etap (sttfa.p nat.nat)) => f i)) 
             (bigops.bigop nat.nat _x_365 
                (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) 
                (nat.S nat.O) nat.times 
                (i:(sttfa.etap (sttfa.p nat.nat)) => div_mod.mod (f i) p)) p))) 
    (p:(sttfa.etap (sttfa.p nat.nat)) =>
     bigops.sym_eq_bigop_O nat.nat 
       (y:
        (sttfa.etap 
           (sttfa.p 
              (sttfa.arrow (sttfa.arrow nat.nat bool.bool) 
                 (sttfa.arrow nat.nat 
                    (sttfa.arrow 
                       (sttfa.arrow nat.nat (sttfa.arrow nat.nat nat.nat)) 
                       (sttfa.arrow (sttfa.arrow nat.nat nat.nat) nat.nat)))))) =>
        sttfa.impl (nat.lt nat.O p) 
          (cong.congruent 
             (bigops.bigop nat.nat nat.O 
                (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) 
                (nat.S nat.O) nat.times 
                (i:(sttfa.etap (sttfa.p nat.nat)) => f i)) 
             (y (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) 
                (nat.S nat.O) nat.times 
                (i:(sttfa.etap (sttfa.p nat.nat)) => div_mod.mod (f i) p)) p)) 
       (bigops.sym_eq_bigop_body_O nat.nat 
          (y:
           (sttfa.etap 
              (sttfa.p 
                 (sttfa.arrow (sttfa.arrow nat.nat bool.bool) 
                    (sttfa.arrow nat.nat 
                       (sttfa.arrow 
                          (sttfa.arrow nat.nat (sttfa.arrow nat.nat nat.nat)) 
                          (sttfa.arrow (sttfa.arrow nat.nat nat.nat) nat.nat)))))) =>
           sttfa.impl (nat.lt nat.O p) 
             (cong.congruent 
                (bigops.bigop nat.nat nat.O 
                   (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) 
                   (nat.S nat.O) nat.times 
                   (i:(sttfa.etap (sttfa.p nat.nat)) => f i)) 
                (y (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) 
                   (nat.S nat.O) nat.times 
                   (i:(sttfa.etap (sttfa.p nat.nat)) => div_mod.mod (f i) p)) 
                p)) 
          (bigops.eq_bigop_body_O nat.nat 
             (y:
              (sttfa.etap 
                 (sttfa.p 
                    (sttfa.arrow (sttfa.arrow nat.nat bool.bool) 
                       (sttfa.arrow nat.nat 
                          (sttfa.arrow 
                             (sttfa.arrow nat.nat 
                                (sttfa.arrow nat.nat nat.nat)) 
                             (sttfa.arrow (sttfa.arrow nat.nat nat.nat) 
                                nat.nat)))))) =>
              sttfa.impl (nat.lt nat.O p) 
                (cong.congruent 
                   (bigops.bigop nat.nat nat.O 
                      (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) 
                      (nat.S nat.O) nat.times 
                      (i:(sttfa.etap (sttfa.p nat.nat)) => f i)) 
                   (y (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) 
                      (nat.S nat.O) nat.times 
                      (i:(sttfa.etap (sttfa.p nat.nat)) => f i)) p)) 
             (bigops.eq_bigop_O nat.nat 
                (y:
                 (sttfa.etap 
                    (sttfa.p 
                       (sttfa.arrow (sttfa.arrow nat.nat bool.bool) 
                          (sttfa.arrow nat.nat 
                             (sttfa.arrow 
                                (sttfa.arrow nat.nat 
                                   (sttfa.arrow nat.nat nat.nat)) 
                                (sttfa.arrow (sttfa.arrow nat.nat nat.nat) 
                                   nat.nat)))))) =>
                 sttfa.impl (nat.lt nat.O p) 
                   (cong.congruent 
                      (bigops.bigop nat.nat nat.O 
                         (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) 
                         (nat.S nat.O) nat.times 
                         (i:(sttfa.etap (sttfa.p nat.nat)) => f i)) 
                      (y (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) 
                         (nat.S nat.O) nat.times 
                         (i:(sttfa.etap (sttfa.p nat.nat)) => f i)) p)) 
                (auto:(sttfa.eps (nat.lt nat.O p)) =>
                 cong.congruent_n_n 
                   (bigops.bigop nat.nat nat.O 
                      (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) 
                      (nat.S nat.O) nat.times 
                      (i:(sttfa.etap (sttfa.p nat.nat)) => f i)) p))))) 
    (n1:(sttfa.etap (sttfa.p nat.nat)) =>
     Hind:
     (sttfa.eps 
        (sttfa.forall nat.nat 
           (p:(sttfa.etap (sttfa.p nat.nat)) =>
            sttfa.impl (nat.lt nat.O p) 
              (cong.congruent 
                 (bigops.bigop nat.nat n1 
                    (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) 
                    (nat.S nat.O) nat.times 
                    (i:(sttfa.etap (sttfa.p nat.nat)) => f i)) 
                 (bigops.bigop nat.nat n1 
                    (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) 
                    (nat.S nat.O) nat.times 
                    (i:(sttfa.etap (sttfa.p nat.nat)) => div_mod.mod (f i) p)) 
                 p)))) =>
     p:(sttfa.etap (sttfa.p nat.nat)) =>
     posp:(sttfa.eps (nat.lt nat.O p)) =>
     logic.eq_ind_r nat.nat 
       (nat.times (f n1) 
          (bigops.bigop nat.nat n1 
             (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) (nat.S nat.O) 
             nat.times (i:(sttfa.etap (sttfa.p nat.nat)) => f i))) 
       (x:(sttfa.etap (sttfa.p nat.nat)) =>
        cong.congruent x 
          (bigops.bigop nat.nat (nat.S n1) 
             (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) (nat.S nat.O) 
             nat.times 
             (i:(sttfa.etap (sttfa.p nat.nat)) => div_mod.mod (f i) p)) p) 
       (bigops.sym_eq_bigop_S nat.nat n1 
          (y:
           (sttfa.etap 
              (sttfa.p 
                 (sttfa.arrow (sttfa.arrow nat.nat bool.bool) 
                    (sttfa.arrow nat.nat 
                       (sttfa.arrow 
                          (sttfa.arrow nat.nat (sttfa.arrow nat.nat nat.nat)) 
                          (sttfa.arrow (sttfa.arrow nat.nat nat.nat) nat.nat)))))) =>
           cong.congruent 
             (nat.times (f n1) 
                (bigops.bigop nat.nat n1 
                   (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) 
                   (nat.S nat.O) nat.times 
                   (i:(sttfa.etap (sttfa.p nat.nat)) => f i))) 
             (y (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) 
                (nat.S nat.O) nat.times 
                (i:(sttfa.etap (sttfa.p nat.nat)) => div_mod.mod (f i) p)) p) 
          (bigops.sym_eq_bigop_body_S nat.nat n1 
             (y:
              (sttfa.etap 
                 (sttfa.p 
                    (sttfa.arrow (sttfa.arrow nat.nat bool.bool) 
                       (sttfa.arrow nat.nat 
                          (sttfa.arrow 
                             (sttfa.arrow nat.nat 
                                (sttfa.arrow nat.nat nat.nat)) 
                             (sttfa.arrow (sttfa.arrow nat.nat nat.nat) 
                                nat.nat)))))) =>
              cong.congruent 
                (nat.times (f n1) 
                   (bigops.bigop nat.nat n1 
                      (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) 
                      (nat.S nat.O) nat.times 
                      (i:(sttfa.etap (sttfa.p nat.nat)) => f i))) 
                (y (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) 
                   (nat.S nat.O) nat.times 
                   (i:(sttfa.etap (sttfa.p nat.nat)) => div_mod.mod (f i) p)) 
                p) 
             (bool.sym_eq_match_bool_type_true nat.nat 
                (nat.times (div_mod.mod (f n1) p) 
                   (bigops.bigop nat.nat n1 
                      (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) 
                      (nat.S nat.O) nat.times 
                      (i:(sttfa.etap (sttfa.p nat.nat)) =>
                       div_mod.mod (f i) p))) 
                (bigops.bigop nat.nat n1 
                   (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) 
                   (nat.S nat.O) nat.times 
                   (i:(sttfa.etap (sttfa.p nat.nat)) => div_mod.mod (f i) p)) 
                (y:(sttfa.etap (sttfa.p nat.nat)) =>
                 cong.congruent 
                   (nat.times (f n1) 
                      (bigops.bigop nat.nat n1 
                         (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) 
                         (nat.S nat.O) nat.times 
                         (i:(sttfa.etap (sttfa.p nat.nat)) => f i))) y p) 
                (cong.congruent_times (f n1) 
                   (bigops.bigop nat.nat n1 
                      (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) 
                      (nat.S nat.O) nat.times 
                      (i:(sttfa.etap (sttfa.p nat.nat)) => f i)) 
                   (div_mod.mod (f n1) p) 
                   (bigops.bigop nat.nat n1 
                      (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) 
                      (nat.S nat.O) nat.times 
                      (i:(sttfa.etap (sttfa.p nat.nat)) =>
                       div_mod.mod (f i) p)) p posp 
                   (cong.congruent_n_mod_n (f n1) p posp) (Hind p posp))))) 
       (bigops.bigop nat.nat (nat.S n1) 
          (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) (nat.S nat.O) 
          nat.times (i:(sttfa.etap (sttfa.p nat.nat)) => f i)) 
       (bigops.bigop_Strue nat.nat n1 
          (__:(sttfa.etap (sttfa.p nat.nat)) => bool.true) (nat.S nat.O) 
          nat.times f (logic.refl bool.bool bool.true))) n.

def congruent_exp_pred_SO :
  sttfa.eps 
    (sttfa.forall nat.nat 
       (p:(sttfa.etap (sttfa.p nat.nat)) =>
        sttfa.forall nat.nat 
          (a:(sttfa.etap (sttfa.p nat.nat)) =>
           sttfa.impl (primes.prime p) 
             (sttfa.impl (connectives.Not (primes.divides p a)) 
                (cong.congruent (exp.exp a (nat.pred p)) (nat.S nat.O) p)))))
  :=
  p:(sttfa.etap (sttfa.p nat.nat)) =>
  a:(sttfa.etap (sttfa.p nat.nat)) =>
  primep:(sttfa.eps (primes.prime p)) =>
  ndiv:(sttfa.eps (connectives.Not (primes.divides p a))) =>
  cong.divides_to_congruent (exp.exp a (nat.pred p)) (nat.S nat.O) p 
    (primes.prime_to_lt_O p primep) 
    (exp.lt_O_exp a (nat.pred p) 
       (nat.match_nat_prop 
          (__:(sttfa.etap (sttfa.p nat.nat)) =>
           sttfa.impl (connectives.Not (primes.divides p __)) 
             (nat.lt nat.O __)) 
          (_clearme:(sttfa.eps (connectives.Not (primes.divides p nat.O))) =>
           logic.Not_ind (primes.divides p nat.O) (nat.lt nat.O nat.O) 
             (div0:
              (sttfa.eps 
                 (sttfa.impl (primes.divides p nat.O) connectives.False)) =>
              logic.falsity (nat.lt nat.O nat.O) 
                (div0 
                   (primes.quotient p nat.O nat.O 
                      (logic.rewrite_l nat.nat nat.O 
                         (__:(sttfa.etap (sttfa.p nat.nat)) =>
                          logic.eq nat.nat nat.O __) 
                         (logic.refl nat.nat nat.O) (nat.times p nat.O) 
                         (nat.times_n_O p))))) _clearme) 
          (auto:(sttfa.etap (sttfa.p nat.nat)) =>
           auto':
           (sttfa.eps (connectives.Not (primes.divides p (nat.S auto)))) =>
           nat.lt_O_S auto) a ndiv)) 
    (logic.match_Or_prop 
       (primes.divides p (nat.minus (exp.exp a (nat.pred p)) (nat.S nat.O))) 
       (primes.divides p (fact.fact (nat.pred p))) 
       (primes.divides p (nat.minus (exp.exp a (nat.pred p)) (nat.S nat.O))) 
       (auto:
        (sttfa.eps 
           (primes.divides p 
              (nat.minus (exp.exp a (nat.pred p)) (nat.S nat.O)))) =>
        auto) 
       (Hdiv:(sttfa.eps (primes.divides p (fact.fact (nat.pred p)))) =>
        logic.falsity 
          (primes.divides p 
             (nat.minus (exp.exp a (nat.pred p)) (nat.S nat.O))) 
          (logic.absurd (primes.divides p (fact.fact (nat.pred p))) Hdiv 
             (fermat.prime_to_not_divides_fact p primep (nat.pred p) 
                (nat.le_S_S_to_le (nat.S (nat.pred p)) p 
                   (logic.eq_ind_r nat.nat p 
                      (x:(sttfa.etap (sttfa.p nat.nat)) =>
                       nat.le (nat.S x) (nat.S p)) (nat.le_n (nat.S p)) 
                      (nat.S (nat.pred p)) 
                      (nat.S_pred p (primes.prime_to_lt_O p primep))))))) 
       (gcd.divides_times_to_divides p 
          (nat.minus (exp.exp a (nat.pred p)) (nat.S nat.O)) 
          (fact.fact (nat.pred p)) primep 
          (logic.eq_ind_r nat.nat 
             (nat.times (fact.fact (nat.pred p)) 
                (nat.minus (exp.exp a (nat.pred p)) (nat.S nat.O))) 
             (x:(sttfa.etap (sttfa.p nat.nat)) => primes.divides p x) 
             (logic.eq_ind_r nat.nat 
                (nat.minus 
                   (nat.times (fact.fact (nat.pred p)) 
                      (exp.exp a (nat.pred p))) 
                   (nat.times (fact.fact (nat.pred p)) (nat.S nat.O))) 
                (x:(sttfa.etap (sttfa.p nat.nat)) => primes.divides p x) 
                (logic.eq_ind nat.nat (fact.fact (nat.pred p)) 
                   (x_1:(sttfa.etap (sttfa.p nat.nat)) =>
                    primes.divides p 
                      (nat.minus 
                         (nat.times (fact.fact (nat.pred p)) 
                            (exp.exp a (nat.pred p))) x_1)) 
                   (logic.eq_ind_r nat.nat 
                      (bigops.bigop nat.nat 
                         (nat.minus (nat.S (nat.pred p)) (nat.S nat.O)) 
                         (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) 
                         (nat.S nat.O) nat.times 
                         (i:(sttfa.etap (sttfa.p nat.nat)) =>
                          nat.plus i (nat.S nat.O))) 
                      (x:(sttfa.etap (sttfa.p nat.nat)) =>
                       primes.divides p 
                         (nat.minus (nat.times x (exp.exp a (nat.pred p))) x)) 
                      (logic.eq_ind_r nat.nat 
                         (nat.times (exp.exp a (nat.pred p)) 
                            (bigops.bigop nat.nat 
                               (nat.minus (nat.S (nat.pred p)) (nat.S nat.O)) 
                               (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) 
                               (nat.S nat.O) nat.times 
                               (i:(sttfa.etap (sttfa.p nat.nat)) =>
                                nat.plus i (nat.S nat.O)))) 
                         (x:(sttfa.etap (sttfa.p nat.nat)) =>
                          primes.divides p 
                            (nat.minus x 
                               (bigops.bigop nat.nat 
                                  (nat.minus (nat.S (nat.pred p)) 
                                     (nat.S nat.O)) 
                                  (i:(sttfa.etap (sttfa.p nat.nat)) =>
                                   bool.true) (nat.S nat.O) nat.times 
                                  (i:(sttfa.etap (sttfa.p nat.nat)) =>
                                   nat.plus i (nat.S nat.O))))) 
                         (logic.eq_ind_r nat.nat 
                            (nat.minus (nat.S (nat.pred p)) (nat.S nat.O)) 
                            (x:(sttfa.etap (sttfa.p nat.nat)) =>
                             primes.divides p 
                               (nat.minus 
                                  (nat.times (exp.exp a x) 
                                     (bigops.bigop nat.nat 
                                        (nat.minus (nat.S (nat.pred p)) 
                                           (nat.S nat.O)) 
                                        (i:(sttfa.etap (sttfa.p nat.nat)) =>
                                         bool.true) (nat.S nat.O) nat.times 
                                        (i:(sttfa.etap (sttfa.p nat.nat)) =>
                                         nat.plus i (nat.S nat.O)))) 
                                  (bigops.bigop nat.nat 
                                     (nat.minus (nat.S (nat.pred p)) 
                                        (nat.S nat.O)) 
                                     (i:(sttfa.etap (sttfa.p nat.nat)) =>
                                      bool.true) (nat.S nat.O) nat.times 
                                     (i:(sttfa.etap (sttfa.p nat.nat)) =>
                                      nat.plus i (nat.S nat.O))))) 
                            (logic.eq_ind_r nat.nat 
                               (bigops.bigop nat.nat 
                                  (nat.minus (nat.S (nat.pred p)) 
                                     (nat.S nat.O)) 
                                  (i:(sttfa.etap (sttfa.p nat.nat)) =>
                                   bool.true) (nat.S nat.O) nat.times 
                                  (i:(sttfa.etap (sttfa.p nat.nat)) =>
                                   nat.times a (nat.plus i (nat.S nat.O)))) 
                               (x:(sttfa.etap (sttfa.p nat.nat)) =>
                                primes.divides p 
                                  (nat.minus x 
                                     (bigops.bigop nat.nat 
                                        (nat.minus (nat.S (nat.pred p)) 
                                           (nat.S nat.O)) 
                                        (i:(sttfa.etap (sttfa.p nat.nat)) =>
                                         bool.true) (nat.S nat.O) nat.times 
                                        (i:(sttfa.etap (sttfa.p nat.nat)) =>
                                         nat.plus i (nat.S nat.O))))) 
                               (cong.congruent_to_divides 
                                  (bigops.bigop nat.nat 
                                     (nat.minus (nat.S (nat.pred p)) 
                                        (nat.S nat.O)) 
                                     (i:(sttfa.etap (sttfa.p nat.nat)) =>
                                      bool.true) (nat.S nat.O) nat.times 
                                     (i:(sttfa.etap (sttfa.p nat.nat)) =>
                                      nat.times a (nat.plus i (nat.S nat.O)))) 
                                  (bigops.bigop nat.nat 
                                     (nat.minus (nat.S (nat.pred p)) 
                                        (nat.S nat.O)) 
                                     (i:(sttfa.etap (sttfa.p nat.nat)) =>
                                      bool.true) (nat.S nat.O) nat.times 
                                     (i:(sttfa.etap (sttfa.p nat.nat)) =>
                                      nat.plus i (nat.S nat.O))) p 
                                  (primes.prime_to_lt_O p primep) 
                                  (cong.transitive_congruent p 
                                     (bigops.bigop nat.nat 
                                        (nat.minus (nat.S (nat.pred p)) 
                                           (nat.S nat.O)) 
                                        (i:(sttfa.etap (sttfa.p nat.nat)) =>
                                         bool.true) (nat.S nat.O) nat.times 
                                        (i:(sttfa.etap (sttfa.p nat.nat)) =>
                                         nat.times a 
                                           (nat.plus i (nat.S nat.O)))) 
                                     (bigops.bigop nat.nat 
                                        (nat.minus (nat.S (nat.pred p)) 
                                           (nat.S nat.O)) 
                                        (i:(sttfa.etap (sttfa.p nat.nat)) =>
                                         bool.true) (nat.S nat.O) nat.times 
                                        (i:(sttfa.etap (sttfa.p nat.nat)) =>
                                         div_mod.mod 
                                           (nat.times a 
                                              (nat.plus i (nat.S nat.O))) p)) 
                                     (bigops.bigop nat.nat 
                                        (nat.minus (nat.S (nat.pred p)) 
                                           (nat.S nat.O)) 
                                        (i:(sttfa.etap (sttfa.p nat.nat)) =>
                                         bool.true) (nat.S nat.O) nat.times 
                                        (i:(sttfa.etap (sttfa.p nat.nat)) =>
                                         nat.plus i (nat.S nat.O))) 
                                     (fermat.congruent_pi 
                                        (m:(sttfa.etap (sttfa.p nat.nat)) =>
                                         nat.times a 
                                           (nat.plus m (nat.S nat.O))) 
                                        (nat.minus (nat.S (nat.pred p)) 
                                           (nat.S nat.O)) p 
                                        (primes.prime_to_lt_O p primep)) 
                                     (logic.eq_ind nat.nat 
                                        (bigops.bigop nat.nat 
                                           (nat.minus (nat.S (nat.pred p)) 
                                              (nat.S nat.O)) 
                                           (i:
                                            (sttfa.etap (sttfa.p nat.nat)) =>
                                            bool.true) (nat.S nat.O) 
                                           nat.times 
                                           (i:
                                            (sttfa.etap (sttfa.p nat.nat)) =>
                                            nat.plus i (nat.S nat.O))) 
                                        (x_1:
                                         (sttfa.etap (sttfa.p nat.nat)) =>
                                         cong.congruent x_1 
                                           (bigops.bigop nat.nat 
                                              (nat.minus 
                                                 (nat.S (nat.pred p)) 
                                                 (nat.S nat.O)) 
                                              (i:
                                               (sttfa.etap (sttfa.p nat.nat)) =>
                                               bool.true) (nat.S nat.O) 
                                              nat.times 
                                              (i:
                                               (sttfa.etap (sttfa.p nat.nat)) =>
                                               nat.plus i (nat.S nat.O))) p) 
                                        (cong.congruent_n_n 
                                           (bigops.bigop nat.nat 
                                              (nat.minus 
                                                 (nat.S (nat.pred p)) 
                                                 (nat.S nat.O)) 
                                              (i:
                                               (sttfa.etap (sttfa.p nat.nat)) =>
                                               bool.true) (nat.S nat.O) 
                                              nat.times 
                                              (i:
                                               (sttfa.etap (sttfa.p nat.nat)) =>
                                               nat.plus i (nat.S nat.O))) p) 
                                        (bigops.bigop nat.nat 
                                           (nat.minus (nat.S (nat.pred p)) 
                                              (nat.S nat.O)) 
                                           (i:
                                            (sttfa.etap (sttfa.p nat.nat)) =>
                                            bool.true) (nat.S nat.O) 
                                           nat.times 
                                           (i:
                                            (sttfa.etap (sttfa.p nat.nat)) =>
                                            div_mod.mod 
                                              (nat.times a 
                                                 (nat.plus i (nat.S nat.O))) 
                                              p)) 
                                        (logic.eq_ind_r nat.nat 
                                           (bigops.bigop nat.nat 
                                              (nat.S (nat.pred p)) 
                                              (i:
                                               (sttfa.etap (sttfa.p nat.nat)) =>
                                               bool.andb 
                                                 (nat.leb (nat.S nat.O) i) 
                                                 bool.true) (nat.S nat.O) 
                                              nat.times 
                                              (i:
                                               (sttfa.etap (sttfa.p nat.nat)) =>
                                               i)) 
                                           (x:
                                            (sttfa.etap (sttfa.p nat.nat)) =>
                                            logic.eq nat.nat x 
                                              (bigops.bigop nat.nat 
                                                 (nat.minus 
                                                    (nat.S (nat.pred p)) 
                                                    (nat.S nat.O)) 
                                                 (i:
                                                  (sttfa.etap 
                                                     (sttfa.p nat.nat)) =>
                                                  bool.true) (nat.S nat.O) 
                                                 nat.times 
                                                 (i:
                                                  (sttfa.etap 
                                                     (sttfa.p nat.nat)) =>
                                                  div_mod.mod 
                                                    (nat.times a 
                                                       (nat.plus i 
                                                          (nat.S nat.O))) p))) 
                                           (logic.eq_ind_r nat.nat 
                                              (bigops.bigop nat.nat 
                                                 (nat.S (nat.pred p)) 
                                                 (i:
                                                  (sttfa.etap 
                                                     (sttfa.p nat.nat)) =>
                                                  bool.andb 
                                                    (nat.leb (nat.S nat.O) i) 
                                                    bool.true) (nat.S nat.O) 
                                                 nat.times 
                                                 (i:
                                                  (sttfa.etap 
                                                     (sttfa.p nat.nat)) =>
                                                  div_mod.mod 
                                                    (nat.times a i) p)) 
                                              (x:
                                               (sttfa.etap (sttfa.p nat.nat)) =>
                                               logic.eq nat.nat 
                                                 (bigops.bigop nat.nat 
                                                    (nat.S (nat.pred p)) 
                                                    (i:
                                                     (sttfa.etap 
                                                        (sttfa.p nat.nat)) =>
                                                     bool.andb 
                                                       (nat.leb 
                                                          (nat.S nat.O) i) 
                                                       bool.true) 
                                                    (nat.S nat.O) nat.times 
                                                    (i:
                                                     (sttfa.etap 
                                                        (sttfa.p nat.nat)) =>
                                                     i)) x) 
                                              (logic.sym_eq nat.nat 
                                                 (bigops.bigop nat.nat 
                                                    (nat.S (nat.pred p)) 
                                                    (i:
                                                     (sttfa.etap 
                                                        (sttfa.p nat.nat)) =>
                                                     bool.andb 
                                                       (nat.leb 
                                                          (nat.S nat.O) i) 
                                                       bool.true) 
                                                    (nat.S nat.O) nat.times 
                                                    (i:
                                                     (sttfa.etap 
                                                        (sttfa.p nat.nat)) =>
                                                     div_mod.mod 
                                                       (nat.times a i) p)) 
                                                 (bigops.bigop nat.nat 
                                                    (nat.S (nat.pred p)) 
                                                    (i:
                                                     (sttfa.etap 
                                                        (sttfa.p nat.nat)) =>
                                                     bool.andb 
                                                       (nat.leb 
                                                          (nat.S nat.O) i) 
                                                       bool.true) 
                                                    (nat.S nat.O) nat.times 
                                                    (i:
                                                     (sttfa.etap 
                                                        (sttfa.p nat.nat)) =>
                                                     i)) 
                                                 (bigops.bigop_iso 
                                                    (nat.S (nat.pred p)) 
                                                    (nat.S (nat.pred p)) 
                                                    (__:
                                                     (sttfa.etap 
                                                        (sttfa.p nat.nat)) =>
                                                     bool.andb 
                                                       (nat.leb 
                                                          (nat.S nat.O) __) 
                                                       bool.true) 
                                                    (__:
                                                     (sttfa.etap 
                                                        (sttfa.p nat.nat)) =>
                                                     bool.andb 
                                                       (nat.leb 
                                                          (nat.S nat.O) __) 
                                                       bool.true) 
                                                    (__:
                                                     (sttfa.etap 
                                                        (sttfa.p nat.nat)) =>
                                                     div_mod.mod 
                                                       (nat.times a __) p) 
                                                    (__:
                                                     (sttfa.etap 
                                                        (sttfa.p nat.nat)) =>
                                                     __) 
                                                    (z:
                                                     (sttfa.etap 
                                                        (sttfa.p sttfa.bool)) =>
                                                     f:
                                                     (sttfa.eps 
                                                        (sttfa.forall 
                                                           (sttfa.arrow 
                                                              nat.nat nat.nat) 
                                                           (x:
                                                            (sttfa.etap 
                                                               (sttfa.p 
                                                                  (sttfa.arrow 
                                                                    nat.nat 
                                                                    nat.nat))) =>
                                                            sttfa.impl 
                                                              (connectives.Ex 
                                                                 (sttfa.arrow 
                                                                    nat.nat 
                                                                    nat.nat) 
                                                                 (k:
                                                                  (sttfa.etap 
                                                                    (sttfa.p 
                                                                    (sttfa.arrow 
                                                                    nat.nat 
                                                                    nat.nat))) =>
                                                                  connectives.And 
                                                                    (
                                                                    connectives.And 
                                                                    (sttfa.forall 
                                                                    nat.nat 
                                                                    (i:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    sttfa.impl 
                                                                    (nat.lt 
                                                                    i 
                                                                    (nat.S 
                                                                    (nat.pred 
                                                                    p))) 
                                                                    (sttfa.impl 
                                                                    (logic.eq 
                                                                    bool.bool 
                                                                    (bool.andb 
                                                                    (nat.leb 
                                                                    (nat.S 
                                                                    nat.O) i) 
                                                                    bool.true) 
                                                                    bool.true) 
                                                                    (logic.eq 
                                                                    nat.nat 
                                                                    (div_mod.mod 
                                                                    (nat.times 
                                                                    a i) p) 
                                                                    (x i))))) 
                                                                    (bigops.sub_hk 
                                                                    x k 
                                                                    (nat.S 
                                                                    (nat.pred 
                                                                    p)) 
                                                                    (nat.S 
                                                                    (nat.pred 
                                                                    p)) 
                                                                    (_0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    bool.andb 
                                                                    (nat.leb 
                                                                    (nat.S 
                                                                    nat.O) _0) 
                                                                    bool.true) 
                                                                    (_0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    bool.andb 
                                                                    (nat.leb 
                                                                    (nat.S 
                                                                    nat.O) _0) 
                                                                    bool.true) 
                                                                    (_0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a _0) p) 
                                                                    (_0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    _0))) 
                                                                    (
                                                                    bigops.sub_hk 
                                                                    k x 
                                                                    (nat.S 
                                                                    (nat.pred 
                                                                    p)) 
                                                                    (nat.S 
                                                                    (nat.pred 
                                                                    p)) 
                                                                    (_0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    bool.andb 
                                                                    (nat.leb 
                                                                    (nat.S 
                                                                    nat.O) _0) 
                                                                    bool.true) 
                                                                    (_0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    bool.andb 
                                                                    (nat.leb 
                                                                    (nat.S 
                                                                    nat.O) _0) 
                                                                    bool.true) 
                                                                    (_0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    _0) 
                                                                    (_0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a _0) p)))) 
                                                              z))) =>
                                                     f 
                                                       (i:
                                                        (sttfa.etap 
                                                           (sttfa.p nat.nat)) =>
                                                        div_mod.mod 
                                                          (nat.times a i) p) 
                                                       (z0:
                                                        (sttfa.etap 
                                                           (sttfa.p 
                                                              sttfa.bool)) =>
                                                        f2:
                                                        (sttfa.eps 
                                                           (sttfa.forall 
                                                              (sttfa.arrow 
                                                                 nat.nat 
                                                                 nat.nat) 
                                                              (y:
                                                               (sttfa.etap 
                                                                  (sttfa.p 
                                                                    (sttfa.arrow 
                                                                    nat.nat 
                                                                    nat.nat))) =>
                                                               sttfa.impl 
                                                                 (connectives.And 
                                                                    (
                                                                    connectives.And 
                                                                    (sttfa.forall 
                                                                    nat.nat 
                                                                    (i:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    sttfa.impl 
                                                                    (nat.lt 
                                                                    i 
                                                                    (nat.S 
                                                                    (nat.pred 
                                                                    p))) 
                                                                    (sttfa.impl 
                                                                    (logic.eq 
                                                                    bool.bool 
                                                                    (bool.andb 
                                                                    (nat.leb 
                                                                    (nat.S 
                                                                    nat.O) i) 
                                                                    bool.true) 
                                                                    bool.true) 
                                                                    (logic.eq 
                                                                    nat.nat 
                                                                    (div_mod.mod 
                                                                    (nat.times 
                                                                    a i) p) 
                                                                    (div_mod.mod 
                                                                    (nat.times 
                                                                    a i) p))))) 
                                                                    (bigops.sub_hk 
                                                                    (i:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a i) p) 
                                                                    y 
                                                                    (nat.S 
                                                                    (nat.pred 
                                                                    p)) 
                                                                    (nat.S 
                                                                    (nat.pred 
                                                                    p)) 
                                                                    (_0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    bool.andb 
                                                                    (nat.leb 
                                                                    (nat.S 
                                                                    nat.O) _0) 
                                                                    bool.true) 
                                                                    (_0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    bool.andb 
                                                                    (nat.leb 
                                                                    (nat.S 
                                                                    nat.O) _0) 
                                                                    bool.true) 
                                                                    (_0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a _0) p) 
                                                                    (_0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    _0))) 
                                                                    (
                                                                    bigops.sub_hk 
                                                                    y 
                                                                    (i:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a i) p) 
                                                                    (nat.S 
                                                                    (nat.pred 
                                                                    p)) 
                                                                    (nat.S 
                                                                    (nat.pred 
                                                                    p)) 
                                                                    (_0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    bool.andb 
                                                                    (nat.leb 
                                                                    (nat.S 
                                                                    nat.O) _0) 
                                                                    bool.true) 
                                                                    (_0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    bool.andb 
                                                                    (nat.leb 
                                                                    (nat.S 
                                                                    nat.O) _0) 
                                                                    bool.true) 
                                                                    (_0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    _0) 
                                                                    (_0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a _0) p))) 
                                                                 z0))) =>
                                                        f2 
                                                          (permutation.invert_permut 
                                                             (nat.pred p) 
                                                             (i:
                                                              (sttfa.etap 
                                                                 (sttfa.p 
                                                                    nat.nat)) =>
                                                              div_mod.mod 
                                                                (nat.times a 
                                                                   i) p)) 
                                                          (z1:
                                                           (sttfa.etap 
                                                              (sttfa.p 
                                                                 sttfa.bool)) =>
                                                           f0:
                                                           (sttfa.eps 
                                                              (sttfa.impl 
                                                                 (connectives.And 
                                                                    (
                                                                    sttfa.forall 
                                                                    nat.nat 
                                                                    (i:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    sttfa.impl 
                                                                    (nat.lt 
                                                                    i 
                                                                    (nat.S 
                                                                    (nat.pred 
                                                                    p))) 
                                                                    (sttfa.impl 
                                                                    (logic.eq 
                                                                    bool.bool 
                                                                    (bool.andb 
                                                                    (nat.leb 
                                                                    (nat.S 
                                                                    nat.O) i) 
                                                                    bool.true) 
                                                                    bool.true) 
                                                                    (logic.eq 
                                                                    nat.nat 
                                                                    (div_mod.mod 
                                                                    (nat.times 
                                                                    a i) p) 
                                                                    (div_mod.mod 
                                                                    (nat.times 
                                                                    a i) p))))) 
                                                                    (
                                                                    bigops.sub_hk 
                                                                    (i:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a i) p) 
                                                                    (permutation.invert_permut 
                                                                    (nat.pred 
                                                                    p) 
                                                                    (i:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a i) p)) 
                                                                    (nat.S 
                                                                    (nat.pred 
                                                                    p)) 
                                                                    (nat.S 
                                                                    (nat.pred 
                                                                    p)) 
                                                                    (_0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    bool.andb 
                                                                    (nat.leb 
                                                                    (nat.S 
                                                                    nat.O) _0) 
                                                                    bool.true) 
                                                                    (_0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    bool.andb 
                                                                    (nat.leb 
                                                                    (nat.S 
                                                                    nat.O) _0) 
                                                                    bool.true) 
                                                                    (_0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a _0) p) 
                                                                    (_0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    _0))) 
                                                                 (sttfa.impl 
                                                                    (
                                                                    bigops.sub_hk 
                                                                    (permutation.invert_permut 
                                                                    (nat.pred 
                                                                    p) 
                                                                    (i:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a i) p)) 
                                                                    (i:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a i) p) 
                                                                    (nat.S 
                                                                    (nat.pred 
                                                                    p)) 
                                                                    (nat.S 
                                                                    (nat.pred 
                                                                    p)) 
                                                                    (_0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    bool.andb 
                                                                    (nat.leb 
                                                                    (nat.S 
                                                                    nat.O) _0) 
                                                                    bool.true) 
                                                                    (_0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    bool.andb 
                                                                    (nat.leb 
                                                                    (nat.S 
                                                                    nat.O) _0) 
                                                                    bool.true) 
                                                                    (_0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    _0) 
                                                                    (_0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a _0) p)) 
                                                                    z1))) =>
                                                           f0 
                                                             (z2:
                                                              (sttfa.etap 
                                                                 (sttfa.p 
                                                                    sttfa.bool)) =>
                                                              f20:
                                                              (sttfa.eps 
                                                                 (sttfa.impl 
                                                                    (
                                                                    sttfa.forall 
                                                                    nat.nat 
                                                                    (x:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    sttfa.impl 
                                                                    (nat.lt 
                                                                    x 
                                                                    (nat.S 
                                                                    (nat.pred 
                                                                    p))) 
                                                                    (sttfa.impl 
                                                                    (logic.eq 
                                                                    bool.bool 
                                                                    (bool.andb 
                                                                    (nat.leb 
                                                                    (nat.S 
                                                                    nat.O) x) 
                                                                    bool.true) 
                                                                    bool.true) 
                                                                    (logic.eq 
                                                                    nat.nat 
                                                                    (div_mod.mod 
                                                                    (nat.times 
                                                                    a x) p) 
                                                                    (div_mod.mod 
                                                                    (nat.times 
                                                                    a x) p))))) 
                                                                    (
                                                                    sttfa.impl 
                                                                    (bigops.sub_hk 
                                                                    (i:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a i) p) 
                                                                    (permutation.invert_permut 
                                                                    (nat.pred 
                                                                    p) 
                                                                    (i:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a i) p)) 
                                                                    (nat.S 
                                                                    (nat.pred 
                                                                    p)) 
                                                                    (nat.S 
                                                                    (nat.pred 
                                                                    p)) 
                                                                    (_0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    bool.andb 
                                                                    (nat.leb 
                                                                    (nat.S 
                                                                    nat.O) _0) 
                                                                    bool.true) 
                                                                    (_0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    bool.andb 
                                                                    (nat.leb 
                                                                    (nat.S 
                                                                    nat.O) _0) 
                                                                    bool.true) 
                                                                    (_0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a _0) p) 
                                                                    (_0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    _0)) z2))) =>
                                                              f20 
                                                                (i:
                                                                 (sttfa.etap 
                                                                    (
                                                                    sttfa.p 
                                                                    nat.nat)) =>
                                                                 lti:
                                                                 (sttfa.eps 
                                                                    (
                                                                    nat.lt i 
                                                                    (nat.S 
                                                                    (nat.pred 
                                                                    p)))) =>
                                                                 __:
                                                                 (sttfa.eps 
                                                                    (
                                                                    logic.eq 
                                                                    bool.bool 
                                                                    (bool.andb 
                                                                    (nat.leb 
                                                                    (nat.S 
                                                                    nat.O) i) 
                                                                    bool.true) 
                                                                    bool.true)) =>
                                                                 logic.refl 
                                                                   nat.nat 
                                                                   (div_mod.mod 
                                                                    (nat.times 
                                                                    a i) p)) 
                                                                (i:
                                                                 (sttfa.etap 
                                                                    (
                                                                    sttfa.p 
                                                                    nat.nat)) =>
                                                                 lti:
                                                                 (sttfa.eps 
                                                                    (
                                                                    nat.lt i 
                                                                    (nat.S 
                                                                    (nat.pred 
                                                                    p)))) =>
                                                                 posi:
                                                                 (sttfa.eps 
                                                                    (
                                                                    logic.eq 
                                                                    bool.bool 
                                                                    (bool.andb 
                                                                    (nat.leb 
                                                                    (nat.S 
                                                                    nat.O) i) 
                                                                    bool.true) 
                                                                    bool.true)) =>
                                                                 z3:
                                                                 (sttfa.etap 
                                                                    (
                                                                    sttfa.p 
                                                                    sttfa.bool)) =>
                                                                 f3:
                                                                 (sttfa.eps 
                                                                    (
                                                                    sttfa.impl 
                                                                    (connectives.And 
                                                                    (nat.lt 
                                                                    (div_mod.mod 
                                                                    (nat.times 
                                                                    a i) p) 
                                                                    (nat.S 
                                                                    (nat.pred 
                                                                    p))) 
                                                                    (logic.eq 
                                                                    bool.bool 
                                                                    (bool.andb 
                                                                    (nat.leb 
                                                                    (nat.S 
                                                                    nat.O) 
                                                                    (div_mod.mod 
                                                                    (nat.times 
                                                                    a i) p)) 
                                                                    bool.true) 
                                                                    bool.true)) 
                                                                    (sttfa.impl 
                                                                    (logic.eq 
                                                                    nat.nat 
                                                                    (permutation.invert_permut 
                                                                    (nat.pred 
                                                                    p) 
                                                                    (i0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a i0) p) 
                                                                    (div_mod.mod 
                                                                    (nat.times 
                                                                    a i) p)) 
                                                                    i) z3))) =>
                                                                 f3 
                                                                   (z4:
                                                                    (
                                                                    sttfa.etap 
                                                                    (sttfa.p 
                                                                    sttfa.bool)) =>
                                                                    f4:
                                                                    (
                                                                    sttfa.eps 
                                                                    (sttfa.impl 
                                                                    (nat.lt 
                                                                    (div_mod.mod 
                                                                    (nat.times 
                                                                    a i) p) 
                                                                    (nat.S 
                                                                    (nat.pred 
                                                                    p))) 
                                                                    (sttfa.impl 
                                                                    (logic.eq 
                                                                    bool.bool 
                                                                    (bool.andb 
                                                                    (nat.leb 
                                                                    (nat.S 
                                                                    nat.O) 
                                                                    (div_mod.mod 
                                                                    (nat.times 
                                                                    a i) p)) 
                                                                    bool.true) 
                                                                    bool.true) 
                                                                    z4))) =>
                                                                    f4 
                                                                    (logic.eq_ind_r 
                                                                    nat.nat 
                                                                    p 
                                                                    (x:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    nat.lt 
                                                                    (div_mod.mod 
                                                                    (nat.times 
                                                                    a i) p) x) 
                                                                    (div_mod.lt_mod_m_m 
                                                                    (nat.times 
                                                                    a i) p 
                                                                    (primes.prime_to_lt_O 
                                                                    p primep)) 
                                                                    (nat.S 
                                                                    (nat.pred 
                                                                    p)) 
                                                                    (nat.S_pred 
                                                                    p 
                                                                    (primes.prime_to_lt_O 
                                                                    p primep))) 
                                                                    (logic.eq_ind_r 
                                                                    bool.bool 
                                                                    bool.true 
                                                                    (x:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    bool.bool)) =>
                                                                    logic.eq 
                                                                    bool.bool 
                                                                    (bool.andb 
                                                                    x 
                                                                    bool.true) 
                                                                    bool.true) 
                                                                    (bool.eq_match_bool_type_true 
                                                                    bool.bool 
                                                                    bool.true 
                                                                    bool.false 
                                                                    (y:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    bool.bool)) =>
                                                                    logic.eq 
                                                                    bool.bool 
                                                                    (bool.andb 
                                                                    bool.true 
                                                                    bool.true) 
                                                                    y) 
                                                                    (logic.refl 
                                                                    bool.bool 
                                                                    (bool.andb 
                                                                    bool.true 
                                                                    bool.true))) 
                                                                    (nat.leb 
                                                                    (nat.S 
                                                                    nat.O) 
                                                                    (div_mod.mod 
                                                                    (nat.times 
                                                                    a i) p)) 
                                                                    (nat.le_to_leb_true 
                                                                    (nat.S 
                                                                    nat.O) 
                                                                    (div_mod.mod 
                                                                    (nat.times 
                                                                    a i) p) 
                                                                    (logic.match_Or_prop 
                                                                    (nat.lt 
                                                                    nat.O 
                                                                    (div_mod.mod 
                                                                    (nat.times 
                                                                    a i) p)) 
                                                                    (logic.eq 
                                                                    nat.nat 
                                                                    nat.O 
                                                                    (div_mod.mod 
                                                                    (nat.times 
                                                                    a i) p)) 
                                                                    (nat.le 
                                                                    (nat.S 
                                                                    nat.O) 
                                                                    (div_mod.mod 
                                                                    (nat.times 
                                                                    a i) p)) 
                                                                    (auto:
                                                                    (sttfa.eps 
                                                                    (nat.lt 
                                                                    nat.O 
                                                                    (div_mod.mod 
                                                                    (nat.times 
                                                                    a i) p))) =>
                                                                    auto) 
                                                                    (H:
                                                                    (sttfa.eps 
                                                                    (logic.eq 
                                                                    nat.nat 
                                                                    nat.O 
                                                                    (div_mod.mod 
                                                                    (nat.times 
                                                                    a i) p))) =>
                                                                    logic.falsity 
                                                                    (nat.le 
                                                                    (nat.S 
                                                                    nat.O) 
                                                                    (div_mod.mod 
                                                                    (nat.times 
                                                                    a i) p)) 
                                                                    (logic.absurd 
                                                                    (primes.divides 
                                                                    p 
                                                                    (nat.times 
                                                                    a i)) 
                                                                    (primes.mod_O_to_divides 
                                                                    p 
                                                                    (nat.times 
                                                                    a i) 
                                                                    (primes.prime_to_lt_O 
                                                                    p primep) 
                                                                    (logic.sym_eq 
                                                                    nat.nat 
                                                                    nat.O 
                                                                    (div_mod.mod 
                                                                    (nat.times 
                                                                    a i) p) H)) 
                                                                    (logic.not_to_not 
                                                                    (primes.divides 
                                                                    p 
                                                                    (nat.times 
                                                                    a i)) 
                                                                    (primes.divides 
                                                                    p a) 
                                                                    (Hdiv:
                                                                    (sttfa.eps 
                                                                    (primes.divides 
                                                                    p 
                                                                    (nat.times 
                                                                    a i))) =>
                                                                    logic.match_Or_prop 
                                                                    (primes.divides 
                                                                    p a) 
                                                                    (primes.divides 
                                                                    p i) 
                                                                    (primes.divides 
                                                                    p a) 
                                                                    (auto:
                                                                    (sttfa.eps 
                                                                    (primes.divides 
                                                                    p a)) =>
                                                                    auto) 
                                                                    (divpi:
                                                                    (sttfa.eps 
                                                                    (primes.divides 
                                                                    p i)) =>
                                                                    logic.falsity 
                                                                    (primes.divides 
                                                                    p a) 
                                                                    (logic.absurd 
                                                                    (nat.lt 
                                                                    i 
                                                                    (nat.S 
                                                                    (nat.pred 
                                                                    p))) lti 
                                                                    (nat.le_to_not_lt 
                                                                    (nat.S 
                                                                    (nat.pred 
                                                                    p)) i 
                                                                    (logic.eq_ind_r 
                                                                    nat.nat 
                                                                    p 
                                                                    (x:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    nat.le x 
                                                                    i) 
                                                                    (primes.divides_to_le 
                                                                    p i 
                                                                    (nat.leb_true_to_le 
                                                                    (nat.S 
                                                                    nat.O) i 
                                                                    (bool.andb_true_l 
                                                                    (nat.leb 
                                                                    (nat.S 
                                                                    nat.O) i) 
                                                                    bool.true 
                                                                    posi)) 
                                                                    divpi) 
                                                                    (nat.S 
                                                                    (nat.pred 
                                                                    p)) 
                                                                    (nat.S_pred 
                                                                    p 
                                                                    (primes.prime_to_lt_O 
                                                                    p primep)))))) 
                                                                    (gcd.divides_times_to_divides 
                                                                    p a i 
                                                                    primep 
                                                                    Hdiv)) 
                                                                    ndiv))) 
                                                                    (nat.le_to_or_lt_eq 
                                                                    nat.O 
                                                                    (div_mod.mod 
                                                                    (nat.times 
                                                                    a i) p) 
                                                                    (nat.le_O_n 
                                                                    (div_mod.mod 
                                                                    (nat.times 
                                                                    a i) p))))))) 
                                                                   (permutation.invert_permut_f 
                                                                    (i0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a i0) p) 
                                                                    (nat.pred 
                                                                    p) i 
                                                                    (nat.le_S_S_to_le 
                                                                    i 
                                                                    (nat.pred 
                                                                    p) lti) 
                                                                    (logic.match_And_prop 
                                                                    (sttfa.forall 
                                                                    nat.nat 
                                                                    (i1:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    sttfa.impl 
                                                                    (nat.le 
                                                                    i1 
                                                                    (nat.pred 
                                                                    p)) 
                                                                    (nat.le 
                                                                    (div_mod.mod 
                                                                    (nat.times 
                                                                    a i1) p) 
                                                                    (nat.pred 
                                                                    p)))) 
                                                                    (permutation.injn 
                                                                    (n:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a n) p) 
                                                                    (nat.pred 
                                                                    p)) 
                                                                    (permutation.injn 
                                                                    (i0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a i0) p) 
                                                                    (nat.pred 
                                                                    p)) 
                                                                    (auto:
                                                                    (sttfa.eps 
                                                                    (sttfa.forall 
                                                                    nat.nat 
                                                                    (i0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    sttfa.impl 
                                                                    (nat.le 
                                                                    i0 
                                                                    (nat.pred 
                                                                    p)) 
                                                                    (nat.le 
                                                                    (div_mod.mod 
                                                                    (nat.times 
                                                                    a i0) p) 
                                                                    (nat.pred 
                                                                    p))))) =>
                                                                    auto':
                                                                    (
                                                                    sttfa.eps 
                                                                    (permutation.injn 
                                                                    (n:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a n) p) 
                                                                    (nat.pred 
                                                                    p))) =>
                                                                    auto') 
                                                                    (fermat.permut_mod 
                                                                    p a 
                                                                    primep 
                                                                    ndiv))))) 
                                                             (logic.match_And_prop 
                                                                (sttfa.forall 
                                                                   nat.nat 
                                                                   (i:
                                                                    (
                                                                    sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    sttfa.impl 
                                                                    (nat.le 
                                                                    i 
                                                                    (nat.pred 
                                                                    p)) 
                                                                    (nat.le 
                                                                    (permutation.invert_permut 
                                                                    (nat.pred 
                                                                    p) 
                                                                    (n:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a n) p) i) 
                                                                    (nat.pred 
                                                                    p)))) 
                                                                (permutation.injn 
                                                                   (permutation.invert_permut 
                                                                    (nat.pred 
                                                                    p) 
                                                                    (n:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a n) p)) 
                                                                   (nat.pred 
                                                                    p)) 
                                                                (bigops.sub_hk 
                                                                   (permutation.invert_permut 
                                                                    (nat.pred 
                                                                    p) 
                                                                    (i:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a i) p)) 
                                                                   (i:
                                                                    (
                                                                    sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a i) p) 
                                                                   (nat.S 
                                                                    (nat.pred 
                                                                    p)) 
                                                                   (nat.S 
                                                                    (nat.pred 
                                                                    p)) 
                                                                   (_0:
                                                                    (
                                                                    sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    bool.andb 
                                                                    (nat.leb 
                                                                    (nat.S 
                                                                    nat.O) _0) 
                                                                    bool.true) 
                                                                   (_0:
                                                                    (
                                                                    sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    bool.andb 
                                                                    (nat.leb 
                                                                    (nat.S 
                                                                    nat.O) _0) 
                                                                    bool.true) 
                                                                   (_0:
                                                                    (
                                                                    sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    _0) 
                                                                   (_0:
                                                                    (
                                                                    sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a _0) p)) 
                                                                (le_invert_permut:
                                                                 (sttfa.eps 
                                                                    (
                                                                    sttfa.forall 
                                                                    nat.nat 
                                                                    (i:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    sttfa.impl 
                                                                    (nat.le 
                                                                    i 
                                                                    (nat.pred 
                                                                    p)) 
                                                                    (nat.le 
                                                                    (permutation.invert_permut 
                                                                    (nat.pred 
                                                                    p) 
                                                                    (n:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a n) p) i) 
                                                                    (nat.pred 
                                                                    p))))) =>
                                                                 inj_inv_permut:
                                                                 (sttfa.eps 
                                                                    (
                                                                    permutation.injn 
                                                                    (permutation.invert_permut 
                                                                    (nat.pred 
                                                                    p) 
                                                                    (n:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a n) p)) 
                                                                    (nat.pred 
                                                                    p))) =>
                                                                 i:
                                                                 (sttfa.etap 
                                                                    (
                                                                    sttfa.p 
                                                                    nat.nat)) =>
                                                                 lti:
                                                                 (sttfa.eps 
                                                                    (
                                                                    nat.lt i 
                                                                    (nat.S 
                                                                    (nat.pred 
                                                                    p)))) =>
                                                                 posi:
                                                                 (sttfa.eps 
                                                                    (
                                                                    logic.eq 
                                                                    bool.bool 
                                                                    (bool.andb 
                                                                    (nat.leb 
                                                                    (nat.S 
                                                                    nat.O) i) 
                                                                    bool.true) 
                                                                    bool.true)) =>
                                                                 z2:
                                                                 (sttfa.etap 
                                                                    (
                                                                    sttfa.p 
                                                                    sttfa.bool)) =>
                                                                 f5:
                                                                 (sttfa.eps 
                                                                    (
                                                                    sttfa.impl 
                                                                    (connectives.And 
                                                                    (nat.lt 
                                                                    (permutation.invert_permut 
                                                                    (nat.pred 
                                                                    p) 
                                                                    (i0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a i0) p) 
                                                                    i) 
                                                                    (nat.S 
                                                                    (nat.pred 
                                                                    p))) 
                                                                    (logic.eq 
                                                                    bool.bool 
                                                                    (bool.andb 
                                                                    (nat.leb 
                                                                    (nat.S 
                                                                    nat.O) 
                                                                    (permutation.invert_permut 
                                                                    (nat.pred 
                                                                    p) 
                                                                    (i0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a i0) p) 
                                                                    i)) 
                                                                    bool.true) 
                                                                    bool.true)) 
                                                                    (sttfa.impl 
                                                                    (logic.eq 
                                                                    nat.nat 
                                                                    (div_mod.mod 
                                                                    (nat.times 
                                                                    a 
                                                                    (permutation.invert_permut 
                                                                    (nat.pred 
                                                                    p) 
                                                                    (i0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a i0) p) 
                                                                    i)) p) i) 
                                                                    z2))) =>
                                                                 f5 
                                                                   (z3:
                                                                    (
                                                                    sttfa.etap 
                                                                    (sttfa.p 
                                                                    sttfa.bool)) =>
                                                                    f6:
                                                                    (
                                                                    sttfa.eps 
                                                                    (sttfa.impl 
                                                                    (nat.lt 
                                                                    (permutation.invert_permut 
                                                                    (nat.pred 
                                                                    p) 
                                                                    (i0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a i0) p) 
                                                                    i) 
                                                                    (nat.S 
                                                                    (nat.pred 
                                                                    p))) 
                                                                    (sttfa.impl 
                                                                    (logic.eq 
                                                                    bool.bool 
                                                                    (bool.andb 
                                                                    (nat.leb 
                                                                    (nat.S 
                                                                    nat.O) 
                                                                    (permutation.invert_permut 
                                                                    (nat.pred 
                                                                    p) 
                                                                    (i0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a i0) p) 
                                                                    i)) 
                                                                    bool.true) 
                                                                    bool.true) 
                                                                    z3))) =>
                                                                    f6 
                                                                    (nat.le_S_S 
                                                                    (permutation.invert_permut 
                                                                    (nat.pred 
                                                                    p) 
                                                                    (i0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a i0) p) 
                                                                    i) 
                                                                    (nat.pred 
                                                                    p) 
                                                                    (le_invert_permut 
                                                                    i 
                                                                    (nat.le_S_S_to_le 
                                                                    i 
                                                                    (nat.pred 
                                                                    p) lti))) 
                                                                    (logic.eq_ind_r 
                                                                    bool.bool 
                                                                    bool.true 
                                                                    (x:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    bool.bool)) =>
                                                                    logic.eq 
                                                                    bool.bool 
                                                                    (bool.andb 
                                                                    x 
                                                                    bool.true) 
                                                                    bool.true) 
                                                                    (bool.eq_match_bool_type_true 
                                                                    bool.bool 
                                                                    bool.true 
                                                                    bool.false 
                                                                    (y:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    bool.bool)) =>
                                                                    logic.eq 
                                                                    bool.bool 
                                                                    (bool.andb 
                                                                    bool.true 
                                                                    bool.true) 
                                                                    y) 
                                                                    (logic.refl 
                                                                    bool.bool 
                                                                    (bool.andb 
                                                                    bool.true 
                                                                    bool.true))) 
                                                                    (nat.leb 
                                                                    (nat.S 
                                                                    nat.O) 
                                                                    (permutation.invert_permut 
                                                                    (nat.pred 
                                                                    p) 
                                                                    (i0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a i0) p) 
                                                                    i)) 
                                                                    (nat.le_to_leb_true 
                                                                    (nat.S 
                                                                    nat.O) 
                                                                    (permutation.invert_permut 
                                                                    (nat.pred 
                                                                    p) 
                                                                    (i0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a i0) p) 
                                                                    i) 
                                                                    (logic.match_Or_prop 
                                                                    (nat.lt 
                                                                    nat.O 
                                                                    (permutation.invert_permut 
                                                                    (nat.pred 
                                                                    p) 
                                                                    (i0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a i0) p) 
                                                                    i)) 
                                                                    (logic.eq 
                                                                    nat.nat 
                                                                    nat.O 
                                                                    (permutation.invert_permut 
                                                                    (nat.pred 
                                                                    p) 
                                                                    (i0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a i0) p) 
                                                                    i)) 
                                                                    (nat.le 
                                                                    (nat.S 
                                                                    nat.O) 
                                                                    (permutation.invert_permut 
                                                                    (nat.pred 
                                                                    p) 
                                                                    (i0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a i0) p) 
                                                                    i)) 
                                                                    (auto:
                                                                    (sttfa.eps 
                                                                    (nat.lt 
                                                                    nat.O 
                                                                    (permutation.invert_permut 
                                                                    (nat.pred 
                                                                    p) 
                                                                    (i0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a i0) p) 
                                                                    i))) =>
                                                                    auto) 
                                                                    (H:
                                                                    (sttfa.eps 
                                                                    (logic.eq 
                                                                    nat.nat 
                                                                    nat.O 
                                                                    (permutation.invert_permut 
                                                                    (nat.pred 
                                                                    p) 
                                                                    (i0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a i0) p) 
                                                                    i))) =>
                                                                    logic.falsity 
                                                                    (nat.le 
                                                                    (nat.S 
                                                                    nat.O) 
                                                                    (permutation.invert_permut 
                                                                    (nat.pred 
                                                                    p) 
                                                                    (i0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a i0) p) 
                                                                    i)) 
                                                                    (logic.eq_ind_r 
                                                                    nat.nat 
                                                                    nat.O 
                                                                    (x:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    sttfa.impl 
                                                                    (logic.eq 
                                                                    nat.nat 
                                                                    x 
                                                                    (div_mod.mod 
                                                                    (nat.times 
                                                                    a 
                                                                    (permutation.invert_permut 
                                                                    (nat.pred 
                                                                    p) 
                                                                    (i0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a i0) p) 
                                                                    i)) p)) 
                                                                    connectives.False) 
                                                                    (logic.eq_ind_r 
                                                                    nat.nat 
                                                                    i 
                                                                    (x:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    sttfa.impl 
                                                                    (logic.eq 
                                                                    nat.nat 
                                                                    nat.O x) 
                                                                    connectives.False) 
                                                                    (eq0i:
                                                                    (sttfa.eps 
                                                                    (logic.eq 
                                                                    nat.nat 
                                                                    nat.O i)) =>
                                                                    logic.eq_ind 
                                                                    nat.nat 
                                                                    nat.O 
                                                                    (x_1:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    sttfa.impl 
                                                                    (logic.eq 
                                                                    bool.bool 
                                                                    (bool.andb 
                                                                    (nat.leb 
                                                                    (nat.S 
                                                                    nat.O) 
                                                                    x_1) 
                                                                    bool.true) 
                                                                    bool.true) 
                                                                    connectives.False) 
                                                                    (nat.sym_eq_leb 
                                                                    (nat.S 
                                                                    nat.O) 
                                                                    (y:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    (sttfa.arrow 
                                                                    nat.nat 
                                                                    bool.bool))) =>
                                                                    sttfa.impl 
                                                                    (logic.eq 
                                                                    bool.bool 
                                                                    (bool.andb 
                                                                    (y nat.O) 
                                                                    bool.true) 
                                                                    bool.true) 
                                                                    connectives.False) 
                                                                    (nat.sym_eq_filter_nat_type_S 
                                                                    (sttfa.arrow 
                                                                    nat.nat 
                                                                    bool.bool) 
                                                                    nat.leb_body 
                                                                    nat.O 
                                                                    (y:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    (sttfa.arrow 
                                                                    nat.nat 
                                                                    bool.bool))) =>
                                                                    sttfa.impl 
                                                                    (logic.eq 
                                                                    bool.bool 
                                                                    (bool.andb 
                                                                    (y nat.O) 
                                                                    bool.true) 
                                                                    bool.true) 
                                                                    connectives.False) 
                                                                    (nat.sym_eq_leb_body_S 
                                                                    nat.O 
                                                                    (y:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    (sttfa.arrow 
                                                                    nat.nat 
                                                                    bool.bool))) =>
                                                                    sttfa.impl 
                                                                    (logic.eq 
                                                                    bool.bool 
                                                                    (bool.andb 
                                                                    (y nat.O) 
                                                                    bool.true) 
                                                                    bool.true) 
                                                                    connectives.False) 
                                                                    (nat.sym_eq_match_nat_type_O 
                                                                    bool.bool 
                                                                    bool.false 
                                                                    (q:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    nat.leb 
                                                                    nat.O q) 
                                                                    (y:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    bool.bool)) =>
                                                                    sttfa.impl 
                                                                    (logic.eq 
                                                                    bool.bool 
                                                                    (bool.andb 
                                                                    y 
                                                                    bool.true) 
                                                                    bool.true) 
                                                                    connectives.False) 
                                                                    (bool.sym_eq_match_bool_type_false 
                                                                    bool.bool 
                                                                    bool.true 
                                                                    bool.false 
                                                                    (y:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    bool.bool)) =>
                                                                    sttfa.impl 
                                                                    (logic.eq 
                                                                    bool.bool 
                                                                    y 
                                                                    bool.true) 
                                                                    connectives.False) 
                                                                    (H0:
                                                                    (sttfa.eps 
                                                                    (logic.eq 
                                                                    bool.bool 
                                                                    bool.false 
                                                                    bool.true)) =>
                                                                    bool.eq_match_bool_type_true 
                                                                    sttfa.bool 
                                                                    (sttfa.forall 
                                                                    sttfa.bool 
                                                                    (P:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    sttfa.bool)) =>
                                                                    P)) 
                                                                    (sttfa.forall 
                                                                    sttfa.bool 
                                                                    (P:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    sttfa.bool)) =>
                                                                    sttfa.impl 
                                                                    P P)) 
                                                                    (y:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    sttfa.bool)) =>
                                                                    y) 
                                                                    (bool.eq_match_bool_type_false 
                                                                    sttfa.bool 
                                                                    (bool.match_bool_type 
                                                                    sttfa.bool 
                                                                    (sttfa.forall 
                                                                    sttfa.bool 
                                                                    (P:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    sttfa.bool)) =>
                                                                    sttfa.impl 
                                                                    P P)) 
                                                                    (sttfa.forall 
                                                                    sttfa.bool 
                                                                    (P:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    sttfa.bool)) =>
                                                                    P)) 
                                                                    bool.true) 
                                                                    (bool.match_bool_type 
                                                                    sttfa.bool 
                                                                    (sttfa.forall 
                                                                    sttfa.bool 
                                                                    (P:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    sttfa.bool)) =>
                                                                    P)) 
                                                                    (sttfa.forall 
                                                                    sttfa.bool 
                                                                    (P:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    sttfa.bool)) =>
                                                                    sttfa.impl 
                                                                    P P)) 
                                                                    bool.true) 
                                                                    (y:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    sttfa.bool)) =>
                                                                    y) 
                                                                    (bool.bool_discr 
                                                                    bool.false 
                                                                    bool.true 
                                                                    H0)) 
                                                                    connectives.False)))))) 
                                                                    i eq0i 
                                                                    posi) 
                                                                    (div_mod.mod 
                                                                    (nat.times 
                                                                    a 
                                                                    (permutation.invert_permut 
                                                                    (nat.pred 
                                                                    p) 
                                                                    (i0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a i0) p) 
                                                                    i)) p) 
                                                                    (permutation.f_invert_permut 
                                                                    (i0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a i0) p) 
                                                                    (nat.pred 
                                                                    p) i 
                                                                    (nat.le_S_S_to_le 
                                                                    i 
                                                                    (nat.pred 
                                                                    p) lti) 
                                                                    (fermat.permut_mod 
                                                                    p a 
                                                                    primep 
                                                                    ndiv))) 
                                                                    (div_mod.mod 
                                                                    (nat.times 
                                                                    a nat.O) 
                                                                    p) 
                                                                    (logic.eq_ind 
                                                                    nat.nat 
                                                                    nat.O 
                                                                    (x_1:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    logic.eq 
                                                                    nat.nat 
                                                                    (div_mod.mod 
                                                                    x_1 p) 
                                                                    nat.O) 
                                                                    (logic.rewrite_r 
                                                                    nat.nat 
                                                                    nat.O 
                                                                    (__:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    logic.eq 
                                                                    nat.nat 
                                                                    __ nat.O) 
                                                                    (logic.refl 
                                                                    nat.nat 
                                                                    nat.O) 
                                                                    (div_mod.mod 
                                                                    nat.O p) 
                                                                    (div_mod.mod_O_n 
                                                                    p)) 
                                                                    (nat.times 
                                                                    a nat.O) 
                                                                    (nat.times_n_O 
                                                                    a)) 
                                                                    (logic.eq_f 
                                                                    nat.nat 
                                                                    nat.nat 
                                                                    (i0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a i0) p) 
                                                                    nat.O 
                                                                    (permutation.invert_permut 
                                                                    (nat.pred 
                                                                    p) 
                                                                    (i0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a i0) p) 
                                                                    i) 
                                                                    (logic.rewrite_l 
                                                                    nat.nat 
                                                                    nat.O 
                                                                    (__:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    logic.eq 
                                                                    nat.nat 
                                                                    nat.O __) 
                                                                    (logic.refl 
                                                                    nat.nat 
                                                                    nat.O) 
                                                                    (permutation.invert_permut 
                                                                    (nat.pred 
                                                                    p) 
                                                                    (i0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a i0) p) 
                                                                    i) H)))) 
                                                                    (nat.le_to_or_lt_eq 
                                                                    nat.O 
                                                                    (permutation.invert_permut 
                                                                    (nat.pred 
                                                                    p) 
                                                                    (i0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a i0) p) 
                                                                    i) 
                                                                    (nat.le_O_n 
                                                                    (permutation.invert_permut 
                                                                    (nat.pred 
                                                                    p) 
                                                                    (i0:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a i0) p) 
                                                                    i))))))) 
                                                                   (permutation.f_invert_permut 
                                                                    (__:
                                                                    (sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a __) p) 
                                                                    (nat.pred 
                                                                    p) i 
                                                                    (nat.le_S_S_to_le 
                                                                    i 
                                                                    (nat.pred 
                                                                    p) lti) 
                                                                    (fermat.permut_mod 
                                                                    p a 
                                                                    primep 
                                                                    ndiv))) 
                                                                (permutation.permut_invert_permut 
                                                                   (n:
                                                                    (
                                                                    sttfa.etap 
                                                                    (sttfa.p 
                                                                    nat.nat)) =>
                                                                    div_mod.mod 
                                                                    (nat.times 
                                                                    a n) p) 
                                                                   (nat.pred 
                                                                    p) 
                                                                   (fermat.permut_mod 
                                                                    p a 
                                                                    primep 
                                                                    ndiv)))))))) 
                                              (bigops.bigop nat.nat 
                                                 (nat.minus 
                                                    (nat.S (nat.pred p)) 
                                                    (nat.S nat.O)) 
                                                 (i:
                                                  (sttfa.etap 
                                                     (sttfa.p nat.nat)) =>
                                                  bool.true) (nat.S nat.O) 
                                                 nat.times 
                                                 (i:
                                                  (sttfa.etap 
                                                     (sttfa.p nat.nat)) =>
                                                  div_mod.mod 
                                                    (nat.times a 
                                                       (nat.plus i 
                                                          (nat.S nat.O))) p)) 
                                              (bigops.bigop_I_gen 
                                                 (nat.S nat.O) 
                                                 (nat.S (nat.pred p)) 
                                                 (__:
                                                  (sttfa.etap 
                                                     (sttfa.p nat.nat)) =>
                                                  bool.true) 
                                                 (__:
                                                  (sttfa.etap 
                                                     (sttfa.p nat.nat)) =>
                                                  div_mod.mod 
                                                    (nat.times a __) p) 
                                                 (nat.lt_O_S (nat.pred p)))) 
                                           (bigops.bigop nat.nat 
                                              (nat.minus 
                                                 (nat.S (nat.pred p)) 
                                                 (nat.S nat.O)) 
                                              (i:
                                               (sttfa.etap (sttfa.p nat.nat)) =>
                                               bool.true) (nat.S nat.O) 
                                              nat.times 
                                              (i:
                                               (sttfa.etap (sttfa.p nat.nat)) =>
                                               nat.plus i (nat.S nat.O))) 
                                           (bigops.bigop_I_gen (nat.S nat.O) 
                                              (nat.S (nat.pred p)) 
                                              (__:
                                               (sttfa.etap (sttfa.p nat.nat)) =>
                                               bool.true) 
                                              (__:
                                               (sttfa.etap (sttfa.p nat.nat)) =>
                                               __) (nat.lt_O_S (nat.pred p))))))) 
                               (nat.times 
                                  (exp.exp a 
                                     (nat.minus (nat.S (nat.pred p)) 
                                        (nat.S nat.O))) 
                                  (bigops.bigop nat.nat 
                                     (nat.minus (nat.S (nat.pred p)) 
                                        (nat.S nat.O)) 
                                     (i:(sttfa.etap (sttfa.p nat.nat)) =>
                                      bool.true) (nat.S nat.O) nat.times 
                                     (i:(sttfa.etap (sttfa.p nat.nat)) =>
                                      nat.plus i (nat.S nat.O)))) 
                               (sigma_pi.exp_pi_bc a (nat.S nat.O) 
                                  (nat.S (nat.pred p)) 
                                  (__:(sttfa.etap (sttfa.p nat.nat)) => __))) 
                            (nat.pred p) 
                            (logic.rewrite_r nat.nat 
                               (nat.minus (nat.pred p) nat.O) 
                               (__:(sttfa.etap (sttfa.p nat.nat)) =>
                                logic.eq nat.nat (nat.pred p) __) 
                               (logic.rewrite_l nat.nat (nat.pred p) 
                                  (__:(sttfa.etap (sttfa.p nat.nat)) =>
                                   logic.eq nat.nat (nat.pred p) __) 
                                  (logic.refl nat.nat (nat.pred p)) 
                                  (nat.minus (nat.pred p) nat.O) 
                                  (nat.minus_n_O (nat.pred p))) 
                               (nat.minus (nat.S (nat.pred p)) (nat.S nat.O)) 
                               (nat.minus_S_S (nat.pred p) nat.O))) 
                         (nat.times 
                            (bigops.bigop nat.nat 
                               (nat.minus (nat.S (nat.pred p)) (nat.S nat.O)) 
                               (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) 
                               (nat.S nat.O) nat.times 
                               (i:(sttfa.etap (sttfa.p nat.nat)) =>
                                nat.plus i (nat.S nat.O))) 
                            (exp.exp a (nat.pred p))) 
                         (nat.commutative_times 
                            (bigops.bigop nat.nat 
                               (nat.minus (nat.S (nat.pred p)) (nat.S nat.O)) 
                               (i:(sttfa.etap (sttfa.p nat.nat)) => bool.true) 
                               (nat.S nat.O) nat.times 
                               (i:(sttfa.etap (sttfa.p nat.nat)) =>
                                nat.plus i (nat.S nat.O))) 
                            (exp.exp a (nat.pred p)))) 
                      (fact.fact (nat.pred p)) 
                      (fermat.eq_fact_pi_p (nat.pred p))) 
                   (nat.times (fact.fact (nat.pred p)) (nat.S nat.O)) 
                   (nat.times_n_1 (fact.fact (nat.pred p)))) 
                (nat.times (fact.fact (nat.pred p)) 
                   (nat.minus (exp.exp a (nat.pred p)) (nat.S nat.O))) 
                (nat.distributive_times_minus (fact.fact (nat.pred p)) 
                   (exp.exp a (nat.pred p)) (nat.S nat.O))) 
             (nat.times (nat.minus (exp.exp a (nat.pred p)) (nat.S nat.O)) 
                (fact.fact (nat.pred p))) 
             (nat.commutative_times 
                (nat.minus (exp.exp a (nat.pred p)) (nat.S nat.O)) 
                (fact.fact (nat.pred p)))))).


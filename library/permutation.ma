include "basics/pts.ma".
include "bool.ma".
include "connectives.ma".
include "leibniz.ma".
include "logic.ma".
include "nat.ma".
include "relations.ma".
definition injn : (((nat) ) -> (nat) ) -> ((nat) ) -> Prop := \lambda f : ((nat) ) -> (nat) . \lambda n : (nat) . \forall (i:(nat) ). \forall (j:(nat) ). ((((le) ) (i)) (n)) -> ((((le) ) (j)) (n)) -> ((((eq) ((nat) )) ((f) (i))) ((f) (j))) -> (((eq) ((nat) )) (i)) (j).
definition injn_Sn_n : \forall (f:((nat) ) -> (nat) ). \forall (n:(nat) ). ((((injn) ) (f)) (((S) ) (n))) -> (((injn) ) (f)) (n) := \lambda f : ((nat) ) -> (nat) . \lambda n : (nat) . \lambda H : (((injn) ) (f)) (((S) ) (n)). (\lambda i : (nat) . \lambda j : (nat) . \lambda lei : (((le) ) (i)) (n). (\lambda lej : (((le) ) (j)) (n). (\lambda eqf : (((eq) ((nat) )) ((f) (i))) ((f) (j)). ((((((H) (i)) (j)) ((((le_S) (i)) (n)) (lei))) ((((le_S) (j)) (n)) (lej))) (((((((rewrite_l) ((nat) )) ((f) (i))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((f) (i))) (j__))) (((refl) ((nat) )) ((f) (i)))) ((f) (j))) (eqf)))))).
definition permut : (((nat) ) -> (nat) ) -> ((nat) ) -> Prop := \lambda f : ((nat) ) -> (nat) . \lambda m : (nat) . (((And) ) (\forall (i:(nat) ). ((((le) ) (i)) (m)) -> (((le) ) ((f) (i))) (m))) ((((injn) ) (f)) (m)).
definition transpose : ((nat) ) -> ((nat) ) -> ((nat) ) -> (nat)  := \lambda i : (nat) . \lambda j : (nat) . \lambda n : (nat) . ((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (n)) ((((eqb) ) (n)) (j)))) ((((eqb) ) (n)) (i)).
definition transpose_i_j_i : \forall (i:(nat) ). \forall (j:(nat) ). (((eq) ((nat) )) (((((transpose) ) (i)) (j)) (i))) (j) := \lambda i : (nat) . \lambda j : (nat) . ((((((eq_ind_r) ((bool) )) ((true) )) (\lambda x : (bool) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (i)) ((((eqb) ) (i)) (j)))) (x))) (j))) ((((((eq_match_bool_type_true) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (i)) ((((eqb) ) (i)) (j)))) (\lambda y : (nat) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (i)) ((((eqb) ) (i)) (j)))) ((true) ))) (y))) (((refl) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (i)) ((((eqb) ) (i)) (j)))) ((true) ))))) ((((eqb) ) (i)) (i))) ((eqb_n_n) (i)).
definition transpose_i_j_j : \forall (i:(nat) ). \forall (j:(nat) ). (((eq) ((nat) )) (((((transpose) ) (i)) (j)) (j))) (i) := \lambda i : (nat) . \lambda j : (nat) . ((((((match_Or_prop) ((((eq) ((bool) )) ((((eqb) ) (j)) (i))) ((true) ))) ((((eq) ((bool) )) ((((eqb) ) (j)) (i))) ((false) ))) ((((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (j)) ((((eqb) ) (j)) (j)))) ((((eqb) ) (j)) (i)))) (i))) (\lambda Hc : (((eq) ((bool) )) ((((eqb) ) (j)) (i))) ((true) ). (((((((eq_ind_r) ((bool) )) ((true) )) (\lambda x : (bool) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (j)) ((((eqb) ) (j)) (j)))) (x))) (i))) ((((((sym_eq_match_bool_type_true) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (j)) ((((eqb) ) (j)) (j)))) (\lambda y : (nat) . (((eq) ((nat) )) (y)) (i))) (((((((eq_ind_r) ((nat) )) (i)) (\lambda x : (nat) . (((eq) ((nat) )) (x)) (i))) (((refl) ((nat) )) (i))) (j)) ((((eqb_true_to_eq) (j)) (i)) (Hc))))) ((((eqb) ) (j)) (i))) (Hc)))) (\lambda Hc : (((eq) ((bool) )) ((((eqb) ) (j)) (i))) ((false) ). (((((((eq_ind_r) ((bool) )) ((false) )) (\lambda x : (bool) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (j)) ((((eqb) ) (j)) (j)))) (x))) (i))) (((((((eq_ind_r) ((bool) )) ((true) )) (\lambda x : (bool) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (j)) (x))) ((false) ))) (i))) ((((((sym_eq_match_bool_type_false) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (j)) ((true) ))) (\lambda y : (nat) . (((eq) ((nat) )) (y)) (i))) ((((((eq_match_bool_type_true) ((nat) )) (i)) (j)) (\lambda y : (nat) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (i)) (j)) ((true) ))) (y))) ((((((eq_match_bool_type_false) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (j)) ((true) ))) (\lambda y : (nat) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (i)) (j)) ((true) ))) (y))) ((((((eq_match_bool_type_false) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (j)) ((true) ))) (\lambda y : (nat) . (((eq) ((nat) )) (y)) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (j)) ((true) ))) ((false) )))) (((refl) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (j)) ((true) ))) ((false) )))))))) ((((eqb) ) (j)) (j))) ((eqb_n_n) (j)))) ((((eqb) ) (j)) (i))) (Hc)))) ((true_or_false) ((((eqb) ) (j)) (i))).
definition transpose_i_j_j_i : \forall (i:(nat) ). \forall (j:(nat) ). \forall (n:(nat) ). (((eq) ((nat) )) (((((transpose) ) (i)) (j)) (n))) (((((transpose) ) (j)) (i)) (n)) := \lambda i : (nat) . \lambda j : (nat) . \lambda n : (nat) . ((((((match_Or_prop) ((((eq) ((bool) )) ((((eqb) ) (n)) (i))) ((true) ))) ((((eq) ((bool) )) ((((eqb) ) (n)) (i))) ((false) ))) ((((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (n)) ((((eqb) ) (n)) (j)))) ((((eqb) ) (n)) (i)))) (((((match_bool_type) ((nat) )) (i)) (((((match_bool_type) ((nat) )) (j)) (n)) ((((eqb) ) (n)) (i)))) ((((eqb) ) (n)) (j))))) (\lambda Hni : (((eq) ((bool) )) ((((eqb) ) (n)) (i))) ((true) ). (((((((eq_ind_r) ((bool) )) ((true) )) (\lambda x : (bool) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (n)) ((((eqb) ) (n)) (j)))) (x))) (((((match_bool_type) ((nat) )) (i)) (((((match_bool_type) ((nat) )) (j)) (n)) (x))) ((((eqb) ) (n)) (j))))) (((((((match_Or_prop) ((((eq) ((bool) )) ((((eqb) ) (n)) (j))) ((true) ))) ((((eq) ((bool) )) ((((eqb) ) (n)) (j))) ((false) ))) ((((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (n)) ((((eqb) ) (n)) (j)))) ((true) ))) (((((match_bool_type) ((nat) )) (i)) (((((match_bool_type) ((nat) )) (j)) (n)) ((true) ))) ((((eqb) ) (n)) (j))))) (\lambda Hnj : (((eq) ((bool) )) ((((eqb) ) (n)) (j))) ((true) ). (((((((eq_ind_r) ((bool) )) ((true) )) (\lambda x : (bool) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (n)) (x))) ((true) ))) (((((match_bool_type) ((nat) )) (i)) (((((match_bool_type) ((nat) )) (j)) (n)) ((true) ))) (x)))) ((((((sym_eq_match_bool_type_true) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (n)) ((true) ))) (\lambda y : (nat) . (((eq) ((nat) )) (y)) (((((match_bool_type) ((nat) )) (i)) (((((match_bool_type) ((nat) )) (j)) (n)) ((true) ))) ((true) )))) ((((((sym_eq_match_bool_type_true) ((nat) )) (i)) (((((match_bool_type) ((nat) )) (j)) (n)) ((true) ))) (\lambda y : (nat) . (((eq) ((nat) )) (j)) (y))) (((((((eq_ind) ((nat) )) (n)) (\lambda x_1 : (nat) . (((eq) ((nat) )) (j)) (x_1))) (((((((eq_ind) ((nat) )) (n)) (\lambda x_1 : (nat) . (((eq) ((nat) )) (x_1)) (n))) (((refl) ((nat) )) (n))) (j)) ((((eqb_true_to_eq) (n)) (j)) (Hnj)))) (i)) ((((eqb_true_to_eq) (n)) (i)) (Hni)))))) ((((eqb) ) (n)) (j))) (Hnj)))) (\lambda Hnj : (((eq) ((bool) )) ((((eqb) ) (n)) (j))) ((false) ). (((((((eq_ind_r) ((bool) )) ((false) )) (\lambda x : (bool) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (n)) (x))) ((true) ))) (((((match_bool_type) ((nat) )) (i)) (((((match_bool_type) ((nat) )) (j)) (n)) ((true) ))) (x)))) ((((((sym_eq_match_bool_type_false) ((nat) )) (i)) (n)) (\lambda y : (nat) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (y)) ((true) ))) (((((match_bool_type) ((nat) )) (i)) (((((match_bool_type) ((nat) )) (j)) (n)) ((true) ))) ((false) )))) ((((((sym_eq_match_bool_type_false) ((nat) )) (i)) (((((match_bool_type) ((nat) )) (j)) (n)) ((true) ))) (\lambda y : (nat) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (n)) ((true) ))) (y))) ((((((sym_eq_match_bool_type_true) ((nat) )) (j)) (n)) (\lambda y : (nat) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (n)) ((true) ))) (y))) ((((((sym_eq_match_bool_type_true) ((nat) )) (j)) (n)) (\lambda y : (nat) . (((eq) ((nat) )) (y)) (j))) (((refl) ((nat) )) (j))))))) ((((eqb) ) (n)) (j))) (Hnj)))) ((true_or_false) ((((eqb) ) (n)) (j))))) ((((eqb) ) (n)) (i))) (Hni)))) (\lambda Hni : (((eq) ((bool) )) ((((eqb) ) (n)) (i))) ((false) ). (((((((eq_ind_r) ((bool) )) ((false) )) (\lambda x : (bool) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (n)) ((((eqb) ) (n)) (j)))) (x))) (((((match_bool_type) ((nat) )) (i)) (((((match_bool_type) ((nat) )) (j)) (n)) (x))) ((((eqb) ) (n)) (j))))) (((((((match_Or_prop) ((((eq) ((bool) )) ((((eqb) ) (n)) (j))) ((true) ))) ((((eq) ((bool) )) ((((eqb) ) (n)) (j))) ((false) ))) ((((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (n)) ((((eqb) ) (n)) (j)))) ((false) ))) (((((match_bool_type) ((nat) )) (i)) (((((match_bool_type) ((nat) )) (j)) (n)) ((false) ))) ((((eqb) ) (n)) (j))))) (\lambda Hnj : (((eq) ((bool) )) ((((eqb) ) (n)) (j))) ((true) ). (((((((eq_ind_r) ((bool) )) ((true) )) (\lambda x : (bool) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (n)) (x))) ((false) ))) (((((match_bool_type) ((nat) )) (i)) (((((match_bool_type) ((nat) )) (j)) (n)) ((false) ))) (x)))) ((((((sym_eq_match_bool_type_false) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (n)) ((true) ))) (\lambda y : (nat) . (((eq) ((nat) )) (y)) (((((match_bool_type) ((nat) )) (i)) (((((match_bool_type) ((nat) )) (j)) (n)) ((false) ))) ((true) )))) ((((((sym_eq_match_bool_type_false) ((nat) )) (j)) (n)) (\lambda y : (nat) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (i)) (n)) ((true) ))) (((((match_bool_type) ((nat) )) (i)) (y)) ((true) )))) ((((((sym_eq_match_bool_type_true) ((nat) )) (i)) (n)) (\lambda y : (nat) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (i)) (n)) ((true) ))) (y))) ((((((sym_eq_match_bool_type_true) ((nat) )) (i)) (n)) (\lambda y : (nat) . (((eq) ((nat) )) (y)) (i))) (((refl) ((nat) )) (i))))))) ((((eqb) ) (n)) (j))) (Hnj)))) (\lambda Hnj : (((eq) ((bool) )) ((((eqb) ) (n)) (j))) ((false) ). (((((((eq_ind_r) ((bool) )) ((false) )) (\lambda x : (bool) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (n)) (x))) ((false) ))) (((((match_bool_type) ((nat) )) (i)) (((((match_bool_type) ((nat) )) (j)) (n)) ((false) ))) (x)))) ((((((sym_eq_match_bool_type_false) ((nat) )) (i)) (n)) (\lambda y : (nat) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (y)) ((false) ))) (((((match_bool_type) ((nat) )) (i)) (((((match_bool_type) ((nat) )) (j)) (n)) ((false) ))) ((false) )))) ((((((sym_eq_match_bool_type_false) ((nat) )) (j)) (n)) (\lambda y : (nat) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (n)) ((false) ))) (((((match_bool_type) ((nat) )) (i)) (y)) ((false) )))) ((((((sym_eq_match_bool_type_false) ((nat) )) (j)) (n)) (\lambda y : (nat) . (((eq) ((nat) )) (y)) (((((match_bool_type) ((nat) )) (i)) (n)) ((false) )))) ((((((sym_eq_match_bool_type_false) ((nat) )) (i)) (n)) (\lambda y : (nat) . (((eq) ((nat) )) (n)) (y))) (((refl) ((nat) )) (n))))))) ((((eqb) ) (n)) (j))) (Hnj)))) ((true_or_false) ((((eqb) ) (n)) (j))))) ((((eqb) ) (n)) (i))) (Hni)))) ((true_or_false) ((((eqb) ) (n)) (i))).
definition transpose_transpose : \forall (i:(nat) ). \forall (j:(nat) ). \forall (n:(nat) ). (((eq) ((nat) )) (((((transpose) ) (i)) (j)) (((((transpose) ) (i)) (j)) (n)))) (n) := \lambda i : (nat) . \lambda j : (nat) . \lambda n : (nat) . ((((((match_Or_prop) ((((eq) ((bool) )) ((((eqb) ) (n)) (i))) ((true) ))) ((((eq) ((bool) )) ((((eqb) ) (n)) (i))) ((false) ))) ((((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (n)) ((((eqb) ) (n)) (j)))) ((((eqb) ) (n)) (i)))) ((((eqb) ) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (n)) ((((eqb) ) (n)) (j)))) ((((eqb) ) (n)) (i)))) (j)))) ((((eqb) ) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (n)) ((((eqb) ) (n)) (j)))) ((((eqb) ) (n)) (i)))) (i)))) (n))) (\lambda Hni : (((eq) ((bool) )) ((((eqb) ) (n)) (i))) ((true) ). (((((((eq_ind_r) ((bool) )) ((true) )) (\lambda x : (bool) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (n)) ((((eqb) ) (n)) (j)))) (x))) ((((eqb) ) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (n)) ((((eqb) ) (n)) (j)))) (x))) (j)))) ((((eqb) ) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (n)) ((((eqb) ) (n)) (j)))) (x))) (i)))) (n))) ((((((sym_eq_match_bool_type_true) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (n)) ((((eqb) ) (n)) (j)))) (\lambda y : (nat) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (n)) ((((eqb) ) (n)) (j)))) ((true) ))) ((((eqb) ) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (n)) ((((eqb) ) (n)) (j)))) ((true) ))) (j)))) ((((eqb) ) (y)) (i)))) (n))) ((((((sym_eq_match_bool_type_true) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (n)) ((((eqb) ) (n)) (j)))) (\lambda y : (nat) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (n)) ((((eqb) ) (n)) (j)))) ((true) ))) ((((eqb) ) (y)) (j)))) ((((eqb) ) (j)) (i)))) (n))) ((((((sym_eq_match_bool_type_true) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (n)) ((((eqb) ) (n)) (j)))) (\lambda y : (nat) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (y)) ((((eqb) ) (j)) (j)))) ((((eqb) ) (j)) (i)))) (n))) (((((((match_Or_prop) ((((eq) ((bool) )) ((((eqb) ) (j)) (i))) ((true) ))) ((((eq) ((bool) )) ((((eqb) ) (j)) (i))) ((false) ))) ((((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (j)) ((((eqb) ) (j)) (j)))) ((((eqb) ) (j)) (i)))) (n))) (\lambda Hji : (((eq) ((bool) )) ((((eqb) ) (j)) (i))) ((true) ). (((((((eq_ind_r) ((bool) )) ((true) )) (\lambda x : (bool) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (j)) ((((eqb) ) (j)) (j)))) (x))) (n))) ((((((sym_eq_match_bool_type_true) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (j)) ((((eqb) ) (j)) (j)))) (\lambda y : (nat) . (((eq) ((nat) )) (y)) (n))) (((((((eq_ind_r) ((nat) )) (i)) (\lambda x : (nat) . (((eq) ((nat) )) (j)) (x))) ((((eqb_true_to_eq) (j)) (i)) (Hji))) (n)) ((((eqb_true_to_eq) (n)) (i)) (Hni))))) ((((eqb) ) (j)) (i))) (Hji)))) (\lambda Hji : (((eq) ((bool) )) ((((eqb) ) (j)) (i))) ((false) ). (((((((eq_ind_r) ((bool) )) ((false) )) (\lambda x : (bool) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (j)) ((((eqb) ) (j)) (j)))) (x))) (n))) ((((((sym_eq_match_bool_type_false) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (j)) ((((eqb) ) (j)) (j)))) (\lambda y : (nat) . (((eq) ((nat) )) (y)) (n))) (((((((eq_ind_r) ((bool) )) ((true) )) (\lambda x : (bool) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (i)) (j)) (x))) (n))) ((((((sym_eq_match_bool_type_true) ((nat) )) (i)) (j)) (\lambda y : (nat) . (((eq) ((nat) )) (y)) (n))) (((((sym_eq) ((nat) )) (n)) (i)) ((((eqb_true_to_eq) (n)) (i)) (Hni))))) ((((eqb) ) (j)) (j))) ((eqb_n_n) (j))))) ((((eqb) ) (j)) (i))) (Hji)))) ((true_or_false) ((((eqb) ) (j)) (i)))))))) ((((eqb) ) (n)) (i))) (Hni)))) (\lambda Hni : (((eq) ((bool) )) ((((eqb) ) (n)) (i))) ((false) ). (((((((eq_ind_r) ((bool) )) ((false) )) (\lambda x : (bool) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (n)) ((((eqb) ) (n)) (j)))) (x))) ((((eqb) ) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (n)) ((((eqb) ) (n)) (j)))) (x))) (j)))) ((((eqb) ) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (n)) ((((eqb) ) (n)) (j)))) (x))) (i)))) (n))) ((((((sym_eq_match_bool_type_false) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (n)) ((((eqb) ) (n)) (j)))) (\lambda y : (nat) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (n)) ((((eqb) ) (n)) (j)))) ((false) ))) ((((eqb) ) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (n)) ((((eqb) ) (n)) (j)))) ((false) ))) (j)))) ((((eqb) ) (y)) (i)))) (n))) ((((((sym_eq_match_bool_type_false) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (n)) ((((eqb) ) (n)) (j)))) (\lambda y : (nat) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (n)) ((((eqb) ) (n)) (j)))) ((false) ))) ((((eqb) ) (y)) (j)))) ((((eqb) ) (((((match_bool_type) ((nat) )) (i)) (n)) ((((eqb) ) (n)) (j)))) (i)))) (n))) ((((((sym_eq_match_bool_type_false) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (n)) ((((eqb) ) (n)) (j)))) (\lambda y : (nat) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (y)) ((((eqb) ) (((((match_bool_type) ((nat) )) (i)) (n)) ((((eqb) ) (n)) (j)))) (j)))) ((((eqb) ) (((((match_bool_type) ((nat) )) (i)) (n)) ((((eqb) ) (n)) (j)))) (i)))) (n))) (((((((match_Or_prop) ((((eq) ((bool) )) ((((eqb) ) (n)) (j))) ((true) ))) ((((eq) ((bool) )) ((((eqb) ) (n)) (j))) ((false) ))) ((((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (((((match_bool_type) ((nat) )) (i)) (n)) ((((eqb) ) (n)) (j)))) ((((eqb) ) (((((match_bool_type) ((nat) )) (i)) (n)) ((((eqb) ) (n)) (j)))) (j)))) ((((eqb) ) (((((match_bool_type) ((nat) )) (i)) (n)) ((((eqb) ) (n)) (j)))) (i)))) (n))) (\lambda Hnj : (((eq) ((bool) )) ((((eqb) ) (n)) (j))) ((true) ). (((((((eq_ind_r) ((bool) )) ((true) )) (\lambda x : (bool) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (((((match_bool_type) ((nat) )) (i)) (n)) (x))) ((((eqb) ) (((((match_bool_type) ((nat) )) (i)) (n)) (x))) (j)))) ((((eqb) ) (((((match_bool_type) ((nat) )) (i)) (n)) (x))) (i)))) (n))) ((((((sym_eq_match_bool_type_true) ((nat) )) (i)) (n)) (\lambda y : (nat) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (((((match_bool_type) ((nat) )) (i)) (n)) ((true) ))) ((((eqb) ) (((((match_bool_type) ((nat) )) (i)) (n)) ((true) ))) (j)))) ((((eqb) ) (y)) (i)))) (n))) ((((((sym_eq_match_bool_type_true) ((nat) )) (i)) (n)) (\lambda y : (nat) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (((((match_bool_type) ((nat) )) (i)) (n)) ((true) ))) ((((eqb) ) (y)) (j)))) ((((eqb) ) (i)) (i)))) (n))) ((((((sym_eq_match_bool_type_true) ((nat) )) (i)) (n)) (\lambda y : (nat) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (y)) ((((eqb) ) (i)) (j)))) ((((eqb) ) (i)) (i)))) (n))) (((((((eq_ind_r) ((bool) )) ((true) )) (\lambda x : (bool) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (i)) ((((eqb) ) (i)) (j)))) (x))) (n))) ((((((sym_eq_match_bool_type_true) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (i)) ((((eqb) ) (i)) (j)))) (\lambda y : (nat) . (((eq) ((nat) )) (y)) (n))) (((((sym_eq) ((nat) )) (n)) (j)) ((((eqb_true_to_eq) (n)) (j)) (Hnj))))) ((((eqb) ) (i)) (i))) ((eqb_n_n) (i))))))) ((((eqb) ) (n)) (j))) (Hnj)))) (\lambda Hnj : (((eq) ((bool) )) ((((eqb) ) (n)) (j))) ((false) ). (((((((eq_ind_r) ((bool) )) ((false) )) (\lambda x : (bool) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (((((match_bool_type) ((nat) )) (i)) (n)) (x))) ((((eqb) ) (((((match_bool_type) ((nat) )) (i)) (n)) (x))) (j)))) ((((eqb) ) (((((match_bool_type) ((nat) )) (i)) (n)) (x))) (i)))) (n))) ((((((sym_eq_match_bool_type_false) ((nat) )) (i)) (n)) (\lambda y : (nat) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (((((match_bool_type) ((nat) )) (i)) (n)) ((false) ))) ((((eqb) ) (((((match_bool_type) ((nat) )) (i)) (n)) ((false) ))) (j)))) ((((eqb) ) (y)) (i)))) (n))) ((((((sym_eq_match_bool_type_false) ((nat) )) (i)) (n)) (\lambda y : (nat) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (((((match_bool_type) ((nat) )) (i)) (n)) ((false) ))) ((((eqb) ) (y)) (j)))) ((((eqb) ) (n)) (i)))) (n))) ((((((sym_eq_match_bool_type_false) ((nat) )) (i)) (n)) (\lambda y : (nat) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (y)) ((((eqb) ) (n)) (j)))) ((((eqb) ) (n)) (i)))) (n))) (((((((eq_ind_r) ((bool) )) ((false) )) (\lambda x : (bool) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (n)) ((((eqb) ) (n)) (j)))) (x))) (n))) (((((((eq_ind_r) ((bool) )) ((false) )) (\lambda x : (bool) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (n)) (x))) ((false) ))) (n))) ((((((eq_match_bool_type_false) ((nat) )) (i)) (n)) (\lambda y : (nat) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (n)) ((false) ))) ((false) ))) (y))) ((((((eq_match_bool_type_false) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (n)) ((false) ))) (\lambda y : (nat) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (n)) ((false) ))) ((false) ))) (y))) (((refl) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (n)) ((false) ))) ((false) )))))) ((((eqb) ) (n)) (j))) (Hnj))) ((((eqb) ) (n)) (i))) (Hni)))))) ((((eqb) ) (n)) (j))) (Hnj)))) ((true_or_false) ((((eqb) ) (n)) (j)))))))) ((((eqb) ) (n)) (i))) (Hni)))) ((true_or_false) ((((eqb) ) (n)) (i))).
definition injective_transpose : \forall (i:(nat) ). \forall (j:(nat) ). ((injective) ((nat) ) ((nat) )) ((((transpose) ) (i)) (j)) := \lambda i : (nat) . \lambda j : (nat) . \lambda x : (nat) . \lambda y : (nat) . \lambda auto : (((eq) ((nat) )) (((((transpose) ) (i)) (j)) (x))) (((((transpose) ) (i)) (j)) (y)). (((((((rewrite_r) ((nat) )) (y)) (\lambda j__ : (nat) . (((eq) ((nat) )) (j__)) (y))) (((refl) ((nat) )) (y))) (x)) (((((((rewrite_l) ((nat) )) (((((transpose) ) (i)) (j)) (((((transpose) ) (i)) (j)) (x)))) (\lambda j__ : (nat) . (((eq) ((nat) )) (j__)) (y))) (((((((rewrite_r) ((nat) )) (((((transpose) ) (i)) (j)) (y))) (\lambda j__ : (nat) . (((eq) ((nat) )) (((((transpose) ) (i)) (j)) (j__))) (y))) ((((transpose_transpose) (i)) (j)) (y))) (((((transpose) ) (i)) (j)) (x))) (auto))) (x)) ((((transpose_transpose) (i)) (j)) (x)))).
definition permut_S_to_permut_transpose : \forall (f:((nat) ) -> (nat) ). \forall (m:(nat) ). ((((permut) ) (f)) (((S) ) (m))) -> (((permut) ) (\lambda n : (nat) . ((((transpose) ) ((f) (((S) ) (m)))) (((S) ) (m))) ((f) (n)))) (m) := \lambda f : ((nat) ) -> (nat) . \lambda m : (nat) . \lambda j_clearme : (((permut) ) (f)) (((S) ) (m)). ((((((match_And_prop) (\forall (i:(nat) ). ((((le) ) (i)) (((S) ) (m))) -> (((le) ) ((f) (i))) (((S) ) (m)))) ((((injn) ) (f)) (((S) ) (m)))) ((((permut) ) (\lambda n : (nat) . ((((transpose) ) ((f) (((S) ) (m)))) (((S) ) (m))) ((f) (n)))) (m))) (\lambda permf1 : \forall (i:(nat) ). ((((le) ) (i)) (((S) ) (m))) -> (((le) ) ((f) (i))) (((S) ) (m)). (\lambda permf2 : (((injn) ) (f)) (((S) ) (m)). (((((conj) (\forall (x:(nat) ). ((((le) ) (x)) (m)) -> (((le) ) (((((transpose) ) ((f) (((S) ) (m)))) (((S) ) (m))) ((f) (x)))) (m))) ((((injn) ) (\lambda n : (nat) . ((((transpose) ) ((f) (((S) ) (m)))) (((S) ) (m))) ((f) (n)))) (m))) (\lambda i : (nat) . \lambda leim : (((le) ) (i)) (m). (((((((eq_ind_r) ((bool) )) ((false) )) (\lambda x : (bool) . (((le) ) (((((match_bool_type) ((nat) )) (((S) ) (m))) (((((match_bool_type) ((nat) )) ((f) (((S) ) (m)))) ((f) (i))) ((((eqb) ) ((f) (i))) (((S) ) (m))))) (x))) (m))) ((((((sym_eq_match_bool_type_false) ((nat) )) (((S) ) (m))) (((((match_bool_type) ((nat) )) ((f) (((S) ) (m)))) ((f) (i))) ((((eqb) ) ((f) (i))) (((S) ) (m))))) (\lambda y : (nat) . (((le) ) (y)) (m))) (((((((match_Or_prop) ((((lt) ) ((f) (i))) (((S) ) (m)))) ((((eq) ((nat) )) ((f) (i))) (((S) ) (m)))) ((((le) ) (((((match_bool_type) ((nat) )) ((f) (((S) ) (m)))) ((f) (i))) ((((eqb) ) ((f) (i))) (((S) ) (m))))) (m))) (\lambda Hfi : (((lt) ) ((f) (i))) (((S) ) (m)). (((((((eq_ind_r) ((bool) )) ((false) )) (\lambda x : (bool) . (((le) ) (((((match_bool_type) ((nat) )) ((f) (((S) ) (m)))) ((f) (i))) (x))) (m))) ((((((sym_eq_match_bool_type_false) ((nat) )) ((f) (((S) ) (m)))) ((f) (i))) (\lambda y : (nat) . (((le) ) (y)) (m))) ((((le_S_S_to_le) ((f) (i))) (m)) (Hfi)))) ((((eqb) ) ((f) (i))) (((S) ) (m)))) ((((not_eq_to_eqb_false) ((f) (i))) (((S) ) (m))) ((((lt_to_not_eq) ((f) (i))) (((S) ) (m))) (Hfi)))))) (\lambda Hfi : (((eq) ((nat) )) ((f) (i))) (((S) ) (m)). (((((((eq_ind_r) ((bool) )) ((true) )) (\lambda x : (bool) . (((le) ) (((((match_bool_type) ((nat) )) ((f) (((S) ) (m)))) ((f) (i))) (x))) (m))) ((((((sym_eq_match_bool_type_true) ((nat) )) ((f) (((S) ) (m)))) ((f) (i))) (\lambda y : (nat) . (((le) ) (y)) (m))) (((((((match_Or_prop) ((((lt) ) ((f) (((S) ) (m)))) (((S) ) (m)))) ((((eq) ((nat) )) ((f) (((S) ) (m)))) (((S) ) (m)))) ((((le) ) ((f) (((S) ) (m)))) (m))) (\lambda H : (((lt) ) ((f) (((S) ) (m)))) (((S) ) (m)). ((((le_S_S_to_le) ((f) (((S) ) (m)))) (m)) (H)))) (\lambda H : (((eq) ((nat) )) ((f) (((S) ) (m)))) (((S) ) (m)). (((falsity) ((((le) ) ((f) (((S) ) (m)))) (m))) ((((absurd) ((((eq) ((nat) )) (i)) (((S) ) (m)))) ((((((permf2) (i)) (((S) ) (m))) ((((le_S) (i)) (m)) (leim))) ((le_n) (((S) ) (m)))) (((((((rewrite_l) ((nat) )) ((f) (i))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((f) (i))) ((f) (j__)))) (((((((rewrite_r) ((nat) )) ((f) (i))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((f) (i))) (j__))) (((refl) ((nat) )) ((f) (i)))) ((f) ((f) (i)))) (((((((rewrite_r) ((nat) )) (((S) ) (m))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((f) ((f) (i)))) (j__))) (((((((rewrite_r) ((nat) )) (((S) ) (m))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((f) (j__))) (((S) ) (m)))) (H)) ((f) (i))) (Hfi))) ((f) (i))) (Hfi)))) (((S) ) (m))) (Hfi)))) (((((not_to_not) ((((eq) ((nat) )) (i)) (((S) ) (m)))) ((((le) ) (((S) ) (m))) (m))) (\lambda auto : (((eq) ((nat) )) (i)) (((S) ) (m)). (((((eq_coerc) ((((le) ) (i)) (m))) ((((le) ) (((S) ) (m))) (m))) (leim)) (((((((rewrite_l) ((nat) )) (i)) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (i)) (m))) ((((le) ) (j__)) (m)))) (((refl) (Prop)) ((((le) ) (i)) (m)))) (((S) ) (m))) (auto))))) ((((lt_to_not_le) (m)) (((S) ) (m))) ((le_n) (((S) ) (m))))))))) ((((le_to_or_lt_eq) ((f) (((S) ) (m)))) (((S) ) (m))) (((permf1) (((S) ) (m))) ((le_n) (((S) ) (m)))))))) ((((eqb) ) ((f) (i))) (((S) ) (m)))) ((((eq_to_eqb_true) ((f) (i))) (((S) ) (m))) (Hfi))))) ((((le_to_or_lt_eq) ((f) (i))) (((S) ) (m))) (((permf1) (i)) ((((le_S) (i)) (m)) (leim))))))) ((((eqb) ) ((f) (i))) ((f) (((S) ) (m))))) ((((not_eq_to_eqb_false) ((f) (i))) ((f) (((S) ) (m)))) (((nmk) ((((eq) ((nat) )) ((f) (i))) ((f) (((S) ) (m))))) (\lambda H : (((eq) ((nat) )) ((f) (i))) ((f) (((S) ) (m))). ((((absurd) ((((eq) ((nat) )) (i)) (((S) ) (m)))) ((((((permf2) (i)) (((S) ) (m))) ((((le_S) (i)) (m)) (leim))) ((le_n) (((S) ) (m)))) (H))) ((((lt_to_not_eq) (i)) (((S) ) (m))) ((((le_S_S) (i)) (m)) (leim)))))))))) (\lambda a : (nat) . \lambda b : (nat) . \lambda leam : (((le) ) (a)) (m). (\lambda lebm : (((le) ) (b)) (m). (\lambda H : (((eq) ((nat) )) (((((transpose) ) ((f) (((S) ) (m)))) (((S) ) (m))) ((f) (a)))) (((((transpose) ) ((f) (((S) ) (m)))) (((S) ) (m))) ((f) (b))). ((((((permf2) (a)) (b)) ((((le_S) (a)) (m)) (leam))) ((((le_S) (b)) (m)) (lebm))) ((((((injective_transpose) ((f) (((S) ) (m)))) (((S) ) (m))) ((f) (a))) ((f) (b))) (H)))))))))) (j_clearme)).
definition bijn : (((nat) ) -> (nat) ) -> ((nat) ) -> Prop := \lambda f : ((nat) ) -> (nat) . \lambda n : (nat) . \forall (m:(nat) ). ((((le) ) (m)) (n)) -> ((ex) ((nat) )) (\lambda p : (nat) . (((And) ) ((((le) ) (p)) (n))) ((((eq) ((nat) )) ((f) (p))) (m))).
definition eq_to_bijn : \forall (f:((nat) ) -> (nat) ). \forall (g:((nat) ) -> (nat) ). \forall (n:(nat) ). (\forall (i:(nat) ). ((((le) ) (i)) (n)) -> (((eq) ((nat) )) ((f) (i))) ((g) (i))) -> ((((bijn) ) (f)) (n)) -> (((bijn) ) (g)) (n) := \lambda f : ((nat) ) -> (nat) . \lambda g : ((nat) ) -> (nat) . \lambda n : (nat) . \lambda H : \forall (i:(nat) ). ((((le) ) (i)) (n)) -> (((eq) ((nat) )) ((f) (i))) ((g) (i)). (\lambda bijf : (((bijn) ) (f)) (n). (\lambda i : (nat) . \lambda lein : (((le) ) (i)) (n). ((((((match_ex_prop) ((nat) )) (\lambda p : (nat) . (((And) ) ((((le) ) (p)) (n))) ((((eq) ((nat) )) ((f) (p))) (i)))) (((ex) ((nat) )) (\lambda p : (nat) . (((And) ) ((((le) ) (p)) (n))) ((((eq) ((nat) )) ((g) (p))) (i))))) (\lambda a : (nat) . \lambda j_clearme : (((And) ) ((((le) ) (a)) (n))) ((((eq) ((nat) )) ((f) (a))) (i)). ((((((match_And_prop) ((((le) ) (a)) (n))) ((((eq) ((nat) )) ((f) (a))) (i))) (((ex) ((nat) )) (\lambda p : (nat) . (((And) ) ((((le) ) (p)) (n))) ((((eq) ((nat) )) ((g) (p))) (i))))) (\lambda lean : (((le) ) (a)) (n). (\lambda fa : (((eq) ((nat) )) ((f) (a))) (i). (((((ex_intro) ((nat) )) (\lambda x : (nat) . (((And) ) ((((le) ) (x)) (n))) ((((eq) ((nat) )) ((g) (x))) (i)))) (a)) (((((conj) ((((le) ) (a)) (n))) ((((eq) ((nat) )) ((g) (a))) (i))) (lean)) (((((((eq_ind) ((nat) )) ((f) (a))) (\lambda x_1 : (nat) . (((eq) ((nat) )) ((g) (a))) (x_1))) (((((sym_eq) ((nat) )) ((f) (a))) ((g) (a))) (((H) (a)) (lean)))) (i)) (fa))))))) (j_clearme)))) (((bijf) (i)) (lein))))).
definition bijn_n_Sn : \forall (f:((nat) ) -> (nat) ). \forall (n:(nat) ). ((((bijn) ) (f)) (n)) -> ((((eq) ((nat) )) ((f) (((S) ) (n)))) (((S) ) (n))) -> (((bijn) ) (f)) (((S) ) (n)) := \lambda f : ((nat) ) -> (nat) . \lambda n : (nat) . \lambda bijf : (((bijn) ) (f)) (n). (\lambda fS : (((eq) ((nat) )) ((f) (((S) ) (n)))) (((S) ) (n)). (\lambda i : (nat) . \lambda lein : (((le) ) (i)) (((S) ) (n)). (((((((match_Or_prop) ((((lt) ) (i)) (((S) ) (n)))) ((((eq) ((nat) )) (i)) (((S) ) (n)))) (((ex) ((nat) )) (\lambda p : (nat) . (((And) ) ((((le) ) (p)) (((S) ) (n)))) ((((eq) ((nat) )) ((f) (p))) (i))))) (\lambda Hi : (((lt) ) (i)) (((S) ) (n)). ((((((match_ex_prop) ((nat) )) (\lambda p : (nat) . (((And) ) ((((le) ) (p)) (n))) ((((eq) ((nat) )) ((f) (p))) (i)))) (((ex) ((nat) )) (\lambda p : (nat) . (((And) ) ((((le) ) (p)) (((S) ) (n)))) ((((eq) ((nat) )) ((f) (p))) (i))))) (\lambda a : (nat) . \lambda j_clearme : (((And) ) ((((le) ) (a)) (n))) ((((eq) ((nat) )) ((f) (a))) (i)). ((((((match_And_prop) ((((le) ) (a)) (n))) ((((eq) ((nat) )) ((f) (a))) (i))) (((ex) ((nat) )) (\lambda p : (nat) . (((And) ) ((((le) ) (p)) (((S) ) (n)))) ((((eq) ((nat) )) ((f) (p))) (i))))) (\lambda lean : (((le) ) (a)) (n). (\lambda fa : (((eq) ((nat) )) ((f) (a))) (i). (((((ex_intro) ((nat) )) (\lambda x : (nat) . (((And) ) ((((le) ) (x)) (((S) ) (n)))) ((((eq) ((nat) )) ((f) (x))) (i)))) (a)) (((((conj) ((((le) ) (a)) (((S) ) (n)))) ((((eq) ((nat) )) ((f) (a))) (i))) ((((le_S) (a)) (n)) (lean))) (((((((rewrite_r) ((nat) )) (i)) (\lambda j__ : (nat) . (((eq) ((nat) )) (j__)) (i))) (((refl) ((nat) )) (i))) ((f) (a))) (fa))))))) (j_clearme)))) (((bijf) (i)) ((((le_S_S_to_le) (i)) (n)) (Hi)))))) (\lambda Hi : (((eq) ((nat) )) (i)) (((S) ) (n)). (((((ex_intro) ((nat) )) (\lambda x : (nat) . (((And) ) ((((le) ) (x)) (((S) ) (n)))) ((((eq) ((nat) )) ((f) (x))) (i)))) (i)) (((((conj) ((((le) ) (i)) (((S) ) (n)))) ((((eq) ((nat) )) ((f) (i))) (i))) (((((eq_coerc) ((((le) ) (i)) (i))) ((((le) ) (i)) (((S) ) (n)))) ((le_n) (i))) (((((((rewrite_l) ((nat) )) (i)) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (i)) (i))) ((((le) ) (i)) (j__)))) (((refl) (Prop)) ((((le) ) (i)) (i)))) (((S) ) (n))) (Hi)))) (((((((rewrite_r) ((nat) )) (i)) (\lambda j__ : (nat) . (((eq) ((nat) )) (j__)) (i))) (((refl) ((nat) )) (i))) ((f) (i))) (((((((rewrite_r) ((nat) )) (((S) ) (n))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((f) (i))) (j__))) (((((((rewrite_r) ((nat) )) (((S) ) (n))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((f) (j__))) (((S) ) (n)))) (fS)) (i)) (Hi))) (i)) (Hi))))))) ((((le_to_or_lt_eq) (i)) (((S) ) (n))) (lein))))).
definition bijn_fg : \forall (f:((nat) ) -> (nat) ). \forall (g:((nat) ) -> (nat) ). \forall (n:(nat) ). ((((bijn) ) (f)) (n)) -> ((((bijn) ) (g)) (n)) -> (((bijn) ) (\lambda p : (nat) . (f) ((g) (p)))) (n) := \lambda f : ((nat) ) -> (nat) . \lambda g : ((nat) ) -> (nat) . \lambda n : (nat) . \lambda bijf : (((bijn) ) (f)) (n). (\lambda bijg : (((bijn) ) (g)) (n). (\lambda i : (nat) . \lambda lein : (((le) ) (i)) (n). ((((((match_ex_prop) ((nat) )) (\lambda p : (nat) . (((And) ) ((((le) ) (p)) (n))) ((((eq) ((nat) )) ((f) (p))) (i)))) (((ex) ((nat) )) (\lambda p : (nat) . (((And) ) ((((le) ) (p)) (n))) ((((eq) ((nat) )) ((f) ((g) (p)))) (i))))) (\lambda a : (nat) . \lambda j_clearme : (((And) ) ((((le) ) (a)) (n))) ((((eq) ((nat) )) ((f) (a))) (i)). ((((((match_And_prop) ((((le) ) (a)) (n))) ((((eq) ((nat) )) ((f) (a))) (i))) (((ex) ((nat) )) (\lambda p : (nat) . (((And) ) ((((le) ) (p)) (n))) ((((eq) ((nat) )) ((f) ((g) (p)))) (i))))) (\lambda lean : (((le) ) (a)) (n). (\lambda ga : (((eq) ((nat) )) ((f) (a))) (i). ((((((match_ex_prop) ((nat) )) (\lambda p : (nat) . (((And) ) ((((le) ) (p)) (n))) ((((eq) ((nat) )) ((g) (p))) (a)))) (((ex) ((nat) )) (\lambda p : (nat) . (((And) ) ((((le) ) (p)) (n))) ((((eq) ((nat) )) ((f) ((g) (p)))) (i))))) (\lambda b : (nat) . \lambda j_clearme0 : (((And) ) ((((le) ) (b)) (n))) ((((eq) ((nat) )) ((g) (b))) (a)). ((((((match_And_prop) ((((le) ) (b)) (n))) ((((eq) ((nat) )) ((g) (b))) (a))) (((ex) ((nat) )) (\lambda p : (nat) . (((And) ) ((((le) ) (p)) (n))) ((((eq) ((nat) )) ((f) ((g) (p)))) (i))))) (\lambda lebn : (((le) ) (b)) (n). (\lambda gb : (((eq) ((nat) )) ((g) (b))) (a). (((((ex_intro) ((nat) )) (\lambda x : (nat) . (((And) ) ((((le) ) (x)) (n))) ((((eq) ((nat) )) ((f) ((g) (x)))) (i)))) (b)) (((((conj) ((((le) ) (b)) (n))) ((((eq) ((nat) )) ((f) ((g) (b)))) (i))) (lebn)) (((((((rewrite_r) ((nat) )) (a)) (\lambda j__ : (nat) . (((eq) ((nat) )) ((f) (j__))) (i))) (((((((rewrite_r) ((nat) )) (i)) (\lambda j__ : (nat) . (((eq) ((nat) )) (j__)) (i))) (((refl) ((nat) )) (i))) ((f) (a))) (ga))) ((g) (b))) (gb))))))) (j_clearme0)))) (((bijg) (a)) (lean)))))) (j_clearme)))) (((bijf) (i)) (lein))))).
definition bijn_transpose : \forall (n:(nat) ). \forall (i:(nat) ). \forall (j:(nat) ). ((((le) ) (i)) (n)) -> ((((le) ) (j)) (n)) -> (((bijn) ) ((((transpose) ) (i)) (j))) (n) := \lambda n : (nat) . \lambda i : (nat) . \lambda j : (nat) . \lambda lein : (((le) ) (i)) (n). (\lambda lejn : (((le) ) (j)) (n). (\lambda a : (nat) . \lambda lean : (((le) ) (a)) (n). (((((((match_Or_prop) ((((eq) ((bool) )) ((((eqb) ) (a)) (i))) ((true) ))) ((((eq) ((bool) )) ((((eqb) ) (a)) (i))) ((false) ))) (((ex) ((nat) )) (\lambda p : (nat) . (((And) ) ((((le) ) (p)) (n))) ((((eq) ((nat) )) (((((transpose) ) (i)) (j)) (p))) (a))))) (\lambda Hi : (((eq) ((bool) )) ((((eqb) ) (a)) (i))) ((true) ). (((((ex_intro) ((nat) )) (\lambda x : (nat) . (((And) ) ((((le) ) (x)) (n))) ((((eq) ((nat) )) (((((transpose) ) (i)) (j)) (x))) (a)))) (j)) (((((conj) ((((le) ) (j)) (n))) ((((eq) ((nat) )) (((((transpose) ) (i)) (j)) (j))) (a))) (lejn)) (((((((eq_ind_r) ((nat) )) (i)) (\lambda x : (nat) . (((eq) ((nat) )) (x)) (a))) (((((sym_eq) ((nat) )) (a)) (i)) ((((eqb_true_to_eq) (a)) (i)) (Hi)))) (((((transpose) ) (i)) (j)) (j))) (((transpose_i_j_j) (i)) (j))))))) (\lambda Hi : (((eq) ((bool) )) ((((eqb) ) (a)) (i))) ((false) ). (((((((match_Or_prop) ((((eq) ((bool) )) ((((eqb) ) (a)) (j))) ((true) ))) ((((eq) ((bool) )) ((((eqb) ) (a)) (j))) ((false) ))) (((ex) ((nat) )) (\lambda p : (nat) . (((And) ) ((((le) ) (p)) (n))) ((((eq) ((nat) )) (((((transpose) ) (i)) (j)) (p))) (a))))) (\lambda Hj : (((eq) ((bool) )) ((((eqb) ) (a)) (j))) ((true) ). (((((ex_intro) ((nat) )) (\lambda x : (nat) . (((And) ) ((((le) ) (x)) (n))) ((((eq) ((nat) )) (((((transpose) ) (i)) (j)) (x))) (a)))) (i)) (((((conj) ((((le) ) (i)) (n))) ((((eq) ((nat) )) (((((transpose) ) (i)) (j)) (i))) (a))) (lein)) (((((((eq_ind_r) ((nat) )) (j)) (\lambda x : (nat) . (((eq) ((nat) )) (x)) (a))) (((((sym_eq) ((nat) )) (a)) (j)) ((((eqb_true_to_eq) (a)) (j)) (Hj)))) (((((transpose) ) (i)) (j)) (i))) (((transpose_i_j_i) (i)) (j))))))) (\lambda Hj : (((eq) ((bool) )) ((((eqb) ) (a)) (j))) ((false) ). (((((ex_intro) ((nat) )) (\lambda x : (nat) . (((And) ) ((((le) ) (x)) (n))) ((((eq) ((nat) )) (((((transpose) ) (i)) (j)) (x))) (a)))) (a)) (((((conj) ((((le) ) (a)) (n))) ((((eq) ((nat) )) (((((transpose) ) (i)) (j)) (a))) (a))) (lean)) (((((((eq_ind_r) ((bool) )) ((false) )) (\lambda x : (bool) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (a)) ((((eqb) ) (a)) (j)))) (x))) (a))) (((((((eq_ind_r) ((bool) )) ((false) )) (\lambda x : (bool) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (a)) (x))) ((false) ))) (a))) ((((((eq_match_bool_type_false) ((nat) )) (i)) (a)) (\lambda y : (nat) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (a)) ((false) ))) ((false) ))) (y))) ((((((eq_match_bool_type_false) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (a)) ((false) ))) (\lambda y : (nat) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (a)) ((false) ))) ((false) ))) (y))) (((refl) ((nat) )) (((((match_bool_type) ((nat) )) (j)) (((((match_bool_type) ((nat) )) (i)) (a)) ((false) ))) ((false) )))))) ((((eqb) ) (a)) (j))) (Hj))) ((((eqb) ) (a)) (i))) (Hi)))))) ((true_or_false) ((((eqb) ) (a)) (j)))))) ((true_or_false) ((((eqb) ) (a)) (i)))))).
definition permut_to_bijn : \forall (n:(nat) ). \forall (f:((nat) ) -> (nat) ). ((((permut) ) (f)) (n)) -> (((bijn) ) (f)) (n) := \lambda n : (nat) . ((((nat_ind) (\lambda j_x_365 : (nat) . \forall (f:((nat) ) -> (nat) ). ((((permut) ) (f)) (j_x_365)) -> (((bijn) ) (f)) (j_x_365))) (\lambda f : ((nat) ) -> (nat) . \lambda j_clearme : (((And) ) (\forall (i:(nat) ). ((((le) ) (i)) ((O) )) -> (((le) ) ((f) (i))) ((O) ))) (\forall (i:(nat) ). \forall (j:(nat) ). ((((le) ) (i)) ((O) )) -> ((((le) ) (j)) ((O) )) -> ((((eq) ((nat) )) ((f) (i))) ((f) (j))) -> (((eq) ((nat) )) (i)) (j)). ((((((match_And_prop) (\forall (i:(nat) ). ((((le) ) (i)) ((O) )) -> (((le) ) ((f) (i))) ((O) ))) (\forall (i:(nat) ). \forall (j:(nat) ). ((((le) ) (i)) ((O) )) -> ((((le) ) (j)) ((O) )) -> ((((eq) ((nat) )) ((f) (i))) ((f) (j))) -> (((eq) ((nat) )) (i)) (j))) (\forall (m:(nat) ). ((((le) ) (m)) ((O) )) -> ((ex) ((nat) )) (\lambda p : (nat) . (((And) ) ((((le) ) (p)) ((O) ))) ((((eq) ((nat) )) ((f) (p))) (m))))) (\lambda H : \forall (i:(nat) ). ((((le) ) (i)) ((O) )) -> (((le) ) ((f) (i))) ((O) ). (\lambda H1 : \forall (i:(nat) ). \forall (j:(nat) ). ((((le) ) (i)) ((O) )) -> ((((le) ) (j)) ((O) )) -> ((((eq) ((nat) )) ((f) (i))) ((f) (j))) -> (((eq) ((nat) )) (i)) (j). (\lambda m : (nat) . \lambda lem0 : (((le) ) (m)) ((O) ). (((((ex_intro) ((nat) )) (\lambda x : (nat) . (((And) ) ((((le) ) (x)) ((O) ))) ((((eq) ((nat) )) ((f) (x))) (m)))) ((O) )) (((((conj) ((((le) ) ((O) )) ((O) ))) ((((eq) ((nat) )) ((f) ((O) ))) (m))) ((le_O_n) ((O) ))) (((((le_n_O_elim) (m)) (lem0)) (((eq) ((nat) )) ((f) ((O) )))) (((((sym_eq) ((nat) )) ((O) )) ((f) ((O) ))) (((le_n_O_to_eq) ((f) ((O) ))) (((H) ((O) )) ((le_O_n) ((O) )))))))))))) (j_clearme)))) (\lambda m : (nat) . \lambda Hind : \forall (f:((nat) ) -> (nat) ). ((((permut) ) (f)) (m)) -> (((bijn) ) (f)) (m). (\lambda f : ((nat) ) -> (nat) . \lambda permf : (((permut) ) (f)) (((S) ) (m)). ((((((eq_to_bijn) (\lambda p : (nat) . ((((transpose) ) ((f) (((S) ) (m)))) (((S) ) (m))) (((((transpose) ) ((f) (((S) ) (m)))) (((S) ) (m))) ((f) (p))))) (f)) (((S) ) (m))) (\lambda i : (nat) . \lambda lei : (((le) ) (i)) (((S) ) (m)). ((((transpose_transpose) ((f) (((S) ) (m)))) (((S) ) (m))) ((f) (i))))) ((((((bijn_fg) ((((transpose) ) ((f) (((S) ) (m)))) (((S) ) (m)))) (\lambda j__ : (nat) . ((((transpose) ) ((f) (((S) ) (m)))) (((S) ) (m))) ((f) (j__)))) (((S) ) (m))) ((((((match_And_prop) (\forall (i:(nat) ). ((((le) ) (i)) (((S) ) (m))) -> (((le) ) ((f) (i))) (((S) ) (m)))) ((((injn) ) (f)) (((S) ) (m)))) ((((bijn) ) ((((transpose) ) ((f) (((S) ) (m)))) (((S) ) (m)))) (((S) ) (m)))) (\lambda lef : \forall (i:(nat) ). ((((le) ) (i)) (((S) ) (m))) -> (((le) ) ((f) (i))) (((S) ) (m)). (\lambda j__ : (((injn) ) (f)) (((S) ) (m)). ((((((bijn_transpose) (((S) ) (m))) ((f) (((S) ) (m)))) (((S) ) (m))) (((lef) (((S) ) (m))) ((le_n) (((S) ) (m))))) ((le_n) (((S) ) (m))))))) (permf))) (((((bijn_n_Sn) (\lambda j__ : (nat) . ((((transpose) ) ((f) (((S) ) (m)))) (((S) ) (m))) ((f) (j__)))) (m)) (((Hind) (\lambda j__ : (nat) . ((((transpose) ) ((f) (((S) ) (m)))) (((S) ) (m))) ((f) (j__)))) ((((permut_S_to_permut_transpose) (f)) (m)) (permf)))) (((((((eq_ind_r) ((bool) )) ((true) )) (\lambda x : (bool) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (((S) ) (m))) (((((match_bool_type) ((nat) )) ((f) (((S) ) (m)))) ((f) (((S) ) (m)))) ((((eqb) ) ((f) (((S) ) (m)))) (((S) ) (m))))) (x))) (((S) ) (m)))) ((((((eq_match_bool_type_true) ((nat) )) (((S) ) (m))) (((((match_bool_type) ((nat) )) ((f) (((S) ) (m)))) ((f) (((S) ) (m)))) ((((eqb) ) ((f) (((S) ) (m)))) (((S) ) (m))))) (\lambda y : (nat) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (((S) ) (m))) (((((match_bool_type) ((nat) )) ((f) (((S) ) (m)))) ((f) (((S) ) (m)))) ((((eqb) ) ((f) (((S) ) (m)))) (((S) ) (m))))) ((true) ))) (y))) (((refl) ((nat) )) (((((match_bool_type) ((nat) )) (((S) ) (m))) (((((match_bool_type) ((nat) )) ((f) (((S) ) (m)))) ((f) (((S) ) (m)))) ((((eqb) ) ((f) (((S) ) (m)))) (((S) ) (m))))) ((true) ))))) ((((eqb) ) ((f) (((S) ) (m)))) ((f) (((S) ) (m))))) ((eqb_n_n) ((f) (((S) ) (m))))))))))) (n).
axiom invert_permut : ((nat) ) -> (((nat) ) -> (nat) ) -> ((nat) ) -> (nat) .
axiom invert_permut_body : ((nat) ) -> (((nat) ) -> (nat) ) -> ((nat) ) -> (nat) .
axiom axiom_invert_permut : \forall (n:(nat) ). (((equal) ((((nat) ) -> (nat) ) -> ((nat) ) -> (nat) )) (((invert_permut) ) (n))) ((((filter_nat_type) ((((nat) ) -> (nat) ) -> ((nat) ) -> (nat) )) ((invert_permut_body) )) (n)).
definition eq_invert_permut : \forall (n:(nat) ). (((leibniz) ((((nat) ) -> (nat) ) -> ((nat) ) -> (nat) )) (((invert_permut) ) (n))) ((((filter_nat_type) ((((nat) ) -> (nat) ) -> ((nat) ) -> (nat) )) ((invert_permut_body) )) (n)) := \lambda n : (nat) . ((((equal_leibniz) ((((nat) ) -> (nat) ) -> ((nat) ) -> (nat) )) (((invert_permut) ) (n))) ((((filter_nat_type) ((((nat) ) -> (nat) ) -> ((nat) ) -> (nat) )) ((invert_permut_body) )) (n))) ((axiom_invert_permut) (n)).
definition sym_eq_invert_permut : \forall (n:(nat) ). (((leibniz) ((((nat) ) -> (nat) ) -> ((nat) ) -> (nat) )) ((((filter_nat_type) ((((nat) ) -> (nat) ) -> ((nat) ) -> (nat) )) ((invert_permut_body) )) (n))) (((invert_permut) ) (n)) := \lambda n : (nat) . ((((sym_leibniz) ((((nat) ) -> (nat) ) -> ((nat) ) -> (nat) )) (((invert_permut) ) (n))) ((((filter_nat_type) ((((nat) ) -> (nat) ) -> ((nat) ) -> (nat) )) ((invert_permut_body) )) (n))) ((eq_invert_permut) (n)).
axiom axiom_invert_permut_body_O : (((equal) ((((nat) ) -> (nat) ) -> ((nat) ) -> (nat) )) (((invert_permut_body) ) ((O) ))) (\lambda f : ((nat) ) -> (nat) . \lambda m : (nat) . ((((match_bool_type) ((nat) )) ((O) )) ((O) )) ((((eqb) ) (m)) ((f) ((O) )))).
definition eq_invert_permut_body_O : (((leibniz) ((((nat) ) -> (nat) ) -> ((nat) ) -> (nat) )) (((invert_permut_body) ) ((O) ))) (\lambda f : ((nat) ) -> (nat) . \lambda m : (nat) . ((((match_bool_type) ((nat) )) ((O) )) ((O) )) ((((eqb) ) (m)) ((f) ((O) )))) := ((((equal_leibniz) ((((nat) ) -> (nat) ) -> ((nat) ) -> (nat) )) (((invert_permut_body) ) ((O) ))) (\lambda f : ((nat) ) -> (nat) . \lambda m : (nat) . ((((match_bool_type) ((nat) )) ((O) )) ((O) )) ((((eqb) ) (m)) ((f) ((O) ))))) (axiom_invert_permut_body_O).
definition sym_eq_invert_permut_body_O : (((leibniz) ((((nat) ) -> (nat) ) -> ((nat) ) -> (nat) )) (\lambda f : ((nat) ) -> (nat) . \lambda m : (nat) . ((((match_bool_type) ((nat) )) ((O) )) ((O) )) ((((eqb) ) (m)) ((f) ((O) ))))) (((invert_permut_body) ) ((O) )) := ((((sym_leibniz) ((((nat) ) -> (nat) ) -> ((nat) ) -> (nat) )) (((invert_permut_body) ) ((O) ))) (\lambda f : ((nat) ) -> (nat) . \lambda m : (nat) . ((((match_bool_type) ((nat) )) ((O) )) ((O) )) ((((eqb) ) (m)) ((f) ((O) ))))) (eq_invert_permut_body_O).
axiom axiom_invert_permut_body_S : \forall (n:(nat) ). (((equal) ((((nat) ) -> (nat) ) -> ((nat) ) -> (nat) )) (((invert_permut_body) ) (((S) ) (n)))) (\lambda f : ((nat) ) -> (nat) . \lambda m : (nat) . ((((match_bool_type) ((nat) )) (((S) ) (n))) (((((invert_permut) ) (n)) (f)) (m))) ((((eqb) ) (m)) ((f) (((S) ) (n))))).
definition eq_invert_permut_body_S : \forall (n:(nat) ). (((leibniz) ((((nat) ) -> (nat) ) -> ((nat) ) -> (nat) )) (((invert_permut_body) ) (((S) ) (n)))) (\lambda f : ((nat) ) -> (nat) . \lambda m : (nat) . ((((match_bool_type) ((nat) )) (((S) ) (n))) (((((invert_permut) ) (n)) (f)) (m))) ((((eqb) ) (m)) ((f) (((S) ) (n))))) := \lambda n : (nat) . ((((equal_leibniz) ((((nat) ) -> (nat) ) -> ((nat) ) -> (nat) )) (((invert_permut_body) ) (((S) ) (n)))) (\lambda f : ((nat) ) -> (nat) . \lambda m : (nat) . ((((match_bool_type) ((nat) )) (((S) ) (n))) (((((invert_permut) ) (n)) (f)) (m))) ((((eqb) ) (m)) ((f) (((S) ) (n)))))) ((axiom_invert_permut_body_S) (n)).
definition sym_eq_invert_permut_body_S : \forall (n:(nat) ). (((leibniz) ((((nat) ) -> (nat) ) -> ((nat) ) -> (nat) )) (\lambda f : ((nat) ) -> (nat) . \lambda m : (nat) . ((((match_bool_type) ((nat) )) (((S) ) (n))) (((((invert_permut) ) (n)) (f)) (m))) ((((eqb) ) (m)) ((f) (((S) ) (n)))))) (((invert_permut_body) ) (((S) ) (n))) := \lambda n : (nat) . ((((sym_leibniz) ((((nat) ) -> (nat) ) -> ((nat) ) -> (nat) )) (((invert_permut_body) ) (((S) ) (n)))) (\lambda f : ((nat) ) -> (nat) . \lambda m : (nat) . ((((match_bool_type) ((nat) )) (((S) ) (n))) (((((invert_permut) ) (n)) (f)) (m))) ((((eqb) ) (m)) ((f) (((S) ) (n)))))) ((eq_invert_permut_body_S) (n)).
definition invert_permut_f : \forall (f:((nat) ) -> (nat) ). \forall (n:(nat) ). \forall (m:(nat) ). ((((le) ) (m)) (n)) -> ((((injn) ) (f)) (n)) -> (((eq) ((nat) )) (((((invert_permut) ) (n)) (f)) ((f) (m)))) (m) := \lambda f : ((nat) ) -> (nat) . \lambda n : (nat) . \lambda m : (nat) . \lambda lenm : (((le) ) (m)) (n). (((((((le_ind) (m)) (\lambda x_417 : (nat) . ((((injn) ) (f)) (x_417)) -> (((eq) ((nat) )) (((((invert_permut) ) (x_417)) (f)) ((f) (m)))) (m))) (((((match_nat_prop) (\lambda j__ : (nat) . ((((injn) ) (f)) (j__)) -> (((eq) ((nat) )) (((((invert_permut) ) (j__)) (f)) ((f) (j__)))) (j__))) ((((sym_eq_invert_permut) ((O) )) (\lambda y : (((nat) ) -> (nat) ) -> ((nat) ) -> (nat) . ((((injn) ) (f)) ((O) )) -> (((eq) ((nat) )) (((y) (f)) ((f) ((O) )))) ((O) ))) (((((sym_eq_filter_nat_type_O) ((((nat) ) -> (nat) ) -> ((nat) ) -> (nat) )) ((invert_permut_body) )) (\lambda y : (((nat) ) -> (nat) ) -> ((nat) ) -> (nat) . ((((injn) ) (f)) ((O) )) -> (((eq) ((nat) )) (((y) (f)) ((f) ((O) )))) ((O) ))) (((sym_eq_invert_permut_body_O) (\lambda y : (((nat) ) -> (nat) ) -> ((nat) ) -> (nat) . ((((injn) ) (f)) ((O) )) -> (((eq) ((nat) )) (((y) (f)) ((f) ((O) )))) ((O) ))) (((((((eq_ind_r) ((bool) )) ((true) )) (\lambda x : (bool) . (\forall (i:(nat) ). \forall (j:(nat) ). ((((le) ) (i)) ((O) )) -> ((((le) ) (j)) ((O) )) -> ((((eq) ((nat) )) ((f) (i))) ((f) (j))) -> (((eq) ((nat) )) (i)) (j)) -> (((eq) ((nat) )) (((((match_bool_type) ((nat) )) ((O) )) ((O) )) (x))) ((O) ))) (\lambda auto : \forall (i:(nat) ). \forall (j:(nat) ). ((((le) ) (i)) ((O) )) -> ((((le) ) (j)) ((O) )) -> ((((eq) ((nat) )) ((f) (i))) ((f) (j))) -> (((eq) ((nat) )) (i)) (j). ((((((eq_match_bool_type_true) ((nat) )) ((O) )) ((O) )) (\lambda y : (nat) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) ((O) )) ((O) )) ((true) ))) (y))) (((refl) ((nat) )) (((((match_bool_type) ((nat) )) ((O) )) ((O) )) ((true) )))))) ((((eqb) ) ((f) ((O) ))) ((f) ((O) )))) ((eqb_n_n) ((f) ((O) )))))))) (\lambda a : (nat) . (((sym_eq_invert_permut) (((S) ) (a))) (\lambda y : (((nat) ) -> (nat) ) -> ((nat) ) -> (nat) . ((((injn) ) (f)) (((S) ) (a))) -> (((eq) ((nat) )) (((y) (f)) ((f) (((S) ) (a))))) (((S) ) (a)))) ((((((sym_eq_filter_nat_type_S) ((((nat) ) -> (nat) ) -> ((nat) ) -> (nat) )) ((invert_permut_body) )) (a)) (\lambda y : (((nat) ) -> (nat) ) -> ((nat) ) -> (nat) . ((((injn) ) (f)) (((S) ) (a))) -> (((eq) ((nat) )) (((y) (f)) ((f) (((S) ) (a))))) (((S) ) (a)))) ((((sym_eq_invert_permut_body_S) (a)) (\lambda y : (((nat) ) -> (nat) ) -> ((nat) ) -> (nat) . ((((injn) ) (f)) (((S) ) (a))) -> (((eq) ((nat) )) (((y) (f)) ((f) (((S) ) (a))))) (((S) ) (a)))) (((((((eq_ind_r) ((bool) )) ((true) )) (\lambda x : (bool) . (\forall (i:(nat) ). \forall (j:(nat) ). ((((le) ) (i)) (((S) ) (a))) -> ((((le) ) (j)) (((S) ) (a))) -> ((((eq) ((nat) )) ((f) (i))) ((f) (j))) -> (((eq) ((nat) )) (i)) (j)) -> (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (((S) ) (a))) (((((invert_permut) ) (a)) (f)) ((f) (((S) ) (a))))) (x))) (((S) ) (a)))) (\lambda auto : \forall (i:(nat) ). \forall (j:(nat) ). ((((le) ) (i)) (((S) ) (a))) -> ((((le) ) (j)) (((S) ) (a))) -> ((((eq) ((nat) )) ((f) (i))) ((f) (j))) -> (((eq) ((nat) )) (i)) (j). ((((((eq_match_bool_type_true) ((nat) )) (((S) ) (a))) (((((invert_permut) ) (a)) (f)) ((f) (((S) ) (a))))) (\lambda y : (nat) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (((S) ) (a))) (((((invert_permut) ) (a)) (f)) ((f) (((S) ) (a))))) ((true) ))) (y))) (((refl) ((nat) )) (((((match_bool_type) ((nat) )) (((S) ) (a))) (((((invert_permut) ) (a)) (f)) ((f) (((S) ) (a))))) ((true) )))))) ((((eqb) ) ((f) (((S) ) (a)))) ((f) (((S) ) (a))))) ((eqb_n_n) ((f) (((S) ) (a))))))))) (m))) (\lambda m0 : (nat) . (((sym_eq_invert_permut) (((S) ) (m0))) (\lambda y : (((nat) ) -> (nat) ) -> ((nat) ) -> (nat) . ((((le) ) (m)) (m0)) -> (((((injn) ) (f)) (m0)) -> (((eq) ((nat) )) (((((invert_permut) ) (m0)) (f)) ((f) (m)))) (m)) -> ((((injn) ) (f)) (((S) ) (m0))) -> (((eq) ((nat) )) (((y) (f)) ((f) (m)))) (m))) ((((((sym_eq_filter_nat_type_S) ((((nat) ) -> (nat) ) -> ((nat) ) -> (nat) )) ((invert_permut_body) )) (m0)) (\lambda y : (((nat) ) -> (nat) ) -> ((nat) ) -> (nat) . ((((le) ) (m)) (m0)) -> (((((injn) ) (f)) (m0)) -> (((eq) ((nat) )) (((((invert_permut) ) (m0)) (f)) ((f) (m)))) (m)) -> ((((injn) ) (f)) (((S) ) (m0))) -> (((eq) ((nat) )) (((y) (f)) ((f) (m)))) (m))) ((((sym_eq_invert_permut_body_S) (m0)) (\lambda y : (((nat) ) -> (nat) ) -> ((nat) ) -> (nat) . ((((le) ) (m)) (m0)) -> (((((injn) ) (f)) (m0)) -> (((eq) ((nat) )) (((((invert_permut) ) (m0)) (f)) ((f) (m)))) (m)) -> ((((injn) ) (f)) (((S) ) (m0))) -> (((eq) ((nat) )) (((y) (f)) ((f) (m)))) (m))) (\lambda lem : (((le) ) (m)) (m0). (\lambda H : ((((injn) ) (f)) (m0)) -> (((eq) ((nat) )) (((((invert_permut) ) (m0)) (f)) ((f) (m)))) (m). (\lambda H1 : (((injn) ) (f)) (((S) ) (m0)). (((((((eq_ind_r) ((bool) )) ((false) )) (\lambda x : (bool) . (((eq) ((nat) )) (((((match_bool_type) ((nat) )) (((S) ) (m0))) (((((invert_permut) ) (m0)) (f)) ((f) (m)))) (x))) (m))) ((((((sym_eq_match_bool_type_false) ((nat) )) (((S) ) (m0))) (((((invert_permut) ) (m0)) (f)) ((f) (m)))) (\lambda y : (nat) . (((eq) ((nat) )) (y)) (m))) ((H) ((((injn_Sn_n) (f)) (m0)) (H1))))) ((((eqb) ) ((f) (m))) ((f) (((S) ) (m0))))) ((((not_eq_to_eqb_false) ((f) (m))) ((f) (((S) ) (m0)))) (((nmk) ((((eq) ((nat) )) ((f) (m))) ((f) (((S) ) (m0))))) (\lambda eqf : (((eq) ((nat) )) ((f) (m))) ((f) (((S) ) (m0))). ((((absurd) ((((eq) ((nat) )) (m)) (((S) ) (m0)))) ((((((H1) (m)) (((S) ) (m0))) ((((le_S) (m)) (m0)) (lem))) ((le_n) (((S) ) (m0)))) (((((((rewrite_l) ((nat) )) ((f) (m))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((f) (m))) (j__))) (((refl) ((nat) )) ((f) (m)))) ((f) (((S) ) (m0)))) (eqf)))) ((((lt_to_not_eq) (m)) (((S) ) (m0))) ((((le_S_S) (m)) (m0)) (lem))))))))))))))) (n)) (lenm)).
definition let_clause_1063 : \forall (f:((nat) ) -> (nat) ). \forall (n:(nat) ). ((((permut) ) (f)) (n)) -> \forall (i:(nat) ). \forall (j:(nat) ). ((((le) ) (i)) (n)) -> ((((le) ) (j)) (n)) -> \forall (a:(nat) ). ((((And) ) ((((le) ) (a)) (n))) ((((eq) ((nat) )) ((f) (a))) (i))) -> ((((le) ) (a)) (n)) -> ((((eq) ((nat) )) ((f) (a))) (i)) -> \forall (b:(nat) ). ((((And) ) ((((le) ) (b)) (n))) ((((eq) ((nat) )) ((f) (b))) (j))) -> ((((le) ) (b)) (n)) -> ((((eq) ((nat) )) ((f) (b))) (j)) -> (\forall (i0:(nat) ). ((((le) ) (i0)) (n)) -> (((le) ) ((f) (i0))) (n)) -> ((((injn) ) (f)) (n)) -> ((((eq) ((nat) )) (a)) (b)) -> (((eq) ((nat) )) ((f) (a))) (j) := \lambda f : ((nat) ) -> (nat) . \lambda n : (nat) . \lambda permf : (((permut) ) (f)) (n). (\lambda i : (nat) . \lambda j : (nat) . \lambda lein : (((le) ) (i)) (n). (\lambda lejn : (((le) ) (j)) (n). (\lambda a : (nat) . \lambda j_clearme : (((And) ) ((((le) ) (a)) (n))) ((((eq) ((nat) )) ((f) (a))) (i)). (\lambda lean : (((le) ) (a)) (n). (\lambda fa : (((eq) ((nat) )) ((f) (a))) (i). (\lambda b : (nat) . \lambda j_clearme0 : (((And) ) ((((le) ) (b)) (n))) ((((eq) ((nat) )) ((f) (b))) (j)). (\lambda lebn : (((le) ) (b)) (n). (\lambda fb : (((eq) ((nat) )) ((f) (b))) (j). (\lambda j__ : \forall (i0:(nat) ). ((((le) ) (i0)) (n)) -> (((le) ) ((f) (i0))) (n). (\lambda injf : (((injn) ) (f)) (n). (\lambda auto : (((eq) ((nat) )) (a)) (b). (((((((rewrite_r) ((nat) )) (b)) (\lambda j__1 : (nat) . (((eq) ((nat) )) ((f) (j__1))) (j))) (fb)) (a)) (auto))))))))))))).
definition let_clause_1068 : \forall (f:((nat) ) -> (nat) ). \forall (n:(nat) ). ((((permut) ) (f)) (n)) -> \forall (i:(nat) ). \forall (j:(nat) ). ((((le) ) (i)) (n)) -> ((((le) ) (j)) (n)) -> \forall (a:(nat) ). ((((And) ) ((((le) ) (a)) (n))) ((((eq) ((nat) )) ((f) (a))) (i))) -> ((((le) ) (a)) (n)) -> ((((eq) ((nat) )) ((f) (a))) (i)) -> \forall (b:(nat) ). ((((And) ) ((((le) ) (b)) (n))) ((((eq) ((nat) )) ((f) (b))) (j))) -> ((((le) ) (b)) (n)) -> ((((eq) ((nat) )) ((f) (b))) (j)) -> (\forall (i0:(nat) ). ((((le) ) (i0)) (n)) -> (((le) ) ((f) (i0))) (n)) -> ((((injn) ) (f)) (n)) -> ((((eq) ((nat) )) (a)) (b)) -> (((eq) ((nat) )) ((f) (a))) (i) := \lambda f : ((nat) ) -> (nat) . \lambda n : (nat) . \lambda permf : (((permut) ) (f)) (n). (\lambda i : (nat) . \lambda j : (nat) . \lambda lein : (((le) ) (i)) (n). (\lambda lejn : (((le) ) (j)) (n). (\lambda a : (nat) . \lambda j_clearme : (((And) ) ((((le) ) (a)) (n))) ((((eq) ((nat) )) ((f) (a))) (i)). (\lambda lean : (((le) ) (a)) (n). (\lambda fa : (((eq) ((nat) )) ((f) (a))) (i). (\lambda b : (nat) . \lambda j_clearme0 : (((And) ) ((((le) ) (b)) (n))) ((((eq) ((nat) )) ((f) (b))) (j)). (\lambda lebn : (((le) ) (b)) (n). (\lambda fb : (((eq) ((nat) )) ((f) (b))) (j). (\lambda j__ : \forall (i0:(nat) ). ((((le) ) (i0)) (n)) -> (((le) ) ((f) (i0))) (n). (\lambda injf : (((injn) ) (f)) (n). (\lambda auto : (((eq) ((nat) )) (a)) (b). (((((((rewrite_l) ((nat) )) (j)) (\lambda j__1 : (nat) . (((eq) ((nat) )) ((f) (a))) (j__1))) (((((((((((((((((((let_clause_1063) (f)) (n)) (permf)) (i)) (j)) (lein)) (lejn)) (a)) (j_clearme)) (lean)) (fa)) (b)) (j_clearme0)) (lebn)) (fb)) (j__)) (injf)) (auto))) (i)) (((((((rewrite_l) ((nat) )) ((f) (a))) (\lambda j__1 : (nat) . (((eq) ((nat) )) (j__1)) (i))) (fa)) (j)) (((((((((((((((((((let_clause_1063) (f)) (n)) (permf)) (i)) (j)) (lein)) (lejn)) (a)) (j_clearme)) (lean)) (fa)) (b)) (j_clearme0)) (lebn)) (fb)) (j__)) (injf)) (auto))))))))))))))).
definition injective_invert_permut : \forall (f:((nat) ) -> (nat) ). \forall (n:(nat) ). ((((permut) ) (f)) (n)) -> (((injn) ) ((((invert_permut) ) (n)) (f))) (n) := \lambda f : ((nat) ) -> (nat) . \lambda n : (nat) . \lambda permf : (((permut) ) (f)) (n). (\lambda i : (nat) . \lambda j : (nat) . \lambda lein : (((le) ) (i)) (n). (\lambda lejn : (((le) ) (j)) (n). ((((((match_ex_prop) ((nat) )) (\lambda p : (nat) . (((And) ) ((((le) ) (p)) (n))) ((((eq) ((nat) )) ((f) (p))) (i)))) (((((eq) ((nat) )) (((((invert_permut) ) (n)) (f)) (i))) (((((invert_permut) ) (n)) (f)) (j))) -> (((eq) ((nat) )) (i)) (j))) (\lambda a : (nat) . \lambda j_clearme : (((And) ) ((((le) ) (a)) (n))) ((((eq) ((nat) )) ((f) (a))) (i)). ((((((match_And_prop) ((((le) ) (a)) (n))) ((((eq) ((nat) )) ((f) (a))) (i))) (((((eq) ((nat) )) (((((invert_permut) ) (n)) (f)) (i))) (((((invert_permut) ) (n)) (f)) (j))) -> (((eq) ((nat) )) (i)) (j))) (\lambda lean : (((le) ) (a)) (n). (\lambda fa : (((eq) ((nat) )) ((f) (a))) (i). ((((((match_ex_prop) ((nat) )) (\lambda p : (nat) . (((And) ) ((((le) ) (p)) (n))) ((((eq) ((nat) )) ((f) (p))) (j)))) (((((eq) ((nat) )) (((((invert_permut) ) (n)) (f)) (i))) (((((invert_permut) ) (n)) (f)) (j))) -> (((eq) ((nat) )) (i)) (j))) (\lambda b : (nat) . \lambda j_clearme0 : (((And) ) ((((le) ) (b)) (n))) ((((eq) ((nat) )) ((f) (b))) (j)). ((((((match_And_prop) ((((le) ) (b)) (n))) ((((eq) ((nat) )) ((f) (b))) (j))) (((((eq) ((nat) )) (((((invert_permut) ) (n)) (f)) (i))) (((((invert_permut) ) (n)) (f)) (j))) -> (((eq) ((nat) )) (i)) (j))) (\lambda lebn : (((le) ) (b)) (n). (\lambda fb : (((eq) ((nat) )) ((f) (b))) (j). ((((((match_And_prop) (\forall (i1:(nat) ). ((((le) ) (i1)) (n)) -> (((le) ) ((f) (i1))) (n))) ((((injn) ) (f)) (n))) (((((eq) ((nat) )) (((((invert_permut) ) (n)) (f)) (i))) (((((invert_permut) ) (n)) (f)) (j))) -> (((eq) ((nat) )) (i)) (j))) (\lambda j__ : \forall (i0:(nat) ). ((((le) ) (i0)) (n)) -> (((le) ) ((f) (i0))) (n). (\lambda injf : (((injn) ) (f)) (n). (((((((eq_ind) ((nat) )) ((f) (a))) (\lambda x_1 : (nat) . ((((eq) ((nat) )) (((((invert_permut) ) (n)) (f)) (x_1))) (((((invert_permut) ) (n)) (f)) (j))) -> (((eq) ((nat) )) (x_1)) (j))) (((((((eq_ind) ((nat) )) ((f) (b))) (\lambda x_1 : (nat) . ((((eq) ((nat) )) (((((invert_permut) ) (n)) (f)) ((f) (a)))) (((((invert_permut) ) (n)) (f)) (x_1))) -> (((eq) ((nat) )) ((f) (a))) (x_1))) (((((((eq_ind_r) ((nat) )) (a)) (\lambda x : (nat) . ((((eq) ((nat) )) (x)) (((((invert_permut) ) (n)) (f)) ((f) (b)))) -> (((eq) ((nat) )) ((f) (a))) ((f) (b)))) (((((((eq_ind_r) ((nat) )) (b)) (\lambda x : (nat) . ((((eq) ((nat) )) (a)) (x)) -> (((eq) ((nat) )) ((f) (a))) ((f) (b)))) (\lambda auto : (((eq) ((nat) )) (a)) (b). (((((((rewrite_r) ((nat) )) (i)) (\lambda j__1 : (nat) . (((eq) ((nat) )) (j__1)) ((f) (b)))) (((((((rewrite_l) ((nat) )) (a)) (\lambda j__1 : (nat) . (((eq) ((nat) )) (i)) ((f) (j__1)))) (((((((rewrite_r) ((nat) )) (i)) (\lambda j__1 : (nat) . (((eq) ((nat) )) (i)) (j__1))) (((refl) ((nat) )) (i))) ((f) (a))) (((((((((((((((((((let_clause_1068) (f)) (n)) (permf)) (i)) (j)) (lein)) (lejn)) (a)) (j_clearme)) (lean)) (fa)) (b)) (j_clearme0)) (lebn)) (fb)) (j__)) (injf)) (auto)))) (b)) (auto))) ((f) (a))) (((((((((((((((((((let_clause_1068) (f)) (n)) (permf)) (i)) (j)) (lein)) (lejn)) (a)) (j_clearme)) (lean)) (fa)) (b)) (j_clearme0)) (lebn)) (fb)) (j__)) (injf)) (auto))))) (((((invert_permut) ) (n)) (f)) ((f) (b)))) ((((((invert_permut_f) (f)) (n)) (b)) (lebn)) (injf)))) (((((invert_permut) ) (n)) (f)) ((f) (a)))) ((((((invert_permut_f) (f)) (n)) (a)) (lean)) (injf)))) (j)) (fb))) (i)) (fa))))) (permf))))) (j_clearme0)))) ((((((permut_to_bijn) (n)) (f)) (permf)) (j)) (lejn)))))) (j_clearme)))) ((((((permut_to_bijn) (n)) (f)) (permf)) (i)) (lein))))).
definition permut_invert_permut : \forall (f:((nat) ) -> (nat) ). \forall (n:(nat) ). ((((permut) ) (f)) (n)) -> (((permut) ) ((((invert_permut) ) (n)) (f))) (n) := \lambda f : ((nat) ) -> (nat) . \lambda n : (nat) . \lambda permf : (((permut) ) (f)) (n). (((((conj) (\forall (x:(nat) ). ((((le) ) (x)) (n)) -> (((le) ) (((((invert_permut) ) (n)) (f)) (x))) (n))) ((((injn) ) ((((invert_permut) ) (n)) (f))) (n))) (\lambda i : (nat) . \lambda lein : (((le) ) (i)) (n). (((((nat_ind) (\lambda j_x_365 : (nat) . (((le) ) (((((invert_permut) ) (j_x_365)) (f)) (i))) (j_x_365))) ((((sym_eq_invert_permut) ((O) )) (\lambda y : (((nat) ) -> (nat) ) -> ((nat) ) -> (nat) . (((le) ) (((y) (f)) (i))) ((O) ))) (((((sym_eq_filter_nat_type_O) ((((nat) ) -> (nat) ) -> ((nat) ) -> (nat) )) ((invert_permut_body) )) (\lambda y : (((nat) ) -> (nat) ) -> ((nat) ) -> (nat) . (((le) ) (((y) (f)) (i))) ((O) ))) (((sym_eq_invert_permut_body_O) (\lambda y : (((nat) ) -> (nat) ) -> ((nat) ) -> (nat) . (((le) ) (((y) (f)) (i))) ((O) ))) (((((match_bool_prop) (\lambda j__ : (bool) . (((le) ) (((((match_bool_type) ((nat) )) ((O) )) ((O) )) (j__))) ((O) ))) ((((((eq_match_bool_type_true) ((nat) )) ((O) )) ((O) )) (\lambda y : (nat) . (((le) ) (((((match_bool_type) ((nat) )) ((O) )) ((O) )) ((true) ))) (y))) ((le_n) (((((match_bool_type) ((nat) )) ((O) )) ((O) )) ((true) ))))) ((((((eq_match_bool_type_false) ((nat) )) ((O) )) ((O) )) (\lambda y : (nat) . (((le) ) (((((match_bool_type) ((nat) )) ((O) )) ((O) )) ((false) ))) (y))) ((le_n) (((((match_bool_type) ((nat) )) ((O) )) ((O) )) ((false) ))))) ((((eqb) ) (i)) ((f) ((O) )))))))) (\lambda n1 : (nat) . (((sym_eq_invert_permut) (((S) ) (n1))) (\lambda y : (((nat) ) -> (nat) ) -> ((nat) ) -> (nat) . ((((le) ) (((((invert_permut) ) (n1)) (f)) (i))) (n1)) -> (((le) ) (((y) (f)) (i))) (((S) ) (n1)))) ((((((sym_eq_filter_nat_type_S) ((((nat) ) -> (nat) ) -> ((nat) ) -> (nat) )) ((invert_permut_body) )) (n1)) (\lambda y : (((nat) ) -> (nat) ) -> ((nat) ) -> (nat) . ((((le) ) (((((invert_permut) ) (n1)) (f)) (i))) (n1)) -> (((le) ) (((y) (f)) (i))) (((S) ) (n1)))) ((((sym_eq_invert_permut_body_S) (n1)) (\lambda y : (((nat) ) -> (nat) ) -> ((nat) ) -> (nat) . ((((le) ) (((((invert_permut) ) (n1)) (f)) (i))) (n1)) -> (((le) ) (((y) (f)) (i))) (((S) ) (n1)))) (\lambda Hind : (((le) ) (((((invert_permut) ) (n1)) (f)) (i))) (n1). (((((match_bool_prop) (\lambda j__ : (bool) . (((le) ) (((((match_bool_type) ((nat) )) (((S) ) (n1))) (((((invert_permut) ) (n1)) (f)) (i))) (j__))) (((S) ) (n1)))) ((((((eq_match_bool_type_true) ((nat) )) (((S) ) (n1))) (((((invert_permut) ) (n1)) (f)) (i))) (\lambda y : (nat) . (((le) ) (((((match_bool_type) ((nat) )) (((S) ) (n1))) (((((invert_permut) ) (n1)) (f)) (i))) ((true) ))) (y))) ((le_n) (((((match_bool_type) ((nat) )) (((S) ) (n1))) (((((invert_permut) ) (n1)) (f)) (i))) ((true) ))))) ((((((sym_eq_match_bool_type_false) ((nat) )) (((S) ) (n1))) (((((invert_permut) ) (n1)) (f)) (i))) (\lambda y : (nat) . (((le) ) (y)) (((S) ) (n1)))) ((((le_S) (((((invert_permut) ) (n1)) (f)) (i))) (n1)) (Hind)))) ((((eqb) ) (i)) ((f) (((S) ) (n1)))))))))) (n)))) ((((injective_invert_permut) (f)) (n)) (permf))).
definition f_invert_permut : \forall (f:((nat) ) -> (nat) ). \forall (n:(nat) ). \forall (m:(nat) ). ((((le) ) (m)) (n)) -> ((((permut) ) (f)) (n)) -> (((eq) ((nat) )) ((f) (((((invert_permut) ) (n)) (f)) (m)))) (m) := \lambda f : ((nat) ) -> (nat) . \lambda n : (nat) . \lambda m : (nat) . \lambda lemn : (((le) ) (m)) (n). (\lambda permf : (((permut) ) (f)) (n). ((((((match_And_prop) (\forall (i:(nat) ). ((((le) ) (i)) (n)) -> (((le) ) (((((invert_permut) ) (n)) (f)) (i))) (n))) ((((injn) ) ((((invert_permut) ) (n)) (f))) (n))) ((((eq) ((nat) )) ((f) (((((invert_permut) ) (n)) (f)) (m)))) (m))) (\lambda Hle : \forall (i:(nat) ). ((((le) ) (i)) (n)) -> (((le) ) (((((invert_permut) ) (n)) (f)) (i))) (n). (\lambda Hinj : (((injn) ) ((((invert_permut) ) (n)) (f))) (n). ((((((match_And_prop) (\forall (i:(nat) ). ((((le) ) (i)) (n)) -> (((le) ) ((f) (i))) (n))) ((((injn) ) (f)) (n))) ((((eq) ((nat) )) ((f) (((((invert_permut) ) (n)) (f)) (m)))) (m))) (\lambda lef : \forall (i:(nat) ). ((((le) ) (i)) (n)) -> (((le) ) ((f) (i))) (n). (\lambda injf : (((injn) ) (f)) (n). (((((((((injective_invert_permut) (f)) (n)) (permf)) ((f) (((((invert_permut) ) (n)) (f)) (m)))) (m)) (((lef) (((((invert_permut) ) (n)) (f)) (m))) (((Hle) (m)) (lemn)))) (lemn)) ((((((invert_permut_f) (f)) (n)) (((((invert_permut) ) (n)) (f)) (m))) (((Hle) (m)) (lemn))) (injf)))))) (permf))))) ((((permut_invert_permut) (f)) (n)) (permf)))).

import .bool
import .connectives
import .leibniz
import .logic
import .relations
axiom nat.nat : Type.
constant nat.O : (nat.nat) .
constant nat.S : ((nat.nat) ) -> (nat.nat) .
axiom nat.match_nat_prop : forall (return:((nat.nat) ) -> Prop) , ((return) ((nat.O) )) -> (forall (n:(nat.nat) ) , (return) (((nat.S) ) (n))) -> forall (z:(nat.nat) ) , (return) (z).
constant nat.match_nat_type : forall (return : Type) , (return) -> (((nat.nat) ) -> return) -> ((nat.nat) ) -> return.
axiom nat.axiom_match_nat_type_O : forall (return_type : Type) , forall (case_O:return_type) , forall (case_S:((nat.nat) ) -> return_type) , (((connectives.equal) (return_type)) (((((nat.match_nat_type) (return_type)) (case_O)) (case_S)) ((nat.O) ))) (case_O).
theorem nat.eq_match_nat_type_O : forall (return_type : Type) , forall (case_O:return_type) , forall (case_S:((nat.nat) ) -> return_type) , (((leibniz.leibniz) (return_type)) (((((nat.match_nat_type) (return_type)) (case_O)) (case_S)) ((nat.O) ))) (case_O) := fun (return_type : Type) , fun (case_O : return_type) , fun (case_S : ((nat.nat) ) -> return_type) , ((((@connectives.equal_leibniz) (return_type)) (((((nat.match_nat_type) (return_type)) (case_O)) (case_S)) ((nat.O) ))) (case_O)) ((((@nat.axiom_match_nat_type_O) (return_type)) (case_O)) (case_S)).
theorem nat.sym_eq_match_nat_type_O : forall (return_type : Type) , forall (case_O:return_type) , forall (case_S:((nat.nat) ) -> return_type) , (((leibniz.leibniz) (return_type)) (case_O)) (((((nat.match_nat_type) (return_type)) (case_O)) (case_S)) ((nat.O) )) := fun (return_type : Type) , fun (case_O : return_type) , fun (case_S : ((nat.nat) ) -> return_type) , ((((@leibniz.sym_leibniz) (return_type)) (((((nat.match_nat_type) (return_type)) (case_O)) (case_S)) ((nat.O) ))) (case_O)) ((((@nat.eq_match_nat_type_O) (return_type)) (case_O)) (case_S)).
axiom nat.axiom_match_nat_type_S : forall (return_type : Type) , forall (case_O:return_type) , forall (case_S:((nat.nat) ) -> return_type) , forall (n:(nat.nat) ) , (((connectives.equal) (return_type)) (((((nat.match_nat_type) (return_type)) (case_O)) (case_S)) (((nat.S) ) (n)))) ((case_S) (n)).
theorem nat.eq_match_nat_type_S : forall (return_type : Type) , forall (case_O:return_type) , forall (case_S:((nat.nat) ) -> return_type) , forall (n:(nat.nat) ) , (((leibniz.leibniz) (return_type)) (((((nat.match_nat_type) (return_type)) (case_O)) (case_S)) (((nat.S) ) (n)))) ((case_S) (n)) := fun (return_type : Type) , fun (case_O : return_type) , fun (case_S : ((nat.nat) ) -> return_type) , fun (n : (nat.nat) ) , ((((@connectives.equal_leibniz) (return_type)) (((((nat.match_nat_type) (return_type)) (case_O)) (case_S)) (((nat.S) ) (n)))) ((case_S) (n))) (((((@nat.axiom_match_nat_type_S) (return_type)) (case_O)) (case_S)) (n)).
theorem nat.sym_eq_match_nat_type_S : forall (return_type : Type) , forall (case_O:return_type) , forall (case_S:((nat.nat) ) -> return_type) , forall (n:(nat.nat) ) , (((leibniz.leibniz) (return_type)) ((case_S) (n))) (((((nat.match_nat_type) (return_type)) (case_O)) (case_S)) (((nat.S) ) (n))) := fun (return_type : Type) , fun (case_O : return_type) , fun (case_S : ((nat.nat) ) -> return_type) , fun (n : (nat.nat) ) , ((((@leibniz.sym_leibniz) (return_type)) (((((nat.match_nat_type) (return_type)) (case_O)) (case_S)) (((nat.S) ) (n)))) ((case_S) (n))) (((((@nat.eq_match_nat_type_S) (return_type)) (case_O)) (case_S)) (n)).
constant nat.filter_nat_type : forall (return : Type) , (((nat.nat) ) -> return) -> ((nat.nat) ) -> return.
axiom nat.axiom_filter_nat_type_O : forall (return_type : Type) , forall (return:((nat.nat) ) -> return_type) , (((connectives.equal) (return_type)) ((((nat.filter_nat_type) (return_type)) (return)) ((nat.O) ))) ((return) ((nat.O) )).
theorem nat.eq_filter_nat_type_O : forall (return_type : Type) , forall (return:((nat.nat) ) -> return_type) , (((leibniz.leibniz) (return_type)) ((((nat.filter_nat_type) (return_type)) (return)) ((nat.O) ))) ((return) ((nat.O) )) := fun (return_type : Type) , fun (return : ((nat.nat) ) -> return_type) , ((((@connectives.equal_leibniz) (return_type)) ((((nat.filter_nat_type) (return_type)) (return)) ((nat.O) ))) ((return) ((nat.O) ))) (((@nat.axiom_filter_nat_type_O) (return_type)) (return)).
theorem nat.sym_eq_filter_nat_type_O : forall (return_type : Type) , forall (return:((nat.nat) ) -> return_type) , (((leibniz.leibniz) (return_type)) ((return) ((nat.O) ))) ((((nat.filter_nat_type) (return_type)) (return)) ((nat.O) )) := fun (return_type : Type) , fun (return : ((nat.nat) ) -> return_type) , ((((@leibniz.sym_leibniz) (return_type)) ((((nat.filter_nat_type) (return_type)) (return)) ((nat.O) ))) ((return) ((nat.O) ))) (((@nat.eq_filter_nat_type_O) (return_type)) (return)).
axiom nat.axiom_filter_nat_type_S : forall (return_type : Type) , forall (return:((nat.nat) ) -> return_type) , forall (n:(nat.nat) ) , (((connectives.equal) (return_type)) ((((nat.filter_nat_type) (return_type)) (return)) (((nat.S) ) (n)))) ((return) (((nat.S) ) (n))).
theorem nat.eq_filter_nat_type_S : forall (return_type : Type) , forall (return:((nat.nat) ) -> return_type) , forall (n:(nat.nat) ) , (((leibniz.leibniz) (return_type)) ((((nat.filter_nat_type) (return_type)) (return)) (((nat.S) ) (n)))) ((return) (((nat.S) ) (n))) := fun (return_type : Type) , fun (return : ((nat.nat) ) -> return_type) , fun (n : (nat.nat) ) , ((((@connectives.equal_leibniz) (return_type)) ((((nat.filter_nat_type) (return_type)) (return)) (((nat.S) ) (n)))) ((return) (((nat.S) ) (n)))) ((((@nat.axiom_filter_nat_type_S) (return_type)) (return)) (n)).
theorem nat.sym_eq_filter_nat_type_S : forall (return_type : Type) , forall (return:((nat.nat) ) -> return_type) , forall (n:(nat.nat) ) , (((leibniz.leibniz) (return_type)) ((return) (((nat.S) ) (n)))) ((((nat.filter_nat_type) (return_type)) (return)) (((nat.S) ) (n))) := fun (return_type : Type) , fun (return : ((nat.nat) ) -> return_type) , fun (n : (nat.nat) ) , ((((@leibniz.sym_leibniz) (return_type)) ((((nat.filter_nat_type) (return_type)) (return)) (((nat.S) ) (n)))) ((return) (((nat.S) ) (n)))) ((((@nat.eq_filter_nat_type_S) (return_type)) (return)) (n)).
axiom nat.nat_ind : forall (Q:((nat.nat) ) -> Prop) , ((Q) ((nat.O) )) -> (forall (x:(nat.nat) ) , ((Q) (x)) -> (Q) (((nat.S) ) (x))) -> forall (x:(nat.nat) ) , (Q) (x).
noncomputable def nat.pred_ : ((nat.nat) ) -> (nat.nat)  := fun (n : (nat.nat) ) , ((((nat.match_nat_type) ((nat.nat) )) ((nat.O) )) (fun (p : (nat.nat) ) , p)) (n).
def nat.not_zero : ((nat.nat) ) -> Prop := fun (n : (nat.nat) ) , ((((nat.match_nat_type) (Prop)) ((connectives.False) )) (fun (p : (nat.nat) ) , (connectives.True) )) (n).
constant nat.le_ : ((nat.nat) ) -> ((nat.nat) ) -> Prop.
axiom nat.le_n : forall (n:(nat.nat) ) , (((nat.le_) ) (n)) (n).
axiom nat.le_S : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , ((((nat.le_) ) (n)) (m)) -> (((nat.le_) ) (n)) (((nat.S) ) (m)).
axiom nat.match_le_prop : forall (n:(nat.nat) ) , forall (return:((nat.nat) ) -> Prop) , ((return) (n)) -> (forall (m:(nat.nat) ) , (return) (((nat.S) ) (m))) -> forall (m:(nat.nat) ) , ((((nat.le_) ) (n)) (m)) -> (return) (m).
axiom nat.le_ind : forall (n:(nat.nat) ) , forall (Q:((nat.nat) ) -> Prop) , ((Q) (n)) -> (forall (m:(nat.nat) ) , ((((nat.le_) ) (n)) (m)) -> ((Q) (m)) -> (Q) (((nat.S) ) (m))) -> forall (m:(nat.nat) ) , ((((nat.le_) ) (n)) (m)) -> (Q) (m).
def nat.lt_ : ((nat.nat) ) -> ((nat.nat) ) -> Prop := fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , (((nat.le_) ) (((nat.S) ) (n))) (m).
constant nat.plus : ((nat.nat) ) -> ((nat.nat) ) -> (nat.nat) .
constant nat.plus_body : ((nat.nat) ) -> ((nat.nat) ) -> (nat.nat) .
axiom nat.axiom_plus : forall (n:(nat.nat) ) , (((connectives.equal) (((nat.nat) ) -> (nat.nat) )) (((nat.plus) ) (n))) ((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (n)).
theorem nat.eq_plus : forall (n:(nat.nat) ) , (((leibniz.leibniz) (((nat.nat) ) -> (nat.nat) )) (((nat.plus) ) (n))) ((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (n)) := fun (n : (nat.nat) ) , ((((@connectives.equal_leibniz) (((nat.nat) ) -> (nat.nat) )) (((nat.plus) ) (n))) ((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (n))) ((@nat.axiom_plus) (n)).
theorem nat.sym_eq_plus : forall (n:(nat.nat) ) , (((leibniz.leibniz) (((nat.nat) ) -> (nat.nat) )) ((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (n))) (((nat.plus) ) (n)) := fun (n : (nat.nat) ) , ((((@leibniz.sym_leibniz) (((nat.nat) ) -> (nat.nat) )) (((nat.plus) ) (n))) ((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (n))) ((@nat.eq_plus) (n)).
axiom nat.axiom_plus_body_O : (((connectives.equal) (((nat.nat) ) -> (nat.nat) )) (((nat.plus_body) ) ((nat.O) ))) (fun (m : (nat.nat) ) , m).
theorem nat.eq_plus_body_O : (((leibniz.leibniz) (((nat.nat) ) -> (nat.nat) )) (((nat.plus_body) ) ((nat.O) ))) (fun (m : (nat.nat) ) , m) := ((((@connectives.equal_leibniz) (((nat.nat) ) -> (nat.nat) )) (((nat.plus_body) ) ((nat.O) ))) (fun (m : (nat.nat) ) , m)) (@nat.axiom_plus_body_O).
theorem nat.sym_eq_plus_body_O : (((leibniz.leibniz) (((nat.nat) ) -> (nat.nat) )) (fun (m : (nat.nat) ) , m)) (((nat.plus_body) ) ((nat.O) )) := ((((@leibniz.sym_leibniz) (((nat.nat) ) -> (nat.nat) )) (((nat.plus_body) ) ((nat.O) ))) (fun (m : (nat.nat) ) , m)) (@nat.eq_plus_body_O).
axiom nat.axiom_plus_body_S : forall (n:(nat.nat) ) , (((connectives.equal) (((nat.nat) ) -> (nat.nat) )) (((nat.plus_body) ) (((nat.S) ) (n)))) (fun (m : (nat.nat) ) , ((nat.S) ) ((((nat.plus) ) (n)) (m))).
theorem nat.eq_plus_body_S : forall (n:(nat.nat) ) , (((leibniz.leibniz) (((nat.nat) ) -> (nat.nat) )) (((nat.plus_body) ) (((nat.S) ) (n)))) (fun (m : (nat.nat) ) , ((nat.S) ) ((((nat.plus) ) (n)) (m))) := fun (n : (nat.nat) ) , ((((@connectives.equal_leibniz) (((nat.nat) ) -> (nat.nat) )) (((nat.plus_body) ) (((nat.S) ) (n)))) (fun (m : (nat.nat) ) , ((nat.S) ) ((((nat.plus) ) (n)) (m)))) ((@nat.axiom_plus_body_S) (n)).
theorem nat.sym_eq_plus_body_S : forall (n:(nat.nat) ) , (((leibniz.leibniz) (((nat.nat) ) -> (nat.nat) )) (fun (m : (nat.nat) ) , ((nat.S) ) ((((nat.plus) ) (n)) (m)))) (((nat.plus_body) ) (((nat.S) ) (n))) := fun (n : (nat.nat) ) , ((((@leibniz.sym_leibniz) (((nat.nat) ) -> (nat.nat) )) (((nat.plus_body) ) (((nat.S) ) (n)))) (fun (m : (nat.nat) ) , ((nat.S) ) ((((nat.plus) ) (n)) (m)))) ((@nat.eq_plus_body_S) (n)).
constant nat.times : ((nat.nat) ) -> ((nat.nat) ) -> (nat.nat) .
constant nat.times_body : ((nat.nat) ) -> ((nat.nat) ) -> (nat.nat) .
axiom nat.axiom_times : forall (n:(nat.nat) ) , (((connectives.equal) (((nat.nat) ) -> (nat.nat) )) (((nat.times) ) (n))) ((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) (n)).
theorem nat.eq_times : forall (n:(nat.nat) ) , (((leibniz.leibniz) (((nat.nat) ) -> (nat.nat) )) (((nat.times) ) (n))) ((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) (n)) := fun (n : (nat.nat) ) , ((((@connectives.equal_leibniz) (((nat.nat) ) -> (nat.nat) )) (((nat.times) ) (n))) ((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) (n))) ((@nat.axiom_times) (n)).
theorem nat.sym_eq_times : forall (n:(nat.nat) ) , (((leibniz.leibniz) (((nat.nat) ) -> (nat.nat) )) ((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) (n))) (((nat.times) ) (n)) := fun (n : (nat.nat) ) , ((((@leibniz.sym_leibniz) (((nat.nat) ) -> (nat.nat) )) (((nat.times) ) (n))) ((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) (n))) ((@nat.eq_times) (n)).
axiom nat.axiom_times_body_O : (((connectives.equal) (((nat.nat) ) -> (nat.nat) )) (((nat.times_body) ) ((nat.O) ))) (fun (m : (nat.nat) ) , (nat.O) ).
theorem nat.eq_times_body_O : (((leibniz.leibniz) (((nat.nat) ) -> (nat.nat) )) (((nat.times_body) ) ((nat.O) ))) (fun (m : (nat.nat) ) , (nat.O) ) := ((((@connectives.equal_leibniz) (((nat.nat) ) -> (nat.nat) )) (((nat.times_body) ) ((nat.O) ))) (fun (m : (nat.nat) ) , (nat.O) )) (@nat.axiom_times_body_O).
theorem nat.sym_eq_times_body_O : (((leibniz.leibniz) (((nat.nat) ) -> (nat.nat) )) (fun (m : (nat.nat) ) , (nat.O) )) (((nat.times_body) ) ((nat.O) )) := ((((@leibniz.sym_leibniz) (((nat.nat) ) -> (nat.nat) )) (((nat.times_body) ) ((nat.O) ))) (fun (m : (nat.nat) ) , (nat.O) )) (@nat.eq_times_body_O).
axiom nat.axiom_times_body_S : forall (n:(nat.nat) ) , (((connectives.equal) (((nat.nat) ) -> (nat.nat) )) (((nat.times_body) ) (((nat.S) ) (n)))) (fun (m : (nat.nat) ) , (((nat.plus) ) (m)) ((((nat.times) ) (n)) (m))).
theorem nat.eq_times_body_S : forall (n:(nat.nat) ) , (((leibniz.leibniz) (((nat.nat) ) -> (nat.nat) )) (((nat.times_body) ) (((nat.S) ) (n)))) (fun (m : (nat.nat) ) , (((nat.plus) ) (m)) ((((nat.times) ) (n)) (m))) := fun (n : (nat.nat) ) , ((((@connectives.equal_leibniz) (((nat.nat) ) -> (nat.nat) )) (((nat.times_body) ) (((nat.S) ) (n)))) (fun (m : (nat.nat) ) , (((nat.plus) ) (m)) ((((nat.times) ) (n)) (m)))) ((@nat.axiom_times_body_S) (n)).
theorem nat.sym_eq_times_body_S : forall (n:(nat.nat) ) , (((leibniz.leibniz) (((nat.nat) ) -> (nat.nat) )) (fun (m : (nat.nat) ) , (((nat.plus) ) (m)) ((((nat.times) ) (n)) (m)))) (((nat.times_body) ) (((nat.S) ) (n))) := fun (n : (nat.nat) ) , ((((@leibniz.sym_leibniz) (((nat.nat) ) -> (nat.nat) )) (((nat.times_body) ) (((nat.S) ) (n)))) (fun (m : (nat.nat) ) , (((nat.plus) ) (m)) ((((nat.times) ) (n)) (m)))) ((@nat.eq_times_body_S) (n)).
constant nat.minus : ((nat.nat) ) -> ((nat.nat) ) -> (nat.nat) .
constant nat.minus_body : ((nat.nat) ) -> ((nat.nat) ) -> (nat.nat) .
axiom nat.axiom_minus : forall (n:(nat.nat) ) , (((connectives.equal) (((nat.nat) ) -> (nat.nat) )) (((nat.minus) ) (n))) ((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.minus_body) )) (n)).
theorem nat.eq_minus : forall (n:(nat.nat) ) , (((leibniz.leibniz) (((nat.nat) ) -> (nat.nat) )) (((nat.minus) ) (n))) ((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.minus_body) )) (n)) := fun (n : (nat.nat) ) , ((((@connectives.equal_leibniz) (((nat.nat) ) -> (nat.nat) )) (((nat.minus) ) (n))) ((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.minus_body) )) (n))) ((@nat.axiom_minus) (n)).
theorem nat.sym_eq_minus : forall (n:(nat.nat) ) , (((leibniz.leibniz) (((nat.nat) ) -> (nat.nat) )) ((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.minus_body) )) (n))) (((nat.minus) ) (n)) := fun (n : (nat.nat) ) , ((((@leibniz.sym_leibniz) (((nat.nat) ) -> (nat.nat) )) (((nat.minus) ) (n))) ((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.minus_body) )) (n))) ((@nat.eq_minus) (n)).
axiom nat.axiom_minus_body_O : (((connectives.equal) (((nat.nat) ) -> (nat.nat) )) (((nat.minus_body) ) ((nat.O) ))) (fun (m : (nat.nat) ) , (nat.O) ).
theorem nat.eq_minus_body_O : (((leibniz.leibniz) (((nat.nat) ) -> (nat.nat) )) (((nat.minus_body) ) ((nat.O) ))) (fun (m : (nat.nat) ) , (nat.O) ) := ((((@connectives.equal_leibniz) (((nat.nat) ) -> (nat.nat) )) (((nat.minus_body) ) ((nat.O) ))) (fun (m : (nat.nat) ) , (nat.O) )) (@nat.axiom_minus_body_O).
theorem nat.sym_eq_minus_body_O : (((leibniz.leibniz) (((nat.nat) ) -> (nat.nat) )) (fun (m : (nat.nat) ) , (nat.O) )) (((nat.minus_body) ) ((nat.O) )) := ((((@leibniz.sym_leibniz) (((nat.nat) ) -> (nat.nat) )) (((nat.minus_body) ) ((nat.O) ))) (fun (m : (nat.nat) ) , (nat.O) )) (@nat.eq_minus_body_O).
axiom nat.axiom_minus_body_S : forall (n:(nat.nat) ) , (((connectives.equal) (((nat.nat) ) -> (nat.nat) )) (((nat.minus_body) ) (((nat.S) ) (n)))) (fun (m : (nat.nat) ) , ((((nat.match_nat_type) ((nat.nat) )) (((nat.S) ) (n))) (fun (q : (nat.nat) ) , (((nat.minus) ) (n)) (q))) (m)).
theorem nat.eq_minus_body_S : forall (n:(nat.nat) ) , (((leibniz.leibniz) (((nat.nat) ) -> (nat.nat) )) (((nat.minus_body) ) (((nat.S) ) (n)))) (fun (m : (nat.nat) ) , ((((nat.match_nat_type) ((nat.nat) )) (((nat.S) ) (n))) (fun (q : (nat.nat) ) , (((nat.minus) ) (n)) (q))) (m)) := fun (n : (nat.nat) ) , ((((@connectives.equal_leibniz) (((nat.nat) ) -> (nat.nat) )) (((nat.minus_body) ) (((nat.S) ) (n)))) (fun (m : (nat.nat) ) , ((((nat.match_nat_type) ((nat.nat) )) (((nat.S) ) (n))) (fun (q : (nat.nat) ) , (((nat.minus) ) (n)) (q))) (m))) ((@nat.axiom_minus_body_S) (n)).
theorem nat.sym_eq_minus_body_S : forall (n:(nat.nat) ) , (((leibniz.leibniz) (((nat.nat) ) -> (nat.nat) )) (fun (m : (nat.nat) ) , ((((nat.match_nat_type) ((nat.nat) )) (((nat.S) ) (n))) (fun (q : (nat.nat) ) , (((nat.minus) ) (n)) (q))) (m))) (((nat.minus_body) ) (((nat.S) ) (n))) := fun (n : (nat.nat) ) , ((((@leibniz.sym_leibniz) (((nat.nat) ) -> (nat.nat) )) (((nat.minus_body) ) (((nat.S) ) (n)))) (fun (m : (nat.nat) ) , ((((nat.match_nat_type) ((nat.nat) )) (((nat.S) ) (n))) (fun (q : (nat.nat) ) , (((nat.minus) ) (n)) (q))) (m))) ((@nat.eq_minus_body_S) (n)).
theorem nat.nat_case : forall (n:(nat.nat) ) , forall (P:((nat.nat) ) -> Prop) , (((((logic.eq_) ((nat.nat) )) (n)) ((nat.O) )) -> (P) ((nat.O) )) -> (forall (m:(nat.nat) ) , ((((logic.eq_) ((nat.nat) )) (n)) (((nat.S) ) (m))) -> (P) (((nat.S) ) (m))) -> (P) (n) := fun (n : (nat.nat) ) , fun (P : ((nat.nat) ) -> Prop) , ((((@nat.nat_ind) (fun (_x_365 : (nat.nat) ) , (((((logic.eq_) ((nat.nat) )) (_x_365)) ((nat.O) )) -> (P) ((nat.O) )) -> (forall (m:(nat.nat) ) , ((((logic.eq_) ((nat.nat) )) (_x_365)) (((nat.S) ) (m))) -> (P) (((nat.S) ) (m))) -> (P) (_x_365))) (fun (auto : ((((logic.eq_) ((nat.nat) )) ((nat.O) )) ((nat.O) )) -> (P) ((nat.O) )) , (fun (auto' : forall (m:(nat.nat) ) , ((((logic.eq_) ((nat.nat) )) ((nat.O) )) (((nat.S) ) (m))) -> (P) (((nat.S) ) (m))) , ((auto) (((@logic.refl_) ((nat.nat) )) ((nat.O) )))))) (fun (x_366 : (nat.nat) ) , fun (_x_368 : (((((logic.eq_) ((nat.nat) )) (x_366)) ((nat.O) )) -> (P) ((nat.O) )) -> (forall (m:(nat.nat) ) , ((((logic.eq_) ((nat.nat) )) (x_366)) (((nat.S) ) (m))) -> (P) (((nat.S) ) (m))) -> (P) (x_366)) , (fun (auto : ((((logic.eq_) ((nat.nat) )) (((nat.S) ) (x_366))) ((nat.O) )) -> (P) ((nat.O) )) , (fun (auto' : forall (m:(nat.nat) ) , ((((logic.eq_) ((nat.nat) )) (((nat.S) ) (x_366))) (((nat.S) ) (m))) -> (P) (((nat.S) ) (m))) , (((auto') (x_366)) (((@logic.refl_) ((nat.nat) )) (((nat.S) ) (x_366)))))))) (n).
theorem nat.nat_elim2 : forall (R:((nat.nat) ) -> ((nat.nat) ) -> Prop) , (forall (n:(nat.nat) ) , ((R) ((nat.O) )) (n)) -> (forall (n:(nat.nat) ) , ((R) (((nat.S) ) (n))) ((nat.O) )) -> (forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , (((R) (n)) (m)) -> ((R) (((nat.S) ) (n))) (((nat.S) ) (m))) -> forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , ((R) (n)) (m) := fun (R : ((nat.nat) ) -> ((nat.nat) ) -> Prop) , fun (ROn : forall (n:(nat.nat) ) , ((R) ((nat.O) )) (n)) , (fun (RSO : forall (n:(nat.nat) ) , ((R) (((nat.S) ) (n))) ((nat.O) )) , (fun (RSS : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , (((R) (n)) (m)) -> ((R) (((nat.S) ) (n))) (((nat.S) ) (m))) , (fun (n : (nat.nat) ) , ((((@nat.nat_ind) (fun (_x_365 : (nat.nat) ) , forall (m:(nat.nat) ) , ((R) (_x_365)) (m))) (fun (m : (nat.nat) ) , (ROn) (m))) (fun (n0 : (nat.nat) ) , fun (Rn0m : forall (m:(nat.nat) ) , ((R) (n0)) (m)) , (fun (m : (nat.nat) ) , ((((@nat.match_nat_prop) (fun (__ : (nat.nat) ) , ((R) (((nat.S) ) (n0))) (__))) ((RSO) (n0))) (fun (auto : (nat.nat) ) , (((RSS) (n0)) (auto)) ((Rn0m) (auto)))) (m)))) (n)))).
theorem nat.le_gen : forall (P:((nat.nat) ) -> Prop) , forall (n:(nat.nat) ) , (forall (i:(nat.nat) ) , ((((nat.le_) ) (i)) (n)) -> (P) (i)) -> (P) (n) := fun (P : ((nat.nat) ) -> Prop) , fun (n : (nat.nat) ) , fun (auto : forall (i:(nat.nat) ) , ((((nat.le_) ) (i)) (n)) -> (P) (i)) , (((auto) (n)) ((@nat.le_n) (n))).
theorem nat.pred_Sn : forall (n:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) (n)) (((nat.pred_) ) (((nat.S) ) (n))) := fun (n : (nat.nat) ) , ((((((@nat.sym_eq_match_nat_type_S) ((nat.nat) )) ((nat.O) )) (fun (p : (nat.nat) ) , p)) (n)) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (n)) (y))) (((@logic.refl_) ((nat.nat) )) (n)).
theorem nat.injective_S : ((relations.injective) ((nat.nat) ) ((nat.nat) )) ((nat.S) ) := fun (x : (nat.nat) ) , fun (y : (nat.nat) ) , fun (auto : (((logic.eq_) ((nat.nat) )) (((nat.S) ) (x))) (((nat.S) ) (y))) , (((((((@logic.rewrite_l) ((nat.nat) )) (y)) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (__)) (y))) (((@logic.refl_) ((nat.nat) )) (y))) (x)) (((((((@logic.rewrite_r) ((nat.nat) )) (((nat.pred_) ) (((nat.S) ) (x)))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (y)) (__))) (((((((@logic.rewrite_r) ((nat.nat) )) (((nat.S) ) (y))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (y)) (((nat.pred_) ) (__)))) ((@nat.pred_Sn) (y))) (((nat.S) ) (x))) (auto))) (x)) ((@nat.pred_Sn) (x)))).
theorem nat.S_pred : forall (n:(nat.nat) ) , ((((nat.lt_) ) ((nat.O) )) (n)) -> (((logic.eq_) ((nat.nat) )) (((nat.S) ) (((nat.pred_) ) (n)))) (n) := fun (n : (nat.nat) ) , fun (posn : (((nat.lt_) ) ((nat.O) )) (n)) , (((((((@nat.match_le_prop) (((nat.S) ) ((nat.O) ))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((nat.S) ) (((nat.pred_) ) (__)))) (__))) (((((((@logic.rewrite_l) ((nat.nat) )) ((nat.O) )) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((nat.S) ) (__))) (((nat.S) ) ((nat.O) )))) (((@logic.refl_) ((nat.nat) )) (((nat.S) ) ((nat.O) )))) (((nat.pred_) ) (((nat.S) ) ((nat.O) )))) ((@nat.pred_Sn) ((nat.O) )))) (fun (m : (nat.nat) ) , ((((((@logic.rewrite_l) ((nat.nat) )) (m)) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((nat.S) ) (__))) (((nat.S) ) (m)))) (((@logic.refl_) ((nat.nat) )) (((nat.S) ) (m)))) (((nat.pred_) ) (((nat.S) ) (m)))) ((@nat.pred_Sn) (m)))) (n)) (posn)).
theorem nat.plus_O_n : forall (n:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) (n)) ((((nat.plus) ) ((nat.O) )) (n)) := fun (n : (nat.nat) ) , (((@nat.sym_eq_plus) ((nat.O) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (n)) ((y) (n)))) (((((@nat.sym_eq_filter_nat_type_O) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (n)) ((y) (n)))) (((@nat.sym_eq_plus_body_O) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (n)) ((y) (n)))) (((@logic.refl_) ((nat.nat) )) (n)))).
theorem nat.plus_n_O : forall (n:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) (n)) ((((nat.plus) ) (n)) ((nat.O) )) := fun (n : (nat.nat) ) , ((((@nat.nat_ind) (fun (_x_365 : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (_x_365)) ((((nat.plus) ) (_x_365)) ((nat.O) )))) ((((@nat.sym_eq_plus) ((nat.O) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((nat.O) )) ((y) ((nat.O) )))) (((((@nat.sym_eq_filter_nat_type_O) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((nat.O) )) ((y) ((nat.O) )))) (((@nat.sym_eq_plus_body_O) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((nat.O) )) ((y) ((nat.O) )))) (((@logic.refl_) ((nat.nat) )) ((nat.O) )))))) (fun (x_366 : (nat.nat) ) , fun (_x_368 : (((logic.eq_) ((nat.nat) )) (x_366)) ((((nat.plus) ) (x_366)) ((nat.O) ))) , ((((@nat.sym_eq_plus) (((nat.S) ) (x_366))) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((nat.S) ) (x_366))) ((y) ((nat.O) )))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (x_366)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((nat.S) ) (x_366))) ((y) ((nat.O) )))) ((((@nat.sym_eq_plus_body_S) (x_366)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((nat.S) ) (x_366))) ((y) ((nat.O) )))) (((((((@logic.rewrite_l) ((nat.nat) )) (x_366)) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((nat.S) ) (x_366))) (((nat.S) ) (__)))) (((@logic.refl_) ((nat.nat) )) (((nat.S) ) (x_366)))) ((((nat.plus) ) (x_366)) ((nat.O) ))) (_x_368))))))) (n).
theorem nat.plus_n_Sm : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((nat.S) ) ((((nat.plus) ) (n)) (m)))) ((((nat.plus) ) (n)) (((nat.S) ) (m))) := fun (n : (nat.nat) ) , ((((@nat.nat_ind) (fun (_x_365 : (nat.nat) ) , forall (m:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((nat.S) ) ((((nat.plus) ) (_x_365)) (m)))) ((((nat.plus) ) (_x_365)) (((nat.S) ) (m))))) (fun (m : (nat.nat) ) , (((@nat.sym_eq_plus) ((nat.O) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((nat.S) ) ((y) (m)))) ((((nat.plus) ) ((nat.O) )) (((nat.S) ) (m))))) ((((@nat.sym_eq_plus) ((nat.O) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((nat.S) ) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) ((nat.O) )) (m)))) ((y) (((nat.S) ) (m))))) (((((@nat.sym_eq_filter_nat_type_O) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((nat.S) ) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) ((nat.O) )) (m)))) ((y) (((nat.S) ) (m))))) (((((@nat.sym_eq_filter_nat_type_O) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((nat.S) ) ((y) (m)))) ((((nat.plus_body) ) ((nat.O) )) (((nat.S) ) (m))))) (((@nat.sym_eq_plus_body_O) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((nat.S) ) ((y) (m)))) ((((nat.plus_body) ) ((nat.O) )) (((nat.S) ) (m))))) (((@nat.sym_eq_plus_body_O) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((nat.S) ) (m))) ((y) (((nat.S) ) (m))))) (((@logic.refl_) ((nat.nat) )) (((nat.S) ) (m)))))))))) (fun (x_366 : (nat.nat) ) , fun (_x_368 : forall (m:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((nat.S) ) ((((nat.plus) ) (x_366)) (m)))) ((((nat.plus) ) (x_366)) (((nat.S) ) (m)))) , (fun (m : (nat.nat) ) , (((@nat.sym_eq_plus) (((nat.S) ) (x_366))) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((nat.S) ) ((y) (m)))) ((((nat.plus) ) (((nat.S) ) (x_366))) (((nat.S) ) (m))))) ((((@nat.sym_eq_plus) (((nat.S) ) (x_366))) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((nat.S) ) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (((nat.S) ) (x_366))) (m)))) ((y) (((nat.S) ) (m))))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (x_366)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((nat.S) ) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (((nat.S) ) (x_366))) (m)))) ((y) (((nat.S) ) (m))))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (x_366)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((nat.S) ) ((y) (m)))) ((((nat.plus_body) ) (((nat.S) ) (x_366))) (((nat.S) ) (m))))) ((((@nat.sym_eq_plus_body_S) (x_366)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((nat.S) ) ((y) (m)))) ((((nat.plus_body) ) (((nat.S) ) (x_366))) (((nat.S) ) (m))))) ((((@nat.sym_eq_plus_body_S) (x_366)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((nat.S) ) (((nat.S) ) ((((nat.plus) ) (x_366)) (m))))) ((y) (((nat.S) ) (m))))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (x_366)) (((nat.S) ) (m)))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((nat.S) ) (__))) (((nat.S) ) ((((nat.plus) ) (x_366)) (((nat.S) ) (m)))))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (x_366)) (((nat.S) ) (((nat.S) ) (m))))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (__)) (((nat.S) ) ((((nat.plus) ) (x_366)) (((nat.S) ) (m)))))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (x_366)) (((nat.S) ) (((nat.S) ) (m))))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (x_366)) (((nat.S) ) (((nat.S) ) (m))))) (__))) (((@logic.refl_) ((nat.nat) )) ((((nat.plus) ) (x_366)) (((nat.S) ) (((nat.S) ) (m)))))) (((nat.S) ) ((((nat.plus) ) (x_366)) (((nat.S) ) (m))))) ((_x_368) (((nat.S) ) (m))))) (((nat.S) ) ((((nat.plus) ) (x_366)) (((nat.S) ) (m))))) ((_x_368) (((nat.S) ) (m))))) (((nat.S) ) ((((nat.plus) ) (x_366)) (m)))) ((_x_368) (m))))))))))) (n).
theorem nat.commutative_plus : ((relations.commutative) ((nat.nat) )) ((nat.plus) ) := fun (n : (nat.nat) ) , ((((@nat.nat_ind) (fun (_x_365 : (nat.nat) ) , forall (y:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (_x_365)) (y))) ((((nat.plus) ) (y)) (_x_365)))) (fun (y : (nat.nat) ) , (((@nat.sym_eq_plus) ((nat.O) )) (fun (z : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((z) (y))) ((((nat.plus) ) (y)) ((nat.O) )))) (((((@nat.sym_eq_filter_nat_type_O) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (fun (z : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((z) (y))) ((((nat.plus) ) (y)) ((nat.O) )))) (((@nat.sym_eq_plus_body_O) (fun (z : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((z) (y))) ((((nat.plus) ) (y)) ((nat.O) )))) (((((((@logic.rewrite_l) ((nat.nat) )) (y)) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (y)) (__))) (((@logic.refl_) ((nat.nat) )) (y))) ((((nat.plus) ) (y)) ((nat.O) ))) ((@nat.plus_n_O) (y))))))) (fun (x_366 : (nat.nat) ) , fun (_x_368 : forall (y:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (x_366)) (y))) ((((nat.plus) ) (y)) (x_366))) , (fun (y : (nat.nat) ) , (((@nat.sym_eq_plus) (((nat.S) ) (x_366))) (fun (z : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((z) (y))) ((((nat.plus) ) (y)) (((nat.S) ) (x_366))))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (x_366)) (fun (z : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((z) (y))) ((((nat.plus) ) (y)) (((nat.S) ) (x_366))))) ((((@nat.sym_eq_plus_body_S) (x_366)) (fun (z : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((z) (y))) ((((nat.plus) ) (y)) (((nat.S) ) (x_366))))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (x_366)) (((nat.S) ) (y)))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (__)) ((((nat.plus) ) (y)) (((nat.S) ) (x_366))))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (y)) (((nat.S) ) (x_366)))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (__)) ((((nat.plus) ) (y)) (((nat.S) ) (x_366))))) (((@logic.refl_) ((nat.nat) )) ((((nat.plus) ) (y)) (((nat.S) ) (x_366))))) ((((nat.plus) ) (x_366)) (((nat.S) ) (y)))) (((((((@logic.rewrite_l) ((nat.nat) )) (((nat.S) ) ((((nat.plus) ) (x_366)) (y)))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (__)) ((((nat.plus) ) (y)) (((nat.S) ) (x_366))))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (y)) (x_366))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((nat.S) ) (__))) ((((nat.plus) ) (y)) (((nat.S) ) (x_366))))) (((@nat.plus_n_Sm) (y)) (x_366))) ((((nat.plus) ) (x_366)) (y))) ((_x_368) (y)))) ((((nat.plus) ) (x_366)) (((nat.S) ) (y)))) (((@nat.plus_n_Sm) (x_366)) (y))))) (((nat.S) ) ((((nat.plus) ) (x_366)) (y)))) (((@nat.plus_n_Sm) (x_366)) (y)))))))) (n).
theorem nat.associative_plus : ((relations.associative) ((nat.nat) )) ((nat.plus) ) := fun (n : (nat.nat) ) , ((((@nat.nat_ind) (fun (_x_365 : (nat.nat) ) , forall (y:(nat.nat) ) , forall (z:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) ((((nat.plus) ) (_x_365)) (y))) (z))) ((((nat.plus) ) (_x_365)) ((((nat.plus) ) (y)) (z))))) (fun (y : (nat.nat) ) , fun (z : (nat.nat) ) , (((@nat.sym_eq_plus) ((nat.O) )) (fun (x : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) ((((nat.plus) ) ((nat.O) )) (y))) (z))) ((x) ((((nat.plus) ) (y)) (z))))) ((((@nat.sym_eq_plus) ((nat.O) )) (fun (x : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) ((x) (y))) (z))) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) ((nat.O) )) ((((nat.plus) ) (y)) (z))))) (((((@nat.sym_eq_filter_nat_type_O) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (fun (x : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) ((x) (y))) (z))) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) ((nat.O) )) ((((nat.plus) ) (y)) (z))))) (((((@nat.sym_eq_filter_nat_type_O) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (fun (x : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) ((((nat.plus_body) ) ((nat.O) )) (y))) (z))) ((x) ((((nat.plus) ) (y)) (z))))) (((@nat.sym_eq_plus_body_O) (fun (x : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) ((((nat.plus_body) ) ((nat.O) )) (y))) (z))) ((x) ((((nat.plus) ) (y)) (z))))) (((@nat.sym_eq_plus_body_O) (fun (x : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) ((x) (y))) (z))) ((((nat.plus) ) (y)) (z)))) (((@logic.refl_) ((nat.nat) )) ((((nat.plus) ) (y)) (z)))))))))) (fun (x_366 : (nat.nat) ) , fun (_x_368 : forall (y:(nat.nat) ) , forall (z:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) ((((nat.plus) ) (x_366)) (y))) (z))) ((((nat.plus) ) (x_366)) ((((nat.plus) ) (y)) (z)))) , (fun (y : (nat.nat) ) , fun (z : (nat.nat) ) , (((@nat.sym_eq_plus) (((nat.S) ) (x_366))) (fun (x : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) ((((nat.plus) ) (((nat.S) ) (x_366))) (y))) (z))) ((x) ((((nat.plus) ) (y)) (z))))) ((((@nat.sym_eq_plus) (((nat.S) ) (x_366))) (fun (x : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) ((x) (y))) (z))) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (((nat.S) ) (x_366))) ((((nat.plus) ) (y)) (z))))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (x_366)) (fun (x : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) ((x) (y))) (z))) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (((nat.S) ) (x_366))) ((((nat.plus) ) (y)) (z))))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (x_366)) (fun (x : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) ((((nat.plus_body) ) (((nat.S) ) (x_366))) (y))) (z))) ((x) ((((nat.plus) ) (y)) (z))))) ((((@nat.sym_eq_plus_body_S) (x_366)) (fun (x : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) ((((nat.plus_body) ) (((nat.S) ) (x_366))) (y))) (z))) ((x) ((((nat.plus) ) (y)) (z))))) ((((@nat.sym_eq_plus_body_S) (x_366)) (fun (x : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) ((x) (y))) (z))) (((nat.S) ) ((((nat.plus) ) (x_366)) ((((nat.plus) ) (y)) (z)))))) ((((@nat.sym_eq_plus) (((nat.S) ) ((((nat.plus) ) (x_366)) (y)))) (fun (x : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((x) (z))) (((nat.S) ) ((((nat.plus) ) (x_366)) ((((nat.plus) ) (y)) (z)))))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) ((((nat.plus) ) (x_366)) (y))) (fun (x : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((x) (z))) (((nat.S) ) ((((nat.plus) ) (x_366)) ((((nat.plus) ) (y)) (z)))))) ((((@nat.sym_eq_plus_body_S) ((((nat.plus) ) (x_366)) (y))) (fun (x : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((x) (z))) (((nat.S) ) ((((nat.plus) ) (x_366)) ((((nat.plus) ) (y)) (z)))))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (x_366)) ((((nat.plus) ) (y)) (z)))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((nat.S) ) (__))) (((nat.S) ) ((((nat.plus) ) (x_366)) ((((nat.plus) ) (y)) (z)))))) (((@logic.refl_) ((nat.nat) )) (((nat.S) ) ((((nat.plus) ) (x_366)) ((((nat.plus) ) (y)) (z)))))) ((((nat.plus) ) ((((nat.plus) ) (x_366)) (y))) (z))) (((_x_368) (y)) (z)))))))))))))) (n).
theorem nat.assoc_plus1 : forall (a:(nat.nat) ) , forall (b:(nat.nat) ) , forall (c:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (c)) ((((nat.plus) ) (b)) (a)))) ((((nat.plus) ) ((((nat.plus) ) (b)) (c))) (a)) := fun (a : (nat.nat) ) , fun (b : (nat.nat) ) , fun (c : (nat.nat) ) , ((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (a)) (b))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (c)) (__))) ((((nat.plus) ) ((((nat.plus) ) (b)) (c))) (a)))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (a)) ((((nat.plus) ) (b)) (c)))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (c)) ((((nat.plus) ) (a)) (b)))) (__))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (a)) ((((nat.plus) ) (b)) (c)))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (__)) ((((nat.plus) ) (a)) ((((nat.plus) ) (b)) (c))))) (((@logic.refl_) ((nat.nat) )) ((((nat.plus) ) (a)) ((((nat.plus) ) (b)) (c))))) ((((nat.plus) ) (c)) ((((nat.plus) ) (a)) (b)))) (((((((@logic.rewrite_l) ((nat.nat) )) ((((nat.plus) ) ((((nat.plus) ) (a)) (b))) (c))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (c)) ((((nat.plus) ) (a)) (b)))) (__))) (((@nat.commutative_plus) (c)) ((((nat.plus) ) (a)) (b)))) ((((nat.plus) ) (a)) ((((nat.plus) ) (b)) (c)))) ((((@nat.associative_plus) (a)) (b)) (c))))) ((((nat.plus) ) ((((nat.plus) ) (b)) (c))) (a))) (((@nat.commutative_plus) ((((nat.plus) ) (b)) (c))) (a)))) ((((nat.plus) ) (b)) (a))) (((@nat.commutative_plus) (b)) (a)).
theorem nat.injective_plus_r : forall (n:(nat.nat) ) , ((relations.injective) ((nat.nat) ) ((nat.nat) )) (fun (m : (nat.nat) ) , (((nat.plus) ) (n)) (m)) := fun (n : (nat.nat) ) , ((((@nat.nat_ind) (fun (_x_365 : (nat.nat) ) , ((relations.injective) ((nat.nat) ) ((nat.nat) )) (fun (m : (nat.nat) ) , (((nat.plus) ) (_x_365)) (m)))) ((((@nat.sym_eq_plus) ((nat.O) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((relations.injective) ((nat.nat) ) ((nat.nat) )) (fun (m : (nat.nat) ) , (y) (m)))) (((((@nat.sym_eq_filter_nat_type_O) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((relations.injective) ((nat.nat) ) ((nat.nat) )) (fun (m : (nat.nat) ) , (y) (m)))) (((@nat.sym_eq_plus_body_O) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((relations.injective) ((nat.nat) ) ((nat.nat) )) (fun (m : (nat.nat) ) , (y) (m)))) (fun (x : (nat.nat) ) , fun (y : (nat.nat) ) , fun (auto : (((logic.eq_) ((nat.nat) )) (x)) (y)) , (((((((@logic.rewrite_l) ((nat.nat) )) (x)) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (x)) (__))) (((@logic.refl_) ((nat.nat) )) (x))) (y)) (auto))))))) (fun (x_366 : (nat.nat) ) , fun (_x_368 : forall (x:(nat.nat) ) , forall (y:(nat.nat) ) , ((((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (x_366)) (x))) ((((nat.plus) ) (x_366)) (y))) -> (((logic.eq_) ((nat.nat) )) (x)) (y)) , ((((@nat.sym_eq_plus) (((nat.S) ) (x_366))) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((relations.injective) ((nat.nat) ) ((nat.nat) )) (fun (m : (nat.nat) ) , (y) (m)))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (x_366)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((relations.injective) ((nat.nat) ) ((nat.nat) )) (fun (m : (nat.nat) ) , (y) (m)))) ((((@nat.sym_eq_plus_body_S) (x_366)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((relations.injective) ((nat.nat) ) ((nat.nat) )) (fun (m : (nat.nat) ) , (y) (m)))) (fun (x : (nat.nat) ) , fun (y : (nat.nat) ) , fun (auto : (((logic.eq_) ((nat.nat) )) (((nat.S) ) ((((nat.plus) ) (x_366)) (x)))) (((nat.S) ) ((((nat.plus) ) (x_366)) (y)))) , ((((_x_368) (x)) (y)) ((((@nat.injective_S) ((((nat.plus) ) (x_366)) (x))) ((((nat.plus) ) (x_366)) (y))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (x_366)) (((nat.S) ) (x)))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (__)) (((nat.S) ) ((((nat.plus) ) (x_366)) (y))))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (x_366)) (((nat.S) ) (y)))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (x_366)) (((nat.S) ) (x)))) (__))) (((((((@logic.rewrite_l) ((nat.nat) )) ((((nat.plus) ) (x_366)) (((nat.S) ) (x)))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (x_366)) (((nat.S) ) (x)))) (__))) (((@logic.refl_) ((nat.nat) )) ((((nat.plus) ) (x_366)) (((nat.S) ) (x))))) ((((nat.plus) ) (x_366)) (((nat.S) ) (y)))) (((((((@logic.rewrite_l) ((nat.nat) )) (((nat.S) ) ((((nat.plus) ) (x_366)) (y)))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (x_366)) (((nat.S) ) (x)))) (__))) (((((((@logic.rewrite_l) ((nat.nat) )) (((nat.S) ) ((((nat.plus) ) (x_366)) (x)))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (__)) (((nat.S) ) ((((nat.plus) ) (x_366)) (y))))) (auto)) ((((nat.plus) ) (x_366)) (((nat.S) ) (x)))) (((@nat.plus_n_Sm) (x_366)) (x)))) ((((nat.plus) ) (x_366)) (((nat.S) ) (y)))) (((@nat.plus_n_Sm) (x_366)) (y))))) (((nat.S) ) ((((nat.plus) ) (x_366)) (y)))) (((@nat.plus_n_Sm) (x_366)) (y)))) (((nat.S) ) ((((nat.plus) ) (x_366)) (x)))) (((@nat.plus_n_Sm) (x_366)) (x))))))))))) (n).
theorem nat.times_Sn_m : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (m)) ((((nat.times) ) (n)) (m)))) ((((nat.times) ) (((nat.S) ) (n))) (m)) := fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , (((@nat.sym_eq_times) (((nat.S) ) (n))) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (m)) ((((nat.times) ) (n)) (m)))) ((y) (m)))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) (n)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (m)) ((((nat.times) ) (n)) (m)))) ((y) (m)))) ((((@nat.sym_eq_times_body_S) (n)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (m)) ((((nat.times) ) (n)) (m)))) ((y) (m)))) (((@logic.refl_) ((nat.nat) )) ((((nat.plus) ) (m)) ((((nat.times) ) (n)) (m)))))).
theorem nat.times_O_n : forall (n:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((nat.O) )) ((((nat.times) ) ((nat.O) )) (n)) := fun (n : (nat.nat) ) , (((@nat.sym_eq_times) ((nat.O) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((nat.O) )) ((y) (n)))) (((((@nat.sym_eq_filter_nat_type_O) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((nat.O) )) ((y) (n)))) (((@nat.sym_eq_times_body_O) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((nat.O) )) ((y) (n)))) (((@logic.refl_) ((nat.nat) )) ((nat.O) )))).
theorem nat.times_n_O : forall (n:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((nat.O) )) ((((nat.times) ) (n)) ((nat.O) )) := fun (n : (nat.nat) ) , ((((@nat.nat_ind) (fun (_x_365 : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((nat.O) )) ((((nat.times) ) (_x_365)) ((nat.O) )))) (((((((@logic.rewrite_l) ((nat.nat) )) ((nat.O) )) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((nat.O) )) (__))) (((@logic.refl_) ((nat.nat) )) ((nat.O) ))) ((((nat.times) ) ((nat.O) )) ((nat.O) ))) ((@nat.times_O_n) ((nat.O) )))) (fun (x_366 : (nat.nat) ) , fun (_x_368 : (((logic.eq_) ((nat.nat) )) ((nat.O) )) ((((nat.times) ) (x_366)) ((nat.O) ))) , (((((((@logic.rewrite_l) ((nat.nat) )) ((((nat.plus) ) ((nat.O) )) ((((nat.times) ) (x_366)) ((nat.O) )))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((nat.O) )) (__))) (((((((@logic.rewrite_l) ((nat.nat) )) ((nat.O) )) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((nat.O) )) ((((nat.plus) ) ((nat.O) )) (__)))) (((((((@logic.rewrite_l) ((nat.nat) )) ((nat.O) )) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((nat.O) )) (__))) (((@logic.refl_) ((nat.nat) )) ((nat.O) ))) ((((nat.plus) ) ((nat.O) )) ((nat.O) ))) ((@nat.plus_O_n) ((nat.O) )))) ((((nat.times) ) (x_366)) ((nat.O) ))) (_x_368))) ((((nat.times) ) (((nat.S) ) (x_366))) ((nat.O) ))) (((@nat.times_Sn_m) (x_366)) ((nat.O) ))))) (n).
theorem nat.times_n_Sm : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (n)) ((((nat.times) ) (n)) (m)))) ((((nat.times) ) (n)) (((nat.S) ) (m))) := fun (n : (nat.nat) ) , ((((@nat.nat_ind) (fun (_x_365 : (nat.nat) ) , forall (m:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (_x_365)) ((((nat.times) ) (_x_365)) (m)))) ((((nat.times) ) (_x_365)) (((nat.S) ) (m))))) ((((@nat.sym_eq_times) ((nat.O) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , forall (m:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) ((nat.O) )) ((((nat.times) ) ((nat.O) )) (m)))) ((y) (((nat.S) ) (m))))) ((((@nat.sym_eq_times) ((nat.O) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , forall (m:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) ((nat.O) )) ((y) (m)))) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) ((nat.O) )) (((nat.S) ) (m))))) (((((@nat.sym_eq_filter_nat_type_O) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , forall (m:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) ((nat.O) )) ((y) (m)))) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) ((nat.O) )) (((nat.S) ) (m))))) (((((@nat.sym_eq_filter_nat_type_O) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , forall (m:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) ((nat.O) )) ((((nat.times_body) ) ((nat.O) )) (m)))) ((y) (((nat.S) ) (m))))) (((@nat.sym_eq_times_body_O) (fun (y : ((nat.nat) ) -> (nat.nat) ) , forall (m:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) ((nat.O) )) ((((nat.times_body) ) ((nat.O) )) (m)))) ((y) (((nat.S) ) (m))))) (((@nat.sym_eq_times_body_O) (fun (y : ((nat.nat) ) -> (nat.nat) ) , forall (m:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) ((nat.O) )) ((y) (m)))) ((nat.O) ))) ((((@nat.sym_eq_plus) ((nat.O) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , forall (m:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((y) ((nat.O) ))) ((nat.O) ))) (((((@nat.sym_eq_filter_nat_type_O) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , forall (m:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((y) ((nat.O) ))) ((nat.O) ))) (((@nat.sym_eq_plus_body_O) (fun (y : ((nat.nat) ) -> (nat.nat) ) , forall (m:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((y) ((nat.O) ))) ((nat.O) ))) (fun (_m : (nat.nat) ) , ((@logic.refl_) ((nat.nat) )) ((nat.O) )))))))))))) (fun (x_366 : (nat.nat) ) , fun (_x_368 : forall (m:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (x_366)) ((((nat.times) ) (x_366)) (m)))) ((((nat.times) ) (x_366)) (((nat.S) ) (m)))) , (fun (m : (nat.nat) ) , (((@nat.sym_eq_times) (((nat.S) ) (x_366))) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (((nat.S) ) (x_366))) ((((nat.times) ) (((nat.S) ) (x_366))) (m)))) ((y) (((nat.S) ) (m))))) ((((@nat.sym_eq_times) (((nat.S) ) (x_366))) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (((nat.S) ) (x_366))) ((y) (m)))) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) (((nat.S) ) (x_366))) (((nat.S) ) (m))))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) (x_366)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (((nat.S) ) (x_366))) ((y) (m)))) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) (((nat.S) ) (x_366))) (((nat.S) ) (m))))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) (x_366)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (((nat.S) ) (x_366))) ((((nat.times_body) ) (((nat.S) ) (x_366))) (m)))) ((y) (((nat.S) ) (m))))) ((((@nat.sym_eq_times_body_S) (x_366)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (((nat.S) ) (x_366))) ((((nat.times_body) ) (((nat.S) ) (x_366))) (m)))) ((y) (((nat.S) ) (m))))) ((((@nat.sym_eq_times_body_S) (x_366)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (((nat.S) ) (x_366))) ((y) (m)))) ((((nat.plus) ) (((nat.S) ) (m))) ((((nat.times) ) (x_366)) (((nat.S) ) (m)))))) ((((@nat.sym_eq_plus) (((nat.S) ) (x_366))) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((y) ((((nat.plus) ) (m)) ((((nat.times) ) (x_366)) (m))))) ((((nat.plus) ) (((nat.S) ) (m))) ((((nat.times) ) (x_366)) (((nat.S) ) (m)))))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (x_366)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((y) ((((nat.plus) ) (m)) ((((nat.times) ) (x_366)) (m))))) ((((nat.plus) ) (((nat.S) ) (m))) ((((nat.times) ) (x_366)) (((nat.S) ) (m)))))) ((((@nat.sym_eq_plus_body_S) (x_366)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((y) ((((nat.plus) ) (m)) ((((nat.times) ) (x_366)) (m))))) ((((nat.plus) ) (((nat.S) ) (m))) ((((nat.times) ) (x_366)) (((nat.S) ) (m)))))) ((((@nat.sym_eq_plus) (((nat.S) ) (m))) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((nat.S) ) ((((nat.plus) ) (x_366)) ((((nat.plus) ) (m)) ((((nat.times) ) (x_366)) (m)))))) ((y) ((((nat.times) ) (x_366)) (((nat.S) ) (m)))))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (m)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((nat.S) ) ((((nat.plus) ) (x_366)) ((((nat.plus) ) (m)) ((((nat.times) ) (x_366)) (m)))))) ((y) ((((nat.times) ) (x_366)) (((nat.S) ) (m)))))) ((((@nat.sym_eq_plus_body_S) (m)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((nat.S) ) ((((nat.plus) ) (x_366)) ((((nat.plus) ) (m)) ((((nat.times) ) (x_366)) (m)))))) ((y) ((((nat.times) ) (x_366)) (((nat.S) ) (m)))))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (x_366)) (((nat.S) ) ((((nat.plus) ) (m)) ((((nat.times) ) (x_366)) (m)))))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (__)) (((nat.S) ) ((((nat.plus) ) (m)) ((((nat.times) ) (x_366)) (((nat.S) ) (m))))))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (m)) (((nat.S) ) ((((nat.times) ) (x_366)) (m))))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (x_366)) (__))) (((nat.S) ) ((((nat.plus) ) (m)) ((((nat.times) ) (x_366)) (((nat.S) ) (m))))))) (((((((@logic.rewrite_l) ((nat.nat) )) ((((nat.plus) ) (x_366)) ((((nat.times) ) (x_366)) (m)))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (x_366)) ((((nat.plus) ) (m)) (((nat.S) ) ((((nat.times) ) (x_366)) (m)))))) (((nat.S) ) ((((nat.plus) ) (m)) (__))))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (x_366)) ((((nat.plus) ) (m)) ((((nat.times) ) (x_366)) (m))))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (x_366)) ((((nat.plus) ) (m)) (((nat.S) ) ((((nat.times) ) (x_366)) (m)))))) (((nat.S) ) (__)))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (x_366)) (((nat.S) ) ((((nat.plus) ) (m)) ((((nat.times) ) (x_366)) (m)))))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (x_366)) ((((nat.plus) ) (m)) (((nat.S) ) ((((nat.times) ) (x_366)) (m)))))) (__))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (m)) (((nat.S) ) ((((nat.times) ) (x_366)) (m))))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (x_366)) ((((nat.plus) ) (m)) (((nat.S) ) ((((nat.times) ) (x_366)) (m)))))) ((((nat.plus) ) (x_366)) (__)))) (((@logic.refl_) ((nat.nat) )) ((((nat.plus) ) (x_366)) ((((nat.plus) ) (m)) (((nat.S) ) ((((nat.times) ) (x_366)) (m))))))) (((nat.S) ) ((((nat.plus) ) (m)) ((((nat.times) ) (x_366)) (m))))) (((@nat.plus_n_Sm) (m)) ((((nat.times) ) (x_366)) (m))))) (((nat.S) ) ((((nat.plus) ) (x_366)) ((((nat.plus) ) (m)) ((((nat.times) ) (x_366)) (m)))))) (((@nat.plus_n_Sm) (x_366)) ((((nat.plus) ) (m)) ((((nat.times) ) (x_366)) (m)))))) ((((nat.plus) ) (m)) ((((nat.plus) ) (x_366)) ((((nat.times) ) (x_366)) (m))))) (((((((@logic.rewrite_l) ((nat.nat) )) ((((nat.plus) ) ((((nat.plus) ) (x_366)) (m))) ((((nat.times) ) (x_366)) (m)))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (m)) ((((nat.plus) ) (x_366)) ((((nat.times) ) (x_366)) (m))))) (__))) ((((@nat.assoc_plus1) ((((nat.times) ) (x_366)) (m))) (x_366)) (m))) ((((nat.plus) ) (x_366)) ((((nat.plus) ) (m)) ((((nat.times) ) (x_366)) (m))))) ((((@nat.associative_plus) (x_366)) (m)) ((((nat.times) ) (x_366)) (m)))))) ((((nat.times) ) (x_366)) (((nat.S) ) (m)))) ((_x_368) (m)))) (((nat.S) ) ((((nat.plus) ) (m)) ((((nat.times) ) (x_366)) (m))))) (((@nat.plus_n_Sm) (m)) ((((nat.times) ) (x_366)) (m))))) (((nat.S) ) ((((nat.plus) ) (x_366)) ((((nat.plus) ) (m)) ((((nat.times) ) (x_366)) (m)))))) (((@nat.plus_n_Sm) (x_366)) ((((nat.plus) ) (m)) ((((nat.times) ) (x_366)) (m))))))))))))))))))) (n).
theorem nat.commutative_times : ((relations.commutative) ((nat.nat) )) ((nat.times) ) := fun (n : (nat.nat) ) , ((((@nat.nat_ind) (fun (_x_365 : (nat.nat) ) , forall (y:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) (_x_365)) (y))) ((((nat.times) ) (y)) (_x_365)))) ((((@nat.sym_eq_times) ((nat.O) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , forall (z:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((y) (z))) ((((nat.times) ) (z)) ((nat.O) )))) (((((@nat.sym_eq_filter_nat_type_O) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , forall (z:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((y) (z))) ((((nat.times) ) (z)) ((nat.O) )))) (((@nat.sym_eq_times_body_O) (fun (y : ((nat.nat) ) -> (nat.nat) ) , forall (z:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((y) (z))) ((((nat.times) ) (z)) ((nat.O) )))) (fun (y : (nat.nat) ) , ((((((@logic.rewrite_l) ((nat.nat) )) ((nat.O) )) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((nat.O) )) (__))) (((@logic.refl_) ((nat.nat) )) ((nat.O) ))) ((((nat.times) ) (y)) ((nat.O) ))) ((@nat.times_n_O) (y))))))) (fun (x_366 : (nat.nat) ) , fun (_x_368 : forall (y:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) (x_366)) (y))) ((((nat.times) ) (y)) (x_366))) , (fun (y : (nat.nat) ) , (((@nat.sym_eq_times) (((nat.S) ) (x_366))) (fun (z : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((z) (y))) ((((nat.times) ) (y)) (((nat.S) ) (x_366))))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) (x_366)) (fun (z : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((z) (y))) ((((nat.times) ) (y)) (((nat.S) ) (x_366))))) ((((@nat.sym_eq_times_body_S) (x_366)) (fun (z : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((z) (y))) ((((nat.times) ) (y)) (((nat.S) ) (x_366))))) (((((((@logic.rewrite_l) ((nat.nat) )) ((((nat.plus) ) (y)) ((((nat.times) ) (y)) (x_366)))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (y)) ((((nat.times) ) (x_366)) (y)))) (__))) (((((((@logic.rewrite_l) ((nat.nat) )) ((((nat.times) ) (x_366)) (y))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (y)) ((((nat.times) ) (x_366)) (y)))) ((((nat.plus) ) (y)) (__)))) (((@logic.refl_) ((nat.nat) )) ((((nat.plus) ) (y)) ((((nat.times) ) (x_366)) (y))))) ((((nat.times) ) (y)) (x_366))) ((_x_368) (y)))) ((((nat.times) ) (y)) (((nat.S) ) (x_366)))) (((@nat.times_n_Sm) (y)) (x_366)))))))) (n).
theorem nat.distributive_times_plus : (((relations.distributive) ((nat.nat) )) ((nat.times) )) ((nat.plus) ) := fun (n : (nat.nat) ) , ((((@nat.nat_ind) (fun (_x_365 : (nat.nat) ) , forall (y:(nat.nat) ) , forall (z:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) (_x_365)) ((((nat.plus) ) (y)) (z)))) ((((nat.plus) ) ((((nat.times) ) (_x_365)) (y))) ((((nat.times) ) (_x_365)) (z))))) ((((@nat.sym_eq_times) ((nat.O) )) (fun (x : ((nat.nat) ) -> (nat.nat) ) , forall (y:(nat.nat) ) , forall (z:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) ((nat.O) )) ((((nat.plus) ) (y)) (z)))) ((((nat.plus) ) ((((nat.times) ) ((nat.O) )) (y))) ((x) (z))))) ((((@nat.sym_eq_times) ((nat.O) )) (fun (x : ((nat.nat) ) -> (nat.nat) ) , forall (y:(nat.nat) ) , forall (z:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) ((nat.O) )) ((((nat.plus) ) (y)) (z)))) ((((nat.plus) ) ((x) (y))) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) ((nat.O) )) (z))))) ((((@nat.sym_eq_times) ((nat.O) )) (fun (x : ((nat.nat) ) -> (nat.nat) ) , forall (y:(nat.nat) ) , forall (z:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((x) ((((nat.plus) ) (y)) (z)))) ((((nat.plus) ) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) ((nat.O) )) (y))) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) ((nat.O) )) (z))))) (((((@nat.sym_eq_filter_nat_type_O) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) (fun (x : ((nat.nat) ) -> (nat.nat) ) , forall (y:(nat.nat) ) , forall (z:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((x) ((((nat.plus) ) (y)) (z)))) ((((nat.plus) ) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) ((nat.O) )) (y))) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) ((nat.O) )) (z))))) (((((@nat.sym_eq_filter_nat_type_O) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) (fun (x : ((nat.nat) ) -> (nat.nat) ) , forall (y:(nat.nat) ) , forall (z:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times_body) ) ((nat.O) )) ((((nat.plus) ) (y)) (z)))) ((((nat.plus) ) ((x) (y))) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) ((nat.O) )) (z))))) (((((@nat.sym_eq_filter_nat_type_O) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) (fun (x : ((nat.nat) ) -> (nat.nat) ) , forall (y:(nat.nat) ) , forall (z:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times_body) ) ((nat.O) )) ((((nat.plus) ) (y)) (z)))) ((((nat.plus) ) ((((nat.times_body) ) ((nat.O) )) (y))) ((x) (z))))) (((@nat.sym_eq_times_body_O) (fun (x : ((nat.nat) ) -> (nat.nat) ) , forall (y:(nat.nat) ) , forall (z:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times_body) ) ((nat.O) )) ((((nat.plus) ) (y)) (z)))) ((((nat.plus) ) ((((nat.times_body) ) ((nat.O) )) (y))) ((x) (z))))) (((@nat.sym_eq_times_body_O) (fun (x : ((nat.nat) ) -> (nat.nat) ) , forall (y:(nat.nat) ) , forall (z:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times_body) ) ((nat.O) )) ((((nat.plus) ) (y)) (z)))) ((((nat.plus) ) ((x) (y))) ((nat.O) )))) (((@nat.sym_eq_times_body_O) (fun (x : ((nat.nat) ) -> (nat.nat) ) , forall (y:(nat.nat) ) , forall (z:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((x) ((((nat.plus) ) (y)) (z)))) ((((nat.plus) ) ((nat.O) )) ((nat.O) )))) ((((@nat.sym_eq_plus) ((nat.O) )) (fun (x : ((nat.nat) ) -> (nat.nat) ) , forall (y:(nat.nat) ) , forall (z:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((nat.O) )) ((x) ((nat.O) )))) (((((@nat.sym_eq_filter_nat_type_O) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (fun (x : ((nat.nat) ) -> (nat.nat) ) , forall (y:(nat.nat) ) , forall (z:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((nat.O) )) ((x) ((nat.O) )))) (((@nat.sym_eq_plus_body_O) (fun (x : ((nat.nat) ) -> (nat.nat) ) , forall (y:(nat.nat) ) , forall (z:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((nat.O) )) ((x) ((nat.O) )))) (fun (_y : (nat.nat) ) , fun (_z : (nat.nat) ) , ((@logic.refl_) ((nat.nat) )) ((nat.O) ))))))))))))))) (fun (x_366 : (nat.nat) ) , fun (_x_368 : forall (y:(nat.nat) ) , forall (z:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) (x_366)) ((((nat.plus) ) (y)) (z)))) ((((nat.plus) ) ((((nat.times) ) (x_366)) (y))) ((((nat.times) ) (x_366)) (z)))) , (fun (y : (nat.nat) ) , fun (z : (nat.nat) ) , (((@nat.sym_eq_times) (((nat.S) ) (x_366))) (fun (x : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) (((nat.S) ) (x_366))) ((((nat.plus) ) (y)) (z)))) ((((nat.plus) ) ((((nat.times) ) (((nat.S) ) (x_366))) (y))) ((x) (z))))) ((((@nat.sym_eq_times) (((nat.S) ) (x_366))) (fun (x : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) (((nat.S) ) (x_366))) ((((nat.plus) ) (y)) (z)))) ((((nat.plus) ) ((x) (y))) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) (((nat.S) ) (x_366))) (z))))) ((((@nat.sym_eq_times) (((nat.S) ) (x_366))) (fun (x : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((x) ((((nat.plus) ) (y)) (z)))) ((((nat.plus) ) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) (((nat.S) ) (x_366))) (y))) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) (((nat.S) ) (x_366))) (z))))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) (x_366)) (fun (x : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((x) ((((nat.plus) ) (y)) (z)))) ((((nat.plus) ) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) (((nat.S) ) (x_366))) (y))) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) (((nat.S) ) (x_366))) (z))))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) (x_366)) (fun (x : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times_body) ) (((nat.S) ) (x_366))) ((((nat.plus) ) (y)) (z)))) ((((nat.plus) ) ((x) (y))) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) (((nat.S) ) (x_366))) (z))))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) (x_366)) (fun (x : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times_body) ) (((nat.S) ) (x_366))) ((((nat.plus) ) (y)) (z)))) ((((nat.plus) ) ((((nat.times_body) ) (((nat.S) ) (x_366))) (y))) ((x) (z))))) ((((@nat.sym_eq_times_body_S) (x_366)) (fun (x : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times_body) ) (((nat.S) ) (x_366))) ((((nat.plus) ) (y)) (z)))) ((((nat.plus) ) ((((nat.times_body) ) (((nat.S) ) (x_366))) (y))) ((x) (z))))) ((((@nat.sym_eq_times_body_S) (x_366)) (fun (x : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times_body) ) (((nat.S) ) (x_366))) ((((nat.plus) ) (y)) (z)))) ((((nat.plus) ) ((x) (y))) ((((nat.plus) ) (z)) ((((nat.times) ) (x_366)) (z)))))) ((((@nat.sym_eq_times_body_S) (x_366)) (fun (x : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((x) ((((nat.plus) ) (y)) (z)))) ((((nat.plus) ) ((((nat.plus) ) (y)) ((((nat.times) ) (x_366)) (y)))) ((((nat.plus) ) (z)) ((((nat.times) ) (x_366)) (z)))))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (y)) ((((nat.plus) ) (z)) ((((nat.times) ) (x_366)) ((((nat.plus) ) (y)) (z)))))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (__)) ((((nat.plus) ) ((((nat.plus) ) (y)) ((((nat.times) ) (x_366)) (y)))) ((((nat.plus) ) (z)) ((((nat.times) ) (x_366)) (z)))))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (y)) ((((nat.plus) ) ((((nat.times) ) (x_366)) (y))) ((((nat.plus) ) (z)) ((((nat.times) ) (x_366)) (z)))))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (y)) ((((nat.plus) ) (z)) ((((nat.times) ) (x_366)) ((((nat.plus) ) (y)) (z)))))) (__))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (z)) ((((nat.plus) ) ((((nat.times) ) (x_366)) (y))) ((((nat.times) ) (x_366)) (z))))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (y)) ((((nat.plus) ) (z)) ((((nat.times) ) (x_366)) ((((nat.plus) ) (y)) (z)))))) ((((nat.plus) ) (y)) (__)))) (((((((@logic.rewrite_l) ((nat.nat) )) ((((nat.times) ) (x_366)) ((((nat.plus) ) (y)) (z)))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (y)) ((((nat.plus) ) (z)) ((((nat.times) ) (x_366)) ((((nat.plus) ) (y)) (z)))))) ((((nat.plus) ) (y)) ((((nat.plus) ) (z)) (__))))) (((@logic.refl_) ((nat.nat) )) ((((nat.plus) ) (y)) ((((nat.plus) ) (z)) ((((nat.times) ) (x_366)) ((((nat.plus) ) (y)) (z))))))) ((((nat.plus) ) ((((nat.times) ) (x_366)) (y))) ((((nat.times) ) (x_366)) (z)))) (((_x_368) (y)) (z)))) ((((nat.plus) ) ((((nat.times) ) (x_366)) (y))) ((((nat.plus) ) (z)) ((((nat.times) ) (x_366)) (z))))) (((((((@logic.rewrite_l) ((nat.nat) )) ((((nat.plus) ) ((((nat.plus) ) (z)) ((((nat.times) ) (x_366)) (y)))) ((((nat.times) ) (x_366)) (z)))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) ((((nat.times) ) (x_366)) (y))) ((((nat.plus) ) (z)) ((((nat.times) ) (x_366)) (z))))) (__))) ((((@nat.assoc_plus1) ((((nat.times) ) (x_366)) (z))) (z)) ((((nat.times) ) (x_366)) (y)))) ((((nat.plus) ) (z)) ((((nat.plus) ) ((((nat.times) ) (x_366)) (y))) ((((nat.times) ) (x_366)) (z))))) ((((@nat.associative_plus) (z)) ((((nat.times) ) (x_366)) (y))) ((((nat.times) ) (x_366)) (z)))))) ((((nat.plus) ) ((((nat.plus) ) (y)) ((((nat.times) ) (x_366)) (y)))) ((((nat.plus) ) (z)) ((((nat.times) ) (x_366)) (z))))) ((((@nat.associative_plus) (y)) ((((nat.times) ) (x_366)) (y))) ((((nat.plus) ) (z)) ((((nat.times) ) (x_366)) (z)))))) ((((nat.plus) ) ((((nat.plus) ) (y)) (z))) ((((nat.times) ) (x_366)) ((((nat.plus) ) (y)) (z))))) ((((@nat.associative_plus) (y)) (z)) ((((nat.times) ) (x_366)) ((((nat.plus) ) (y)) (z)))))))))))))))) (n).
theorem nat.distributive_times_plus_r : forall (a:(nat.nat) ) , forall (b:(nat.nat) ) , forall (c:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) ((((nat.plus) ) (b)) (c))) (a))) ((((nat.plus) ) ((((nat.times) ) (b)) (a))) ((((nat.times) ) (c)) (a))) := fun (a : (nat.nat) ) , fun (b : (nat.nat) ) , fun (c : (nat.nat) ) , ((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.times) ) (a)) ((((nat.plus) ) (b)) (c)))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (__)) ((((nat.plus) ) ((((nat.times) ) (b)) (a))) ((((nat.times) ) (c)) (a))))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.times) ) (a)) (b))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) (a)) ((((nat.plus) ) (b)) (c)))) ((((nat.plus) ) (__)) ((((nat.times) ) (c)) (a))))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.times) ) (a)) (c))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) (a)) ((((nat.plus) ) (b)) (c)))) ((((nat.plus) ) ((((nat.times) ) (a)) (b))) (__)))) (((((((@logic.rewrite_l) ((nat.nat) )) ((((nat.times) ) (a)) ((((nat.plus) ) (b)) (c)))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) (a)) ((((nat.plus) ) (b)) (c)))) (__))) (((@logic.refl_) ((nat.nat) )) ((((nat.times) ) (a)) ((((nat.plus) ) (b)) (c))))) ((((nat.plus) ) ((((nat.times) ) (a)) (b))) ((((nat.times) ) (a)) (c)))) ((((@nat.distributive_times_plus) (a)) (b)) (c)))) ((((nat.times) ) (c)) (a))) (((@nat.commutative_times) (c)) (a)))) ((((nat.times) ) (b)) (a))) (((@nat.commutative_times) (b)) (a)))) ((((nat.times) ) ((((nat.plus) ) (b)) (c))) (a))) (((@nat.commutative_times) ((((nat.plus) ) (b)) (c))) (a)).
theorem nat.associative_times : ((relations.associative) ((nat.nat) )) ((nat.times) ) := fun (n : (nat.nat) ) , ((((@nat.nat_ind) (fun (_x_365 : (nat.nat) ) , forall (y:(nat.nat) ) , forall (z:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) ((((nat.times) ) (_x_365)) (y))) (z))) ((((nat.times) ) (_x_365)) ((((nat.times) ) (y)) (z))))) ((((@nat.sym_eq_times) ((nat.O) )) (fun (x : ((nat.nat) ) -> (nat.nat) ) , forall (y:(nat.nat) ) , forall (z:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) ((((nat.times) ) ((nat.O) )) (y))) (z))) ((x) ((((nat.times) ) (y)) (z))))) ((((@nat.sym_eq_times) ((nat.O) )) (fun (x : ((nat.nat) ) -> (nat.nat) ) , forall (y:(nat.nat) ) , forall (z:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) ((x) (y))) (z))) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) ((nat.O) )) ((((nat.times) ) (y)) (z))))) (((((@nat.sym_eq_filter_nat_type_O) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) (fun (x : ((nat.nat) ) -> (nat.nat) ) , forall (y:(nat.nat) ) , forall (z:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) ((x) (y))) (z))) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) ((nat.O) )) ((((nat.times) ) (y)) (z))))) (((((@nat.sym_eq_filter_nat_type_O) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) (fun (x : ((nat.nat) ) -> (nat.nat) ) , forall (y:(nat.nat) ) , forall (z:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) ((((nat.times_body) ) ((nat.O) )) (y))) (z))) ((x) ((((nat.times) ) (y)) (z))))) (((@nat.sym_eq_times_body_O) (fun (x : ((nat.nat) ) -> (nat.nat) ) , forall (y:(nat.nat) ) , forall (z:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) ((((nat.times_body) ) ((nat.O) )) (y))) (z))) ((x) ((((nat.times) ) (y)) (z))))) (((@nat.sym_eq_times_body_O) (fun (x : ((nat.nat) ) -> (nat.nat) ) , forall (y:(nat.nat) ) , forall (z:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) ((x) (y))) (z))) ((nat.O) ))) ((((@nat.sym_eq_times) ((nat.O) )) (fun (x : ((nat.nat) ) -> (nat.nat) ) , forall (y:(nat.nat) ) , forall (z:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((x) (z))) ((nat.O) ))) (((((@nat.sym_eq_filter_nat_type_O) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) (fun (x : ((nat.nat) ) -> (nat.nat) ) , forall (y:(nat.nat) ) , forall (z:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((x) (z))) ((nat.O) ))) (((@nat.sym_eq_times_body_O) (fun (x : ((nat.nat) ) -> (nat.nat) ) , forall (y:(nat.nat) ) , forall (z:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((x) (z))) ((nat.O) ))) (fun (_y : (nat.nat) ) , fun (_z : (nat.nat) ) , ((@logic.refl_) ((nat.nat) )) ((nat.O) )))))))))))) (fun (x_366 : (nat.nat) ) , fun (_x_368 : forall (y:(nat.nat) ) , forall (z:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) ((((nat.times) ) (x_366)) (y))) (z))) ((((nat.times) ) (x_366)) ((((nat.times) ) (y)) (z)))) , (fun (y : (nat.nat) ) , fun (z : (nat.nat) ) , (((@nat.sym_eq_times) (((nat.S) ) (x_366))) (fun (x : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) ((((nat.times) ) (((nat.S) ) (x_366))) (y))) (z))) ((x) ((((nat.times) ) (y)) (z))))) ((((@nat.sym_eq_times) (((nat.S) ) (x_366))) (fun (x : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) ((x) (y))) (z))) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) (((nat.S) ) (x_366))) ((((nat.times) ) (y)) (z))))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) (x_366)) (fun (x : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) ((x) (y))) (z))) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) (((nat.S) ) (x_366))) ((((nat.times) ) (y)) (z))))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) (x_366)) (fun (x : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) ((((nat.times_body) ) (((nat.S) ) (x_366))) (y))) (z))) ((x) ((((nat.times) ) (y)) (z))))) ((((@nat.sym_eq_times_body_S) (x_366)) (fun (x : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) ((((nat.times_body) ) (((nat.S) ) (x_366))) (y))) (z))) ((x) ((((nat.times) ) (y)) (z))))) ((((@nat.sym_eq_times_body_S) (x_366)) (fun (x : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) ((x) (y))) (z))) ((((nat.plus) ) ((((nat.times) ) (y)) (z))) ((((nat.times) ) (x_366)) ((((nat.times) ) (y)) (z)))))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) ((((nat.times) ) (y)) (z))) ((((nat.times) ) (x_366)) ((((nat.times) ) (y)) (z))))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (__)) ((((nat.plus) ) ((((nat.times) ) (y)) (z))) ((((nat.times) ) (x_366)) ((((nat.times) ) (y)) (z)))))) (((@logic.refl_) ((nat.nat) )) ((((nat.plus) ) ((((nat.times) ) (y)) (z))) ((((nat.times) ) (x_366)) ((((nat.times) ) (y)) (z)))))) ((((nat.times) ) ((((nat.plus) ) (y)) ((((nat.times) ) (x_366)) (y)))) (z))) (((((((@logic.rewrite_l) ((nat.nat) )) ((((nat.times) ) ((((nat.times) ) (x_366)) (y))) (z))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) ((((nat.plus) ) (y)) ((((nat.times) ) (x_366)) (y)))) (z))) ((((nat.plus) ) ((((nat.times) ) (y)) (z))) (__)))) ((((@nat.distributive_times_plus_r) (z)) (y)) ((((nat.times) ) (x_366)) (y)))) ((((nat.times) ) (x_366)) ((((nat.times) ) (y)) (z)))) (((_x_368) (y)) (z)))))))))))) (n).
theorem nat.times_times : forall (x:(nat.nat) ) , forall (y:(nat.nat) ) , forall (z:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) (x)) ((((nat.times) ) (y)) (z)))) ((((nat.times) ) (y)) ((((nat.times) ) (x)) (z))) := fun (x : (nat.nat) ) , fun (y : (nat.nat) ) , fun (z : (nat.nat) ) , ((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.times) ) (y)) ((((nat.times) ) (x)) (z)))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (__)) ((((nat.times) ) (y)) ((((nat.times) ) (x)) (z))))) (((@logic.refl_) ((nat.nat) )) ((((nat.times) ) (y)) ((((nat.times) ) (x)) (z))))) ((((nat.times) ) (x)) ((((nat.times) ) (y)) (z)))) (((((((@logic.rewrite_l) ((nat.nat) )) ((((nat.times) ) ((((nat.times) ) (x)) (y))) (z))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (__)) ((((nat.times) ) (y)) ((((nat.times) ) (x)) (z))))) (((((((@logic.rewrite_l) ((nat.nat) )) ((((nat.times) ) (y)) (x))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) (__)) (z))) ((((nat.times) ) (y)) ((((nat.times) ) (x)) (z))))) ((((@nat.associative_times) (y)) (x)) (z))) ((((nat.times) ) (x)) (y))) (((@nat.commutative_times) (y)) (x)))) ((((nat.times) ) (x)) ((((nat.times) ) (y)) (z)))) ((((@nat.associative_times) (x)) (y)) (z))).
theorem nat.times_n_1 : forall (n:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) (n)) ((((nat.times) ) (n)) (((nat.S) ) ((nat.O) ))) := fun (n : (nat.nat) ) , ((((((@logic.rewrite_l) ((nat.nat) )) ((((nat.plus) ) (n)) ((((nat.times) ) (n)) ((nat.O) )))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (n)) (__))) (((((((@logic.rewrite_l) ((nat.nat) )) ((nat.O) )) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (n)) ((((nat.plus) ) (n)) (__)))) (((((((@logic.rewrite_l) ((nat.nat) )) (n)) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (n)) (__))) (((@logic.refl_) ((nat.nat) )) (n))) ((((nat.plus) ) (n)) ((nat.O) ))) ((@nat.plus_n_O) (n)))) ((((nat.times) ) (n)) ((nat.O) ))) ((@nat.times_n_O) (n)))) ((((nat.times) ) (n)) (((nat.S) ) ((nat.O) )))) (((@nat.times_n_Sm) (n)) ((nat.O) )).
theorem nat.minus_S_S : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.minus) ) (((nat.S) ) (n))) (((nat.S) ) (m)))) ((((nat.minus) ) (n)) (m)) := fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , ((((((@nat.eq_match_nat_type_S) ((nat.nat) )) (((nat.S) ) (n))) (fun (q : (nat.nat) ) , (((nat.minus) ) (n)) (q))) (m)) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.minus) ) (((nat.S) ) (n))) (((nat.S) ) (m)))) (y))) ((((@nat.eq_minus_body_S) (n)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.minus) ) (((nat.S) ) (n))) (((nat.S) ) (m)))) ((y) (((nat.S) ) (m))))) ((((((@nat.eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.minus_body) )) (n)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.minus) ) (((nat.S) ) (n))) (((nat.S) ) (m)))) ((y) (((nat.S) ) (m))))) ((((@nat.eq_minus) (((nat.S) ) (n))) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.minus) ) (((nat.S) ) (n))) (((nat.S) ) (m)))) ((y) (((nat.S) ) (m))))) (((@logic.refl_) ((nat.nat) )) ((((nat.minus) ) (((nat.S) ) (n))) (((nat.S) ) (m))))))).
theorem nat.minus_O_n : forall (n:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((nat.O) )) ((((nat.minus) ) ((nat.O) )) (n)) := fun (n : (nat.nat) ) , ((((@nat.match_nat_prop) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((nat.O) )) ((((nat.minus) ) ((nat.O) )) (__)))) ((((@nat.sym_eq_minus) ((nat.O) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((nat.O) )) ((y) ((nat.O) )))) (((((@nat.sym_eq_filter_nat_type_O) (((nat.nat) ) -> (nat.nat) )) ((nat.minus_body) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((nat.O) )) ((y) ((nat.O) )))) (((@nat.sym_eq_minus_body_O) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((nat.O) )) ((y) ((nat.O) )))) (((@logic.refl_) ((nat.nat) )) ((nat.O) )))))) ((((@nat.sym_eq_minus) ((nat.O) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , forall (n0:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((nat.O) )) ((y) (((nat.S) ) (n0))))) (((((@nat.sym_eq_filter_nat_type_O) (((nat.nat) ) -> (nat.nat) )) ((nat.minus_body) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , forall (n0:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((nat.O) )) ((y) (((nat.S) ) (n0))))) (((@nat.sym_eq_minus_body_O) (fun (y : ((nat.nat) ) -> (nat.nat) ) , forall (n0:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((nat.O) )) ((y) (((nat.S) ) (n0))))) (fun (auto : (nat.nat) ) , ((@logic.refl_) ((nat.nat) )) ((nat.O) )))))) (n).
theorem nat.minus_n_O : forall (n:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) (n)) ((((nat.minus) ) (n)) ((nat.O) )) := fun (n : (nat.nat) ) , ((((@nat.match_nat_prop) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (__)) ((((nat.minus) ) (__)) ((nat.O) )))) (((((((@logic.rewrite_l) ((nat.nat) )) ((nat.O) )) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((nat.O) )) (__))) (((@logic.refl_) ((nat.nat) )) ((nat.O) ))) ((((nat.minus) ) ((nat.O) )) ((nat.O) ))) ((@nat.minus_O_n) ((nat.O) )))) (fun (auto : (nat.nat) ) , (((@nat.sym_eq_minus) (((nat.S) ) (auto))) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((nat.S) ) (auto))) ((y) ((nat.O) )))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.minus_body) )) (auto)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((nat.S) ) (auto))) ((y) ((nat.O) )))) ((((@nat.sym_eq_minus_body_S) (auto)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((nat.S) ) (auto))) ((y) ((nat.O) )))) ((((((@nat.sym_eq_match_nat_type_O) ((nat.nat) )) (((nat.S) ) (auto))) (fun (q : (nat.nat) ) , (((nat.minus) ) (auto)) (q))) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((nat.S) ) (auto))) (y))) (((@logic.refl_) ((nat.nat) )) (((nat.S) ) (auto)))))))) (n).
theorem nat.minus_n_n : forall (n:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((nat.O) )) ((((nat.minus) ) (n)) (n)) := fun (n : (nat.nat) ) , ((((@nat.nat_ind) (fun (_x_365 : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((nat.O) )) ((((nat.minus) ) (_x_365)) (_x_365)))) (((((((@logic.rewrite_l) ((nat.nat) )) ((nat.O) )) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((nat.O) )) (__))) (((@logic.refl_) ((nat.nat) )) ((nat.O) ))) ((((nat.minus) ) ((nat.O) )) ((nat.O) ))) ((@nat.minus_O_n) ((nat.O) )))) (fun (x_366 : (nat.nat) ) , fun (_x_368 : (((logic.eq_) ((nat.nat) )) ((nat.O) )) ((((nat.minus) ) (x_366)) (x_366))) , (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.minus) ) (x_366)) (x_366))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((nat.O) )) (__))) (((((((@logic.rewrite_l) ((nat.nat) )) ((nat.O) )) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((nat.O) )) (__))) (((@logic.refl_) ((nat.nat) )) ((nat.O) ))) ((((nat.minus) ) (x_366)) (x_366))) (_x_368))) ((((nat.minus) ) (((nat.S) ) (x_366))) (((nat.S) ) (x_366)))) (((@nat.minus_S_S) (x_366)) (x_366))))) (n).
theorem nat.eq_minus_S_pred : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.minus) ) (n)) (((nat.S) ) (m)))) (((nat.pred_) ) ((((nat.minus) ) (n)) (m))) := ((((@nat.nat_elim2) (fun (__ : (nat.nat) ) , fun (_0 : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.minus) ) (__)) (((nat.S) ) (_0)))) (((nat.pred_) ) ((((nat.minus) ) (__)) (_0))))) (fun (_n : (nat.nat) ) , (((@nat.sym_eq_minus) ((nat.O) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.minus) ) ((nat.O) )) (((nat.S) ) (_n)))) (((nat.pred_) ) ((y) (_n))))) ((((@nat.sym_eq_minus) ((nat.O) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((y) (((nat.S) ) (_n)))) (((nat.pred_) ) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.minus_body) )) ((nat.O) )) (_n))))) (((((@nat.sym_eq_filter_nat_type_O) (((nat.nat) ) -> (nat.nat) )) ((nat.minus_body) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((y) (((nat.S) ) (_n)))) (((nat.pred_) ) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.minus_body) )) ((nat.O) )) (_n))))) (((((@nat.sym_eq_filter_nat_type_O) (((nat.nat) ) -> (nat.nat) )) ((nat.minus_body) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.minus_body) ) ((nat.O) )) (((nat.S) ) (_n)))) (((nat.pred_) ) ((y) (_n))))) (((@nat.sym_eq_minus_body_O) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.minus_body) ) ((nat.O) )) (((nat.S) ) (_n)))) (((nat.pred_) ) ((y) (_n))))) (((@nat.sym_eq_minus_body_O) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((y) (((nat.S) ) (_n)))) (((((nat.match_nat_type) ((nat.nat) )) ((nat.O) )) (fun (p : (nat.nat) ) , p)) ((nat.O) )))) ((((((@nat.sym_eq_match_nat_type_O) ((nat.nat) )) ((nat.O) )) (fun (p : (nat.nat) ) , p)) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((nat.O) )) (y))) (((@logic.refl_) ((nat.nat) )) ((nat.O) )))))))))) (fun (n : (nat.nat) ) , (((@nat.sym_eq_minus) (((nat.S) ) (n))) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.minus) ) (((nat.S) ) (n))) (((nat.S) ) ((nat.O) )))) (((nat.pred_) ) ((y) ((nat.O) ))))) ((((@nat.sym_eq_minus) (((nat.S) ) (n))) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((y) (((nat.S) ) ((nat.O) )))) (((nat.pred_) ) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.minus_body) )) (((nat.S) ) (n))) ((nat.O) ))))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.minus_body) )) (n)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((y) (((nat.S) ) ((nat.O) )))) (((nat.pred_) ) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.minus_body) )) (((nat.S) ) (n))) ((nat.O) ))))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.minus_body) )) (n)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.minus_body) ) (((nat.S) ) (n))) (((nat.S) ) ((nat.O) )))) (((nat.pred_) ) ((y) ((nat.O) ))))) ((((@nat.sym_eq_minus_body_S) (n)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.minus_body) ) (((nat.S) ) (n))) (((nat.S) ) ((nat.O) )))) (((nat.pred_) ) ((y) ((nat.O) ))))) ((((@nat.sym_eq_minus_body_S) (n)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((y) (((nat.S) ) ((nat.O) )))) (((nat.pred_) ) (((((nat.match_nat_type) ((nat.nat) )) (((nat.S) ) (n))) (fun (q : (nat.nat) ) , (((nat.minus) ) (n)) (q))) ((nat.O) ))))) (((((((@nat.sym_eq_match_nat_type_S) ((nat.nat) )) (((nat.S) ) (n))) (fun (q : (nat.nat) ) , (((nat.minus) ) (n)) (q))) ((nat.O) )) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (y)) (((((nat.match_nat_type) ((nat.nat) )) ((nat.O) )) (fun (p : (nat.nat) ) , p)) (((((nat.match_nat_type) ((nat.nat) )) (((nat.S) ) (n))) (fun (q : (nat.nat) ) , (((nat.minus) ) (n)) (q))) ((nat.O) ))))) ((((((@nat.sym_eq_match_nat_type_O) ((nat.nat) )) (((nat.S) ) (n))) (fun (q : (nat.nat) ) , (((nat.minus) ) (n)) (q))) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.minus) ) (n)) ((nat.O) ))) (((((nat.match_nat_type) ((nat.nat) )) ((nat.O) )) (fun (p : (nat.nat) ) , p)) (y)))) (((((((@nat.sym_eq_match_nat_type_S) ((nat.nat) )) ((nat.O) )) (fun (q : (nat.nat) ) , q)) (n)) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.minus) ) (n)) ((nat.O) ))) (y))) (((((((@logic.rewrite_l) ((nat.nat) )) (n)) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (__)) (n))) (((@logic.refl_) ((nat.nat) )) (n))) ((((nat.minus) ) (n)) ((nat.O) ))) ((@nat.minus_n_O) (n))))))))))))) (fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , (((@nat.sym_eq_minus) (((nat.S) ) (n))) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((logic.eq_) ((nat.nat) )) ((((nat.minus) ) (n)) (((nat.S) ) (m)))) (((nat.pred_) ) ((((nat.minus) ) (n)) (m)))) -> (((logic.eq_) ((nat.nat) )) ((((nat.minus) ) (((nat.S) ) (n))) (((nat.S) ) (((nat.S) ) (m))))) (((nat.pred_) ) ((y) (((nat.S) ) (m)))))) ((((@nat.sym_eq_minus) (((nat.S) ) (n))) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((logic.eq_) ((nat.nat) )) ((((nat.minus) ) (n)) (((nat.S) ) (m)))) (((nat.pred_) ) ((((nat.minus) ) (n)) (m)))) -> (((logic.eq_) ((nat.nat) )) ((y) (((nat.S) ) (((nat.S) ) (m))))) (((nat.pred_) ) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.minus_body) )) (((nat.S) ) (n))) (((nat.S) ) (m)))))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.minus_body) )) (n)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((logic.eq_) ((nat.nat) )) ((((nat.minus) ) (n)) (((nat.S) ) (m)))) (((nat.pred_) ) ((((nat.minus) ) (n)) (m)))) -> (((logic.eq_) ((nat.nat) )) ((y) (((nat.S) ) (((nat.S) ) (m))))) (((nat.pred_) ) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.minus_body) )) (((nat.S) ) (n))) (((nat.S) ) (m)))))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.minus_body) )) (n)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((logic.eq_) ((nat.nat) )) ((((nat.minus) ) (n)) (((nat.S) ) (m)))) (((nat.pred_) ) ((((nat.minus) ) (n)) (m)))) -> (((logic.eq_) ((nat.nat) )) ((((nat.minus_body) ) (((nat.S) ) (n))) (((nat.S) ) (((nat.S) ) (m))))) (((nat.pred_) ) ((y) (((nat.S) ) (m)))))) ((((@nat.sym_eq_minus_body_S) (n)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((logic.eq_) ((nat.nat) )) ((((nat.minus) ) (n)) (((nat.S) ) (m)))) (((nat.pred_) ) ((((nat.minus) ) (n)) (m)))) -> (((logic.eq_) ((nat.nat) )) ((((nat.minus_body) ) (((nat.S) ) (n))) (((nat.S) ) (((nat.S) ) (m))))) (((nat.pred_) ) ((y) (((nat.S) ) (m)))))) ((((@nat.sym_eq_minus_body_S) (n)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((logic.eq_) ((nat.nat) )) ((((nat.minus) ) (n)) (((nat.S) ) (m)))) (((nat.pred_) ) ((((nat.minus) ) (n)) (m)))) -> (((logic.eq_) ((nat.nat) )) ((y) (((nat.S) ) (((nat.S) ) (m))))) (((nat.pred_) ) (((((nat.match_nat_type) ((nat.nat) )) (((nat.S) ) (n))) (fun (q : (nat.nat) ) , (((nat.minus) ) (n)) (q))) (((nat.S) ) (m)))))) (((((((@nat.sym_eq_match_nat_type_S) ((nat.nat) )) (((nat.S) ) (n))) (fun (q : (nat.nat) ) , (((nat.minus) ) (n)) (q))) (((nat.S) ) (m))) (fun (y : (nat.nat) ) , ((((logic.eq_) ((nat.nat) )) ((((nat.minus) ) (n)) (((nat.S) ) (m)))) (((nat.pred_) ) ((((nat.minus) ) (n)) (m)))) -> (((logic.eq_) ((nat.nat) )) (y)) (((((nat.match_nat_type) ((nat.nat) )) ((nat.O) )) (fun (p : (nat.nat) ) , p)) (((((nat.match_nat_type) ((nat.nat) )) (((nat.S) ) (n))) (fun (q : (nat.nat) ) , (((nat.minus) ) (n)) (q))) (((nat.S) ) (m)))))) (((((((@nat.sym_eq_match_nat_type_S) ((nat.nat) )) (((nat.S) ) (n))) (fun (q : (nat.nat) ) , (((nat.minus) ) (n)) (q))) (m)) (fun (y : (nat.nat) ) , ((((logic.eq_) ((nat.nat) )) ((((nat.minus) ) (n)) (((nat.S) ) (m)))) (((nat.pred_) ) ((((nat.minus) ) (n)) (m)))) -> (((logic.eq_) ((nat.nat) )) ((((nat.minus) ) (n)) (((nat.S) ) (m)))) (((((nat.match_nat_type) ((nat.nat) )) ((nat.O) )) (fun (p : (nat.nat) ) , p)) (y)))) (fun (auto : (((logic.eq_) ((nat.nat) )) ((((nat.minus) ) (n)) (((nat.S) ) (m)))) (((((nat.match_nat_type) ((nat.nat) )) ((nat.O) )) (fun (p : (nat.nat) ) , p)) ((((nat.minus) ) (n)) (m)))) , (((((((@logic.rewrite_r) ((nat.nat) )) (((((nat.match_nat_type) ((nat.nat) )) ((nat.O) )) (fun (p : (nat.nat) ) , p)) ((((nat.minus) ) (n)) (m)))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (__)) (((((nat.match_nat_type) ((nat.nat) )) ((nat.O) )) (fun (p : (nat.nat) ) , p)) ((((nat.minus) ) (n)) (m))))) (((@logic.refl_) ((nat.nat) )) (((((nat.match_nat_type) ((nat.nat) )) ((nat.O) )) (fun (p : (nat.nat) ) , p)) ((((nat.minus) ) (n)) (m))))) ((((nat.minus) ) (n)) (((nat.S) ) (m)))) (auto))))))))))).
theorem nat.not_eq_S : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , (((connectives.Not) ) ((((logic.eq_) ((nat.nat) )) (n)) (m))) -> ((connectives.Not) ) ((((logic.eq_) ((nat.nat) )) (((nat.S) ) (n))) (((nat.S) ) (m))) := fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , fun (auto : ((connectives.Not) ) ((((logic.eq_) ((nat.nat) )) (n)) (m))) , (((((@logic.not_to_not) ((((logic.eq_) ((nat.nat) )) (((nat.S) ) (n))) (((nat.S) ) (m)))) ((((logic.eq_) ((nat.nat) )) (n)) (m))) (fun (auto' : (((logic.eq_) ((nat.nat) )) (((nat.S) ) (n))) (((nat.S) ) (m))) , (((((((@logic.rewrite_l) ((nat.nat) )) (m)) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (__)) (m))) (((@logic.refl_) ((nat.nat) )) (m))) (n)) (((((((@logic.rewrite_r) ((nat.nat) )) (((nat.pred_) ) (((nat.S) ) (n)))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (m)) (__))) (((((((@logic.rewrite_r) ((nat.nat) )) (((nat.S) ) (m))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (m)) (((nat.pred_) ) (__)))) ((@nat.pred_Sn) (m))) (((nat.S) ) (n))) (auto'))) (n)) ((@nat.pred_Sn) (n)))))) (auto)).
theorem nat.not_eq_O_S : forall (n:(nat.nat) ) , ((connectives.Not) ) ((((logic.eq_) ((nat.nat) )) ((nat.O) )) (((nat.S) ) (n))) := fun (n : (nat.nat) ) , ((@connectives.nmk) ((((logic.eq_) ((nat.nat) )) ((nat.O) )) (((nat.S) ) (n)))) (fun (eqOS : (((logic.eq_) ((nat.nat) )) ((nat.O) )) (((nat.S) ) (n))) , ((((((@nat.eq_match_nat_type_O) (Prop)) ((connectives.False) )) (fun (p : (nat.nat) ) , (connectives.True) )) (fun (y : Prop) , y)) (((((((@logic.eq_ind_r) ((nat.nat) )) (((nat.S) ) (n))) (fun (x : (nat.nat) ) , ((nat.not_zero) ) (x))) (((((((@nat.sym_eq_match_nat_type_S) (Prop)) ((connectives.False) )) (fun (p : (nat.nat) ) , (connectives.True) )) (n)) (fun (y : Prop) , y)) (@connectives.I))) ((nat.O) )) (eqOS)))).
theorem nat.lt_to_not_zero : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , ((((nat.lt_) ) (n)) (m)) -> ((nat.not_zero) ) (m) := fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , fun (Hlt : (((nat.lt_) ) (n)) (m)) , (((((((@nat.le_ind) (((nat.S) ) (n))) (fun (x_417 : (nat.nat) ) , ((nat.not_zero) ) (x_417))) (((((((@nat.sym_eq_match_nat_type_S) (Prop)) ((connectives.False) )) (fun (p : (nat.nat) ) , (connectives.True) )) (n)) (fun (y : Prop) , y)) (@connectives.I))) (fun (m0 : (nat.nat) ) , fun (_x_419 : (((nat.le_) ) (((nat.S) ) (n))) (m0)) , (fun (_x_421 : ((nat.not_zero) ) (m0)) , (((((((@nat.sym_eq_match_nat_type_S) (Prop)) ((connectives.False) )) (fun (p : (nat.nat) ) , (connectives.True) )) (m0)) (fun (y : Prop) , y)) (@connectives.I))))) (m)) (Hlt)).
theorem nat.le_S_S : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , ((((nat.le_) ) (n)) (m)) -> (((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (m)) := fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , fun (lenm : (((nat.le_) ) (n)) (m)) , (((((((@nat.le_ind) (n)) (fun (x_417 : (nat.nat) ) , (((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (x_417)))) ((@nat.le_n) (((nat.S) ) (n)))) (fun (m0 : (nat.nat) ) , fun (_x_419 : (((nat.le_) ) (n)) (m0)) , (fun (_x_421 : (((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (m0))) , ((((@nat.le_S) (((nat.S) ) (n))) (((nat.S) ) (m0))) (_x_421))))) (m)) (lenm)).
theorem nat.le_O_n : forall (n:(nat.nat) ) , (((nat.le_) ) ((nat.O) )) (n) := fun (n : (nat.nat) ) , ((((@nat.nat_ind) (((nat.le_) ) ((nat.O) ))) ((@nat.le_n) ((nat.O) ))) (fun (x_366 : (nat.nat) ) , fun (_x_368 : (((nat.le_) ) ((nat.O) )) (x_366)) , ((((@nat.le_S) ((nat.O) )) (x_366)) (_x_368)))) (n).
theorem nat.le_n_Sn : forall (n:(nat.nat) ) , (((nat.le_) ) (n)) (((nat.S) ) (n)) := fun (n : (nat.nat) ) , (((@nat.le_S) (n)) (n)) ((@nat.le_n) (n)).
theorem nat.transitive_le : ((relations.transitive) ((nat.nat) )) ((nat.le_) ) := fun (a : (nat.nat) ) , fun (b : (nat.nat) ) , fun (c : (nat.nat) ) , fun (leab : (((nat.le_) ) (a)) (b)) , (fun (lebc : (((nat.le_) ) (b)) (c)) , (((((((@nat.le_ind) (b)) (fun (x_417 : (nat.nat) ) , (((nat.le_) ) (a)) (x_417))) (leab)) (fun (m : (nat.nat) ) , fun (_x_419 : (((nat.le_) ) (b)) (m)) , (fun (_x_421 : (((nat.le_) ) (a)) (m)) , ((((@nat.le_S) (a)) (m)) (_x_421))))) (c)) (lebc))).
theorem nat.le_pred_n : forall (n:(nat.nat) ) , (((nat.le_) ) (((nat.pred_) ) (n))) (n) := fun (n : (nat.nat) ) , ((((@nat.nat_ind) (fun (_x_365 : (nat.nat) ) , (((nat.le_) ) (((nat.pred_) ) (_x_365))) (_x_365))) ((((((@nat.eq_match_nat_type_O) ((nat.nat) )) ((nat.O) )) (fun (p : (nat.nat) ) , p)) (fun (y : (nat.nat) ) , (((nat.le_) ) (((((nat.match_nat_type) ((nat.nat) )) ((nat.O) )) (fun (p : (nat.nat) ) , p)) ((nat.O) ))) (y))) ((@nat.le_n) (((nat.pred_) ) ((nat.O) ))))) (fun (x_366 : (nat.nat) ) , fun (_x_368 : (((nat.le_) ) (((nat.pred_) ) (x_366))) (x_366)) , (((((((@nat.eq_match_nat_type_S) ((nat.nat) )) ((nat.O) )) (fun (p : (nat.nat) ) , p)) (x_366)) (fun (y : (nat.nat) ) , (((nat.le_) ) (((nat.pred_) ) (((nat.S) ) (x_366)))) (((nat.S) ) (y)))) ((@nat.le_n_Sn) (((nat.pred_) ) (((nat.S) ) (x_366))))))) (n).
theorem nat.monotonic_pred : (((relations.monotonic) ((nat.nat) )) ((nat.le_) )) ((nat.pred_) ) := fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , fun (lenm : (((nat.le_) ) (n)) (m)) , (((((((@nat.le_ind) (n)) (fun (x_417 : (nat.nat) ) , (((nat.le_) ) (((nat.pred_) ) (n))) (((nat.pred_) ) (x_417)))) ((@nat.le_n) (((nat.pred_) ) (n)))) (fun (m0 : (nat.nat) ) , fun (_x_419 : (((nat.le_) ) (n)) (m0)) , (fun (_x_421 : (((nat.le_) ) (((nat.pred_) ) (n))) (((nat.pred_) ) (m0))) , ((((((@nat.transitive_le) (((nat.pred_) ) (n))) (n)) (((nat.pred_) ) (((nat.S) ) (m0)))) ((@nat.le_pred_n) (n))) (((((((@nat.sym_eq_match_nat_type_S) ((nat.nat) )) ((nat.O) )) (fun (p : (nat.nat) ) , p)) (m0)) (fun (y : (nat.nat) ) , (((nat.le_) ) (n)) (y))) (_x_419)))))) (m)) (lenm)).
theorem nat.le_S_S_to_le : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , ((((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (m))) -> (((nat.le_) ) (n)) (m) := fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , fun (auto : (((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (m))) , (((((((@nat.eq_match_nat_type_S) ((nat.nat) )) ((nat.O) )) (fun (p : (nat.nat) ) , p)) (m)) (fun (y : (nat.nat) ) , (((nat.le_) ) (n)) (y))) (((((((@nat.eq_match_nat_type_S) ((nat.nat) )) ((nat.O) )) (fun (p : (nat.nat) ) , p)) (n)) (fun (y : (nat.nat) ) , (((nat.le_) ) (y)) (((((nat.match_nat_type) ((nat.nat) )) ((nat.O) )) (fun (p : (nat.nat) ) , p)) (((nat.S) ) (m))))) ((((@nat.monotonic_pred) (((nat.S) ) (n))) (((nat.S) ) (m))) (auto)))).
theorem nat.monotonic_le_plus_r : forall (n:(nat.nat) ) , (((relations.monotonic) ((nat.nat) )) ((nat.le_) )) (fun (m : (nat.nat) ) , (((nat.plus) ) (n)) (m)) := fun (n : (nat.nat) ) , fun (a : (nat.nat) ) , fun (b : (nat.nat) ) , ((((@nat.nat_ind) (fun (_x_365 : (nat.nat) ) , ((((nat.le_) ) (a)) (b)) -> (((nat.le_) ) ((((nat.plus) ) (_x_365)) (a))) ((((nat.plus) ) (_x_365)) (b)))) ((((@nat.sym_eq_plus) ((nat.O) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) (a)) (b)) -> (((nat.le_) ) ((((nat.plus) ) ((nat.O) )) (a))) ((y) (b)))) ((((@nat.sym_eq_plus) ((nat.O) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) (a)) (b)) -> (((nat.le_) ) ((y) (a))) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) ((nat.O) )) (b)))) (((((@nat.sym_eq_filter_nat_type_O) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) (a)) (b)) -> (((nat.le_) ) ((y) (a))) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) ((nat.O) )) (b)))) (((((@nat.sym_eq_filter_nat_type_O) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) (a)) (b)) -> (((nat.le_) ) ((((nat.plus_body) ) ((nat.O) )) (a))) ((y) (b)))) (((@nat.sym_eq_plus_body_O) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) (a)) (b)) -> (((nat.le_) ) ((((nat.plus_body) ) ((nat.O) )) (a))) ((y) (b)))) (((@nat.sym_eq_plus_body_O) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) (a)) (b)) -> (((nat.le_) ) ((y) (a))) (b))) (fun (auto : (((nat.le_) ) (a)) (b)) , (auto))))))))) (fun (m : (nat.nat) ) , fun (H : ((((nat.le_) ) (a)) (b)) -> (((nat.le_) ) ((((nat.plus) ) (m)) (a))) ((((nat.plus) ) (m)) (b))) , (fun (leab : (((nat.le_) ) (a)) (b)) , ((((@nat.sym_eq_plus) (((nat.S) ) (m))) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((nat.le_) ) ((((nat.plus) ) (((nat.S) ) (m))) (a))) ((y) (b)))) ((((@nat.sym_eq_plus) (((nat.S) ) (m))) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((nat.le_) ) ((y) (a))) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (((nat.S) ) (m))) (b)))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (m)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((nat.le_) ) ((y) (a))) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (((nat.S) ) (m))) (b)))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (m)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((nat.le_) ) ((((nat.plus_body) ) (((nat.S) ) (m))) (a))) ((y) (b)))) ((((@nat.sym_eq_plus_body_S) (m)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((nat.le_) ) ((((nat.plus_body) ) (((nat.S) ) (m))) (a))) ((y) (b)))) ((((@nat.sym_eq_plus_body_S) (m)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((nat.le_) ) ((y) (a))) (((nat.S) ) ((((nat.plus) ) (m)) (b))))) ((((@nat.le_S_S) ((((nat.plus) ) (m)) (a))) ((((nat.plus) ) (m)) (b))) ((H) (leab)))))))))))) (n).
theorem nat.monotonic_le_plus_l : forall (m:(nat.nat) ) , (((relations.monotonic) ((nat.nat) )) ((nat.le_) )) (fun (n : (nat.nat) ) , (((nat.plus) ) (n)) (m)) := fun (m : (nat.nat) ) , fun (x : (nat.nat) ) , fun (y : (nat.nat) ) , fun (auto : (((nat.le_) ) (x)) (y)) , (((((@logic.eq_coerc) ((((nat.le_) ) ((((nat.plus) ) (m)) (x))) ((((nat.plus) ) (m)) (y)))) ((((nat.le_) ) ((((nat.plus) ) (x)) (m))) ((((nat.plus) ) (y)) (m)))) (((((@nat.monotonic_le_plus_r) (m)) (x)) (y)) (auto))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (m)) (x))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) ((((nat.plus) ) (m)) (x))) ((((nat.plus) ) (m)) (y)))) ((((nat.le_) ) (__)) ((((nat.plus) ) (y)) (m))))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (m)) (y))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) ((((nat.plus) ) (m)) (x))) ((((nat.plus) ) (m)) (y)))) ((((nat.le_) ) ((((nat.plus) ) (m)) (x))) (__)))) (((@logic.refl_) (Prop)) ((((nat.le_) ) ((((nat.plus) ) (m)) (x))) ((((nat.plus) ) (m)) (y))))) ((((nat.plus) ) (y)) (m))) (((@nat.commutative_plus) (y)) (m)))) ((((nat.plus) ) (x)) (m))) (((@nat.commutative_plus) (x)) (m)))).
theorem nat.le_plus : forall (n1:(nat.nat) ) , forall (n2:(nat.nat) ) , forall (m1:(nat.nat) ) , forall (m2:(nat.nat) ) , ((((nat.le_) ) (n1)) (n2)) -> ((((nat.le_) ) (m1)) (m2)) -> (((nat.le_) ) ((((nat.plus) ) (n1)) (m1))) ((((nat.plus) ) (n2)) (m2)) := fun (n1 : (nat.nat) ) , fun (n2 : (nat.nat) ) , fun (m1 : (nat.nat) ) , fun (m2 : (nat.nat) ) , fun (len : (((nat.le_) ) (n1)) (n2)) , (fun (lem : (((nat.le_) ) (m1)) (m2)) , ((((((@nat.transitive_le) ((((nat.plus) ) (n1)) (m1))) ((((nat.plus) ) (n1)) (m2))) ((((nat.plus) ) (n2)) (m2))) (((((@nat.monotonic_le_plus_r) (n1)) (m1)) (m2)) (lem))) (((((@nat.monotonic_le_plus_l) (m2)) (n1)) (n2)) (len)))).
theorem nat.le_plus_n : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , (((nat.le_) ) (m)) ((((nat.plus) ) (n)) (m)) := fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , ((((@logic.eq_coerc) ((((nat.le_) ) ((((nat.plus) ) ((nat.O) )) (m))) ((((nat.plus) ) (n)) (m)))) ((((nat.le_) ) (m)) ((((nat.plus) ) (n)) (m)))) (((((@nat.monotonic_le_plus_l) (m)) ((nat.O) )) (n)) ((@nat.le_O_n) (n)))) (((((((@logic.rewrite_l) ((nat.nat) )) (m)) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) (__)) ((((nat.plus) ) (n)) (m)))) ((((nat.le_) ) (m)) ((((nat.plus) ) (n)) (m))))) (((@logic.refl_) (Prop)) ((((nat.le_) ) (m)) ((((nat.plus) ) (n)) (m))))) ((((nat.plus) ) ((nat.O) )) (m))) ((@nat.plus_O_n) (m))).
theorem nat.le_plus_b : forall (b:(nat.nat) ) , forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , ((((nat.le_) ) ((((nat.plus) ) (n)) (b))) (m)) -> (((nat.le_) ) (n)) (m) := fun (b : (nat.nat) ) , fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , fun (auto : (((nat.le_) ) ((((nat.plus) ) (n)) (b))) (m)) , ((((((@nat.transitive_le) (n)) ((((nat.plus) ) (n)) (b))) (m)) (((((@logic.eq_coerc) ((((nat.le_) ) (n)) ((((nat.plus) ) (b)) (n)))) ((((nat.le_) ) (n)) ((((nat.plus) ) (n)) (b)))) (((@nat.le_plus_n) (b)) (n))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (b)) (n))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) (n)) ((((nat.plus) ) (b)) (n)))) ((((nat.le_) ) (n)) (__)))) (((@logic.refl_) (Prop)) ((((nat.le_) ) (n)) ((((nat.plus) ) (b)) (n))))) ((((nat.plus) ) (n)) (b))) (((@nat.commutative_plus) (n)) (b))))) (auto)).
theorem nat.le_plus_n_r : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , (((nat.le_) ) (m)) ((((nat.plus) ) (m)) (n)) := fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , ((((@logic.eq_coerc) ((((nat.le_) ) (m)) ((((nat.plus) ) (n)) (m)))) ((((nat.le_) ) (m)) ((((nat.plus) ) (m)) (n)))) (((@nat.le_plus_n) (n)) (m))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (n)) (m))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) (m)) ((((nat.plus) ) (n)) (m)))) ((((nat.le_) ) (m)) (__)))) (((@logic.refl_) (Prop)) ((((nat.le_) ) (m)) ((((nat.plus) ) (n)) (m))))) ((((nat.plus) ) (m)) (n))) (((@nat.commutative_plus) (m)) (n))).
theorem nat.le_plus_to_le : forall (a:(nat.nat) ) , forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , ((((nat.le_) ) ((((nat.plus) ) (a)) (n))) ((((nat.plus) ) (a)) (m))) -> (((nat.le_) ) (n)) (m) := fun (a : (nat.nat) ) , ((((@nat.nat_ind) (fun (_x_365 : (nat.nat) ) , forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , ((((nat.le_) ) ((((nat.plus) ) (_x_365)) (n))) ((((nat.plus) ) (_x_365)) (m))) -> (((nat.le_) ) (n)) (m))) (fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , (((@nat.sym_eq_plus) ((nat.O) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) ((((nat.plus) ) ((nat.O) )) (n))) ((y) (m))) -> (((nat.le_) ) (n)) (m))) ((((@nat.sym_eq_plus) ((nat.O) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) ((y) (n))) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) ((nat.O) )) (m))) -> (((nat.le_) ) (n)) (m))) (((((@nat.sym_eq_filter_nat_type_O) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) ((y) (n))) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) ((nat.O) )) (m))) -> (((nat.le_) ) (n)) (m))) (((((@nat.sym_eq_filter_nat_type_O) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) ((((nat.plus_body) ) ((nat.O) )) (n))) ((y) (m))) -> (((nat.le_) ) (n)) (m))) (((@nat.sym_eq_plus_body_O) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) ((((nat.plus_body) ) ((nat.O) )) (n))) ((y) (m))) -> (((nat.le_) ) (n)) (m))) (((@nat.sym_eq_plus_body_O) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) ((y) (n))) (m)) -> (((nat.le_) ) (n)) (m))) (fun (auto : (((nat.le_) ) (n)) (m)) , (auto))))))))) (fun (x_366 : (nat.nat) ) , fun (_x_368 : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , ((((nat.le_) ) ((((nat.plus) ) (x_366)) (n))) ((((nat.plus) ) (x_366)) (m))) -> (((nat.le_) ) (n)) (m)) , (fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , (((@nat.sym_eq_plus) (((nat.S) ) (x_366))) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) ((((nat.plus) ) (((nat.S) ) (x_366))) (n))) ((y) (m))) -> (((nat.le_) ) (n)) (m))) ((((@nat.sym_eq_plus) (((nat.S) ) (x_366))) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) ((y) (n))) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (((nat.S) ) (x_366))) (m))) -> (((nat.le_) ) (n)) (m))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (x_366)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) ((y) (n))) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (((nat.S) ) (x_366))) (m))) -> (((nat.le_) ) (n)) (m))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (x_366)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) ((((nat.plus_body) ) (((nat.S) ) (x_366))) (n))) ((y) (m))) -> (((nat.le_) ) (n)) (m))) ((((@nat.sym_eq_plus_body_S) (x_366)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) ((((nat.plus_body) ) (((nat.S) ) (x_366))) (n))) ((y) (m))) -> (((nat.le_) ) (n)) (m))) ((((@nat.sym_eq_plus_body_S) (x_366)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) ((y) (n))) (((nat.S) ) ((((nat.plus) ) (x_366)) (m)))) -> (((nat.le_) ) (n)) (m))) (fun (auto : (((nat.le_) ) (((nat.S) ) ((((nat.plus) ) (x_366)) (n)))) (((nat.S) ) ((((nat.plus) ) (x_366)) (m)))) , (((((@logic.eq_coerc) ((((nat.le_) ) (((nat.pred_) ) (((nat.S) ) (n)))) (((nat.pred_) ) (((nat.S) ) (m))))) ((((nat.le_) ) (n)) (m))) ((((@nat.monotonic_pred) (((nat.S) ) (n))) (((nat.S) ) (m))) ((((_x_368) (((nat.S) ) (n))) (((nat.S) ) (m))) (((((@logic.eq_coerc) ((((nat.le_) ) (((nat.S) ) ((((nat.plus) ) (x_366)) (n)))) (((nat.S) ) ((((nat.plus) ) (x_366)) (m))))) ((((nat.le_) ) ((((nat.plus) ) (x_366)) (((nat.S) ) (n)))) ((((nat.plus) ) (x_366)) (((nat.S) ) (m))))) (auto)) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (x_366)) (((nat.S) ) (n)))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) (__)) (((nat.S) ) ((((nat.plus) ) (x_366)) (m))))) ((((nat.le_) ) ((((nat.plus) ) (x_366)) (((nat.S) ) (n)))) ((((nat.plus) ) (x_366)) (((nat.S) ) (m)))))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (x_366)) (((nat.S) ) (m)))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) ((((nat.plus) ) (x_366)) (((nat.S) ) (n)))) (__))) ((((nat.le_) ) ((((nat.plus) ) (x_366)) (((nat.S) ) (n)))) ((((nat.plus) ) (x_366)) (((nat.S) ) (m)))))) (((@logic.refl_) (Prop)) ((((nat.le_) ) ((((nat.plus) ) (x_366)) (((nat.S) ) (n)))) ((((nat.plus) ) (x_366)) (((nat.S) ) (m)))))) (((nat.S) ) ((((nat.plus) ) (x_366)) (m)))) (((@nat.plus_n_Sm) (x_366)) (m)))) (((nat.S) ) ((((nat.plus) ) (x_366)) (n)))) (((@nat.plus_n_Sm) (x_366)) (n))))))) (((((((@logic.rewrite_l) ((nat.nat) )) (n)) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) (__)) (((nat.pred_) ) (((nat.S) ) (m))))) ((((nat.le_) ) (n)) (m)))) (((((((@logic.rewrite_l) ((nat.nat) )) (m)) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) (n)) (__))) ((((nat.le_) ) (n)) (m)))) (((@logic.refl_) (Prop)) ((((nat.le_) ) (n)) (m)))) (((nat.pred_) ) (((nat.S) ) (m)))) ((@nat.pred_Sn) (m)))) (((nat.pred_) ) (((nat.S) ) (n)))) ((@nat.pred_Sn) (n))))))))))))) (a).
theorem nat.le_plus_to_le_r : forall (a:(nat.nat) ) , forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , ((((nat.le_) ) ((((nat.plus) ) (n)) (a))) ((((nat.plus) ) (m)) (a))) -> (((nat.le_) ) (n)) (m) := fun (a : (nat.nat) ) , fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , fun (auto : (((nat.le_) ) ((((nat.plus) ) (n)) (a))) ((((nat.plus) ) (m)) (a))) , (((((@nat.le_plus_to_le) (a)) (n)) (m)) (((((@logic.eq_coerc) ((((nat.le_) ) ((((nat.plus) ) (n)) (a))) ((((nat.plus) ) (m)) (a)))) ((((nat.le_) ) ((((nat.plus) ) (a)) (n))) ((((nat.plus) ) (a)) (m)))) (auto)) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (a)) (n))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) (__)) ((((nat.plus) ) (m)) (a)))) ((((nat.le_) ) ((((nat.plus) ) (a)) (n))) ((((nat.plus) ) (a)) (m))))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (a)) (m))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) ((((nat.plus) ) (a)) (n))) (__))) ((((nat.le_) ) ((((nat.plus) ) (a)) (n))) ((((nat.plus) ) (a)) (m))))) (((@logic.refl_) (Prop)) ((((nat.le_) ) ((((nat.plus) ) (a)) (n))) ((((nat.plus) ) (a)) (m))))) ((((nat.plus) ) (m)) (a))) (((@nat.commutative_plus) (m)) (a)))) ((((nat.plus) ) (n)) (a))) (((@nat.commutative_plus) (n)) (a))))).
theorem nat.monotonic_le_times_r : forall (n:(nat.nat) ) , (((relations.monotonic) ((nat.nat) )) ((nat.le_) )) (fun (m : (nat.nat) ) , (((nat.times) ) (n)) (m)) := fun (n : (nat.nat) ) , fun (x : (nat.nat) ) , fun (y : (nat.nat) ) , fun (lexy : (((nat.le_) ) (x)) (y)) , (((((@nat.nat_ind) (fun (_x_365 : (nat.nat) ) , (((nat.le_) ) ((((nat.times) ) (_x_365)) (x))) ((((nat.times) ) (_x_365)) (y)))) ((((@nat.sym_eq_times) ((nat.O) )) (fun (z : ((nat.nat) ) -> (nat.nat) ) , (((nat.le_) ) ((((nat.times) ) ((nat.O) )) (x))) ((z) (y)))) ((((@nat.sym_eq_times) ((nat.O) )) (fun (z : ((nat.nat) ) -> (nat.nat) ) , (((nat.le_) ) ((z) (x))) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) ((nat.O) )) (y)))) (((((@nat.sym_eq_filter_nat_type_O) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) (fun (z : ((nat.nat) ) -> (nat.nat) ) , (((nat.le_) ) ((z) (x))) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) ((nat.O) )) (y)))) (((((@nat.sym_eq_filter_nat_type_O) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) (fun (z : ((nat.nat) ) -> (nat.nat) ) , (((nat.le_) ) ((((nat.times_body) ) ((nat.O) )) (x))) ((z) (y)))) (((@nat.sym_eq_times_body_O) (fun (z : ((nat.nat) ) -> (nat.nat) ) , (((nat.le_) ) ((((nat.times_body) ) ((nat.O) )) (x))) ((z) (y)))) (((@nat.sym_eq_times_body_O) (fun (z : ((nat.nat) ) -> (nat.nat) ) , (((nat.le_) ) ((z) (x))) ((nat.O) ))) ((@nat.le_O_n) ((nat.O) ))))))))) (fun (a : (nat.nat) ) , fun (lea : (((nat.le_) ) ((((nat.times) ) (a)) (x))) ((((nat.times) ) (a)) (y))) , ((((@nat.sym_eq_times) (((nat.S) ) (a))) (fun (z : ((nat.nat) ) -> (nat.nat) ) , (((nat.le_) ) ((((nat.times) ) (((nat.S) ) (a))) (x))) ((z) (y)))) ((((@nat.sym_eq_times) (((nat.S) ) (a))) (fun (z : ((nat.nat) ) -> (nat.nat) ) , (((nat.le_) ) ((z) (x))) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) (((nat.S) ) (a))) (y)))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) (a)) (fun (z : ((nat.nat) ) -> (nat.nat) ) , (((nat.le_) ) ((z) (x))) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) (((nat.S) ) (a))) (y)))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) (a)) (fun (z : ((nat.nat) ) -> (nat.nat) ) , (((nat.le_) ) ((((nat.times_body) ) (((nat.S) ) (a))) (x))) ((z) (y)))) ((((@nat.sym_eq_times_body_S) (a)) (fun (z : ((nat.nat) ) -> (nat.nat) ) , (((nat.le_) ) ((((nat.times_body) ) (((nat.S) ) (a))) (x))) ((z) (y)))) ((((@nat.sym_eq_times_body_S) (a)) (fun (z : ((nat.nat) ) -> (nat.nat) ) , (((nat.le_) ) ((z) (x))) ((((nat.plus) ) (y)) ((((nat.times) ) (a)) (y))))) (((((((@nat.le_plus) (x)) (y)) ((((nat.times) ) (a)) (x))) ((((nat.times) ) (a)) (y))) (lexy)) (lea)))))))))) (n)).
theorem nat.le_times : forall (n1:(nat.nat) ) , forall (n2:(nat.nat) ) , forall (m1:(nat.nat) ) , forall (m2:(nat.nat) ) , ((((nat.le_) ) (n1)) (n2)) -> ((((nat.le_) ) (m1)) (m2)) -> (((nat.le_) ) ((((nat.times) ) (n1)) (m1))) ((((nat.times) ) (n2)) (m2)) := fun (n1 : (nat.nat) ) , fun (n2 : (nat.nat) ) , fun (m1 : (nat.nat) ) , fun (m2 : (nat.nat) ) , fun (len : (((nat.le_) ) (n1)) (n2)) , (fun (lem : (((nat.le_) ) (m1)) (m2)) , ((((((@nat.transitive_le) ((((nat.times) ) (n1)) (m1))) ((((nat.times) ) (n1)) (m2))) ((((nat.times) ) (n2)) (m2))) (((((@nat.monotonic_le_times_r) (n1)) (m1)) (m2)) (lem))) (((((@logic.eq_coerc) ((((nat.le_) ) ((((nat.times) ) (m2)) (n1))) ((((nat.times) ) (m2)) (n2)))) ((((nat.le_) ) ((((nat.times) ) (n1)) (m2))) ((((nat.times) ) (n2)) (m2)))) (((((@nat.monotonic_le_times_r) (m2)) (n1)) (n2)) (len))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.times) ) (n1)) (m2))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) (__)) ((((nat.times) ) (m2)) (n2)))) ((((nat.le_) ) ((((nat.times) ) (n1)) (m2))) ((((nat.times) ) (n2)) (m2))))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.times) ) (n2)) (m2))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) ((((nat.times) ) (n1)) (m2))) (__))) ((((nat.le_) ) ((((nat.times) ) (n1)) (m2))) ((((nat.times) ) (n2)) (m2))))) (((@logic.refl_) (Prop)) ((((nat.le_) ) ((((nat.times) ) (n1)) (m2))) ((((nat.times) ) (n2)) (m2))))) ((((nat.times) ) (m2)) (n2))) (((@nat.commutative_times) (m2)) (n2)))) ((((nat.times) ) (m2)) (n1))) (((@nat.commutative_times) (m2)) (n1)))))).
theorem nat.le_plus_minus_m_m : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , (((nat.le_) ) (n)) ((((nat.plus) ) ((((nat.minus) ) (n)) (m))) (m)) := fun (n : (nat.nat) ) , ((((@nat.nat_ind) (fun (_x_365 : (nat.nat) ) , forall (m:(nat.nat) ) , (((nat.le_) ) (_x_365)) ((((nat.plus) ) ((((nat.minus) ) (_x_365)) (m))) (m)))) ((((@nat.sym_eq_minus) ((nat.O) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , forall (m:(nat.nat) ) , (((nat.le_) ) ((nat.O) )) ((((nat.plus) ) ((y) (m))) (m)))) (((((@nat.sym_eq_filter_nat_type_O) (((nat.nat) ) -> (nat.nat) )) ((nat.minus_body) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , forall (m:(nat.nat) ) , (((nat.le_) ) ((nat.O) )) ((((nat.plus) ) ((y) (m))) (m)))) (((@nat.sym_eq_minus_body_O) (fun (y : ((nat.nat) ) -> (nat.nat) ) , forall (m:(nat.nat) ) , (((nat.le_) ) ((nat.O) )) ((((nat.plus) ) ((y) (m))) (m)))) (fun (m : (nat.nat) ) , ((@nat.le_plus_n_r) (m)) ((nat.O) )))))) (fun (a : (nat.nat) ) , fun (Hind : forall (m:(nat.nat) ) , (((nat.le_) ) (a)) ((((nat.plus) ) ((((nat.minus) ) (a)) (m))) (m))) , (fun (m : (nat.nat) ) , ((((@nat.match_nat_prop) (fun (__ : (nat.nat) ) , (((nat.le_) ) (((nat.S) ) (a))) ((((nat.plus) ) ((((nat.minus) ) (((nat.S) ) (a))) (__))) (__)))) ((((@nat.sym_eq_minus) (((nat.S) ) (a))) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((nat.le_) ) (((nat.S) ) (a))) ((((nat.plus) ) ((y) ((nat.O) ))) ((nat.O) )))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.minus_body) )) (a)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((nat.le_) ) (((nat.S) ) (a))) ((((nat.plus) ) ((y) ((nat.O) ))) ((nat.O) )))) ((((@nat.sym_eq_minus_body_S) (a)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((nat.le_) ) (((nat.S) ) (a))) ((((nat.plus) ) ((y) ((nat.O) ))) ((nat.O) )))) ((((((@nat.sym_eq_match_nat_type_O) ((nat.nat) )) (((nat.S) ) (a))) (fun (q : (nat.nat) ) , (((nat.minus) ) (a)) (q))) (fun (y : (nat.nat) ) , (((nat.le_) ) (((nat.S) ) (a))) ((((nat.plus) ) (y)) ((nat.O) )))) (((@nat.le_plus_n_r) ((nat.O) )) (((nat.S) ) (a)))))))) (fun (n0 : (nat.nat) ) , (((@nat.sym_eq_minus) (((nat.S) ) (a))) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((nat.le_) ) (((nat.S) ) (a))) ((((nat.plus) ) ((y) (((nat.S) ) (n0)))) (((nat.S) ) (n0))))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.minus_body) )) (a)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((nat.le_) ) (((nat.S) ) (a))) ((((nat.plus) ) ((y) (((nat.S) ) (n0)))) (((nat.S) ) (n0))))) ((((@nat.sym_eq_minus_body_S) (a)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((nat.le_) ) (((nat.S) ) (a))) ((((nat.plus) ) ((y) (((nat.S) ) (n0)))) (((nat.S) ) (n0))))) (((((((@nat.sym_eq_match_nat_type_S) ((nat.nat) )) (((nat.S) ) (a))) (fun (q : (nat.nat) ) , (((nat.minus) ) (a)) (q))) (n0)) (fun (y : (nat.nat) ) , (((nat.le_) ) (((nat.S) ) (a))) ((((nat.plus) ) (y)) (((nat.S) ) (n0))))) (((((@logic.eq_coerc) ((((nat.le_) ) (((nat.S) ) (a))) (((nat.S) ) ((((nat.plus) ) ((((nat.minus) ) (a)) (n0))) (n0))))) ((((nat.le_) ) (((nat.S) ) (a))) ((((nat.plus) ) ((((nat.minus) ) (a)) (n0))) (((nat.S) ) (n0))))) ((((@nat.le_S_S) (a)) ((((nat.plus) ) ((((nat.minus) ) (a)) (n0))) (n0))) ((Hind) (n0)))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) ((((nat.minus) ) (a)) (n0))) (((nat.S) ) (n0)))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) (((nat.S) ) (a))) (__))) ((((nat.le_) ) (((nat.S) ) (a))) ((((nat.plus) ) ((((nat.minus) ) (a)) (n0))) (((nat.S) ) (n0)))))) (((@logic.refl_) (Prop)) ((((nat.le_) ) (((nat.S) ) (a))) ((((nat.plus) ) ((((nat.minus) ) (a)) (n0))) (((nat.S) ) (n0)))))) (((nat.S) ) ((((nat.plus) ) ((((nat.minus) ) (a)) (n0))) (n0)))) (((@nat.plus_n_Sm) ((((nat.minus) ) (a)) (n0))) (n0))))))))) (m)))) (n).
theorem nat.le_plus_to_minus_r : forall (a:(nat.nat) ) , forall (b:(nat.nat) ) , forall (c:(nat.nat) ) , ((((nat.le_) ) ((((nat.plus) ) (a)) (b))) (c)) -> (((nat.le_) ) (a)) ((((nat.minus) ) (c)) (b)) := fun (a : (nat.nat) ) , fun (b : (nat.nat) ) , fun (c : (nat.nat) ) , fun (H : (((nat.le_) ) ((((nat.plus) ) (a)) (b))) (c)) , (((((@nat.le_plus_to_le_r) (b)) (a)) ((((nat.minus) ) (c)) (b))) ((((((@nat.transitive_le) ((((nat.plus) ) (a)) (b))) (c)) ((((nat.plus) ) ((((nat.minus) ) (c)) (b))) (b))) (H)) (((@nat.le_plus_minus_m_m) (c)) (b)))).
theorem nat.lt_to_le : forall (x:(nat.nat) ) , forall (y:(nat.nat) ) , ((((nat.lt_) ) (x)) (y)) -> (((nat.le_) ) (x)) (y) := fun (x : (nat.nat) ) , fun (y : (nat.nat) ) , fun (auto : (((nat.lt_) ) (x)) (y)) , (((((@nat.le_plus_b) (((nat.S) ) ((nat.O) ))) (x)) (y)) (((((@logic.eq_coerc) ((((nat.le_) ) (((nat.S) ) (x))) (y))) ((((nat.le_) ) ((((nat.plus) ) (x)) (((nat.S) ) ((nat.O) )))) (y))) (auto)) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (x)) (((nat.S) ) ((nat.O) )))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) (__)) (y))) ((((nat.le_) ) ((((nat.plus) ) (x)) (((nat.S) ) ((nat.O) )))) (y)))) (((@logic.refl_) (Prop)) ((((nat.le_) ) ((((nat.plus) ) (x)) (((nat.S) ) ((nat.O) )))) (y)))) (((nat.S) ) (x))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (x)) ((nat.O) ))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((nat.S) ) (__))) ((((nat.plus) ) (x)) (((nat.S) ) ((nat.O) ))))) (((@nat.plus_n_Sm) (x)) ((nat.O) ))) (x)) ((@nat.plus_n_O) (x)))))).
theorem nat.transitive_lt : ((relations.transitive) ((nat.nat) )) ((nat.lt_) ) := fun (a : (nat.nat) ) , fun (b : (nat.nat) ) , fun (c : (nat.nat) ) , fun (ltab : (((nat.lt_) ) (a)) (b)) , (fun (ltbc : (((nat.lt_) ) (b)) (c)) , (((((((@nat.le_ind) (((nat.S) ) (b))) (fun (x_417 : (nat.nat) ) , (((nat.lt_) ) (a)) (x_417))) ((((@nat.le_S) (((nat.S) ) (a))) (b)) (ltab))) (fun (m : (nat.nat) ) , fun (_x_419 : (((nat.le_) ) (((nat.S) ) (b))) (m)) , (fun (_x_421 : (((nat.lt_) ) (a)) (m)) , ((((@nat.le_S) (((nat.S) ) (a))) (m)) (_x_421))))) (c)) (ltbc))).
theorem nat.lt_to_le_to_lt : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , forall (p:(nat.nat) ) , ((((nat.lt_) ) (n)) (m)) -> ((((nat.le_) ) (m)) (p)) -> (((nat.lt_) ) (n)) (p) := fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , fun (p : (nat.nat) ) , fun (H : (((nat.lt_) ) (n)) (m)) , (fun (H1 : (((nat.le_) ) (m)) (p)) , (((((((@nat.le_ind) (m)) (fun (x_417 : (nat.nat) ) , (((nat.lt_) ) (n)) (x_417))) (H)) (fun (m0 : (nat.nat) ) , fun (_x_419 : (((nat.le_) ) (m)) (m0)) , (fun (_x_421 : (((nat.lt_) ) (n)) (m0)) , ((((((@nat.transitive_lt) (n)) (m0)) (((nat.S) ) (m0))) (_x_421)) (((((@logic.eq_coerc) ((((nat.le_) ) (((nat.S) ) (m0))) ((((nat.plus) ) ((nat.O) )) (((nat.S) ) (m0))))) ((((nat.le_) ) (((nat.S) ) (m0))) (((nat.S) ) (m0)))) (((@nat.le_plus_n) ((nat.O) )) (((nat.S) ) (m0)))) (((((((@logic.rewrite_l) ((nat.nat) )) (((nat.S) ) (m0))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) (((nat.S) ) (m0))) (__))) ((((nat.le_) ) (((nat.S) ) (m0))) (((nat.S) ) (m0))))) (((@logic.refl_) (Prop)) ((((nat.le_) ) (((nat.S) ) (m0))) (((nat.S) ) (m0))))) ((((nat.plus) ) ((nat.O) )) (((nat.S) ) (m0)))) ((@nat.plus_O_n) (((nat.S) ) (m0))))))))) (p)) (H1))).
theorem nat.le_to_lt_to_lt : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , forall (p:(nat.nat) ) , ((((nat.le_) ) (n)) (m)) -> ((((nat.lt_) ) (m)) (p)) -> (((nat.lt_) ) (n)) (p) := fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , fun (p : (nat.nat) ) , fun (H : (((nat.le_) ) (n)) (m)) , (((((((@nat.le_ind) (n)) (fun (x_417 : (nat.nat) ) , ((((nat.lt_) ) (x_417)) (p)) -> (((nat.lt_) ) (n)) (p))) (fun (auto : (((nat.lt_) ) (n)) (p)) , (auto))) (fun (m0 : (nat.nat) ) , fun (_x_419 : (((nat.le_) ) (n)) (m0)) , (fun (_x_421 : ((((nat.lt_) ) (m0)) (p)) -> (((nat.lt_) ) (n)) (p)) , (fun (auto : (((nat.lt_) ) (((nat.S) ) (m0))) (p)) , ((_x_421) ((((((@nat.transitive_lt) (m0)) (((nat.S) ) (m0))) (p)) (((((@logic.eq_coerc) ((((nat.le_) ) (((nat.S) ) (m0))) ((((nat.plus) ) ((nat.O) )) (((nat.S) ) (m0))))) ((((nat.le_) ) (((nat.S) ) (m0))) (((nat.S) ) (m0)))) (((@nat.le_plus_n) ((nat.O) )) (((nat.S) ) (m0)))) (((((((@logic.rewrite_l) ((nat.nat) )) (((nat.S) ) (m0))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) (((nat.S) ) (m0))) (__))) ((((nat.le_) ) (((nat.S) ) (m0))) (((nat.S) ) (m0))))) (((@logic.refl_) (Prop)) ((((nat.le_) ) (((nat.S) ) (m0))) (((nat.S) ) (m0))))) ((((nat.plus) ) ((nat.O) )) (((nat.S) ) (m0)))) ((@nat.plus_O_n) (((nat.S) ) (m0)))))) (auto))))))) (m)) (H)).
theorem nat.lt_S_to_lt : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , ((((nat.lt_) ) (((nat.S) ) (n))) (m)) -> (((nat.lt_) ) (n)) (m) := fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , fun (auto : (((nat.lt_) ) (((nat.S) ) (n))) (m)) , ((((((@nat.transitive_lt) (n)) (((nat.S) ) (n))) (m)) (((((@logic.eq_coerc) ((((nat.le_) ) (((nat.S) ) (n))) ((((nat.plus) ) ((nat.O) )) (((nat.S) ) (n))))) ((((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (n)))) (((@nat.le_plus_n) ((nat.O) )) (((nat.S) ) (n)))) (((((((@logic.rewrite_l) ((nat.nat) )) (((nat.S) ) (n))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) (((nat.S) ) (n))) (__))) ((((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (n))))) (((@logic.refl_) (Prop)) ((((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (n))))) ((((nat.plus) ) ((nat.O) )) (((nat.S) ) (n)))) ((@nat.plus_O_n) (((nat.S) ) (n)))))) (auto)).
theorem nat.ltn_to_ltO : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , ((((nat.lt_) ) (n)) (m)) -> (((nat.lt_) ) ((nat.O) )) (m) := fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , fun (auto : (((nat.lt_) ) (n)) (m)) , ((((((@nat.lt_to_le_to_lt) ((nat.O) )) (((nat.S) ) (n))) (m)) (((((@logic.eq_coerc) ((((nat.le_) ) (((nat.S) ) ((nat.O) ))) ((((nat.plus) ) (n)) (((nat.S) ) ((nat.O) ))))) ((((nat.le_) ) (((nat.S) ) ((nat.O) ))) (((nat.S) ) (n)))) (((@nat.le_plus_n) (n)) (((nat.S) ) ((nat.O) )))) (((((((@logic.rewrite_l) ((nat.nat) )) (((nat.S) ) (n))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) (((nat.S) ) ((nat.O) ))) (__))) ((((nat.le_) ) (((nat.S) ) ((nat.O) ))) (((nat.S) ) (n))))) (((@logic.refl_) (Prop)) ((((nat.le_) ) (((nat.S) ) ((nat.O) ))) (((nat.S) ) (n))))) ((((nat.plus) ) (n)) (((nat.S) ) ((nat.O) )))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (n)) ((nat.O) ))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((nat.S) ) (__))) ((((nat.plus) ) (n)) (((nat.S) ) ((nat.O) ))))) (((@nat.plus_n_Sm) (n)) ((nat.O) ))) (n)) ((@nat.plus_n_O) (n)))))) (auto)).
theorem nat.lt_O_S : forall (n:(nat.nat) ) , (((nat.lt_) ) ((nat.O) )) (((nat.S) ) (n)) := fun (n : (nat.nat) ) , (((@nat.ltn_to_ltO) (n)) (((nat.S) ) (n))) (((((@logic.eq_coerc) ((((nat.le_) ) (((nat.S) ) (n))) ((((nat.plus) ) ((nat.O) )) (((nat.S) ) (n))))) ((((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (n)))) (((@nat.le_plus_n) ((nat.O) )) (((nat.S) ) (n)))) (((((((@logic.rewrite_l) ((nat.nat) )) (((nat.S) ) (n))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) (((nat.S) ) (n))) (__))) ((((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (n))))) (((@logic.refl_) (Prop)) ((((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (n))))) ((((nat.plus) ) ((nat.O) )) (((nat.S) ) (n)))) ((@nat.plus_O_n) (((nat.S) ) (n))))).
theorem nat.monotonic_lt_plus_r : forall (n:(nat.nat) ) , (((relations.monotonic) ((nat.nat) )) ((nat.lt_) )) (fun (m : (nat.nat) ) , (((nat.plus) ) (n)) (m)) := fun (n : (nat.nat) ) , fun (x : (nat.nat) ) , fun (y : (nat.nat) ) , fun (auto : (((nat.lt_) ) (x)) (y)) , (((((@logic.eq_coerc) ((((nat.le_) ) ((((nat.plus) ) (n)) (((nat.S) ) (x)))) ((((nat.plus) ) (n)) (y)))) ((((nat.le_) ) (((nat.S) ) ((((nat.plus) ) (n)) (x)))) ((((nat.plus) ) (n)) (y)))) (((((@nat.monotonic_le_plus_r) (n)) (((nat.S) ) (x))) (y)) (auto))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (n)) (((nat.S) ) (x)))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) ((((nat.plus) ) (n)) (((nat.S) ) (x)))) ((((nat.plus) ) (n)) (y)))) ((((nat.le_) ) (__)) ((((nat.plus) ) (n)) (y))))) (((@logic.refl_) (Prop)) ((((nat.le_) ) ((((nat.plus) ) (n)) (((nat.S) ) (x)))) ((((nat.plus) ) (n)) (y))))) (((nat.S) ) ((((nat.plus) ) (n)) (x)))) (((@nat.plus_n_Sm) (n)) (x)))).
theorem nat.monotonic_lt_plus_l : forall (n:(nat.nat) ) , (((relations.monotonic) ((nat.nat) )) ((nat.lt_) )) (fun (m : (nat.nat) ) , (((nat.plus) ) (m)) (n)) := fun (n : (nat.nat) ) , fun (x : (nat.nat) ) , fun (y : (nat.nat) ) , fun (auto : (((nat.lt_) ) (x)) (y)) , (((((@logic.eq_coerc) ((((nat.le_) ) ((((nat.plus) ) (n)) (((nat.S) ) (x)))) ((((nat.plus) ) (n)) (y)))) ((((nat.le_) ) (((nat.S) ) ((((nat.plus) ) (x)) (n)))) ((((nat.plus) ) (y)) (n)))) (((((@nat.monotonic_le_plus_r) (n)) (((nat.S) ) (x))) (y)) (auto))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (n)) (x))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) ((((nat.plus) ) (n)) (((nat.S) ) (x)))) ((((nat.plus) ) (n)) (y)))) ((((nat.le_) ) (((nat.S) ) (__))) ((((nat.plus) ) (y)) (n))))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (n)) (((nat.S) ) (x)))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) ((((nat.plus) ) (n)) (((nat.S) ) (x)))) ((((nat.plus) ) (n)) (y)))) ((((nat.le_) ) (__)) ((((nat.plus) ) (y)) (n))))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (n)) (y))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) ((((nat.plus) ) (n)) (((nat.S) ) (x)))) ((((nat.plus) ) (n)) (y)))) ((((nat.le_) ) ((((nat.plus) ) (n)) (((nat.S) ) (x)))) (__)))) (((@logic.refl_) (Prop)) ((((nat.le_) ) ((((nat.plus) ) (n)) (((nat.S) ) (x)))) ((((nat.plus) ) (n)) (y))))) ((((nat.plus) ) (y)) (n))) (((@nat.commutative_plus) (y)) (n)))) (((nat.S) ) ((((nat.plus) ) (n)) (x)))) (((@nat.plus_n_Sm) (n)) (x)))) ((((nat.plus) ) (x)) (n))) (((@nat.commutative_plus) (x)) (n)))).
theorem nat.monotonic_lt_times_r : forall (c:(nat.nat) ) , ((((nat.lt_) ) ((nat.O) )) (c)) -> (((relations.monotonic) ((nat.nat) )) ((nat.lt_) )) (fun (t : (nat.nat) ) , (((nat.times) ) (c)) (t)) := fun (c : (nat.nat) ) , fun (posc : (((nat.lt_) ) ((nat.O) )) (c)) , (fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , fun (ltnm : (((nat.lt_) ) (n)) (m)) , (((((((@nat.le_ind) (((nat.S) ) (n))) (fun (x_417 : (nat.nat) ) , (((nat.lt_) ) ((((nat.times) ) (c)) (n))) ((((nat.times) ) (c)) (x_417)))) (((((@logic.eq_coerc) ((((nat.le_) ) (((nat.S) ) ((((nat.plus) ) ((nat.O) )) ((((nat.times) ) (c)) (n))))) ((((nat.plus) ) (c)) ((((nat.times) ) (c)) (n))))) ((((nat.le_) ) (((nat.S) ) ((((nat.times) ) (c)) (n)))) ((((nat.times) ) (c)) (((nat.S) ) (n))))) (((((@nat.monotonic_lt_plus_l) ((((nat.times) ) (c)) (n))) ((nat.O) )) (c)) (posc))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) ((nat.O) )) (((nat.S) ) ((((nat.times) ) (c)) (n))))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) (__)) ((((nat.plus) ) (c)) ((((nat.times) ) (c)) (n))))) ((((nat.le_) ) (((nat.S) ) ((((nat.times) ) (c)) (n)))) ((((nat.times) ) (c)) (((nat.S) ) (n)))))) (((((((@logic.rewrite_l) ((nat.nat) )) ((((nat.plus) ) (c)) ((((nat.times) ) (c)) (n)))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) ((((nat.plus) ) ((nat.O) )) (((nat.S) ) ((((nat.times) ) (c)) (n))))) ((((nat.plus) ) (c)) ((((nat.times) ) (c)) (n))))) ((((nat.le_) ) (((nat.S) ) ((((nat.times) ) (c)) (n)))) (__)))) (((((((@logic.rewrite_l) ((nat.nat) )) (((nat.S) ) ((((nat.times) ) (c)) (n)))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) (__)) ((((nat.plus) ) (c)) ((((nat.times) ) (c)) (n))))) ((((nat.le_) ) (((nat.S) ) ((((nat.times) ) (c)) (n)))) ((((nat.plus) ) (c)) ((((nat.times) ) (c)) (n)))))) (((@logic.refl_) (Prop)) ((((nat.le_) ) (((nat.S) ) ((((nat.times) ) (c)) (n)))) ((((nat.plus) ) (c)) ((((nat.times) ) (c)) (n)))))) ((((nat.plus) ) ((nat.O) )) (((nat.S) ) ((((nat.times) ) (c)) (n))))) ((@nat.plus_O_n) (((nat.S) ) ((((nat.times) ) (c)) (n)))))) ((((nat.times) ) (c)) (((nat.S) ) (n)))) (((@nat.times_n_Sm) (c)) (n)))) (((nat.S) ) ((((nat.plus) ) ((nat.O) )) ((((nat.times) ) (c)) (n))))) (((@nat.plus_n_Sm) ((nat.O) )) ((((nat.times) ) (c)) (n)))))) (fun (a : (nat.nat) ) , fun (__ : (((nat.le_) ) (((nat.S) ) (n))) (a)) , (fun (lt1 : (((nat.le_) ) (((nat.S) ) ((((nat.times) ) (c)) (n)))) ((((nat.times) ) (c)) (a))) , ((((((@nat.transitive_le) (((nat.S) ) ((((nat.times) ) (c)) (n)))) ((((nat.times) ) (c)) (a))) ((((nat.times) ) (c)) (((nat.S) ) (a)))) (lt1)) (((((@logic.eq_coerc) ((((nat.le_) ) ((((nat.times) ) (c)) (a))) ((((nat.plus) ) ((((nat.times) ) (c)) (a))) (c)))) ((((nat.le_) ) ((((nat.times) ) (c)) (a))) ((((nat.times) ) (c)) (((nat.S) ) (a))))) (((@nat.le_plus_n_r) (c)) ((((nat.times) ) (c)) (a)))) (((((((@logic.rewrite_l) ((nat.nat) )) ((((nat.plus) ) (c)) ((((nat.times) ) (c)) (a)))) (fun (__1 : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) ((((nat.times) ) (c)) (a))) ((((nat.plus) ) ((((nat.times) ) (c)) (a))) (c)))) ((((nat.le_) ) ((((nat.times) ) (c)) (a))) (__1)))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (c)) ((((nat.times) ) (c)) (a)))) (fun (__1 : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) ((((nat.times) ) (c)) (a))) (__1))) ((((nat.le_) ) ((((nat.times) ) (c)) (a))) ((((nat.plus) ) (c)) ((((nat.times) ) (c)) (a)))))) (((@logic.refl_) (Prop)) ((((nat.le_) ) ((((nat.times) ) (c)) (a))) ((((nat.plus) ) (c)) ((((nat.times) ) (c)) (a)))))) ((((nat.plus) ) ((((nat.times) ) (c)) (a))) (c))) (((@nat.commutative_plus) ((((nat.times) ) (c)) (a))) (c)))) ((((nat.times) ) (c)) (((nat.S) ) (a)))) (((@nat.times_n_Sm) (c)) (a)))))))) (m)) (ltnm))).
theorem nat.monotonic_lt_times_l : forall (c:(nat.nat) ) , ((((nat.lt_) ) ((nat.O) )) (c)) -> (((relations.monotonic) ((nat.nat) )) ((nat.lt_) )) (fun (t : (nat.nat) ) , (((nat.times) ) (t)) (c)) := fun (c : (nat.nat) ) , fun (auto : (((nat.lt_) ) ((nat.O) )) (c)) , (fun (x : (nat.nat) ) , fun (y : (nat.nat) ) , fun (auto' : (((nat.lt_) ) (x)) (y)) , (((((@logic.eq_coerc) ((((nat.le_) ) (((nat.S) ) ((((nat.times) ) (c)) (x)))) ((((nat.times) ) (c)) (y)))) ((((nat.le_) ) (((nat.S) ) ((((nat.times) ) (x)) (c)))) ((((nat.times) ) (y)) (c)))) ((((((@nat.monotonic_lt_times_r) (c)) (auto)) (x)) (y)) (auto'))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.times) ) (c)) (x))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) (((nat.S) ) ((((nat.times) ) (c)) (x)))) ((((nat.times) ) (c)) (y)))) ((((nat.le_) ) (((nat.S) ) (__))) ((((nat.times) ) (y)) (c))))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.times) ) (c)) (y))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) (((nat.S) ) ((((nat.times) ) (c)) (x)))) ((((nat.times) ) (c)) (y)))) ((((nat.le_) ) (((nat.S) ) ((((nat.times) ) (c)) (x)))) (__)))) (((@logic.refl_) (Prop)) ((((nat.le_) ) (((nat.S) ) ((((nat.times) ) (c)) (x)))) ((((nat.times) ) (c)) (y))))) ((((nat.times) ) (y)) (c))) (((@nat.commutative_times) (y)) (c)))) ((((nat.times) ) (x)) (c))) (((@nat.commutative_times) (x)) (c))))).
theorem nat.lt_to_le_to_lt_times : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , forall (p:(nat.nat) ) , forall (q:(nat.nat) ) , ((((nat.lt_) ) (n)) (m)) -> ((((nat.le_) ) (p)) (q)) -> ((((nat.lt_) ) ((nat.O) )) (q)) -> (((nat.lt_) ) ((((nat.times) ) (n)) (p))) ((((nat.times) ) (m)) (q)) := fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , fun (p : (nat.nat) ) , fun (q : (nat.nat) ) , fun (ltnm : (((nat.lt_) ) (n)) (m)) , (fun (lepq : (((nat.le_) ) (p)) (q)) , (fun (posq : (((nat.lt_) ) ((nat.O) )) (q)) , ((((((@nat.le_to_lt_to_lt) ((((nat.times) ) (n)) (p))) ((((nat.times) ) (n)) (q))) ((((nat.times) ) (m)) (q))) (((((@nat.monotonic_le_times_r) (n)) (p)) (q)) (lepq))) ((((((@nat.monotonic_lt_times_l) (q)) (posq)) (n)) (m)) (ltnm))))).
theorem nat.lt_times : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , forall (p:(nat.nat) ) , forall (q:(nat.nat) ) , ((((nat.lt_) ) (n)) (m)) -> ((((nat.lt_) ) (p)) (q)) -> (((nat.lt_) ) ((((nat.times) ) (n)) (p))) ((((nat.times) ) (m)) (q)) := fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , fun (p : (nat.nat) ) , fun (q : (nat.nat) ) , fun (ltnm : (((nat.lt_) ) (n)) (m)) , (fun (ltpq : (((nat.lt_) ) (p)) (q)) , ((((((((@nat.lt_to_le_to_lt_times) (n)) (m)) (p)) (q)) (ltnm)) ((((@nat.lt_to_le) (p)) (q)) (ltpq))) ((((@nat.ltn_to_ltO) (p)) (q)) (ltpq)))).
theorem nat.lt_plus_to_minus_r : forall (a:(nat.nat) ) , forall (b:(nat.nat) ) , forall (c:(nat.nat) ) , ((((nat.lt_) ) ((((nat.plus) ) (a)) (b))) (c)) -> (((nat.lt_) ) (a)) ((((nat.minus) ) (c)) (b)) := fun (a : (nat.nat) ) , fun (b : (nat.nat) ) , fun (c : (nat.nat) ) , fun (H : (((nat.lt_) ) ((((nat.plus) ) (a)) (b))) (c)) , (((((@nat.le_plus_to_minus_r) (((nat.S) ) (a))) (b)) (c)) ((((@nat.sym_eq_plus) (((nat.S) ) (a))) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((nat.le_) ) ((y) (b))) (c))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (a)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((nat.le_) ) ((y) (b))) (c))) ((((@nat.sym_eq_plus_body_S) (a)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((nat.le_) ) ((y) (b))) (c))) (H))))).
theorem nat.lt_plus_Sn_r : forall (a:(nat.nat) ) , forall (x:(nat.nat) ) , forall (n:(nat.nat) ) , (((nat.lt_) ) (a)) ((((nat.plus) ) ((((nat.plus) ) (a)) (x))) (((nat.S) ) (n))) := fun (a : (nat.nat) ) , fun (x : (nat.nat) ) , fun (n : (nat.nat) ) , ((((@logic.eq_coerc) ((((nat.le_) ) (((nat.S) ) (a))) (((nat.S) ) ((((nat.plus) ) ((((nat.plus) ) (a)) (x))) (n))))) ((((nat.le_) ) (((nat.S) ) (a))) ((((nat.plus) ) ((((nat.plus) ) (a)) (x))) (((nat.S) ) (n))))) ((((@nat.le_S_S) (a)) ((((nat.plus) ) ((((nat.plus) ) (a)) (x))) (n))) (((((@logic.eq_coerc) ((((nat.le_) ) (a)) ((((nat.plus) ) (a)) ((((nat.plus) ) (x)) (n))))) ((((nat.le_) ) (a)) ((((nat.plus) ) ((((nat.plus) ) (a)) (x))) (n)))) (((@nat.le_plus_n_r) ((((nat.plus) ) (x)) (n))) (a))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (n)) ((((nat.plus) ) (a)) (x)))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) (a)) ((((nat.plus) ) (a)) ((((nat.plus) ) (x)) (n))))) ((((nat.le_) ) (a)) (__)))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (a)) ((((nat.plus) ) (n)) (x)))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) (a)) ((((nat.plus) ) (a)) ((((nat.plus) ) (x)) (n))))) ((((nat.le_) ) (a)) (__)))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (x)) (n))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) (a)) ((((nat.plus) ) (a)) ((((nat.plus) ) (x)) (n))))) ((((nat.le_) ) (a)) ((((nat.plus) ) (a)) (__))))) (((@logic.refl_) (Prop)) ((((nat.le_) ) (a)) ((((nat.plus) ) (a)) ((((nat.plus) ) (x)) (n)))))) ((((nat.plus) ) (n)) (x))) (((@nat.commutative_plus) (n)) (x)))) ((((nat.plus) ) (n)) ((((nat.plus) ) (a)) (x)))) (((((((@logic.rewrite_l) ((nat.nat) )) ((((nat.plus) ) ((((nat.plus) ) (a)) (n))) (x))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (n)) ((((nat.plus) ) (a)) (x)))) (__))) ((((@nat.assoc_plus1) (x)) (a)) (n))) ((((nat.plus) ) (a)) ((((nat.plus) ) (n)) (x)))) ((((@nat.associative_plus) (a)) (n)) (x))))) ((((nat.plus) ) ((((nat.plus) ) (a)) (x))) (n))) (((@nat.commutative_plus) ((((nat.plus) ) (a)) (x))) (n)))))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (a)) ((((nat.plus) ) (x)) (((nat.S) ) (n))))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) (((nat.S) ) (a))) (((nat.S) ) ((((nat.plus) ) ((((nat.plus) ) (a)) (x))) (n))))) ((((nat.le_) ) (((nat.S) ) (a))) (__)))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) ((((nat.plus) ) (a)) (x))) (((nat.S) ) (n)))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) (((nat.S) ) (a))) (__))) ((((nat.le_) ) (((nat.S) ) (a))) ((((nat.plus) ) (a)) ((((nat.plus) ) (x)) (((nat.S) ) (n))))))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (a)) ((((nat.plus) ) (x)) (((nat.S) ) (n))))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) (((nat.S) ) (a))) (__))) ((((nat.le_) ) (((nat.S) ) (a))) ((((nat.plus) ) (a)) ((((nat.plus) ) (x)) (((nat.S) ) (n))))))) (((@logic.refl_) (Prop)) ((((nat.le_) ) (((nat.S) ) (a))) ((((nat.plus) ) (a)) ((((nat.plus) ) (x)) (((nat.S) ) (n))))))) ((((nat.plus) ) ((((nat.plus) ) (a)) (x))) (((nat.S) ) (n)))) ((((@nat.associative_plus) (a)) (x)) (((nat.S) ) (n))))) (((nat.S) ) ((((nat.plus) ) ((((nat.plus) ) (a)) (x))) (n)))) (((@nat.plus_n_Sm) ((((nat.plus) ) (a)) (x))) (n)))) ((((nat.plus) ) ((((nat.plus) ) (a)) (x))) (((nat.S) ) (n)))) ((((@nat.associative_plus) (a)) (x)) (((nat.S) ) (n)))).
theorem nat.not_le_Sn_O : forall (n:(nat.nat) ) , ((connectives.Not) ) ((((nat.le_) ) (((nat.S) ) (n))) ((nat.O) )) := fun (n : (nat.nat) ) , ((@connectives.nmk) ((((nat.le_) ) (((nat.S) ) (n))) ((nat.O) ))) (fun (Hlen0 : (((nat.le_) ) (((nat.S) ) (n))) ((nat.O) )) , ((((((@nat.eq_match_nat_type_O) (Prop)) ((connectives.False) )) (fun (p : (nat.nat) ) , (connectives.True) )) (fun (y : Prop) , y)) ((((@nat.lt_to_not_zero) (n)) ((nat.O) )) (Hlen0)))).
theorem nat.not_le_to_not_le_S_S : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , (((connectives.Not) ) ((((nat.le_) ) (n)) (m))) -> ((connectives.Not) ) ((((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (m))) := fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , fun (auto : ((connectives.Not) ) ((((nat.le_) ) (n)) (m))) , (((((@logic.not_to_not) ((((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (m)))) ((((nat.le_) ) (n)) (m))) (fun (auto' : (((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (m))) , (((((@logic.eq_coerc) ((((nat.le_) ) (((nat.pred_) ) (((nat.S) ) (n)))) (((nat.pred_) ) (((nat.S) ) (m))))) ((((nat.le_) ) (n)) (m))) ((((@nat.monotonic_pred) (((nat.S) ) (n))) (((nat.S) ) (m))) (auto'))) (((((((@logic.rewrite_l) ((nat.nat) )) (n)) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) (__)) (((nat.pred_) ) (((nat.S) ) (m))))) ((((nat.le_) ) (n)) (m)))) (((((((@logic.rewrite_l) ((nat.nat) )) (m)) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) (n)) (__))) ((((nat.le_) ) (n)) (m)))) (((@logic.refl_) (Prop)) ((((nat.le_) ) (n)) (m)))) (((nat.pred_) ) (((nat.S) ) (m)))) ((@nat.pred_Sn) (m)))) (((nat.pred_) ) (((nat.S) ) (n)))) ((@nat.pred_Sn) (n)))))) (auto)).
theorem nat.not_le_S_S_to_not_le : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , (((connectives.Not) ) ((((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (m)))) -> ((connectives.Not) ) ((((nat.le_) ) (n)) (m)) := fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , fun (auto : ((connectives.Not) ) ((((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (m)))) , (((((@logic.not_to_not) ((((nat.le_) ) (n)) (m))) ((((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (m)))) (fun (auto' : (((nat.le_) ) (n)) (m)) , ((((@nat.le_S_S) (n)) (m)) (auto')))) (auto)).
theorem nat.not_le_Sn_n : forall (n:(nat.nat) ) , ((connectives.Not) ) ((((nat.le_) ) (((nat.S) ) (n))) (n)) := fun (n : (nat.nat) ) , ((((@nat.nat_ind) (fun (_x_365 : (nat.nat) ) , ((connectives.Not) ) ((((nat.le_) ) (((nat.S) ) (_x_365))) (_x_365)))) ((@nat.not_le_Sn_O) ((nat.O) ))) (fun (x_366 : (nat.nat) ) , fun (_x_368 : ((connectives.Not) ) ((((nat.le_) ) (((nat.S) ) (x_366))) (x_366))) , ((((@nat.not_le_to_not_le_S_S) (((nat.S) ) (x_366))) (x_366)) (_x_368)))) (n).
theorem nat.lt_to_not_le : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , ((((nat.lt_) ) (n)) (m)) -> ((connectives.Not) ) ((((nat.le_) ) (m)) (n)) := fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , fun (Hltnm : (((nat.lt_) ) (n)) (m)) , (((((((@nat.le_ind) (((nat.S) ) (n))) (fun (x_417 : (nat.nat) ) , ((connectives.Not) ) ((((nat.le_) ) (x_417)) (n)))) ((@nat.not_le_Sn_n) (n))) (fun (m0 : (nat.nat) ) , fun (_x_419 : (((nat.le_) ) (((nat.S) ) (n))) (m0)) , (fun (_x_421 : ((connectives.Not) ) ((((nat.le_) ) (m0)) (n))) , (((((@logic.not_to_not) ((((nat.le_) ) (((nat.S) ) (m0))) (n))) ((((nat.le_) ) (m0)) (n))) (fun (auto : (((nat.le_) ) (((nat.S) ) (m0))) (n)) , ((((@nat.lt_to_le) (m0)) (n)) (auto)))) (_x_421))))) (m)) (Hltnm)).
theorem nat.not_le_to_lt : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , (((connectives.Not) ) ((((nat.le_) ) (n)) (m))) -> (((nat.lt_) ) (m)) (n) := ((((@nat.nat_elim2) (fun (__ : (nat.nat) ) , fun (_0 : (nat.nat) ) , (((connectives.Not) ) ((((nat.le_) ) (__)) (_0))) -> (((nat.lt_) ) (_0)) (__))) (fun (n : (nat.nat) ) , fun (abs : ((connectives.Not) ) ((((nat.le_) ) ((nat.O) )) (n))) , (((@connectives.falsity) ((((nat.lt_) ) (n)) ((nat.O) ))) ((((@logic.absurd) ((((nat.le_) ) ((nat.O) )) (n))) (((((@logic.eq_coerc) ((((nat.le_) ) ((nat.O) )) ((((nat.plus) ) (n)) ((nat.O) )))) ((((nat.le_) ) ((nat.O) )) (n))) (((@nat.le_plus_n) (n)) ((nat.O) ))) (((((((@logic.rewrite_l) ((nat.nat) )) (n)) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) ((nat.O) )) (__))) ((((nat.le_) ) ((nat.O) )) (n)))) (((@logic.refl_) (Prop)) ((((nat.le_) ) ((nat.O) )) (n)))) ((((nat.plus) ) (n)) ((nat.O) ))) ((@nat.plus_n_O) (n))))) (abs))))) (fun (n : (nat.nat) ) , fun (auto : ((connectives.Not) ) ((((nat.le_) ) (((nat.S) ) (n))) ((nat.O) ))) , ((@nat.lt_O_S) (n)))) (fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , fun (Hind : (((connectives.Not) ) ((((nat.le_) ) (n)) (m))) -> (((nat.lt_) ) (m)) (n)) , (fun (HnotleSS : ((connectives.Not) ) ((((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (m)))) , ((((@nat.le_S_S) (((nat.S) ) (m))) (n)) ((Hind) ((((@nat.not_le_S_S_to_not_le) (n)) (m)) (HnotleSS)))))).
theorem nat.not_lt_to_le : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , (((connectives.Not) ) ((((nat.lt_) ) (n)) (m))) -> (((nat.le_) ) (m)) (n) := fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , fun (H : ((connectives.Not) ) ((((nat.lt_) ) (n)) (m))) , ((((@nat.le_S_S_to_le) (m)) (n)) ((((@nat.not_le_to_lt) (((nat.S) ) (n))) (m)) (((((@logic.not_to_not) ((((nat.le_) ) (((nat.S) ) (n))) (m))) ((((nat.lt_) ) (n)) (m))) (fun (auto : (((nat.le_) ) (((nat.S) ) (n))) (m)) , (auto))) (H)))).
theorem nat.le_to_not_lt : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , ((((nat.le_) ) (n)) (m)) -> ((connectives.Not) ) ((((nat.lt_) ) (m)) (n)) := fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , fun (H : (((nat.le_) ) (n)) (m)) , ((((@nat.lt_to_not_le) (n)) (((nat.S) ) (m))) ((((((@nat.le_to_lt_to_lt) (n)) (m)) (((nat.S) ) (m))) (H)) (((((@logic.eq_coerc) ((((nat.le_) ) (((nat.S) ) (m))) ((((nat.plus) ) ((nat.O) )) (((nat.S) ) (m))))) ((((nat.le_) ) (((nat.S) ) (m))) (((nat.S) ) (m)))) (((@nat.le_plus_n) ((nat.O) )) (((nat.S) ) (m)))) (((((((@logic.rewrite_l) ((nat.nat) )) (((nat.S) ) (m))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) (((nat.S) ) (m))) (__))) ((((nat.le_) ) (((nat.S) ) (m))) (((nat.S) ) (m))))) (((@logic.refl_) (Prop)) ((((nat.le_) ) (((nat.S) ) (m))) (((nat.S) ) (m))))) ((((nat.plus) ) ((nat.O) )) (((nat.S) ) (m)))) ((@nat.plus_O_n) (((nat.S) ) (m))))))).
theorem nat.decidable_le_ : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , ((logic.decidable) ) ((((nat.le_) ) (n)) (m)) := ((((@nat.nat_elim2) (fun (__ : (nat.nat) ) , fun (_0 : (nat.nat) ) , ((logic.decidable) ) ((((nat.le_) ) (__)) (_0)))) (fun (n : (nat.nat) ) , (((@connectives.or_introl) ((((nat.le_) ) ((nat.O) )) (n))) (((connectives.Not) ) ((((nat.le_) ) ((nat.O) )) (n)))) ((@nat.le_O_n) (n)))) (fun (n : (nat.nat) ) , (((@connectives.or_intror) ((((nat.le_) ) (((nat.S) ) (n))) ((nat.O) ))) (((connectives.Not) ) ((((nat.le_) ) (((nat.S) ) (n))) ((nat.O) )))) ((@nat.not_le_Sn_O) (n)))) (fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , fun (_clearme : ((logic.decidable) ) ((((nat.le_) ) (n)) (m))) , (((((((@connectives.match_Or_prop) ((((nat.le_) ) (n)) (m))) (((connectives.Not) ) ((((nat.le_) ) (n)) (m)))) (((logic.decidable) ) ((((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (m))))) (fun (auto : (((nat.le_) ) (n)) (m)) , ((((@connectives.or_introl) ((((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (m)))) (((connectives.Not) ) ((((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (m))))) ((((@nat.le_S_S) (n)) (m)) (auto))))) (fun (auto : ((connectives.Not) ) ((((nat.le_) ) (n)) (m))) , ((((@connectives.or_intror) ((((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (m)))) (((connectives.Not) ) ((((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (m))))) ((((@nat.not_le_to_not_le_S_S) (n)) (m)) (auto))))) (_clearme))).
theorem nat.decidable_lt_ : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , ((logic.decidable) ) ((((nat.lt_) ) (n)) (m)) := fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , ((@nat.decidable_le_) (((nat.S) ) (n))) (m).
theorem nat.le_to_or_lt_eq : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , ((((nat.le_) ) (n)) (m)) -> (((connectives.Or) ) ((((nat.lt_) ) (n)) (m))) ((((logic.eq_) ((nat.nat) )) (n)) (m)) := fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , fun (lenm : (((nat.le_) ) (n)) (m)) , (((((((@nat.le_ind) (n)) (fun (x_417 : (nat.nat) ) , (((connectives.Or) ) ((((nat.lt_) ) (n)) (x_417))) ((((logic.eq_) ((nat.nat) )) (n)) (x_417)))) ((((@relations.RC_reflexive) ((nat.nat) )) ((nat.lt_) )) (n))) (fun (m0 : (nat.nat) ) , fun (_x_419 : (((nat.le_) ) (n)) (m0)) , (fun (_x_421 : (((connectives.Or) ) ((((nat.lt_) ) (n)) (m0))) ((((logic.eq_) ((nat.nat) )) (n)) (m0))) , ((((@connectives.or_introl) ((((nat.lt_) ) (n)) (((nat.S) ) (m0)))) ((((logic.eq_) ((nat.nat) )) (n)) (((nat.S) ) (m0)))) ((((((@nat.le_to_lt_to_lt) (n)) (m0)) (((nat.S) ) (m0))) (_x_419)) (((((@logic.eq_coerc) ((((nat.le_) ) (((nat.S) ) (m0))) ((((nat.plus) ) ((nat.O) )) (((nat.S) ) (m0))))) ((((nat.le_) ) (((nat.S) ) (m0))) (((nat.S) ) (m0)))) (((@nat.le_plus_n) ((nat.O) )) (((nat.S) ) (m0)))) (((((((@logic.rewrite_l) ((nat.nat) )) (((nat.S) ) (m0))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) (((nat.S) ) (m0))) (__))) ((((nat.le_) ) (((nat.S) ) (m0))) (((nat.S) ) (m0))))) (((@logic.refl_) (Prop)) ((((nat.le_) ) (((nat.S) ) (m0))) (((nat.S) ) (m0))))) ((((nat.plus) ) ((nat.O) )) (((nat.S) ) (m0)))) ((@nat.plus_O_n) (((nat.S) ) (m0)))))))))) (m)) (lenm)).
theorem nat.lt_O_n_elim : forall (n:(nat.nat) ) , ((((nat.lt_) ) ((nat.O) )) (n)) -> forall (P:((nat.nat) ) -> Prop) , (forall (m:(nat.nat) ) , (P) (((nat.S) ) (m))) -> (P) (n) := fun (n : (nat.nat) ) , ((((@nat.nat_ind) (fun (_x_365 : (nat.nat) ) , ((((nat.lt_) ) ((nat.O) )) (_x_365)) -> forall (P:((nat.nat) ) -> Prop) , (forall (m:(nat.nat) ) , (P) (((nat.S) ) (m))) -> (P) (_x_365))) (fun (abs : (((nat.lt_) ) ((nat.O) )) ((nat.O) )) , (((@connectives.falsity) (forall (P:((nat.nat) ) -> Prop) , (forall (m:(nat.nat) ) , (P) (((nat.S) ) (m))) -> (P) ((nat.O) ))) ((((@logic.absurd) ((((nat.le_) ) (((nat.S) ) ((nat.O) ))) ((nat.O) ))) (abs)) ((@nat.not_le_Sn_O) ((nat.O) )))))) (fun (x_366 : (nat.nat) ) , fun (_x_368 : ((((nat.lt_) ) ((nat.O) )) (x_366)) -> forall (P:((nat.nat) ) -> Prop) , (forall (m:(nat.nat) ) , (P) (((nat.S) ) (m))) -> (P) (x_366)) , (fun (auto : (((nat.lt_) ) ((nat.O) )) (((nat.S) ) (x_366))) , (fun (P : ((nat.nat) ) -> Prop) , fun (auto' : forall (m:(nat.nat) ) , (P) (((nat.S) ) (m))) , ((auto') (x_366)))))) (n).
theorem nat.le_n_O_elim : forall (n:(nat.nat) ) , ((((nat.le_) ) (n)) ((nat.O) )) -> forall (P:((nat.nat) ) -> Prop) , ((P) ((nat.O) )) -> (P) (n) := fun (n : (nat.nat) ) , ((((@nat.match_nat_prop) (fun (__ : (nat.nat) ) , ((((nat.le_) ) (__)) ((nat.O) )) -> forall (P:((nat.nat) ) -> Prop) , ((P) ((nat.O) )) -> (P) (__))) (fun (auto : (((nat.le_) ) ((nat.O) )) ((nat.O) )) , (fun (P : ((nat.nat) ) -> Prop) , fun (auto' : (P) ((nat.O) )) , (auto')))) (fun (a : (nat.nat) ) , fun (abs : (((nat.le_) ) (((nat.S) ) (a))) ((nat.O) )) , (((@connectives.falsity) (forall (P:((nat.nat) ) -> Prop) , ((P) ((nat.O) )) -> (P) (((nat.S) ) (a)))) ((((@logic.absurd) ((((nat.le_) ) (((nat.S) ) (a))) ((nat.O) ))) (abs)) ((@nat.not_le_Sn_O) (a)))))) (n).
theorem nat.lt_to_not_eq : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , ((((nat.lt_) ) (n)) (m)) -> ((connectives.Not) ) ((((logic.eq_) ((nat.nat) )) (n)) (m)) := fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , fun (H : (((nat.lt_) ) (n)) (m)) , (((((@logic.not_to_not) ((((logic.eq_) ((nat.nat) )) (n)) (m))) ((connectives.False) )) (fun (auto : (((logic.eq_) ((nat.nat) )) (n)) (m)) , ((((@logic.absurd) ((((nat.le_) ) (((nat.S) ) (n))) (n))) (((((@logic.eq_coerc) ((((nat.le_) ) (((nat.S) ) (n))) (m))) ((((nat.le_) ) (((nat.S) ) (n))) (n))) (H)) (((((((@logic.rewrite_l) ((nat.nat) )) (n)) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) (((nat.S) ) (n))) (__))) ((((nat.le_) ) (((nat.S) ) (n))) (n)))) (((@logic.refl_) (Prop)) ((((nat.le_) ) (((nat.S) ) (n))) (n)))) (m)) (auto)))) ((@nat.not_le_Sn_n) (n))))) (((@connectives.nmk) ((connectives.False) )) (fun (auto : (connectives.False) ) , (auto)))).
theorem nat.le_n_O_to_eq : forall (n:(nat.nat) ) , ((((nat.le_) ) (n)) ((nat.O) )) -> (((logic.eq_) ((nat.nat) )) ((nat.O) )) (n) := fun (n : (nat.nat) ) , ((((@nat.match_nat_prop) (fun (__ : (nat.nat) ) , ((((nat.le_) ) (__)) ((nat.O) )) -> (((logic.eq_) ((nat.nat) )) ((nat.O) )) (__))) (fun (auto : (((nat.le_) ) ((nat.O) )) ((nat.O) )) , (((@logic.refl_) ((nat.nat) )) ((nat.O) )))) (fun (a : (nat.nat) ) , fun (abs : (((nat.le_) ) (((nat.S) ) (a))) ((nat.O) )) , (((@connectives.falsity) ((((logic.eq_) ((nat.nat) )) ((nat.O) )) (((nat.S) ) (a)))) ((((@logic.absurd) ((((nat.le_) ) (((nat.S) ) (a))) ((nat.O) ))) (abs)) ((@nat.not_le_Sn_O) (a)))))) (n).
theorem nat.le_to_le_to_eq : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , ((((nat.le_) ) (n)) (m)) -> ((((nat.le_) ) (m)) (n)) -> (((logic.eq_) ((nat.nat) )) (n)) (m) := ((((@nat.nat_elim2) (fun (__ : (nat.nat) ) , fun (_0 : (nat.nat) ) , ((((nat.le_) ) (__)) (_0)) -> ((((nat.le_) ) (_0)) (__)) -> (((logic.eq_) ((nat.nat) )) (__)) (_0))) (fun (n : (nat.nat) ) , fun (auto : (((nat.le_) ) ((nat.O) )) (n)) , (fun (auto' : (((nat.le_) ) (n)) ((nat.O) )) , (((((@logic.sym_eq) ((nat.nat) )) (n)) ((nat.O) )) (((((@logic.sym_eq) ((nat.nat) )) ((nat.O) )) (n)) (((((@logic.eq_coerc) ((((logic.eq_) ((nat.nat) )) ((nat.O) )) (n))) ((((logic.eq_) ((nat.nat) )) ((nat.O) )) (n))) (((@nat.le_n_O_to_eq) (n)) (auto'))) (((@logic.refl_) (Prop)) ((((logic.eq_) ((nat.nat) )) ((nat.O) )) (n))))))))) (fun (n : (nat.nat) ) , fun (auto : (((nat.le_) ) (((nat.S) ) (n))) ((nat.O) )) , (fun (auto' : (((nat.le_) ) ((nat.O) )) (((nat.S) ) (n))) , (((((@logic.sym_eq) ((nat.nat) )) ((nat.O) )) (((nat.S) ) (n))) (((@nat.le_n_O_to_eq) (((nat.S) ) (n))) (auto)))))) (fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , fun (auto : ((((nat.le_) ) (n)) (m)) -> ((((nat.le_) ) (m)) (n)) -> (((logic.eq_) ((nat.nat) )) (n)) (m)) , (fun (auto' : (((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (m))) , (fun (auto'' : (((nat.le_) ) (((nat.S) ) (m))) (((nat.S) ) (n))) , (((((((@logic.eq_f) ((nat.nat) )) ((nat.nat) )) ((nat.S) )) (n)) (m)) (((auto) (((((@logic.eq_coerc) ((((nat.le_) ) (((nat.pred_) ) (((nat.S) ) (n)))) (((nat.pred_) ) (((nat.S) ) (m))))) ((((nat.le_) ) (n)) (m))) ((((@nat.monotonic_pred) (((nat.S) ) (n))) (((nat.S) ) (m))) (auto'))) (((((((@logic.rewrite_l) ((nat.nat) )) (n)) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) (__)) (((nat.pred_) ) (((nat.S) ) (m))))) ((((nat.le_) ) (n)) (m)))) (((((((@logic.rewrite_l) ((nat.nat) )) (m)) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) (n)) (__))) ((((nat.le_) ) (n)) (m)))) (((@logic.refl_) (Prop)) ((((nat.le_) ) (n)) (m)))) (((nat.pred_) ) (((nat.S) ) (m)))) ((@nat.pred_Sn) (m)))) (((nat.pred_) ) (((nat.S) ) (n)))) ((@nat.pred_Sn) (n))))) (((((@logic.eq_coerc) ((((nat.le_) ) (((nat.pred_) ) (((nat.S) ) (m)))) (((nat.pred_) ) (((nat.S) ) (n))))) ((((nat.le_) ) (m)) (n))) ((((@nat.monotonic_pred) (((nat.S) ) (m))) (((nat.S) ) (n))) (auto''))) (((((((@logic.rewrite_l) ((nat.nat) )) (m)) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) (__)) (((nat.pred_) ) (((nat.S) ) (n))))) ((((nat.le_) ) (m)) (n)))) (((((((@logic.rewrite_l) ((nat.nat) )) (n)) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) (m)) (__))) ((((nat.le_) ) (m)) (n)))) (((@logic.refl_) (Prop)) ((((nat.le_) ) (m)) (n)))) (((nat.pred_) ) (((nat.S) ) (n)))) ((@nat.pred_Sn) (n)))) (((nat.pred_) ) (((nat.S) ) (m)))) ((@nat.pred_Sn) (m))))))))).
theorem nat.plus_minus : forall (m:(nat.nat) ) , forall (n:(nat.nat) ) , forall (p:(nat.nat) ) , ((((nat.le_) ) (m)) (n)) -> (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) ((((nat.minus) ) (n)) (m))) (p))) ((((nat.minus) ) ((((nat.plus) ) (n)) (p))) (m)) := ((((@nat.nat_elim2) (fun (__ : (nat.nat) ) , fun (_0 : (nat.nat) ) , forall (p:(nat.nat) ) , ((((nat.le_) ) (__)) (_0)) -> (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) ((((nat.minus) ) (_0)) (__))) (p))) ((((nat.minus) ) ((((nat.plus) ) (_0)) (p))) (__)))) (fun (n : (nat.nat) ) , fun (p : (nat.nat) ) , fun (auto : (((nat.le_) ) ((nat.O) )) (n)) , (((((((@logic.rewrite_l) ((nat.nat) )) (n)) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (__)) (p))) ((((nat.minus) ) ((((nat.plus) ) (n)) (p))) ((nat.O) )))) (((((((@logic.rewrite_l) ((nat.nat) )) ((((nat.plus) ) (n)) (p))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (n)) (p))) (__))) (((@logic.refl_) ((nat.nat) )) ((((nat.plus) ) (n)) (p)))) ((((nat.minus) ) ((((nat.plus) ) (n)) (p))) ((nat.O) ))) ((@nat.minus_n_O) ((((nat.plus) ) (n)) (p))))) ((((nat.minus) ) (n)) ((nat.O) ))) ((@nat.minus_n_O) (n))))) (fun (n : (nat.nat) ) , fun (p : (nat.nat) ) , fun (abs : (((nat.le_) ) (((nat.S) ) (n))) ((nat.O) )) , (((@connectives.falsity) ((((logic.eq_) ((nat.nat) )) ((((nat.plus) ) ((((nat.minus) ) ((nat.O) )) (((nat.S) ) (n)))) (p))) ((((nat.minus) ) ((((nat.plus) ) ((nat.O) )) (p))) (((nat.S) ) (n))))) ((((@logic.absurd) ((((nat.le_) ) (((nat.S) ) (n))) ((nat.O) ))) (abs)) ((@nat.not_le_Sn_O) (n)))))) (fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , (((@nat.sym_eq_minus) (((nat.S) ) (m))) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (forall (p:(nat.nat) ) , ((((nat.le_) ) (n)) (m)) -> (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) ((((nat.minus) ) (m)) (n))) (p))) ((((nat.minus) ) ((((nat.plus) ) (m)) (p))) (n))) -> forall (p:(nat.nat) ) , ((((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (m))) -> (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) ((y) (((nat.S) ) (n)))) (p))) ((((nat.minus) ) ((((nat.plus) ) (((nat.S) ) (m))) (p))) (((nat.S) ) (n))))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.minus_body) )) (m)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (forall (p:(nat.nat) ) , ((((nat.le_) ) (n)) (m)) -> (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) ((((nat.minus) ) (m)) (n))) (p))) ((((nat.minus) ) ((((nat.plus) ) (m)) (p))) (n))) -> forall (p:(nat.nat) ) , ((((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (m))) -> (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) ((y) (((nat.S) ) (n)))) (p))) ((((nat.minus) ) ((((nat.plus) ) (((nat.S) ) (m))) (p))) (((nat.S) ) (n))))) ((((@nat.sym_eq_minus_body_S) (m)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (forall (p:(nat.nat) ) , ((((nat.le_) ) (n)) (m)) -> (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) ((((nat.minus) ) (m)) (n))) (p))) ((((nat.minus) ) ((((nat.plus) ) (m)) (p))) (n))) -> forall (p:(nat.nat) ) , ((((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (m))) -> (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) ((y) (((nat.S) ) (n)))) (p))) ((((nat.minus) ) ((((nat.plus) ) (((nat.S) ) (m))) (p))) (((nat.S) ) (n))))) (fun (auto : forall (p:(nat.nat) ) , ((((nat.le_) ) (n)) (m)) -> (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) ((((nat.minus) ) (m)) (n))) (p))) ((((nat.minus) ) ((((nat.plus) ) (m)) (p))) (n))) , (fun (p : (nat.nat) ) , ((((((@nat.sym_eq_match_nat_type_S) ((nat.nat) )) (((nat.S) ) (m))) (fun (q : (nat.nat) ) , (((nat.minus) ) (m)) (q))) (n)) (fun (y : (nat.nat) ) , ((((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (m))) -> (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (y)) (p))) ((((nat.minus) ) ((((nat.plus) ) (((nat.S) ) (m))) (p))) (((nat.S) ) (n))))) ((((@nat.sym_eq_minus) ((((nat.plus) ) (((nat.S) ) (m))) (p))) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (m))) -> (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) ((((nat.minus) ) (m)) (n))) (p))) ((y) (((nat.S) ) (n))))) ((((@nat.sym_eq_plus) (((nat.S) ) (m))) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (m))) -> (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) ((((nat.minus) ) (m)) (n))) (p))) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.minus_body) )) ((y) (p))) (((nat.S) ) (n))))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (m)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (m))) -> (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) ((((nat.minus) ) (m)) (n))) (p))) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.minus_body) )) ((y) (p))) (((nat.S) ) (n))))) ((((@nat.sym_eq_plus_body_S) (m)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (m))) -> (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) ((((nat.minus) ) (m)) (n))) (p))) (((((nat.filter_nat_type) (((nat.nat) ) -> (nat.nat) )) ((nat.minus_body) )) ((y) (p))) (((nat.S) ) (n))))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.minus_body) )) ((((nat.plus) ) (m)) (p))) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (m))) -> (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) ((((nat.minus) ) (m)) (n))) (p))) ((y) (((nat.S) ) (n))))) ((((@nat.eq_plus_body_S) (m)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (m))) -> (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) ((((nat.minus) ) (m)) (n))) (p))) ((((nat.minus_body) ) ((y) (p))) (((nat.S) ) (n))))) ((((((@nat.eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (m)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (m))) -> (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) ((((nat.minus) ) (m)) (n))) (p))) ((((nat.minus_body) ) ((y) (p))) (((nat.S) ) (n))))) ((((@nat.eq_plus) (((nat.S) ) (m))) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (m))) -> (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) ((((nat.minus) ) (m)) (n))) (p))) ((((nat.minus_body) ) ((y) (p))) (((nat.S) ) (n))))) ((((@nat.sym_eq_plus) (((nat.S) ) (m))) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (m))) -> (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) ((((nat.minus) ) (m)) (n))) (p))) ((((nat.minus_body) ) ((y) (p))) (((nat.S) ) (n))))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (m)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (m))) -> (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) ((((nat.minus) ) (m)) (n))) (p))) ((((nat.minus_body) ) ((y) (p))) (((nat.S) ) (n))))) ((((@nat.sym_eq_plus_body_S) (m)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (m))) -> (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) ((((nat.minus) ) (m)) (n))) (p))) ((((nat.minus_body) ) ((y) (p))) (((nat.S) ) (n))))) ((((@nat.sym_eq_minus_body_S) ((((nat.plus) ) (m)) (p))) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (m))) -> (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) ((((nat.minus) ) (m)) (n))) (p))) ((y) (((nat.S) ) (n))))) (((((((@nat.sym_eq_match_nat_type_S) ((nat.nat) )) (((nat.S) ) ((((nat.plus) ) (m)) (p)))) (fun (q : (nat.nat) ) , (((nat.minus) ) ((((nat.plus) ) (m)) (p))) (q))) (n)) (fun (y : (nat.nat) ) , ((((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (m))) -> (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) ((((nat.minus) ) (m)) (n))) (p))) (y))) (fun (auto' : (((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (m))) , (((auto) (p)) (((((@logic.eq_coerc) ((((nat.le_) ) (((nat.pred_) ) (((nat.S) ) (n)))) (((nat.pred_) ) (((nat.S) ) (m))))) ((((nat.le_) ) (n)) (m))) ((((@nat.monotonic_pred) (((nat.S) ) (n))) (((nat.S) ) (m))) (auto'))) (((((((@logic.rewrite_l) ((nat.nat) )) (n)) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) (__)) (((nat.pred_) ) (((nat.S) ) (m))))) ((((nat.le_) ) (n)) (m)))) (((((((@logic.rewrite_l) ((nat.nat) )) (m)) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) (n)) (__))) ((((nat.le_) ) (n)) (m)))) (((@logic.refl_) (Prop)) ((((nat.le_) ) (n)) (m)))) (((nat.pred_) ) (((nat.S) ) (m)))) ((@nat.pred_Sn) (m)))) (((nat.pred_) ) (((nat.S) ) (n)))) ((@nat.pred_Sn) (n)))))))))))))))))))))))).
theorem nat.minus_plus_m_m : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) (n)) ((((nat.minus) ) ((((nat.plus) ) (n)) (m))) (m)) := fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , ((((@logic.eq_coerc) ((((logic.eq_) ((nat.nat) )) ((((nat.plus) ) ((((nat.minus) ) (m)) (m))) (n))) ((((nat.minus) ) ((((nat.plus) ) (m)) (n))) (m)))) ((((logic.eq_) ((nat.nat) )) (n)) ((((nat.minus) ) ((((nat.plus) ) (n)) (m))) (m)))) (((((@nat.plus_minus) (m)) (m)) (n)) ((@nat.le_n) (m)))) (((((((@logic.rewrite_l) ((nat.nat) )) ((nat.O) )) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (__)) (n))) ((((nat.minus) ) ((((nat.plus) ) (m)) (n))) (m)))) ((((logic.eq_) ((nat.nat) )) (n)) ((((nat.minus) ) ((((nat.plus) ) (n)) (m))) (m))))) (((((((@logic.rewrite_l) ((nat.nat) )) (n)) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((logic.eq_) ((nat.nat) )) (__)) ((((nat.minus) ) ((((nat.plus) ) (m)) (n))) (m)))) ((((logic.eq_) ((nat.nat) )) (n)) ((((nat.minus) ) ((((nat.plus) ) (n)) (m))) (m))))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (n)) (m))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((logic.eq_) ((nat.nat) )) (n)) ((((nat.minus) ) (__)) (m)))) ((((logic.eq_) ((nat.nat) )) (n)) ((((nat.minus) ) ((((nat.plus) ) (n)) (m))) (m))))) (((@logic.refl_) (Prop)) ((((logic.eq_) ((nat.nat) )) (n)) ((((nat.minus) ) ((((nat.plus) ) (n)) (m))) (m))))) ((((nat.plus) ) (m)) (n))) (((@nat.commutative_plus) (m)) (n)))) ((((nat.plus) ) ((nat.O) )) (n))) ((@nat.plus_O_n) (n)))) ((((nat.minus) ) (m)) (m))) ((@nat.minus_n_n) (m))).
theorem nat.plus_minus_m_m : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , ((((nat.le_) ) (m)) (n)) -> (((logic.eq_) ((nat.nat) )) (n)) ((((nat.plus) ) ((((nat.minus) ) (n)) (m))) (m)) := fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , fun (lemn : (((nat.le_) ) (m)) (n)) , (((((@logic.sym_eq) ((nat.nat) )) ((((nat.plus) ) ((((nat.minus) ) (n)) (m))) (m))) (n)) (((((@logic.eq_coerc) ((((logic.eq_) ((nat.nat) )) ((((nat.plus) ) ((((nat.minus) ) (n)) (m))) (m))) ((((nat.minus) ) ((((nat.plus) ) (n)) (m))) (m)))) ((((logic.eq_) ((nat.nat) )) ((((nat.plus) ) ((((nat.minus) ) (n)) (m))) (m))) (n))) (((((@nat.plus_minus) (m)) (n)) (m)) (lemn))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (m)) ((((nat.minus) ) (n)) (m)))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((logic.eq_) ((nat.nat) )) ((((nat.plus) ) ((((nat.minus) ) (n)) (m))) (m))) ((((nat.minus) ) ((((nat.plus) ) (n)) (m))) (m)))) ((((logic.eq_) ((nat.nat) )) (__)) (n)))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (m)) ((((nat.minus) ) (n)) (m)))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((logic.eq_) ((nat.nat) )) (__)) ((((nat.minus) ) ((((nat.plus) ) (n)) (m))) (m)))) ((((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (m)) ((((nat.minus) ) (n)) (m)))) (n)))) (((((((@logic.rewrite_l) ((nat.nat) )) (n)) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (m)) ((((nat.minus) ) (n)) (m)))) (__))) ((((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (m)) ((((nat.minus) ) (n)) (m)))) (n)))) (((@logic.refl_) (Prop)) ((((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (m)) ((((nat.minus) ) (n)) (m)))) (n)))) ((((nat.minus) ) ((((nat.plus) ) (n)) (m))) (m))) (((@nat.minus_plus_m_m) (n)) (m)))) ((((nat.plus) ) ((((nat.minus) ) (n)) (m))) (m))) (((@nat.commutative_plus) ((((nat.minus) ) (n)) (m))) (m)))) ((((nat.plus) ) ((((nat.minus) ) (n)) (m))) (m))) (((@nat.commutative_plus) ((((nat.minus) ) (n)) (m))) (m))))).
theorem nat.minus_to_plus : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , forall (p:(nat.nat) ) , ((((nat.le_) ) (m)) (n)) -> ((((logic.eq_) ((nat.nat) )) ((((nat.minus) ) (n)) (m))) (p)) -> (((logic.eq_) ((nat.nat) )) (n)) ((((nat.plus) ) (m)) (p)) := fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , fun (p : (nat.nat) ) , fun (lemn : (((nat.le_) ) (m)) (n)) , (fun (eqp : (((logic.eq_) ((nat.nat) )) ((((nat.minus) ) (n)) (m))) (p)) , (((((@logic.eq_coerc) ((((logic.eq_) ((nat.nat) )) (n)) ((((nat.plus) ) ((((nat.minus) ) (n)) (m))) (m)))) ((((logic.eq_) ((nat.nat) )) (n)) ((((nat.plus) ) (m)) (p)))) ((((@nat.plus_minus_m_m) (n)) (m)) (lemn))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (m)) ((((nat.minus) ) (n)) (m)))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((logic.eq_) ((nat.nat) )) (n)) (__))) ((((logic.eq_) ((nat.nat) )) (n)) ((((nat.plus) ) (m)) (p))))) (((((((@logic.rewrite_r) ((nat.nat) )) (p)) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((logic.eq_) ((nat.nat) )) (n)) ((((nat.plus) ) (m)) (__)))) ((((logic.eq_) ((nat.nat) )) (n)) ((((nat.plus) ) (m)) (p))))) (((@logic.refl_) (Prop)) ((((logic.eq_) ((nat.nat) )) (n)) ((((nat.plus) ) (m)) (p))))) ((((nat.minus) ) (n)) (m))) (eqp))) ((((nat.plus) ) ((((nat.minus) ) (n)) (m))) (m))) (((@nat.commutative_plus) ((((nat.minus) ) (n)) (m))) (m))))).
theorem nat.plus_to_minus : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , forall (p:(nat.nat) ) , ((((logic.eq_) ((nat.nat) )) (n)) ((((nat.plus) ) (m)) (p))) -> (((logic.eq_) ((nat.nat) )) ((((nat.minus) ) (n)) (m))) (p) := fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , fun (p : (nat.nat) ) , fun (eqp : (((logic.eq_) ((nat.nat) )) (n)) ((((nat.plus) ) (m)) (p))) , (((((@logic.sym_eq) ((nat.nat) )) (p)) ((((nat.minus) ) (n)) (m))) (((((@logic.eq_coerc) ((((logic.eq_) ((nat.nat) )) (p)) ((((nat.minus) ) ((((nat.plus) ) (p)) (m))) (m)))) ((((logic.eq_) ((nat.nat) )) (p)) ((((nat.minus) ) (n)) (m)))) (((@nat.minus_plus_m_m) (p)) (m))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (m)) (p))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((logic.eq_) ((nat.nat) )) (p)) ((((nat.minus) ) (__)) (m)))) ((((logic.eq_) ((nat.nat) )) (p)) ((((nat.minus) ) (n)) (m))))) (((((((@logic.rewrite_l) ((nat.nat) )) (n)) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((logic.eq_) ((nat.nat) )) (p)) ((((nat.minus) ) (__)) (m)))) ((((logic.eq_) ((nat.nat) )) (p)) ((((nat.minus) ) (n)) (m))))) (((@logic.refl_) (Prop)) ((((logic.eq_) ((nat.nat) )) (p)) ((((nat.minus) ) (n)) (m))))) ((((nat.plus) ) (m)) (p))) (eqp))) ((((nat.plus) ) (p)) (m))) (((@nat.commutative_plus) (p)) (m))))).
theorem nat.monotonic_le_minus_l : forall (p:(nat.nat) ) , forall (q:(nat.nat) ) , forall (n:(nat.nat) ) , ((((nat.le_) ) (q)) (p)) -> (((nat.le_) ) ((((nat.minus) ) (q)) (n))) ((((nat.minus) ) (p)) (n)) := ((((@nat.nat_elim2) (fun (__ : (nat.nat) ) , fun (_0 : (nat.nat) ) , forall (n:(nat.nat) ) , ((((nat.le_) ) (_0)) (__)) -> (((nat.le_) ) ((((nat.minus) ) (_0)) (n))) ((((nat.minus) ) (__)) (n)))) (fun (p : (nat.nat) ) , fun (q : (nat.nat) ) , fun (lePO : (((nat.le_) ) (p)) ((nat.O) )) , (((((@nat.le_n_O_elim) (p)) (lePO)) (fun (__ : (nat.nat) ) , (((nat.le_) ) ((((nat.minus) ) (__)) (q))) ((((nat.minus) ) ((nat.O) )) (q)))) ((@nat.le_n) ((((nat.minus) ) ((nat.O) )) (q)))))) (fun (p : (nat.nat) ) , fun (q : (nat.nat) ) , (((@nat.sym_eq_minus) (((nat.S) ) (p))) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) ((nat.O) )) (((nat.S) ) (p))) -> (((nat.le_) ) ((((nat.minus) ) ((nat.O) )) (q))) ((y) (q)))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.minus_body) )) (p)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) ((nat.O) )) (((nat.S) ) (p))) -> (((nat.le_) ) ((((nat.minus) ) ((nat.O) )) (q))) ((y) (q)))) ((((@nat.sym_eq_minus_body_S) (p)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) ((nat.O) )) (((nat.S) ) (p))) -> (((nat.le_) ) ((((nat.minus) ) ((nat.O) )) (q))) ((y) (q)))) (((@nat.eq_plus_body_O) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) ((nat.O) )) (((nat.S) ) (p))) -> (((nat.le_) ) ((((nat.minus) ) ((nat.O) )) (q))) ((y) (((((nat.match_nat_type) ((nat.nat) )) (((nat.S) ) (p))) (fun (q0 : (nat.nat) ) , (((nat.minus) ) (p)) (q0))) (q))))) (((((@nat.eq_filter_nat_type_O) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) ((nat.O) )) (((nat.S) ) (p))) -> (((nat.le_) ) ((((nat.minus) ) ((nat.O) )) (q))) ((y) (((((nat.match_nat_type) ((nat.nat) )) (((nat.S) ) (p))) (fun (q0 : (nat.nat) ) , (((nat.minus) ) (p)) (q0))) (q))))) ((((@nat.eq_plus) ((nat.O) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) ((nat.O) )) (((nat.S) ) (p))) -> (((nat.le_) ) ((((nat.minus) ) ((nat.O) )) (q))) ((y) (((((nat.match_nat_type) ((nat.nat) )) (((nat.S) ) (p))) (fun (q0 : (nat.nat) ) , (((nat.minus) ) (p)) (q0))) (q))))) (((@nat.eq_minus_body_O) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) ((nat.O) )) (((nat.S) ) (p))) -> (((nat.le_) ) ((((nat.minus) ) ((nat.O) )) (q))) ((((nat.plus) ) ((y) (((((nat.match_nat_type) ((nat.nat) )) (((nat.S) ) (p))) (fun (q0 : (nat.nat) ) , (((nat.minus) ) (p)) (q0))) (q)))) (((((nat.match_nat_type) ((nat.nat) )) (((nat.S) ) (p))) (fun (q0 : (nat.nat) ) , (((nat.minus) ) (p)) (q0))) (q))))) (((((@nat.eq_filter_nat_type_O) (((nat.nat) ) -> (nat.nat) )) ((nat.minus_body) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) ((nat.O) )) (((nat.S) ) (p))) -> (((nat.le_) ) ((((nat.minus) ) ((nat.O) )) (q))) ((((nat.plus) ) ((y) (((((nat.match_nat_type) ((nat.nat) )) (((nat.S) ) (p))) (fun (q0 : (nat.nat) ) , (((nat.minus) ) (p)) (q0))) (q)))) (((((nat.match_nat_type) ((nat.nat) )) (((nat.S) ) (p))) (fun (q0 : (nat.nat) ) , (((nat.minus) ) (p)) (q0))) (q))))) ((((@nat.eq_minus) ((nat.O) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) ((nat.O) )) (((nat.S) ) (p))) -> (((nat.le_) ) ((((nat.minus) ) ((nat.O) )) (q))) ((((nat.plus) ) ((y) (((((nat.match_nat_type) ((nat.nat) )) (((nat.S) ) (p))) (fun (q0 : (nat.nat) ) , (((nat.minus) ) (p)) (q0))) (q)))) (((((nat.match_nat_type) ((nat.nat) )) (((nat.S) ) (p))) (fun (q0 : (nat.nat) ) , (((nat.minus) ) (p)) (q0))) (q))))) (((@nat.eq_minus_body_O) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) ((nat.O) )) (((nat.S) ) (p))) -> (((nat.le_) ) ((((nat.minus) ) ((nat.O) )) (q))) ((((nat.plus) ) ((((nat.minus) ) ((y) (q))) (((((nat.match_nat_type) ((nat.nat) )) (((nat.S) ) (p))) (fun (q0 : (nat.nat) ) , (((nat.minus) ) (p)) (q0))) (q)))) (((((nat.match_nat_type) ((nat.nat) )) (((nat.S) ) (p))) (fun (q0 : (nat.nat) ) , (((nat.minus) ) (p)) (q0))) (q))))) (((((@nat.eq_filter_nat_type_O) (((nat.nat) ) -> (nat.nat) )) ((nat.minus_body) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) ((nat.O) )) (((nat.S) ) (p))) -> (((nat.le_) ) ((((nat.minus) ) ((nat.O) )) (q))) ((((nat.plus) ) ((((nat.minus) ) ((y) (q))) (((((nat.match_nat_type) ((nat.nat) )) (((nat.S) ) (p))) (fun (q0 : (nat.nat) ) , (((nat.minus) ) (p)) (q0))) (q)))) (((((nat.match_nat_type) ((nat.nat) )) (((nat.S) ) (p))) (fun (q0 : (nat.nat) ) , (((nat.minus) ) (p)) (q0))) (q))))) ((((@nat.eq_minus) ((nat.O) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) ((nat.O) )) (((nat.S) ) (p))) -> (((nat.le_) ) ((((nat.minus) ) ((nat.O) )) (q))) ((((nat.plus) ) ((((nat.minus) ) ((y) (q))) (((((nat.match_nat_type) ((nat.nat) )) (((nat.S) ) (p))) (fun (q0 : (nat.nat) ) , (((nat.minus) ) (p)) (q0))) (q)))) (((((nat.match_nat_type) ((nat.nat) )) (((nat.S) ) (p))) (fun (q0 : (nat.nat) ) , (((nat.minus) ) (p)) (q0))) (q))))) (fun (auto : (((nat.le_) ) ((nat.O) )) (((nat.S) ) (p))) , (((@nat.le_plus_minus_m_m) ((((nat.minus) ) ((nat.O) )) (q))) (((((nat.match_nat_type) ((nat.nat) )) (((nat.S) ) (p))) (fun (q0 : (nat.nat) ) , (((nat.minus) ) (p)) (q0))) (q))))))))))))))))) (fun (p : (nat.nat) ) , fun (q : (nat.nat) ) , fun (Hind : forall (n0:(nat.nat) ) , ((((nat.le_) ) (q)) (p)) -> (((nat.le_) ) ((((nat.minus) ) (q)) (n0))) ((((nat.minus) ) (p)) (n0))) , (fun (n : (nat.nat) ) , ((((@nat.match_nat_prop) (fun (__ : (nat.nat) ) , ((((nat.le_) ) (((nat.S) ) (q))) (((nat.S) ) (p))) -> (((nat.le_) ) ((((nat.minus) ) (((nat.S) ) (q))) (__))) ((((nat.minus) ) (((nat.S) ) (p))) (__)))) ((((@nat.sym_eq_minus) (((nat.S) ) (q))) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) (((nat.S) ) (q))) (((nat.S) ) (p))) -> (((nat.le_) ) ((y) ((nat.O) ))) ((((nat.minus) ) (((nat.S) ) (p))) ((nat.O) )))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.minus_body) )) (q)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) (((nat.S) ) (q))) (((nat.S) ) (p))) -> (((nat.le_) ) ((y) ((nat.O) ))) ((((nat.minus) ) (((nat.S) ) (p))) ((nat.O) )))) ((((@nat.sym_eq_minus_body_S) (q)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) (((nat.S) ) (q))) (((nat.S) ) (p))) -> (((nat.le_) ) ((y) ((nat.O) ))) ((((nat.minus) ) (((nat.S) ) (p))) ((nat.O) )))) ((((((@nat.sym_eq_match_nat_type_O) ((nat.nat) )) (((nat.S) ) (q))) (fun (z : (nat.nat) ) , (((nat.minus) ) (q)) (z))) (fun (y : (nat.nat) ) , ((((nat.le_) ) (((nat.S) ) (q))) (((nat.S) ) (p))) -> (((nat.le_) ) (y)) ((((nat.minus) ) (((nat.S) ) (p))) ((nat.O) )))) ((((@nat.sym_eq_minus) (((nat.S) ) (p))) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) (((nat.S) ) (q))) (((nat.S) ) (p))) -> (((nat.le_) ) (((nat.S) ) (q))) ((y) ((nat.O) )))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.minus_body) )) (p)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) (((nat.S) ) (q))) (((nat.S) ) (p))) -> (((nat.le_) ) (((nat.S) ) (q))) ((y) ((nat.O) )))) ((((@nat.sym_eq_minus_body_S) (p)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) (((nat.S) ) (q))) (((nat.S) ) (p))) -> (((nat.le_) ) (((nat.S) ) (q))) ((y) ((nat.O) )))) ((((((@nat.sym_eq_match_nat_type_O) ((nat.nat) )) (((nat.S) ) (p))) (fun (q0 : (nat.nat) ) , (((nat.minus) ) (p)) (q0))) (fun (y : (nat.nat) ) , ((((nat.le_) ) (((nat.S) ) (q))) (((nat.S) ) (p))) -> (((nat.le_) ) (((nat.S) ) (q))) (y))) (fun (auto : (((nat.le_) ) (((nat.S) ) (q))) (((nat.S) ) (p))) , (auto))))))))))) ((((@nat.sym_eq_minus) (((nat.S) ) (q))) (fun (y : ((nat.nat) ) -> (nat.nat) ) , forall (a:(nat.nat) ) , ((((nat.le_) ) (((nat.S) ) (q))) (((nat.S) ) (p))) -> (((nat.le_) ) ((y) (((nat.S) ) (a)))) ((((nat.minus) ) (((nat.S) ) (p))) (((nat.S) ) (a))))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.minus_body) )) (q)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , forall (a:(nat.nat) ) , ((((nat.le_) ) (((nat.S) ) (q))) (((nat.S) ) (p))) -> (((nat.le_) ) ((y) (((nat.S) ) (a)))) ((((nat.minus) ) (((nat.S) ) (p))) (((nat.S) ) (a))))) ((((@nat.sym_eq_minus_body_S) (q)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , forall (a:(nat.nat) ) , ((((nat.le_) ) (((nat.S) ) (q))) (((nat.S) ) (p))) -> (((nat.le_) ) ((y) (((nat.S) ) (a)))) ((((nat.minus) ) (((nat.S) ) (p))) (((nat.S) ) (a))))) (fun (a : (nat.nat) ) , ((((((@nat.sym_eq_match_nat_type_S) ((nat.nat) )) (((nat.S) ) (q))) (fun (z : (nat.nat) ) , (((nat.minus) ) (q)) (z))) (a)) (fun (y : (nat.nat) ) , ((((nat.le_) ) (((nat.S) ) (q))) (((nat.S) ) (p))) -> (((nat.le_) ) (y)) ((((nat.minus) ) (((nat.S) ) (p))) (((nat.S) ) (a))))) ((((@nat.sym_eq_minus) (((nat.S) ) (p))) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) (((nat.S) ) (q))) (((nat.S) ) (p))) -> (((nat.le_) ) ((((nat.minus) ) (q)) (a))) ((y) (((nat.S) ) (a))))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.minus_body) )) (p)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) (((nat.S) ) (q))) (((nat.S) ) (p))) -> (((nat.le_) ) ((((nat.minus) ) (q)) (a))) ((y) (((nat.S) ) (a))))) ((((@nat.sym_eq_minus_body_S) (p)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) (((nat.S) ) (q))) (((nat.S) ) (p))) -> (((nat.le_) ) ((((nat.minus) ) (q)) (a))) ((y) (((nat.S) ) (a))))) (((((((@nat.sym_eq_match_nat_type_S) ((nat.nat) )) (((nat.S) ) (p))) (fun (q0 : (nat.nat) ) , (((nat.minus) ) (p)) (q0))) (a)) (fun (y : (nat.nat) ) , ((((nat.le_) ) (((nat.S) ) (q))) (((nat.S) ) (p))) -> (((nat.le_) ) ((((nat.minus) ) (q)) (a))) (y))) (fun (leSS : (((nat.le_) ) (((nat.S) ) (q))) (((nat.S) ) (p))) , (((Hind) (a)) (((((@logic.eq_coerc) ((((nat.le_) ) (((nat.pred_) ) (((nat.S) ) (q)))) (((nat.pred_) ) (((nat.S) ) (p))))) ((((nat.le_) ) (q)) (p))) ((((@nat.monotonic_pred) (((nat.S) ) (q))) (((nat.S) ) (p))) (leSS))) (((((((@logic.rewrite_l) ((nat.nat) )) (q)) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) (__)) (((nat.pred_) ) (((nat.S) ) (p))))) ((((nat.le_) ) (q)) (p)))) (((((((@logic.rewrite_l) ((nat.nat) )) (p)) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) (q)) (__))) ((((nat.le_) ) (q)) (p)))) (((@logic.refl_) (Prop)) ((((nat.le_) ) (q)) (p)))) (((nat.pred_) ) (((nat.S) ) (p)))) ((@nat.pred_Sn) (p)))) (((nat.pred_) ) (((nat.S) ) (q)))) ((@nat.pred_Sn) (q))))))))))))))) (n))).
theorem nat.le_plus_to_minus : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , forall (p:(nat.nat) ) , ((((nat.le_) ) (n)) ((((nat.plus) ) (p)) (m))) -> (((nat.le_) ) ((((nat.minus) ) (n)) (m))) (p) := fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , fun (p : (nat.nat) ) , fun (lep : (((nat.le_) ) (n)) ((((nat.plus) ) (p)) (m))) , (((((@logic.eq_coerc) ((((nat.le_) ) ((((nat.minus) ) (n)) (m))) ((((nat.minus) ) ((((nat.plus) ) (p)) (m))) (m)))) ((((nat.le_) ) ((((nat.minus) ) (n)) (m))) (p))) (((((@nat.monotonic_le_minus_l) ((((nat.plus) ) (p)) (m))) (n)) (m)) (lep))) (((((((@logic.rewrite_l) ((nat.nat) )) (p)) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) ((((nat.minus) ) (n)) (m))) (__))) ((((nat.le_) ) ((((nat.minus) ) (n)) (m))) (p)))) (((@logic.refl_) (Prop)) ((((nat.le_) ) ((((nat.minus) ) (n)) (m))) (p)))) ((((nat.minus) ) ((((nat.plus) ) (p)) (m))) (m))) (((@nat.minus_plus_m_m) (p)) (m)))).
theorem nat.monotonic_le_minus_r : forall (p:(nat.nat) ) , forall (q:(nat.nat) ) , forall (n:(nat.nat) ) , ((((nat.le_) ) (q)) (p)) -> (((nat.le_) ) ((((nat.minus) ) (n)) (p))) ((((nat.minus) ) (n)) (q)) := fun (p : (nat.nat) ) , fun (q : (nat.nat) ) , fun (n : (nat.nat) ) , fun (lepq : (((nat.le_) ) (q)) (p)) , (((((@nat.le_plus_to_minus) (n)) (p)) ((((nat.minus) ) (n)) (q))) ((((((@nat.transitive_le) (n)) ((((nat.plus) ) ((((nat.minus) ) (n)) (q))) (q))) ((((nat.plus) ) ((((nat.minus) ) (n)) (q))) (p))) (((@nat.le_plus_minus_m_m) (n)) (q))) (((((@nat.monotonic_le_plus_r) ((((nat.minus) ) (n)) (q))) (q)) (p)) (lepq)))).
theorem nat.minus_le : forall (x:(nat.nat) ) , forall (y:(nat.nat) ) , (((nat.le_) ) ((((nat.minus) ) (x)) (y))) (x) := fun (x : (nat.nat) ) , fun (y : (nat.nat) ) , ((((@logic.eq_coerc) ((((nat.le_) ) ((((nat.minus) ) (x)) (y))) ((((nat.minus) ) ((((nat.plus) ) (x)) (y))) (y)))) ((((nat.le_) ) ((((nat.minus) ) (x)) (y))) (x))) (((((@nat.monotonic_le_minus_l) ((((nat.plus) ) (x)) (y))) (x)) (y)) (((@nat.le_plus_n_r) (y)) (x)))) (((((((@logic.rewrite_l) ((nat.nat) )) (x)) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) ((((nat.minus) ) (x)) (y))) (__))) ((((nat.le_) ) ((((nat.minus) ) (x)) (y))) (x)))) (((@logic.refl_) (Prop)) ((((nat.le_) ) ((((nat.minus) ) (x)) (y))) (x)))) ((((nat.minus) ) ((((nat.plus) ) (x)) (y))) (y))) (((@nat.minus_plus_m_m) (x)) (y))).
theorem nat.not_eq_to_le_to_lt : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , (((connectives.Not) ) ((((logic.eq_) ((nat.nat) )) (n)) (m))) -> ((((nat.le_) ) (n)) (m)) -> (((nat.lt_) ) (n)) (m) := fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , fun (Hneq : ((connectives.Not) ) ((((logic.eq_) ((nat.nat) )) (n)) (m))) , (fun (Hle : (((nat.le_) ) (n)) (m)) , (((((((@connectives.match_Or_prop) ((((nat.lt_) ) (n)) (m))) ((((logic.eq_) ((nat.nat) )) (n)) (m))) ((((nat.lt_) ) (n)) (m))) (fun (auto : (((nat.lt_) ) (n)) (m)) , (auto))) (fun (Heq : (((logic.eq_) ((nat.nat) )) (n)) (m)) , ((((@nat.not_le_to_lt) (m)) (n)) (((((@logic.not_to_not) ((((nat.le_) ) (m)) (n))) ((((logic.eq_) ((nat.nat) )) (n)) (m))) (fun (auto : (((nat.le_) ) (m)) (n)) , (((((((@logic.rewrite_l) ((nat.nat) )) (n)) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (n)) (__))) (((@logic.refl_) ((nat.nat) )) (n))) (m)) (Heq)))) (Hneq))))) ((((@nat.le_to_or_lt_eq) (n)) (m)) (Hle)))).
theorem nat.eq_minus_O : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , ((((nat.le_) ) (n)) (m)) -> (((logic.eq_) ((nat.nat) )) ((((nat.minus) ) (n)) (m))) ((nat.O) ) := fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , fun (lenm : (((nat.le_) ) (n)) (m)) , (((((@nat.le_n_O_elim) ((((nat.minus) ) (n)) (m))) (((((@logic.eq_coerc) ((((nat.le_) ) ((((nat.minus) ) (n)) (m))) ((((nat.minus) ) (n)) (n)))) ((((nat.le_) ) ((((nat.minus) ) (n)) (m))) ((nat.O) ))) (((((@nat.monotonic_le_minus_r) (m)) (n)) (n)) (lenm))) (((((((@logic.rewrite_l) ((nat.nat) )) ((nat.O) )) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) ((((nat.minus) ) (n)) (m))) (__))) ((((nat.le_) ) ((((nat.minus) ) (n)) (m))) ((nat.O) )))) (((@logic.refl_) (Prop)) ((((nat.le_) ) ((((nat.minus) ) (n)) (m))) ((nat.O) )))) ((((nat.minus) ) (n)) (n))) ((@nat.minus_n_n) (n))))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (__)) ((nat.O) ))) (((@logic.refl_) ((nat.nat) )) ((nat.O) ))).
theorem nat.distributive_times_minus : (((relations.distributive) ((nat.nat) )) ((nat.times) )) ((nat.minus) ) := fun (a : (nat.nat) ) , fun (b : (nat.nat) ) , fun (c : (nat.nat) ) , ((((((@connectives.match_Or_prop) ((((nat.lt_) ) (b)) (c))) (((connectives.Not) ) ((((nat.lt_) ) (b)) (c)))) ((((logic.eq_) ((nat.nat) )) ((((nat.times) ) (a)) ((((nat.minus) ) (b)) (c)))) ((((nat.minus) ) ((((nat.times) ) (a)) (b))) ((((nat.times) ) (a)) (c))))) (fun (Hbc : (((nat.lt_) ) (b)) (c)) , (((((((@logic.eq_ind_r) ((nat.nat) )) ((nat.O) )) (fun (x : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) (a)) (x))) ((((nat.minus) ) ((((nat.times) ) (a)) (b))) ((((nat.times) ) (a)) (c))))) (((((((@logic.eq_ind_r) ((nat.nat) )) ((nat.O) )) (fun (x : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) (a)) ((nat.O) ))) (x))) (((((((@logic.rewrite_l) ((nat.nat) )) ((nat.O) )) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (__)) ((nat.O) ))) (((@logic.refl_) ((nat.nat) )) ((nat.O) ))) ((((nat.times) ) (a)) ((nat.O) ))) ((@nat.times_n_O) (a)))) ((((nat.minus) ) ((((nat.times) ) (a)) (b))) ((((nat.times) ) (a)) (c)))) ((((@nat.eq_minus_O) ((((nat.times) ) (a)) (b))) ((((nat.times) ) (a)) (c))) (((((@nat.monotonic_le_times_r) (a)) (b)) (c)) ((((@nat.lt_to_le) (b)) (c)) (Hbc)))))) ((((nat.minus) ) (b)) (c))) ((((@nat.eq_minus_O) (b)) (c)) ((((@nat.lt_to_le) (b)) (c)) (Hbc)))))) (fun (Hbc : ((connectives.Not) ) ((((nat.lt_) ) (b)) (c))) , (((((@logic.sym_eq) ((nat.nat) )) ((((nat.minus) ) ((((nat.times) ) (a)) (b))) ((((nat.times) ) (a)) (c)))) ((((nat.times) ) (a)) ((((nat.minus) ) (b)) (c)))) (((((@logic.eq_coerc) ((((logic.eq_) ((nat.nat) )) ((((nat.minus) ) ((((nat.times) ) (a)) (b))) ((((nat.times) ) (a)) (c)))) ((((nat.times) ) (a)) ((((nat.minus) ) (b)) (c))))) ((((logic.eq_) ((nat.nat) )) ((((nat.minus) ) ((((nat.times) ) (a)) (b))) ((((nat.times) ) (a)) (c)))) ((((nat.times) ) (a)) ((((nat.minus) ) (b)) (c))))) (((((@nat.plus_to_minus) ((((nat.times) ) (a)) (b))) ((((nat.times) ) (a)) (c))) ((((nat.times) ) (a)) ((((nat.minus) ) (b)) (c)))) (((((((@logic.eq_ind) ((nat.nat) )) ((((nat.times) ) (a)) ((((nat.plus) ) (c)) ((((nat.minus) ) (b)) (c))))) (fun (x_1 : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) (a)) (b))) (x_1))) (((((((@logic.eq_f) ((nat.nat) )) ((nat.nat) )) (((nat.times) ) (a))) (b)) ((((nat.plus) ) (c)) ((((nat.minus) ) (b)) (c)))) (((((@logic.eq_coerc) ((((logic.eq_) ((nat.nat) )) (b)) ((((nat.plus) ) ((((nat.minus) ) (b)) (c))) (c)))) ((((logic.eq_) ((nat.nat) )) (b)) ((((nat.plus) ) (c)) ((((nat.minus) ) (b)) (c))))) ((((@nat.plus_minus_m_m) (b)) (c)) ((((@nat.not_lt_to_le) (b)) (c)) (Hbc)))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (c)) ((((nat.minus) ) (b)) (c)))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((logic.eq_) ((nat.nat) )) (b)) (__))) ((((logic.eq_) ((nat.nat) )) (b)) ((((nat.plus) ) (c)) ((((nat.minus) ) (b)) (c)))))) (((@logic.refl_) (Prop)) ((((logic.eq_) ((nat.nat) )) (b)) ((((nat.plus) ) (c)) ((((nat.minus) ) (b)) (c)))))) ((((nat.plus) ) ((((nat.minus) ) (b)) (c))) (c))) (((@nat.commutative_plus) ((((nat.minus) ) (b)) (c))) (c)))))) ((((nat.plus) ) ((((nat.times) ) (a)) (c))) ((((nat.times) ) (a)) ((((nat.minus) ) (b)) (c))))) ((((@nat.distributive_times_plus) (a)) (c)) ((((nat.minus) ) (b)) (c)))))) (((@logic.refl_) (Prop)) ((((logic.eq_) ((nat.nat) )) ((((nat.minus) ) ((((nat.times) ) (a)) (b))) ((((nat.times) ) (a)) (c)))) ((((nat.times) ) (a)) ((((nat.minus) ) (b)) (c))))))))) (((@nat.decidable_lt_) (b)) (c)).
theorem nat.minus_plus : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , forall (p:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.minus) ) ((((nat.minus) ) (n)) (m))) (p))) ((((nat.minus) ) (n)) ((((nat.plus) ) (m)) (p))) := fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , fun (p : (nat.nat) ) , ((((((@connectives.match_Or_prop) ((((nat.le_) ) ((((nat.plus) ) (m)) (p))) (n))) (((connectives.Not) ) ((((nat.le_) ) ((((nat.plus) ) (m)) (p))) (n)))) ((((logic.eq_) ((nat.nat) )) ((((nat.minus) ) ((((nat.minus) ) (n)) (m))) (p))) ((((nat.minus) ) (n)) ((((nat.plus) ) (m)) (p))))) (fun (Hlt : (((nat.le_) ) ((((nat.plus) ) (m)) (p))) (n)) , (((((@nat.plus_to_minus) ((((nat.minus) ) (n)) (m))) (p)) ((((nat.minus) ) (n)) ((((nat.plus) ) (m)) (p)))) (((((@nat.plus_to_minus) (n)) (m)) ((((nat.plus) ) (p)) ((((nat.minus) ) (n)) ((((nat.plus) ) (m)) (p))))) (((((((@logic.eq_ind) ((nat.nat) )) ((((nat.plus) ) ((((nat.plus) ) (m)) (p))) ((((nat.minus) ) (n)) ((((nat.plus) ) (m)) (p))))) (fun (x_1 : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (n)) (x_1))) ((((((@nat.minus_to_plus) (n)) ((((nat.plus) ) (m)) (p))) ((((nat.minus) ) (n)) ((((nat.plus) ) (m)) (p)))) (Hlt)) (((@logic.refl_) ((nat.nat) )) ((((nat.minus) ) (n)) ((((nat.plus) ) (m)) (p)))))) ((((nat.plus) ) (m)) ((((nat.plus) ) (p)) ((((nat.minus) ) (n)) ((((nat.plus) ) (m)) (p)))))) ((((@nat.associative_plus) (m)) (p)) ((((nat.minus) ) (n)) ((((nat.plus) ) (m)) (p))))))))) (fun (Hlt : ((connectives.Not) ) ((((nat.le_) ) ((((nat.plus) ) (m)) (p))) (n))) , (((((((@logic.eq_ind_r) ((nat.nat) )) ((nat.O) )) (fun (x : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (x)) ((((nat.minus) ) (n)) ((((nat.plus) ) (m)) (p))))) (((((@logic.sym_eq) ((nat.nat) )) ((((nat.minus) ) (n)) ((((nat.plus) ) (m)) (p)))) ((nat.O) )) (((((@logic.eq_coerc) ((((logic.eq_) ((nat.nat) )) ((((nat.minus) ) (n)) ((((nat.plus) ) (m)) (p)))) ((nat.O) ))) ((((logic.eq_) ((nat.nat) )) ((((nat.minus) ) (n)) ((((nat.plus) ) (m)) (p)))) ((nat.O) ))) ((((@nat.eq_minus_O) (n)) ((((nat.plus) ) (m)) (p))) ((((((@nat.transitive_le) (n)) (((nat.S) ) (n))) ((((nat.plus) ) (m)) (p))) ((@nat.le_n_Sn) (n))) ((((@nat.not_le_to_lt) ((((nat.plus) ) (m)) (p))) (n)) (Hlt))))) (((@logic.refl_) (Prop)) ((((logic.eq_) ((nat.nat) )) ((((nat.minus) ) (n)) ((((nat.plus) ) (m)) (p)))) ((nat.O) )))))) ((((nat.minus) ) ((((nat.minus) ) (n)) (m))) (p))) ((((@nat.eq_minus_O) ((((nat.minus) ) (n)) (m))) (p)) (((((@logic.eq_coerc) ((((nat.le_) ) ((((nat.minus) ) (n)) (m))) ((((nat.minus) ) ((((nat.plus) ) (p)) (m))) (m)))) ((((nat.le_) ) ((((nat.minus) ) (n)) (m))) (p))) (((((@nat.monotonic_le_minus_l) ((((nat.plus) ) (p)) (m))) (n)) (m)) (((((@logic.eq_coerc) ((((nat.le_) ) (n)) ((((nat.plus) ) (m)) (p)))) ((((nat.le_) ) (n)) ((((nat.plus) ) (p)) (m)))) ((((((@nat.transitive_le) (n)) (((nat.S) ) (n))) ((((nat.plus) ) (m)) (p))) ((@nat.le_n_Sn) (n))) ((((@nat.not_le_to_lt) ((((nat.plus) ) (m)) (p))) (n)) (Hlt)))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (m)) (p))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) (n)) ((((nat.plus) ) (m)) (p)))) ((((nat.le_) ) (n)) (__)))) (((@logic.refl_) (Prop)) ((((nat.le_) ) (n)) ((((nat.plus) ) (m)) (p))))) ((((nat.plus) ) (p)) (m))) (((@nat.commutative_plus) (p)) (m)))))) (((((((@logic.rewrite_l) ((nat.nat) )) (p)) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) ((((nat.minus) ) (n)) (m))) (__))) ((((nat.le_) ) ((((nat.minus) ) (n)) (m))) (p)))) (((@logic.refl_) (Prop)) ((((nat.le_) ) ((((nat.minus) ) (n)) (m))) (p)))) ((((nat.minus) ) ((((nat.plus) ) (p)) (m))) (m))) (((@nat.minus_plus_m_m) (p)) (m)))))))) (((@nat.decidable_le_) ((((nat.plus) ) (m)) (p))) (n)).
theorem nat.minus_minus : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , forall (p:(nat.nat) ) , ((((nat.le_) ) (p)) (m)) -> ((((nat.le_) ) (m)) (n)) -> (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (p)) ((((nat.minus) ) (n)) (m)))) ((((nat.minus) ) (n)) ((((nat.minus) ) (m)) (p))) := fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , fun (p : (nat.nat) ) , fun (lepm : (((nat.le_) ) (p)) (m)) , (fun (lemn : (((nat.le_) ) (m)) (n)) , (((((@logic.sym_eq) ((nat.nat) )) ((((nat.minus) ) (n)) ((((nat.minus) ) (m)) (p)))) ((((nat.plus) ) (p)) ((((nat.minus) ) (n)) (m)))) (((((@nat.plus_to_minus) (n)) ((((nat.minus) ) (m)) (p))) ((((nat.plus) ) (p)) ((((nat.minus) ) (n)) (m)))) (((((((@logic.eq_ind) ((nat.nat) )) ((((nat.plus) ) ((((nat.plus) ) ((((nat.minus) ) (m)) (p))) (p))) ((((nat.minus) ) (n)) (m)))) (fun (x_1 : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (n)) (x_1))) (((((((@logic.eq_ind) ((nat.nat) )) (m)) (fun (x_1 : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (n)) ((((nat.plus) ) (x_1)) ((((nat.minus) ) (n)) (m))))) (((((((@logic.eq_ind) ((nat.nat) )) ((((nat.plus) ) ((((nat.minus) ) (n)) (m))) (m))) (fun (x_1 : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (n)) (x_1))) (((((((@logic.eq_ind) ((nat.nat) )) (n)) (fun (x_1 : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (n)) (x_1))) (((@logic.refl_) ((nat.nat) )) (n))) ((((nat.plus) ) ((((nat.minus) ) (n)) (m))) (m))) ((((@nat.plus_minus_m_m) (n)) (m)) (lemn)))) ((((nat.plus) ) (m)) ((((nat.minus) ) (n)) (m)))) (((@nat.commutative_plus) ((((nat.minus) ) (n)) (m))) (m)))) ((((nat.plus) ) ((((nat.minus) ) (m)) (p))) (p))) ((((@nat.plus_minus_m_m) (m)) (p)) (lepm)))) ((((nat.plus) ) ((((nat.minus) ) (m)) (p))) ((((nat.plus) ) (p)) ((((nat.minus) ) (n)) (m))))) ((((@nat.associative_plus) ((((nat.minus) ) (m)) (p))) (p)) ((((nat.minus) ) (n)) (m))))))).
theorem nat.minus_minus_comm : forall (a:(nat.nat) ) , forall (b:(nat.nat) ) , forall (c:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.minus) ) ((((nat.minus) ) (a)) (b))) (c))) ((((nat.minus) ) ((((nat.minus) ) (a)) (c))) (b)) := fun (a : (nat.nat) ) , fun (b : (nat.nat) ) , fun (c : (nat.nat) ) , ((((@nat.le_to_le_to_eq) ((((nat.minus) ) ((((nat.minus) ) (a)) (b))) (c))) ((((nat.minus) ) ((((nat.minus) ) (a)) (c))) (b))) (((((@logic.eq_coerc) ((((nat.le_) ) ((((nat.minus) ) ((((nat.minus) ) (a)) (b))) (c))) ((((nat.minus) ) ((((nat.plus) ) ((((nat.minus) ) ((((nat.minus) ) (a)) (c))) (b))) (c))) (c)))) ((((nat.le_) ) ((((nat.minus) ) ((((nat.minus) ) (a)) (b))) (c))) ((((nat.minus) ) ((((nat.minus) ) (a)) (c))) (b)))) (((((@nat.monotonic_le_minus_l) ((((nat.plus) ) ((((nat.minus) ) ((((nat.minus) ) (a)) (c))) (b))) (c))) ((((nat.minus) ) (a)) (b))) (c)) (((((@logic.eq_coerc) ((((nat.le_) ) ((((nat.minus) ) (a)) (b))) ((((nat.plus) ) ((((nat.minus) ) ((((nat.minus) ) (a)) (b))) (c))) (c)))) ((((nat.le_) ) ((((nat.minus) ) (a)) (b))) ((((nat.plus) ) ((((nat.minus) ) ((((nat.minus) ) (a)) (c))) (b))) (c)))) (((@nat.le_plus_minus_m_m) ((((nat.minus) ) (a)) (b))) (c))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.minus) ) (a)) ((((nat.plus) ) (b)) (c)))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) ((((nat.minus) ) (a)) (b))) ((((nat.plus) ) (__)) (c)))) ((((nat.le_) ) ((((nat.minus) ) (a)) (b))) ((((nat.plus) ) ((((nat.minus) ) ((((nat.minus) ) (a)) (c))) (b))) (c))))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (c)) ((((nat.minus) ) (a)) ((((nat.plus) ) (b)) (c))))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) ((((nat.minus) ) (a)) (b))) (__))) ((((nat.le_) ) ((((nat.minus) ) (a)) (b))) ((((nat.plus) ) ((((nat.minus) ) ((((nat.minus) ) (a)) (c))) (b))) (c))))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (c)) ((((nat.minus) ) ((((nat.minus) ) (a)) (c))) (b)))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) ((((nat.minus) ) (a)) (b))) ((((nat.plus) ) (c)) ((((nat.minus) ) (a)) ((((nat.plus) ) (b)) (c)))))) ((((nat.le_) ) ((((nat.minus) ) (a)) (b))) (__)))) (((((((@logic.rewrite_l) ((nat.nat) )) ((((nat.minus) ) ((((nat.minus) ) (a)) (c))) (b))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) ((((nat.minus) ) (a)) (b))) ((((nat.plus) ) (c)) (__)))) ((((nat.le_) ) ((((nat.minus) ) (a)) (b))) ((((nat.plus) ) (c)) ((((nat.minus) ) ((((nat.minus) ) (a)) (c))) (b)))))) (((@logic.refl_) (Prop)) ((((nat.le_) ) ((((nat.minus) ) (a)) (b))) ((((nat.plus) ) (c)) ((((nat.minus) ) ((((nat.minus) ) (a)) (c))) (b)))))) ((((nat.minus) ) (a)) ((((nat.plus) ) (b)) (c)))) (((((((@logic.rewrite_l) ((nat.nat) )) ((((nat.plus) ) (c)) (b))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.minus) ) ((((nat.minus) ) (a)) (c))) (b))) ((((nat.minus) ) (a)) (__)))) ((((@nat.minus_plus) (a)) (c)) (b))) ((((nat.plus) ) (b)) (c))) (((@nat.commutative_plus) (c)) (b))))) ((((nat.plus) ) ((((nat.minus) ) ((((nat.minus) ) (a)) (c))) (b))) (c))) (((@nat.commutative_plus) ((((nat.minus) ) ((((nat.minus) ) (a)) (c))) (b))) (c)))) ((((nat.plus) ) ((((nat.minus) ) (a)) ((((nat.plus) ) (b)) (c)))) (c))) (((@nat.commutative_plus) ((((nat.minus) ) (a)) ((((nat.plus) ) (b)) (c)))) (c)))) ((((nat.minus) ) ((((nat.minus) ) (a)) (b))) (c))) ((((@nat.minus_plus) (a)) (b)) (c)))))) (((((((@logic.rewrite_l) ((nat.nat) )) ((((nat.minus) ) ((((nat.minus) ) (a)) (c))) (b))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) ((((nat.minus) ) ((((nat.minus) ) (a)) (b))) (c))) (__))) ((((nat.le_) ) ((((nat.minus) ) ((((nat.minus) ) (a)) (b))) (c))) ((((nat.minus) ) ((((nat.minus) ) (a)) (c))) (b))))) (((@logic.refl_) (Prop)) ((((nat.le_) ) ((((nat.minus) ) ((((nat.minus) ) (a)) (b))) (c))) ((((nat.minus) ) ((((nat.minus) ) (a)) (c))) (b))))) ((((nat.minus) ) ((((nat.plus) ) ((((nat.minus) ) ((((nat.minus) ) (a)) (c))) (b))) (c))) (c))) (((@nat.minus_plus_m_m) ((((nat.minus) ) ((((nat.minus) ) (a)) (c))) (b))) (c))))) (((((@logic.eq_coerc) ((((nat.le_) ) ((((nat.minus) ) ((((nat.minus) ) (a)) (c))) (b))) ((((nat.minus) ) ((((nat.plus) ) ((((nat.minus) ) ((((nat.minus) ) (a)) (b))) (c))) (b))) (b)))) ((((nat.le_) ) ((((nat.minus) ) ((((nat.minus) ) (a)) (c))) (b))) ((((nat.minus) ) ((((nat.minus) ) (a)) (b))) (c)))) (((((@nat.monotonic_le_minus_l) ((((nat.plus) ) ((((nat.minus) ) ((((nat.minus) ) (a)) (b))) (c))) (b))) ((((nat.minus) ) (a)) (c))) (b)) (((((@logic.eq_coerc) ((((nat.le_) ) ((((nat.minus) ) (a)) (c))) ((((nat.plus) ) ((((nat.minus) ) ((((nat.minus) ) (a)) (c))) (b))) (b)))) ((((nat.le_) ) ((((nat.minus) ) (a)) (c))) ((((nat.plus) ) ((((nat.minus) ) ((((nat.minus) ) (a)) (b))) (c))) (b)))) (((@nat.le_plus_minus_m_m) ((((nat.minus) ) (a)) (c))) (b))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.minus) ) (a)) ((((nat.plus) ) (c)) (b)))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) ((((nat.minus) ) (a)) (c))) ((((nat.plus) ) (__)) (b)))) ((((nat.le_) ) ((((nat.minus) ) (a)) (c))) ((((nat.plus) ) ((((nat.minus) ) ((((nat.minus) ) (a)) (b))) (c))) (b))))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (b)) ((((nat.minus) ) (a)) ((((nat.plus) ) (c)) (b))))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) ((((nat.minus) ) (a)) (c))) (__))) ((((nat.le_) ) ((((nat.minus) ) (a)) (c))) ((((nat.plus) ) ((((nat.minus) ) ((((nat.minus) ) (a)) (b))) (c))) (b))))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (b)) ((((nat.minus) ) ((((nat.minus) ) (a)) (b))) (c)))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) ((((nat.minus) ) (a)) (c))) ((((nat.plus) ) (b)) ((((nat.minus) ) (a)) ((((nat.plus) ) (c)) (b)))))) ((((nat.le_) ) ((((nat.minus) ) (a)) (c))) (__)))) (((((((@logic.rewrite_l) ((nat.nat) )) ((((nat.minus) ) ((((nat.minus) ) (a)) (b))) (c))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) ((((nat.minus) ) (a)) (c))) ((((nat.plus) ) (b)) (__)))) ((((nat.le_) ) ((((nat.minus) ) (a)) (c))) ((((nat.plus) ) (b)) ((((nat.minus) ) ((((nat.minus) ) (a)) (b))) (c)))))) (((@logic.refl_) (Prop)) ((((nat.le_) ) ((((nat.minus) ) (a)) (c))) ((((nat.plus) ) (b)) ((((nat.minus) ) ((((nat.minus) ) (a)) (b))) (c)))))) ((((nat.minus) ) (a)) ((((nat.plus) ) (c)) (b)))) (((((((@logic.rewrite_l) ((nat.nat) )) ((((nat.plus) ) (b)) (c))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.minus) ) ((((nat.minus) ) (a)) (b))) (c))) ((((nat.minus) ) (a)) (__)))) ((((@nat.minus_plus) (a)) (b)) (c))) ((((nat.plus) ) (c)) (b))) (((@nat.commutative_plus) (b)) (c))))) ((((nat.plus) ) ((((nat.minus) ) ((((nat.minus) ) (a)) (b))) (c))) (b))) (((@nat.commutative_plus) ((((nat.minus) ) ((((nat.minus) ) (a)) (b))) (c))) (b)))) ((((nat.plus) ) ((((nat.minus) ) (a)) ((((nat.plus) ) (c)) (b)))) (b))) (((@nat.commutative_plus) ((((nat.minus) ) (a)) ((((nat.plus) ) (c)) (b)))) (b)))) ((((nat.minus) ) ((((nat.minus) ) (a)) (c))) (b))) ((((@nat.minus_plus) (a)) (c)) (b)))))) (((((((@logic.rewrite_l) ((nat.nat) )) ((((nat.minus) ) ((((nat.minus) ) (a)) (b))) (c))) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) ((((nat.minus) ) ((((nat.minus) ) (a)) (c))) (b))) (__))) ((((nat.le_) ) ((((nat.minus) ) ((((nat.minus) ) (a)) (c))) (b))) ((((nat.minus) ) ((((nat.minus) ) (a)) (b))) (c))))) (((@logic.refl_) (Prop)) ((((nat.le_) ) ((((nat.minus) ) ((((nat.minus) ) (a)) (c))) (b))) ((((nat.minus) ) ((((nat.minus) ) (a)) (b))) (c))))) ((((nat.minus) ) ((((nat.plus) ) ((((nat.minus) ) ((((nat.minus) ) (a)) (b))) (c))) (b))) (b))) (((@nat.minus_plus_m_m) ((((nat.minus) ) ((((nat.minus) ) (a)) (b))) (c))) (b)))).
theorem nat.minus_le_minus_minus_comm : forall (b:(nat.nat) ) , forall (c:(nat.nat) ) , forall (a:(nat.nat) ) , ((((nat.le_) ) (c)) (b)) -> (((logic.eq_) ((nat.nat) )) ((((nat.minus) ) (a)) ((((nat.minus) ) (b)) (c)))) ((((nat.minus) ) ((((nat.plus) ) (a)) (c))) (b)) := fun (b : (nat.nat) ) , fun (c : (nat.nat) ) , fun (a : (nat.nat) ) , fun (H : (((nat.le_) ) (c)) (b)) , (((((((@logic.eq_ind_r) ((nat.nat) )) ((((nat.plus) ) ((((nat.minus) ) (b)) (c))) (c))) (fun (x : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.minus) ) (a)) ((((nat.minus) ) (b)) (c)))) ((((nat.minus) ) ((((nat.plus) ) (a)) (c))) (x)))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (c)) (a))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.minus) ) (a)) ((((nat.minus) ) (b)) (c)))) ((((nat.minus) ) (__)) ((((nat.plus) ) ((((nat.minus) ) (b)) (c))) (c))))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (c)) ((((nat.minus) ) (b)) (c)))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.minus) ) (a)) ((((nat.minus) ) (b)) (c)))) ((((nat.minus) ) ((((nat.plus) ) (c)) (a))) (__)))) (((((((@logic.rewrite_l) ((nat.nat) )) ((((nat.minus) ) ((((nat.minus) ) ((((nat.plus) ) (c)) (a))) (c))) ((((nat.minus) ) (b)) (c)))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.minus) ) (a)) ((((nat.minus) ) (b)) (c)))) (__))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.minus) ) ((((nat.plus) ) (c)) (a))) (c))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.minus) ) (__)) ((((nat.minus) ) (b)) (c)))) ((((nat.minus) ) ((((nat.minus) ) ((((nat.plus) ) (c)) (a))) (c))) ((((nat.minus) ) (b)) (c))))) (((@logic.refl_) ((nat.nat) )) ((((nat.minus) ) ((((nat.minus) ) ((((nat.plus) ) (c)) (a))) (c))) ((((nat.minus) ) (b)) (c))))) (a)) (((((((@logic.rewrite_l) ((nat.nat) )) ((((nat.plus) ) (a)) (c))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (a)) ((((nat.minus) ) (__)) (c)))) (((@nat.minus_plus_m_m) (a)) (c))) ((((nat.plus) ) (c)) (a))) (((@nat.commutative_plus) (a)) (c))))) ((((nat.minus) ) ((((nat.plus) ) (c)) (a))) ((((nat.plus) ) (c)) ((((nat.minus) ) (b)) (c))))) ((((@nat.minus_plus) ((((nat.plus) ) (c)) (a))) (c)) ((((nat.minus) ) (b)) (c))))) ((((nat.plus) ) ((((nat.minus) ) (b)) (c))) (c))) (((@nat.commutative_plus) ((((nat.minus) ) (b)) (c))) (c)))) ((((nat.plus) ) (a)) (c))) (((@nat.commutative_plus) (a)) (c)))) (b)) ((((@nat.plus_minus_m_m) (b)) (c)) (H))).
theorem nat.minus_plus_plus_l : forall (x:(nat.nat) ) , forall (y:(nat.nat) ) , forall (h:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.minus) ) ((((nat.plus) ) (x)) (h))) ((((nat.plus) ) (y)) (h)))) ((((nat.minus) ) (x)) (y)) := fun (x : (nat.nat) ) , fun (y : (nat.nat) ) , fun (h : (nat.nat) ) , ((((((@logic.rewrite_l) ((nat.nat) )) ((((nat.minus) ) ((((nat.minus) ) ((((nat.plus) ) (x)) (h))) (y))) (h))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (__)) ((((nat.minus) ) (x)) (y)))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.minus) ) (x)) (y))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (__)) ((((nat.minus) ) (x)) (y)))) (((@logic.refl_) ((nat.nat) )) ((((nat.minus) ) (x)) (y)))) ((((nat.minus) ) ((((nat.minus) ) ((((nat.plus) ) (x)) (h))) (y))) (h))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.minus) ) ((((nat.plus) ) (x)) (h))) (h))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.minus) ) ((((nat.minus) ) ((((nat.plus) ) (x)) (h))) (y))) (h))) ((((nat.minus) ) (__)) (y)))) ((((@nat.minus_minus_comm) ((((nat.plus) ) (x)) (h))) (y)) (h))) (x)) (((@nat.minus_plus_m_m) (x)) (h))))) ((((nat.minus) ) ((((nat.plus) ) (x)) (h))) ((((nat.plus) ) (y)) (h)))) ((((@nat.minus_plus) ((((nat.plus) ) (x)) (h))) (y)) (h)).
constant nat.eqb : ((nat.nat) ) -> ((nat.nat) ) -> (bool.bool) .
constant nat.eqb_body : ((nat.nat) ) -> ((nat.nat) ) -> (bool.bool) .
axiom nat.axiom_eqb : forall (n:(nat.nat) ) , (((connectives.equal) (((nat.nat) ) -> (bool.bool) )) (((nat.eqb) ) (n))) ((((nat.filter_nat_type) (((nat.nat) ) -> (bool.bool) )) ((nat.eqb_body) )) (n)).
theorem nat.eq_eqb : forall (n:(nat.nat) ) , (((leibniz.leibniz) (((nat.nat) ) -> (bool.bool) )) (((nat.eqb) ) (n))) ((((nat.filter_nat_type) (((nat.nat) ) -> (bool.bool) )) ((nat.eqb_body) )) (n)) := fun (n : (nat.nat) ) , ((((@connectives.equal_leibniz) (((nat.nat) ) -> (bool.bool) )) (((nat.eqb) ) (n))) ((((nat.filter_nat_type) (((nat.nat) ) -> (bool.bool) )) ((nat.eqb_body) )) (n))) ((@nat.axiom_eqb) (n)).
theorem nat.sym_eq_eqb : forall (n:(nat.nat) ) , (((leibniz.leibniz) (((nat.nat) ) -> (bool.bool) )) ((((nat.filter_nat_type) (((nat.nat) ) -> (bool.bool) )) ((nat.eqb_body) )) (n))) (((nat.eqb) ) (n)) := fun (n : (nat.nat) ) , ((((@leibniz.sym_leibniz) (((nat.nat) ) -> (bool.bool) )) (((nat.eqb) ) (n))) ((((nat.filter_nat_type) (((nat.nat) ) -> (bool.bool) )) ((nat.eqb_body) )) (n))) ((@nat.eq_eqb) (n)).
axiom nat.axiom_eqb_body_O : (((connectives.equal) (((nat.nat) ) -> (bool.bool) )) (((nat.eqb_body) ) ((nat.O) ))) (fun (m : (nat.nat) ) , ((((nat.match_nat_type) ((bool.bool) )) ((bool.true) )) (fun (q : (nat.nat) ) , (bool.false) )) (m)).
theorem nat.eq_eqb_body_O : (((leibniz.leibniz) (((nat.nat) ) -> (bool.bool) )) (((nat.eqb_body) ) ((nat.O) ))) (fun (m : (nat.nat) ) , ((((nat.match_nat_type) ((bool.bool) )) ((bool.true) )) (fun (q : (nat.nat) ) , (bool.false) )) (m)) := ((((@connectives.equal_leibniz) (((nat.nat) ) -> (bool.bool) )) (((nat.eqb_body) ) ((nat.O) ))) (fun (m : (nat.nat) ) , ((((nat.match_nat_type) ((bool.bool) )) ((bool.true) )) (fun (q : (nat.nat) ) , (bool.false) )) (m))) (@nat.axiom_eqb_body_O).
theorem nat.sym_eq_eqb_body_O : (((leibniz.leibniz) (((nat.nat) ) -> (bool.bool) )) (fun (m : (nat.nat) ) , ((((nat.match_nat_type) ((bool.bool) )) ((bool.true) )) (fun (q : (nat.nat) ) , (bool.false) )) (m))) (((nat.eqb_body) ) ((nat.O) )) := ((((@leibniz.sym_leibniz) (((nat.nat) ) -> (bool.bool) )) (((nat.eqb_body) ) ((nat.O) ))) (fun (m : (nat.nat) ) , ((((nat.match_nat_type) ((bool.bool) )) ((bool.true) )) (fun (q : (nat.nat) ) , (bool.false) )) (m))) (@nat.eq_eqb_body_O).
axiom nat.axiom_eqb_body_S : forall (n:(nat.nat) ) , (((connectives.equal) (((nat.nat) ) -> (bool.bool) )) (((nat.eqb_body) ) (((nat.S) ) (n)))) (fun (m : (nat.nat) ) , ((((nat.match_nat_type) ((bool.bool) )) ((bool.false) )) (fun (q : (nat.nat) ) , (((nat.eqb) ) (n)) (q))) (m)).
theorem nat.eq_eqb_body_S : forall (n:(nat.nat) ) , (((leibniz.leibniz) (((nat.nat) ) -> (bool.bool) )) (((nat.eqb_body) ) (((nat.S) ) (n)))) (fun (m : (nat.nat) ) , ((((nat.match_nat_type) ((bool.bool) )) ((bool.false) )) (fun (q : (nat.nat) ) , (((nat.eqb) ) (n)) (q))) (m)) := fun (n : (nat.nat) ) , ((((@connectives.equal_leibniz) (((nat.nat) ) -> (bool.bool) )) (((nat.eqb_body) ) (((nat.S) ) (n)))) (fun (m : (nat.nat) ) , ((((nat.match_nat_type) ((bool.bool) )) ((bool.false) )) (fun (q : (nat.nat) ) , (((nat.eqb) ) (n)) (q))) (m))) ((@nat.axiom_eqb_body_S) (n)).
theorem nat.sym_eq_eqb_body_S : forall (n:(nat.nat) ) , (((leibniz.leibniz) (((nat.nat) ) -> (bool.bool) )) (fun (m : (nat.nat) ) , ((((nat.match_nat_type) ((bool.bool) )) ((bool.false) )) (fun (q : (nat.nat) ) , (((nat.eqb) ) (n)) (q))) (m))) (((nat.eqb_body) ) (((nat.S) ) (n))) := fun (n : (nat.nat) ) , ((((@leibniz.sym_leibniz) (((nat.nat) ) -> (bool.bool) )) (((nat.eqb_body) ) (((nat.S) ) (n)))) (fun (m : (nat.nat) ) , ((((nat.match_nat_type) ((bool.bool) )) ((bool.false) )) (fun (q : (nat.nat) ) , (((nat.eqb) ) (n)) (q))) (m))) ((@nat.eq_eqb_body_S) (n)).
theorem nat.eqb_elim : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , forall (P:((bool.bool) ) -> Prop) , (((((logic.eq_) ((nat.nat) )) (n)) (m)) -> (P) ((bool.true) )) -> ((((connectives.Not) ) ((((logic.eq_) ((nat.nat) )) (n)) (m))) -> (P) ((bool.false) )) -> (P) ((((nat.eqb) ) (n)) (m)) := ((((@nat.nat_elim2) (fun (__ : (nat.nat) ) , fun (_0 : (nat.nat) ) , forall (P:((bool.bool) ) -> Prop) , (((((logic.eq_) ((nat.nat) )) (__)) (_0)) -> (P) ((bool.true) )) -> ((((connectives.Not) ) ((((logic.eq_) ((nat.nat) )) (__)) (_0))) -> (P) ((bool.false) )) -> (P) ((((nat.eqb) ) (__)) (_0)))) (fun (n : (nat.nat) ) , ((((@nat.match_nat_prop) (fun (__ : (nat.nat) ) , forall (P:((bool.bool) ) -> Prop) , (((((logic.eq_) ((nat.nat) )) ((nat.O) )) (__)) -> (P) ((bool.true) )) -> ((((connectives.Not) ) ((((logic.eq_) ((nat.nat) )) ((nat.O) )) (__))) -> (P) ((bool.false) )) -> (P) ((((nat.eqb) ) ((nat.O) )) (__)))) ((((@nat.sym_eq_eqb) ((nat.O) )) (fun (y : ((nat.nat) ) -> (bool.bool) ) , forall (P:((bool.bool) ) -> Prop) , (((((logic.eq_) ((nat.nat) )) ((nat.O) )) ((nat.O) )) -> (P) ((bool.true) )) -> ((((connectives.Not) ) ((((logic.eq_) ((nat.nat) )) ((nat.O) )) ((nat.O) ))) -> (P) ((bool.false) )) -> (P) ((y) ((nat.O) )))) (((((@nat.sym_eq_filter_nat_type_O) (((nat.nat) ) -> (bool.bool) )) ((nat.eqb_body) )) (fun (y : ((nat.nat) ) -> (bool.bool) ) , forall (P:((bool.bool) ) -> Prop) , (((((logic.eq_) ((nat.nat) )) ((nat.O) )) ((nat.O) )) -> (P) ((bool.true) )) -> ((((connectives.Not) ) ((((logic.eq_) ((nat.nat) )) ((nat.O) )) ((nat.O) ))) -> (P) ((bool.false) )) -> (P) ((y) ((nat.O) )))) (((@nat.sym_eq_eqb_body_O) (fun (y : ((nat.nat) ) -> (bool.bool) ) , forall (P:((bool.bool) ) -> Prop) , (((((logic.eq_) ((nat.nat) )) ((nat.O) )) ((nat.O) )) -> (P) ((bool.true) )) -> ((((connectives.Not) ) ((((logic.eq_) ((nat.nat) )) ((nat.O) )) ((nat.O) ))) -> (P) ((bool.false) )) -> (P) ((y) ((nat.O) )))) ((((((@nat.sym_eq_match_nat_type_O) ((bool.bool) )) ((bool.true) )) (fun (q : (nat.nat) ) , (bool.false) )) (fun (y : (bool.bool) ) , forall (P:((bool.bool) ) -> Prop) , (((((logic.eq_) ((nat.nat) )) ((nat.O) )) ((nat.O) )) -> (P) ((bool.true) )) -> ((((connectives.Not) ) ((((logic.eq_) ((nat.nat) )) ((nat.O) )) ((nat.O) ))) -> (P) ((bool.false) )) -> (P) (y))) (fun (P : ((bool.bool) ) -> Prop) , fun (auto : ((((logic.eq_) ((nat.nat) )) ((nat.O) )) ((nat.O) )) -> (P) ((bool.true) )) , (fun (auto' : (((connectives.Not) ) ((((logic.eq_) ((nat.nat) )) ((nat.O) )) ((nat.O) ))) -> (P) ((bool.false) )) , ((auto) (((@logic.refl_) ((nat.nat) )) ((nat.O) )))))))))) (fun (auto : (nat.nat) ) , (((@nat.sym_eq_eqb) ((nat.O) )) (fun (y : ((nat.nat) ) -> (bool.bool) ) , forall (P:((bool.bool) ) -> Prop) , (((((logic.eq_) ((nat.nat) )) ((nat.O) )) (((nat.S) ) (auto))) -> (P) ((bool.true) )) -> ((((connectives.Not) ) ((((logic.eq_) ((nat.nat) )) ((nat.O) )) (((nat.S) ) (auto)))) -> (P) ((bool.false) )) -> (P) ((y) (((nat.S) ) (auto))))) (((((@nat.sym_eq_filter_nat_type_O) (((nat.nat) ) -> (bool.bool) )) ((nat.eqb_body) )) (fun (y : ((nat.nat) ) -> (bool.bool) ) , forall (P:((bool.bool) ) -> Prop) , (((((logic.eq_) ((nat.nat) )) ((nat.O) )) (((nat.S) ) (auto))) -> (P) ((bool.true) )) -> ((((connectives.Not) ) ((((logic.eq_) ((nat.nat) )) ((nat.O) )) (((nat.S) ) (auto)))) -> (P) ((bool.false) )) -> (P) ((y) (((nat.S) ) (auto))))) (((@nat.sym_eq_eqb_body_O) (fun (y : ((nat.nat) ) -> (bool.bool) ) , forall (P:((bool.bool) ) -> Prop) , (((((logic.eq_) ((nat.nat) )) ((nat.O) )) (((nat.S) ) (auto))) -> (P) ((bool.true) )) -> ((((connectives.Not) ) ((((logic.eq_) ((nat.nat) )) ((nat.O) )) (((nat.S) ) (auto)))) -> (P) ((bool.false) )) -> (P) ((y) (((nat.S) ) (auto))))) (((((((@nat.sym_eq_match_nat_type_S) ((bool.bool) )) ((bool.true) )) (fun (q : (nat.nat) ) , (bool.false) )) (auto)) (fun (y : (bool.bool) ) , forall (P:((bool.bool) ) -> Prop) , (((((logic.eq_) ((nat.nat) )) ((nat.O) )) (((nat.S) ) (auto))) -> (P) ((bool.true) )) -> ((((connectives.Not) ) ((((logic.eq_) ((nat.nat) )) ((nat.O) )) (((nat.S) ) (auto)))) -> (P) ((bool.false) )) -> (P) (y))) (fun (P : ((bool.bool) ) -> Prop) , fun (auto' : ((((logic.eq_) ((nat.nat) )) ((nat.O) )) (((nat.S) ) (auto))) -> (P) ((bool.true) )) , (fun (auto'' : (((connectives.Not) ) ((((logic.eq_) ((nat.nat) )) ((nat.O) )) (((nat.S) ) (auto)))) -> (P) ((bool.false) )) , ((auto'') ((@nat.not_eq_O_S) (auto)))))))))) (n))) (fun (n : (nat.nat) ) , (((@nat.sym_eq_eqb) (((nat.S) ) (n))) (fun (y : ((nat.nat) ) -> (bool.bool) ) , forall (P:((bool.bool) ) -> Prop) , (((((logic.eq_) ((nat.nat) )) (((nat.S) ) (n))) ((nat.O) )) -> (P) ((bool.true) )) -> ((((connectives.Not) ) ((((logic.eq_) ((nat.nat) )) (((nat.S) ) (n))) ((nat.O) ))) -> (P) ((bool.false) )) -> (P) ((y) ((nat.O) )))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (bool.bool) )) ((nat.eqb_body) )) (n)) (fun (y : ((nat.nat) ) -> (bool.bool) ) , forall (P:((bool.bool) ) -> Prop) , (((((logic.eq_) ((nat.nat) )) (((nat.S) ) (n))) ((nat.O) )) -> (P) ((bool.true) )) -> ((((connectives.Not) ) ((((logic.eq_) ((nat.nat) )) (((nat.S) ) (n))) ((nat.O) ))) -> (P) ((bool.false) )) -> (P) ((y) ((nat.O) )))) ((((@nat.sym_eq_eqb_body_S) (n)) (fun (y : ((nat.nat) ) -> (bool.bool) ) , forall (P:((bool.bool) ) -> Prop) , (((((logic.eq_) ((nat.nat) )) (((nat.S) ) (n))) ((nat.O) )) -> (P) ((bool.true) )) -> ((((connectives.Not) ) ((((logic.eq_) ((nat.nat) )) (((nat.S) ) (n))) ((nat.O) ))) -> (P) ((bool.false) )) -> (P) ((y) ((nat.O) )))) ((((((@nat.sym_eq_match_nat_type_O) ((bool.bool) )) ((bool.false) )) (fun (q : (nat.nat) ) , (((nat.eqb) ) (n)) (q))) (fun (y : (bool.bool) ) , forall (P:((bool.bool) ) -> Prop) , (((((logic.eq_) ((nat.nat) )) (((nat.S) ) (n))) ((nat.O) )) -> (P) ((bool.true) )) -> ((((connectives.Not) ) ((((logic.eq_) ((nat.nat) )) (((nat.S) ) (n))) ((nat.O) ))) -> (P) ((bool.false) )) -> (P) (y))) (fun (P : ((bool.bool) ) -> Prop) , fun (auto : ((((logic.eq_) ((nat.nat) )) (((nat.S) ) (n))) ((nat.O) )) -> (P) ((bool.true) )) , (fun (auto' : (((connectives.Not) ) ((((logic.eq_) ((nat.nat) )) (((nat.S) ) (n))) ((nat.O) ))) -> (P) ((bool.false) )) , ((auto') (((((@logic.sym_not_eq) ((nat.nat) )) ((nat.O) )) (((nat.S) ) (n))) ((@nat.not_eq_O_S) (n))))))))))) (fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , (((@nat.sym_eq_eqb) (((nat.S) ) (n))) (fun (y : ((nat.nat) ) -> (bool.bool) ) , (forall (P:((bool.bool) ) -> Prop) , (((((logic.eq_) ((nat.nat) )) (n)) (m)) -> (P) ((bool.true) )) -> ((((connectives.Not) ) ((((logic.eq_) ((nat.nat) )) (n)) (m))) -> (P) ((bool.false) )) -> (P) ((((nat.eqb) ) (n)) (m))) -> forall (P:((bool.bool) ) -> Prop) , (((((logic.eq_) ((nat.nat) )) (((nat.S) ) (n))) (((nat.S) ) (m))) -> (P) ((bool.true) )) -> ((((connectives.Not) ) ((((logic.eq_) ((nat.nat) )) (((nat.S) ) (n))) (((nat.S) ) (m)))) -> (P) ((bool.false) )) -> (P) ((y) (((nat.S) ) (m))))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (bool.bool) )) ((nat.eqb_body) )) (n)) (fun (y : ((nat.nat) ) -> (bool.bool) ) , (forall (P:((bool.bool) ) -> Prop) , (((((logic.eq_) ((nat.nat) )) (n)) (m)) -> (P) ((bool.true) )) -> ((((connectives.Not) ) ((((logic.eq_) ((nat.nat) )) (n)) (m))) -> (P) ((bool.false) )) -> (P) ((((nat.eqb) ) (n)) (m))) -> forall (P:((bool.bool) ) -> Prop) , (((((logic.eq_) ((nat.nat) )) (((nat.S) ) (n))) (((nat.S) ) (m))) -> (P) ((bool.true) )) -> ((((connectives.Not) ) ((((logic.eq_) ((nat.nat) )) (((nat.S) ) (n))) (((nat.S) ) (m)))) -> (P) ((bool.false) )) -> (P) ((y) (((nat.S) ) (m))))) ((((@nat.sym_eq_eqb_body_S) (n)) (fun (y : ((nat.nat) ) -> (bool.bool) ) , (forall (P:((bool.bool) ) -> Prop) , (((((logic.eq_) ((nat.nat) )) (n)) (m)) -> (P) ((bool.true) )) -> ((((connectives.Not) ) ((((logic.eq_) ((nat.nat) )) (n)) (m))) -> (P) ((bool.false) )) -> (P) ((((nat.eqb) ) (n)) (m))) -> forall (P:((bool.bool) ) -> Prop) , (((((logic.eq_) ((nat.nat) )) (((nat.S) ) (n))) (((nat.S) ) (m))) -> (P) ((bool.true) )) -> ((((connectives.Not) ) ((((logic.eq_) ((nat.nat) )) (((nat.S) ) (n))) (((nat.S) ) (m)))) -> (P) ((bool.false) )) -> (P) ((y) (((nat.S) ) (m))))) (((((((@nat.sym_eq_match_nat_type_S) ((bool.bool) )) ((bool.false) )) (fun (q : (nat.nat) ) , (((nat.eqb) ) (n)) (q))) (m)) (fun (y : (bool.bool) ) , (forall (P:((bool.bool) ) -> Prop) , (((((logic.eq_) ((nat.nat) )) (n)) (m)) -> (P) ((bool.true) )) -> ((((connectives.Not) ) ((((logic.eq_) ((nat.nat) )) (n)) (m))) -> (P) ((bool.false) )) -> (P) ((((nat.eqb) ) (n)) (m))) -> forall (P:((bool.bool) ) -> Prop) , (((((logic.eq_) ((nat.nat) )) (((nat.S) ) (n))) (((nat.S) ) (m))) -> (P) ((bool.true) )) -> ((((connectives.Not) ) ((((logic.eq_) ((nat.nat) )) (((nat.S) ) (n))) (((nat.S) ) (m)))) -> (P) ((bool.false) )) -> (P) (y))) (fun (auto : forall (P:((bool.bool) ) -> Prop) , (((((logic.eq_) ((nat.nat) )) (n)) (m)) -> (P) ((bool.true) )) -> ((((connectives.Not) ) ((((logic.eq_) ((nat.nat) )) (n)) (m))) -> (P) ((bool.false) )) -> (P) ((((nat.eqb) ) (n)) (m))) , (fun (P : ((bool.bool) ) -> Prop) , fun (auto' : ((((logic.eq_) ((nat.nat) )) (((nat.S) ) (n))) (((nat.S) ) (m))) -> (P) ((bool.true) )) , (fun (auto'' : (((connectives.Not) ) ((((logic.eq_) ((nat.nat) )) (((nat.S) ) (n))) (((nat.S) ) (m)))) -> (P) ((bool.false) )) , ((((auto) (P)) (fun (auto''' : (((logic.eq_) ((nat.nat) )) (n)) (m)) , ((auto') (((((((@logic.rewrite_l) ((nat.nat) )) (n)) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((nat.S) ) (n))) (((nat.S) ) (__)))) (((@logic.refl_) ((nat.nat) )) (((nat.S) ) (n)))) (m)) (auto'''))))) (fun (auto''' : ((connectives.Not) ) ((((logic.eq_) ((nat.nat) )) (n)) (m))) , ((auto'') ((((@nat.not_eq_S) (n)) (m)) (auto''')))))))))))).
theorem nat.eqb_n_n : forall (n:(nat.nat) ) , (((logic.eq_) ((bool.bool) )) ((((nat.eqb) ) (n)) (n))) ((bool.true) ) := fun (n : (nat.nat) ) , ((((@nat.nat_ind) (fun (_x_365 : (nat.nat) ) , (((logic.eq_) ((bool.bool) )) ((((nat.eqb) ) (_x_365)) (_x_365))) ((bool.true) ))) ((((@nat.sym_eq_eqb) ((nat.O) )) (fun (y : ((nat.nat) ) -> (bool.bool) ) , (((logic.eq_) ((bool.bool) )) ((y) ((nat.O) ))) ((bool.true) ))) (((((@nat.sym_eq_filter_nat_type_O) (((nat.nat) ) -> (bool.bool) )) ((nat.eqb_body) )) (fun (y : ((nat.nat) ) -> (bool.bool) ) , (((logic.eq_) ((bool.bool) )) ((y) ((nat.O) ))) ((bool.true) ))) (((@nat.sym_eq_eqb_body_O) (fun (y : ((nat.nat) ) -> (bool.bool) ) , (((logic.eq_) ((bool.bool) )) ((y) ((nat.O) ))) ((bool.true) ))) ((((((@nat.sym_eq_match_nat_type_O) ((bool.bool) )) ((bool.true) )) (fun (q : (nat.nat) ) , (bool.false) )) (fun (y : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) (y)) ((bool.true) ))) (((@logic.refl_) ((bool.bool) )) ((bool.true) ))))))) (fun (x_366 : (nat.nat) ) , (((@nat.sym_eq_eqb) (((nat.S) ) (x_366))) (fun (y : ((nat.nat) ) -> (bool.bool) ) , ((((logic.eq_) ((bool.bool) )) ((((nat.eqb) ) (x_366)) (x_366))) ((bool.true) )) -> (((logic.eq_) ((bool.bool) )) ((y) (((nat.S) ) (x_366)))) ((bool.true) ))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (bool.bool) )) ((nat.eqb_body) )) (x_366)) (fun (y : ((nat.nat) ) -> (bool.bool) ) , ((((logic.eq_) ((bool.bool) )) ((((nat.eqb) ) (x_366)) (x_366))) ((bool.true) )) -> (((logic.eq_) ((bool.bool) )) ((y) (((nat.S) ) (x_366)))) ((bool.true) ))) ((((@nat.sym_eq_eqb_body_S) (x_366)) (fun (y : ((nat.nat) ) -> (bool.bool) ) , ((((logic.eq_) ((bool.bool) )) ((((nat.eqb) ) (x_366)) (x_366))) ((bool.true) )) -> (((logic.eq_) ((bool.bool) )) ((y) (((nat.S) ) (x_366)))) ((bool.true) ))) (((((((@nat.sym_eq_match_nat_type_S) ((bool.bool) )) ((bool.false) )) (fun (q : (nat.nat) ) , (((nat.eqb) ) (x_366)) (q))) (x_366)) (fun (y : (bool.bool) ) , ((((logic.eq_) ((bool.bool) )) ((((nat.eqb) ) (x_366)) (x_366))) ((bool.true) )) -> (((logic.eq_) ((bool.bool) )) (y)) ((bool.true) ))) (fun (_x_368 : (((logic.eq_) ((bool.bool) )) ((((nat.eqb) ) (x_366)) (x_366))) ((bool.true) )) , (((((((@logic.rewrite_r) ((bool.bool) )) ((bool.true) )) (fun (__ : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) (__)) ((bool.true) ))) (((@logic.refl_) ((bool.bool) )) ((bool.true) ))) ((((nat.eqb) ) (x_366)) (x_366))) (_x_368)))))))) (n).
theorem nat.eqb_true_to_eq : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , ((((logic.eq_) ((bool.bool) )) ((((nat.eqb) ) (n)) (m))) ((bool.true) )) -> (((logic.eq_) ((nat.nat) )) (n)) (m) := fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , (((((@nat.eqb_elim) (n)) (m)) (fun (__ : (bool.bool) ) , ((((logic.eq_) ((bool.bool) )) (__)) ((bool.true) )) -> (((logic.eq_) ((nat.nat) )) (n)) (m))) (fun (auto : (((logic.eq_) ((nat.nat) )) (n)) (m)) , (fun (auto' : (((logic.eq_) ((bool.bool) )) ((bool.true) )) ((bool.true) )) , (((((((@logic.rewrite_l) ((nat.nat) )) (n)) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (n)) (__))) (((@logic.refl_) ((nat.nat) )) (n))) (m)) (auto))))) (fun (__ : ((connectives.Not) ) ((((logic.eq_) ((nat.nat) )) (n)) (m))) , (fun (abs : (((logic.eq_) ((bool.bool) )) ((bool.false) )) ((bool.true) )) , (((@connectives.falsity) ((((logic.eq_) ((nat.nat) )) (n)) (m))) ((((@logic.absurd) ((((logic.eq_) ((bool.bool) )) ((bool.true) )) ((bool.false) ))) (((((((@logic.rewrite_r) ((bool.bool) )) ((bool.true) )) (fun (__1 : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) ((bool.true) )) (__1))) (((@logic.refl_) ((bool.bool) )) ((bool.true) ))) ((bool.false) )) (abs))) (@bool.not_eq_true_false))))).
theorem nat.eqb_false_to_not_eq : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , ((((logic.eq_) ((bool.bool) )) ((((nat.eqb) ) (n)) (m))) ((bool.false) )) -> ((connectives.Not) ) ((((logic.eq_) ((nat.nat) )) (n)) (m)) := fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , (((((@nat.eqb_elim) (n)) (m)) (fun (__ : (bool.bool) ) , ((((logic.eq_) ((bool.bool) )) (__)) ((bool.false) )) -> ((connectives.Not) ) ((((logic.eq_) ((nat.nat) )) (n)) (m)))) (fun (auto : (((logic.eq_) ((nat.nat) )) (n)) (m)) , (fun (auto' : (((logic.eq_) ((bool.bool) )) ((bool.true) )) ((bool.false) )) , (((((@logic.not_to_not) ((((logic.eq_) ((nat.nat) )) (n)) (m))) ((((logic.eq_) ((bool.bool) )) ((bool.true) )) ((bool.false) ))) (fun (auto'' : (((logic.eq_) ((nat.nat) )) (n)) (m)) , (((((((@logic.rewrite_l) ((bool.bool) )) ((bool.true) )) (fun (__ : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) ((bool.true) )) (__))) (((@logic.refl_) ((bool.bool) )) ((bool.true) ))) ((bool.false) )) (auto')))) (@bool.not_eq_true_false))))) (fun (auto : ((connectives.Not) ) ((((logic.eq_) ((nat.nat) )) (n)) (m))) , (fun (auto' : (((logic.eq_) ((bool.bool) )) ((bool.false) )) ((bool.false) )) , (auto))).
theorem nat.eq_to_eqb_true : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , ((((logic.eq_) ((nat.nat) )) (n)) (m)) -> (((logic.eq_) ((bool.bool) )) ((((nat.eqb) ) (n)) (m))) ((bool.true) ) := fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , fun (auto : (((logic.eq_) ((nat.nat) )) (n)) (m)) , (((((((@logic.rewrite_l) ((nat.nat) )) (n)) (fun (__ : (nat.nat) ) , (((logic.eq_) ((bool.bool) )) ((((nat.eqb) ) (n)) (__))) ((bool.true) ))) (((((((@logic.rewrite_r) ((bool.bool) )) ((bool.true) )) (fun (__ : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) (__)) ((bool.true) ))) (((@logic.refl_) ((bool.bool) )) ((bool.true) ))) ((((nat.eqb) ) (n)) (n))) ((@nat.eqb_n_n) (n)))) (m)) (auto)).
theorem nat.not_eq_to_eqb_false : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , (((connectives.Not) ) ((((logic.eq_) ((nat.nat) )) (n)) (m))) -> (((logic.eq_) ((bool.bool) )) ((((nat.eqb) ) (n)) (m))) ((bool.false) ) := fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , fun (noteq : ((connectives.Not) ) ((((logic.eq_) ((nat.nat) )) (n)) (m))) , ((((((@nat.eqb_elim) (n)) (m)) (fun (__ : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) (__)) ((bool.false) ))) (fun (Heq : (((logic.eq_) ((nat.nat) )) (n)) (m)) , (((@connectives.falsity) ((((logic.eq_) ((bool.bool) )) ((bool.true) )) ((bool.false) ))) ((((@logic.absurd) ((((logic.eq_) ((nat.nat) )) (n)) (m))) (((((((@logic.rewrite_l) ((nat.nat) )) (n)) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (n)) (__))) (((@logic.refl_) ((nat.nat) )) (n))) (m)) (Heq))) (noteq))))) (fun (auto : ((connectives.Not) ) ((((logic.eq_) ((nat.nat) )) (n)) (m))) , (((@logic.refl_) ((bool.bool) )) ((bool.false) )))).
constant nat.leb : ((nat.nat) ) -> ((nat.nat) ) -> (bool.bool) .
constant nat.leb_body : ((nat.nat) ) -> ((nat.nat) ) -> (bool.bool) .
axiom nat.axiom_leb : forall (n:(nat.nat) ) , (((connectives.equal) (((nat.nat) ) -> (bool.bool) )) (((nat.leb) ) (n))) ((((nat.filter_nat_type) (((nat.nat) ) -> (bool.bool) )) ((nat.leb_body) )) (n)).
theorem nat.eq_leb : forall (n:(nat.nat) ) , (((leibniz.leibniz) (((nat.nat) ) -> (bool.bool) )) (((nat.leb) ) (n))) ((((nat.filter_nat_type) (((nat.nat) ) -> (bool.bool) )) ((nat.leb_body) )) (n)) := fun (n : (nat.nat) ) , ((((@connectives.equal_leibniz) (((nat.nat) ) -> (bool.bool) )) (((nat.leb) ) (n))) ((((nat.filter_nat_type) (((nat.nat) ) -> (bool.bool) )) ((nat.leb_body) )) (n))) ((@nat.axiom_leb) (n)).
theorem nat.sym_eq_leb : forall (n:(nat.nat) ) , (((leibniz.leibniz) (((nat.nat) ) -> (bool.bool) )) ((((nat.filter_nat_type) (((nat.nat) ) -> (bool.bool) )) ((nat.leb_body) )) (n))) (((nat.leb) ) (n)) := fun (n : (nat.nat) ) , ((((@leibniz.sym_leibniz) (((nat.nat) ) -> (bool.bool) )) (((nat.leb) ) (n))) ((((nat.filter_nat_type) (((nat.nat) ) -> (bool.bool) )) ((nat.leb_body) )) (n))) ((@nat.eq_leb) (n)).
axiom nat.axiom_leb_body_O : (((connectives.equal) (((nat.nat) ) -> (bool.bool) )) (((nat.leb_body) ) ((nat.O) ))) (fun (m : (nat.nat) ) , (bool.true) ).
theorem nat.eq_leb_body_O : (((leibniz.leibniz) (((nat.nat) ) -> (bool.bool) )) (((nat.leb_body) ) ((nat.O) ))) (fun (m : (nat.nat) ) , (bool.true) ) := ((((@connectives.equal_leibniz) (((nat.nat) ) -> (bool.bool) )) (((nat.leb_body) ) ((nat.O) ))) (fun (m : (nat.nat) ) , (bool.true) )) (@nat.axiom_leb_body_O).
theorem nat.sym_eq_leb_body_O : (((leibniz.leibniz) (((nat.nat) ) -> (bool.bool) )) (fun (m : (nat.nat) ) , (bool.true) )) (((nat.leb_body) ) ((nat.O) )) := ((((@leibniz.sym_leibniz) (((nat.nat) ) -> (bool.bool) )) (((nat.leb_body) ) ((nat.O) ))) (fun (m : (nat.nat) ) , (bool.true) )) (@nat.eq_leb_body_O).
axiom nat.axiom_leb_body_S : forall (n:(nat.nat) ) , (((connectives.equal) (((nat.nat) ) -> (bool.bool) )) (((nat.leb_body) ) (((nat.S) ) (n)))) (fun (m : (nat.nat) ) , ((((nat.match_nat_type) ((bool.bool) )) ((bool.false) )) (fun (q : (nat.nat) ) , (((nat.leb) ) (n)) (q))) (m)).
theorem nat.eq_leb_body_S : forall (n:(nat.nat) ) , (((leibniz.leibniz) (((nat.nat) ) -> (bool.bool) )) (((nat.leb_body) ) (((nat.S) ) (n)))) (fun (m : (nat.nat) ) , ((((nat.match_nat_type) ((bool.bool) )) ((bool.false) )) (fun (q : (nat.nat) ) , (((nat.leb) ) (n)) (q))) (m)) := fun (n : (nat.nat) ) , ((((@connectives.equal_leibniz) (((nat.nat) ) -> (bool.bool) )) (((nat.leb_body) ) (((nat.S) ) (n)))) (fun (m : (nat.nat) ) , ((((nat.match_nat_type) ((bool.bool) )) ((bool.false) )) (fun (q : (nat.nat) ) , (((nat.leb) ) (n)) (q))) (m))) ((@nat.axiom_leb_body_S) (n)).
theorem nat.sym_eq_leb_body_S : forall (n:(nat.nat) ) , (((leibniz.leibniz) (((nat.nat) ) -> (bool.bool) )) (fun (m : (nat.nat) ) , ((((nat.match_nat_type) ((bool.bool) )) ((bool.false) )) (fun (q : (nat.nat) ) , (((nat.leb) ) (n)) (q))) (m))) (((nat.leb_body) ) (((nat.S) ) (n))) := fun (n : (nat.nat) ) , ((((@leibniz.sym_leibniz) (((nat.nat) ) -> (bool.bool) )) (((nat.leb_body) ) (((nat.S) ) (n)))) (fun (m : (nat.nat) ) , ((((nat.match_nat_type) ((bool.bool) )) ((bool.false) )) (fun (q : (nat.nat) ) , (((nat.leb) ) (n)) (q))) (m))) ((@nat.eq_leb_body_S) (n)).
theorem nat.leb_elim : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , forall (P:((bool.bool) ) -> Prop) , (((((nat.le_) ) (n)) (m)) -> (P) ((bool.true) )) -> ((((connectives.Not) ) ((((nat.le_) ) (n)) (m))) -> (P) ((bool.false) )) -> (P) ((((nat.leb) ) (n)) (m)) := ((((@nat.nat_elim2) (fun (__ : (nat.nat) ) , fun (_0 : (nat.nat) ) , forall (P:((bool.bool) ) -> Prop) , (((((nat.le_) ) (__)) (_0)) -> (P) ((bool.true) )) -> ((((connectives.Not) ) ((((nat.le_) ) (__)) (_0))) -> (P) ((bool.false) )) -> (P) ((((nat.leb) ) (__)) (_0)))) (fun (n : (nat.nat) ) , (((@nat.sym_eq_leb) ((nat.O) )) (fun (y : ((nat.nat) ) -> (bool.bool) ) , forall (P:((bool.bool) ) -> Prop) , (((((nat.le_) ) ((nat.O) )) (n)) -> (P) ((bool.true) )) -> ((((connectives.Not) ) ((((nat.le_) ) ((nat.O) )) (n))) -> (P) ((bool.false) )) -> (P) ((y) (n)))) (((((@nat.sym_eq_filter_nat_type_O) (((nat.nat) ) -> (bool.bool) )) ((nat.leb_body) )) (fun (y : ((nat.nat) ) -> (bool.bool) ) , forall (P:((bool.bool) ) -> Prop) , (((((nat.le_) ) ((nat.O) )) (n)) -> (P) ((bool.true) )) -> ((((connectives.Not) ) ((((nat.le_) ) ((nat.O) )) (n))) -> (P) ((bool.false) )) -> (P) ((y) (n)))) (((@nat.sym_eq_leb_body_O) (fun (y : ((nat.nat) ) -> (bool.bool) ) , forall (P:((bool.bool) ) -> Prop) , (((((nat.le_) ) ((nat.O) )) (n)) -> (P) ((bool.true) )) -> ((((connectives.Not) ) ((((nat.le_) ) ((nat.O) )) (n))) -> (P) ((bool.false) )) -> (P) ((y) (n)))) (fun (P : ((bool.bool) ) -> Prop) , fun (auto : ((((nat.le_) ) ((nat.O) )) (n)) -> (P) ((bool.true) )) , (fun (auto' : (((connectives.Not) ) ((((nat.le_) ) ((nat.O) )) (n))) -> (P) ((bool.false) )) , ((auto) ((@nat.le_O_n) (n))))))))) (fun (n : (nat.nat) ) , (((@nat.sym_eq_leb) (((nat.S) ) (n))) (fun (y : ((nat.nat) ) -> (bool.bool) ) , forall (P:((bool.bool) ) -> Prop) , (((((nat.le_) ) (((nat.S) ) (n))) ((nat.O) )) -> (P) ((bool.true) )) -> ((((connectives.Not) ) ((((nat.le_) ) (((nat.S) ) (n))) ((nat.O) ))) -> (P) ((bool.false) )) -> (P) ((y) ((nat.O) )))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (bool.bool) )) ((nat.leb_body) )) (n)) (fun (y : ((nat.nat) ) -> (bool.bool) ) , forall (P:((bool.bool) ) -> Prop) , (((((nat.le_) ) (((nat.S) ) (n))) ((nat.O) )) -> (P) ((bool.true) )) -> ((((connectives.Not) ) ((((nat.le_) ) (((nat.S) ) (n))) ((nat.O) ))) -> (P) ((bool.false) )) -> (P) ((y) ((nat.O) )))) ((((@nat.sym_eq_leb_body_S) (n)) (fun (y : ((nat.nat) ) -> (bool.bool) ) , forall (P:((bool.bool) ) -> Prop) , (((((nat.le_) ) (((nat.S) ) (n))) ((nat.O) )) -> (P) ((bool.true) )) -> ((((connectives.Not) ) ((((nat.le_) ) (((nat.S) ) (n))) ((nat.O) ))) -> (P) ((bool.false) )) -> (P) ((y) ((nat.O) )))) ((((((@nat.sym_eq_match_nat_type_O) ((bool.bool) )) ((bool.false) )) (fun (q : (nat.nat) ) , (((nat.leb) ) (n)) (q))) (fun (y : (bool.bool) ) , forall (P:((bool.bool) ) -> Prop) , (((((nat.le_) ) (((nat.S) ) (n))) ((nat.O) )) -> (P) ((bool.true) )) -> ((((connectives.Not) ) ((((nat.le_) ) (((nat.S) ) (n))) ((nat.O) ))) -> (P) ((bool.false) )) -> (P) (y))) (fun (P : ((bool.bool) ) -> Prop) , fun (auto : ((((nat.le_) ) (((nat.S) ) (n))) ((nat.O) )) -> (P) ((bool.true) )) , (fun (auto' : (((connectives.Not) ) ((((nat.le_) ) (((nat.S) ) (n))) ((nat.O) ))) -> (P) ((bool.false) )) , ((auto') ((@nat.not_le_Sn_O) (n)))))))))) (fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , (((@nat.sym_eq_leb) (((nat.S) ) (n))) (fun (y : ((nat.nat) ) -> (bool.bool) ) , (forall (P:((bool.bool) ) -> Prop) , (((((nat.le_) ) (n)) (m)) -> (P) ((bool.true) )) -> ((((connectives.Not) ) ((((nat.le_) ) (n)) (m))) -> (P) ((bool.false) )) -> (P) ((((nat.leb) ) (n)) (m))) -> forall (P:((bool.bool) ) -> Prop) , (((((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (m))) -> (P) ((bool.true) )) -> ((((connectives.Not) ) ((((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (m)))) -> (P) ((bool.false) )) -> (P) ((y) (((nat.S) ) (m))))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (bool.bool) )) ((nat.leb_body) )) (n)) (fun (y : ((nat.nat) ) -> (bool.bool) ) , (forall (P:((bool.bool) ) -> Prop) , (((((nat.le_) ) (n)) (m)) -> (P) ((bool.true) )) -> ((((connectives.Not) ) ((((nat.le_) ) (n)) (m))) -> (P) ((bool.false) )) -> (P) ((((nat.leb) ) (n)) (m))) -> forall (P:((bool.bool) ) -> Prop) , (((((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (m))) -> (P) ((bool.true) )) -> ((((connectives.Not) ) ((((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (m)))) -> (P) ((bool.false) )) -> (P) ((y) (((nat.S) ) (m))))) ((((@nat.sym_eq_leb_body_S) (n)) (fun (y : ((nat.nat) ) -> (bool.bool) ) , (forall (P:((bool.bool) ) -> Prop) , (((((nat.le_) ) (n)) (m)) -> (P) ((bool.true) )) -> ((((connectives.Not) ) ((((nat.le_) ) (n)) (m))) -> (P) ((bool.false) )) -> (P) ((((nat.leb) ) (n)) (m))) -> forall (P:((bool.bool) ) -> Prop) , (((((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (m))) -> (P) ((bool.true) )) -> ((((connectives.Not) ) ((((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (m)))) -> (P) ((bool.false) )) -> (P) ((y) (((nat.S) ) (m))))) (((((((@nat.sym_eq_match_nat_type_S) ((bool.bool) )) ((bool.false) )) (fun (q : (nat.nat) ) , (((nat.leb) ) (n)) (q))) (m)) (fun (y : (bool.bool) ) , (forall (P:((bool.bool) ) -> Prop) , (((((nat.le_) ) (n)) (m)) -> (P) ((bool.true) )) -> ((((connectives.Not) ) ((((nat.le_) ) (n)) (m))) -> (P) ((bool.false) )) -> (P) ((((nat.leb) ) (n)) (m))) -> forall (P:((bool.bool) ) -> Prop) , (((((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (m))) -> (P) ((bool.true) )) -> ((((connectives.Not) ) ((((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (m)))) -> (P) ((bool.false) )) -> (P) (y))) (fun (Hind : forall (P:((bool.bool) ) -> Prop) , (((((nat.le_) ) (n)) (m)) -> (P) ((bool.true) )) -> ((((connectives.Not) ) ((((nat.le_) ) (n)) (m))) -> (P) ((bool.false) )) -> (P) ((((nat.leb) ) (n)) (m))) , (fun (P : ((bool.bool) ) -> Prop) , fun (Pt : ((((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (m))) -> (P) ((bool.true) )) , (fun (Pf : (((connectives.Not) ) ((((nat.le_) ) (((nat.S) ) (n))) (((nat.S) ) (m)))) -> (P) ((bool.false) )) , ((((Hind) (P)) (fun (lenm : (((nat.le_) ) (n)) (m)) , ((Pt) ((((@nat.le_S_S) (n)) (m)) (lenm))))) (fun (nlenm : ((connectives.Not) ) ((((nat.le_) ) (n)) (m))) , ((Pf) ((((@nat.not_le_to_not_le_S_S) (n)) (m)) (nlenm)))))))))))).
theorem nat.leb_true_to_le : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , ((((logic.eq_) ((bool.bool) )) ((((nat.leb) ) (n)) (m))) ((bool.true) )) -> (((nat.le_) ) (n)) (m) := fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , (((((@nat.leb_elim) (n)) (m)) (fun (__ : (bool.bool) ) , ((((logic.eq_) ((bool.bool) )) (__)) ((bool.true) )) -> (((nat.le_) ) (n)) (m))) (fun (auto : (((nat.le_) ) (n)) (m)) , (fun (auto' : (((logic.eq_) ((bool.bool) )) ((bool.true) )) ((bool.true) )) , (auto)))) (fun (__ : ((connectives.Not) ) ((((nat.le_) ) (n)) (m))) , (fun (abs : (((logic.eq_) ((bool.bool) )) ((bool.false) )) ((bool.true) )) , (((@connectives.falsity) ((((nat.le_) ) (n)) (m))) ((((@logic.absurd) ((((logic.eq_) ((bool.bool) )) ((bool.true) )) ((bool.false) ))) (((((((@logic.rewrite_r) ((bool.bool) )) ((bool.true) )) (fun (__1 : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) ((bool.true) )) (__1))) (((@logic.refl_) ((bool.bool) )) ((bool.true) ))) ((bool.false) )) (abs))) (@bool.not_eq_true_false))))).
theorem nat.le_to_leb_true : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , ((((nat.le_) ) (n)) (m)) -> (((logic.eq_) ((bool.bool) )) ((((nat.leb) ) (n)) (m))) ((bool.true) ) := fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , (((((@nat.leb_elim) (n)) (m)) (fun (__ : (bool.bool) ) , ((((nat.le_) ) (n)) (m)) -> (((logic.eq_) ((bool.bool) )) (__)) ((bool.true) ))) (fun (auto : (((nat.le_) ) (n)) (m)) , (fun (auto' : (((nat.le_) ) (n)) (m)) , (((@logic.refl_) ((bool.bool) )) ((bool.true) ))))) (fun (H : ((connectives.Not) ) ((((nat.le_) ) (n)) (m))) , (fun (H1 : (((nat.le_) ) (n)) (m)) , (((@connectives.falsity) ((((logic.eq_) ((bool.bool) )) ((bool.false) )) ((bool.true) ))) ((((@logic.absurd) ((((nat.le_) ) (n)) (m))) (H1)) (H))))).
theorem nat.not_le_to_leb_false : forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , (((connectives.Not) ) ((((nat.le_) ) (n)) (m))) -> (((logic.eq_) ((bool.bool) )) ((((nat.leb) ) (n)) (m))) ((bool.false) ) := fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , (((((@nat.leb_elim) (n)) (m)) (fun (__ : (bool.bool) ) , (((connectives.Not) ) ((((nat.le_) ) (n)) (m))) -> (((logic.eq_) ((bool.bool) )) (__)) ((bool.false) ))) (fun (H : (((nat.le_) ) (n)) (m)) , (fun (H1 : ((connectives.Not) ) ((((nat.le_) ) (n)) (m))) , (((@connectives.falsity) ((((logic.eq_) ((bool.bool) )) ((bool.true) )) ((bool.false) ))) ((((@logic.absurd) ((((nat.le_) ) (n)) (m))) (H)) (H1)))))) (fun (auto : ((connectives.Not) ) ((((nat.le_) ) (n)) (m))) , (fun (auto' : ((connectives.Not) ) ((((nat.le_) ) (n)) (m))) , (((@logic.refl_) ((bool.bool) )) ((bool.false) )))).

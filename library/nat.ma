include "basics/pts.ma".
include "bool.ma".
include "connectives.ma".
include "leibniz.ma".
include "logic.ma".
include "relations.ma".
axiom nat : Type[0].
axiom O : (nat) .
axiom S : ((nat) ) -> (nat) .
axiom match_nat_prop : \forall (return_:((nat) ) -> Prop). ((return_) ((O) )) -> (\forall (n:(nat) ). (return_) (((S) ) (n))) -> \forall (z:(nat) ). (return_) (z).
axiom match_nat_type : \forall return_ : Type[0] . (return_) -> (((nat) ) -> return_) -> ((nat) ) -> return_.
axiom axiom_match_nat_type_O : \forall return_type. \forall (case_O:return_type). \forall (case_S:((nat) ) -> return_type). (((equal) (return_type)) (((((match_nat_type) (return_type)) (case_O)) (case_S)) ((O) ))) (case_O).
definition eq_match_nat_type_O : \forall return_type. \forall (case_O:return_type). \forall (case_S:((nat) ) -> return_type). (((leibniz) (return_type)) (((((match_nat_type) (return_type)) (case_O)) (case_S)) ((O) ))) (case_O) := \lambda return_type : Type[0]. \lambda case_O : return_type. \lambda case_S : ((nat) ) -> return_type. ((((equal_leibniz) (return_type)) (((((match_nat_type) (return_type)) (case_O)) (case_S)) ((O) ))) (case_O)) ((((axiom_match_nat_type_O) (return_type)) (case_O)) (case_S)).
definition sym_eq_match_nat_type_O : \forall return_type. \forall (case_O:return_type). \forall (case_S:((nat) ) -> return_type). (((leibniz) (return_type)) (case_O)) (((((match_nat_type) (return_type)) (case_O)) (case_S)) ((O) )) := \lambda return_type : Type[0]. \lambda case_O : return_type. \lambda case_S : ((nat) ) -> return_type. ((((sym_leibniz) (return_type)) (((((match_nat_type) (return_type)) (case_O)) (case_S)) ((O) ))) (case_O)) ((((eq_match_nat_type_O) (return_type)) (case_O)) (case_S)).
axiom axiom_match_nat_type_S : \forall return_type. \forall (case_O:return_type). \forall (case_S:((nat) ) -> return_type). \forall (n:(nat) ). (((equal) (return_type)) (((((match_nat_type) (return_type)) (case_O)) (case_S)) (((S) ) (n)))) ((case_S) (n)).
definition eq_match_nat_type_S : \forall return_type. \forall (case_O:return_type). \forall (case_S:((nat) ) -> return_type). \forall (n:(nat) ). (((leibniz) (return_type)) (((((match_nat_type) (return_type)) (case_O)) (case_S)) (((S) ) (n)))) ((case_S) (n)) := \lambda return_type : Type[0]. \lambda case_O : return_type. \lambda case_S : ((nat) ) -> return_type. \lambda n : (nat) . ((((equal_leibniz) (return_type)) (((((match_nat_type) (return_type)) (case_O)) (case_S)) (((S) ) (n)))) ((case_S) (n))) (((((axiom_match_nat_type_S) (return_type)) (case_O)) (case_S)) (n)).
definition sym_eq_match_nat_type_S : \forall return_type. \forall (case_O:return_type). \forall (case_S:((nat) ) -> return_type). \forall (n:(nat) ). (((leibniz) (return_type)) ((case_S) (n))) (((((match_nat_type) (return_type)) (case_O)) (case_S)) (((S) ) (n))) := \lambda return_type : Type[0]. \lambda case_O : return_type. \lambda case_S : ((nat) ) -> return_type. \lambda n : (nat) . ((((sym_leibniz) (return_type)) (((((match_nat_type) (return_type)) (case_O)) (case_S)) (((S) ) (n)))) ((case_S) (n))) (((((eq_match_nat_type_S) (return_type)) (case_O)) (case_S)) (n)).
axiom filter_nat_type : \forall return_ : Type[0] . (((nat) ) -> return_) -> ((nat) ) -> return_.
axiom axiom_filter_nat_type_O : \forall return_type. \forall (return_:((nat) ) -> return_type). (((equal) (return_type)) ((((filter_nat_type) (return_type)) (return_)) ((O) ))) ((return_) ((O) )).
definition eq_filter_nat_type_O : \forall return_type. \forall (return_:((nat) ) -> return_type). (((leibniz) (return_type)) ((((filter_nat_type) (return_type)) (return_)) ((O) ))) ((return_) ((O) )) := \lambda return_type : Type[0]. \lambda return_ : ((nat) ) -> return_type. ((((equal_leibniz) (return_type)) ((((filter_nat_type) (return_type)) (return_)) ((O) ))) ((return_) ((O) ))) (((axiom_filter_nat_type_O) (return_type)) (return_)).
definition sym_eq_filter_nat_type_O : \forall return_type. \forall (return_:((nat) ) -> return_type). (((leibniz) (return_type)) ((return_) ((O) ))) ((((filter_nat_type) (return_type)) (return_)) ((O) )) := \lambda return_type : Type[0]. \lambda return_ : ((nat) ) -> return_type. ((((sym_leibniz) (return_type)) ((((filter_nat_type) (return_type)) (return_)) ((O) ))) ((return_) ((O) ))) (((eq_filter_nat_type_O) (return_type)) (return_)).
axiom axiom_filter_nat_type_S : \forall return_type. \forall (return_:((nat) ) -> return_type). \forall (n:(nat) ). (((equal) (return_type)) ((((filter_nat_type) (return_type)) (return_)) (((S) ) (n)))) ((return_) (((S) ) (n))).
definition eq_filter_nat_type_S : \forall return_type. \forall (return_:((nat) ) -> return_type). \forall (n:(nat) ). (((leibniz) (return_type)) ((((filter_nat_type) (return_type)) (return_)) (((S) ) (n)))) ((return_) (((S) ) (n))) := \lambda return_type : Type[0]. \lambda return_ : ((nat) ) -> return_type. \lambda n : (nat) . ((((equal_leibniz) (return_type)) ((((filter_nat_type) (return_type)) (return_)) (((S) ) (n)))) ((return_) (((S) ) (n)))) ((((axiom_filter_nat_type_S) (return_type)) (return_)) (n)).
definition sym_eq_filter_nat_type_S : \forall return_type. \forall (return_:((nat) ) -> return_type). \forall (n:(nat) ). (((leibniz) (return_type)) ((return_) (((S) ) (n)))) ((((filter_nat_type) (return_type)) (return_)) (((S) ) (n))) := \lambda return_type : Type[0]. \lambda return_ : ((nat) ) -> return_type. \lambda n : (nat) . ((((sym_leibniz) (return_type)) ((((filter_nat_type) (return_type)) (return_)) (((S) ) (n)))) ((return_) (((S) ) (n)))) ((((eq_filter_nat_type_S) (return_type)) (return_)) (n)).
axiom nat_ind : \forall (Q:((nat) ) -> Prop). ((Q) ((O) )) -> (\forall (x:(nat) ). ((Q) (x)) -> (Q) (((S) ) (x))) -> \forall (x:(nat) ). (Q) (x).
definition pred : ((nat) ) -> (nat)  := \lambda n : (nat) . ((((match_nat_type) ((nat) )) ((O) )) (\lambda p : (nat) . p)) (n).
definition not_zero : ((nat) ) -> Prop := \lambda n : (nat) . ((((match_nat_type) (Prop)) ((False) )) (\lambda p : (nat) . (True) )) (n).
axiom le : ((nat) ) -> ((nat) ) -> Prop.
axiom le_n : \forall (n:(nat) ). (((le) ) (n)) (n).
axiom le_S : \forall (n:(nat) ). \forall (m:(nat) ). ((((le) ) (n)) (m)) -> (((le) ) (n)) (((S) ) (m)).
axiom match_le_prop : \forall (n:(nat) ). \forall (return_:((nat) ) -> Prop). ((return_) (n)) -> (\forall (m:(nat) ). (return_) (((S) ) (m))) -> \forall (m:(nat) ). ((((le) ) (n)) (m)) -> (return_) (m).
axiom le_ind : \forall (n:(nat) ). \forall (Q:((nat) ) -> Prop). ((Q) (n)) -> (\forall (m:(nat) ). ((((le) ) (n)) (m)) -> ((Q) (m)) -> (Q) (((S) ) (m))) -> \forall (m:(nat) ). ((((le) ) (n)) (m)) -> (Q) (m).
definition lt : ((nat) ) -> ((nat) ) -> Prop := \lambda n : (nat) . \lambda m : (nat) . (((le) ) (((S) ) (n))) (m).
axiom plus : ((nat) ) -> ((nat) ) -> (nat) .
axiom plus_body : ((nat) ) -> ((nat) ) -> (nat) .
axiom axiom_plus : \forall (n:(nat) ). (((equal) (((nat) ) -> (nat) )) (((plus) ) (n))) ((((filter_nat_type) (((nat) ) -> (nat) )) ((plus_body) )) (n)).
definition eq_plus : \forall (n:(nat) ). (((leibniz) (((nat) ) -> (nat) )) (((plus) ) (n))) ((((filter_nat_type) (((nat) ) -> (nat) )) ((plus_body) )) (n)) := \lambda n : (nat) . ((((equal_leibniz) (((nat) ) -> (nat) )) (((plus) ) (n))) ((((filter_nat_type) (((nat) ) -> (nat) )) ((plus_body) )) (n))) ((axiom_plus) (n)).
definition sym_eq_plus : \forall (n:(nat) ). (((leibniz) (((nat) ) -> (nat) )) ((((filter_nat_type) (((nat) ) -> (nat) )) ((plus_body) )) (n))) (((plus) ) (n)) := \lambda n : (nat) . ((((sym_leibniz) (((nat) ) -> (nat) )) (((plus) ) (n))) ((((filter_nat_type) (((nat) ) -> (nat) )) ((plus_body) )) (n))) ((eq_plus) (n)).
axiom axiom_plus_body_O : (((equal) (((nat) ) -> (nat) )) (((plus_body) ) ((O) ))) (\lambda m : (nat) . m).
definition eq_plus_body_O : (((leibniz) (((nat) ) -> (nat) )) (((plus_body) ) ((O) ))) (\lambda m : (nat) . m) := ((((equal_leibniz) (((nat) ) -> (nat) )) (((plus_body) ) ((O) ))) (\lambda m : (nat) . m)) (axiom_plus_body_O).
definition sym_eq_plus_body_O : (((leibniz) (((nat) ) -> (nat) )) (\lambda m : (nat) . m)) (((plus_body) ) ((O) )) := ((((sym_leibniz) (((nat) ) -> (nat) )) (((plus_body) ) ((O) ))) (\lambda m : (nat) . m)) (eq_plus_body_O).
axiom axiom_plus_body_S : \forall (n:(nat) ). (((equal) (((nat) ) -> (nat) )) (((plus_body) ) (((S) ) (n)))) (\lambda m : (nat) . ((S) ) ((((plus) ) (n)) (m))).
definition eq_plus_body_S : \forall (n:(nat) ). (((leibniz) (((nat) ) -> (nat) )) (((plus_body) ) (((S) ) (n)))) (\lambda m : (nat) . ((S) ) ((((plus) ) (n)) (m))) := \lambda n : (nat) . ((((equal_leibniz) (((nat) ) -> (nat) )) (((plus_body) ) (((S) ) (n)))) (\lambda m : (nat) . ((S) ) ((((plus) ) (n)) (m)))) ((axiom_plus_body_S) (n)).
definition sym_eq_plus_body_S : \forall (n:(nat) ). (((leibniz) (((nat) ) -> (nat) )) (\lambda m : (nat) . ((S) ) ((((plus) ) (n)) (m)))) (((plus_body) ) (((S) ) (n))) := \lambda n : (nat) . ((((sym_leibniz) (((nat) ) -> (nat) )) (((plus_body) ) (((S) ) (n)))) (\lambda m : (nat) . ((S) ) ((((plus) ) (n)) (m)))) ((eq_plus_body_S) (n)).
axiom times : ((nat) ) -> ((nat) ) -> (nat) .
axiom times_body : ((nat) ) -> ((nat) ) -> (nat) .
axiom axiom_times : \forall (n:(nat) ). (((equal) (((nat) ) -> (nat) )) (((times) ) (n))) ((((filter_nat_type) (((nat) ) -> (nat) )) ((times_body) )) (n)).
definition eq_times : \forall (n:(nat) ). (((leibniz) (((nat) ) -> (nat) )) (((times) ) (n))) ((((filter_nat_type) (((nat) ) -> (nat) )) ((times_body) )) (n)) := \lambda n : (nat) . ((((equal_leibniz) (((nat) ) -> (nat) )) (((times) ) (n))) ((((filter_nat_type) (((nat) ) -> (nat) )) ((times_body) )) (n))) ((axiom_times) (n)).
definition sym_eq_times : \forall (n:(nat) ). (((leibniz) (((nat) ) -> (nat) )) ((((filter_nat_type) (((nat) ) -> (nat) )) ((times_body) )) (n))) (((times) ) (n)) := \lambda n : (nat) . ((((sym_leibniz) (((nat) ) -> (nat) )) (((times) ) (n))) ((((filter_nat_type) (((nat) ) -> (nat) )) ((times_body) )) (n))) ((eq_times) (n)).
axiom axiom_times_body_O : (((equal) (((nat) ) -> (nat) )) (((times_body) ) ((O) ))) (\lambda m : (nat) . (O) ).
definition eq_times_body_O : (((leibniz) (((nat) ) -> (nat) )) (((times_body) ) ((O) ))) (\lambda m : (nat) . (O) ) := ((((equal_leibniz) (((nat) ) -> (nat) )) (((times_body) ) ((O) ))) (\lambda m : (nat) . (O) )) (axiom_times_body_O).
definition sym_eq_times_body_O : (((leibniz) (((nat) ) -> (nat) )) (\lambda m : (nat) . (O) )) (((times_body) ) ((O) )) := ((((sym_leibniz) (((nat) ) -> (nat) )) (((times_body) ) ((O) ))) (\lambda m : (nat) . (O) )) (eq_times_body_O).
axiom axiom_times_body_S : \forall (n:(nat) ). (((equal) (((nat) ) -> (nat) )) (((times_body) ) (((S) ) (n)))) (\lambda m : (nat) . (((plus) ) (m)) ((((times) ) (n)) (m))).
definition eq_times_body_S : \forall (n:(nat) ). (((leibniz) (((nat) ) -> (nat) )) (((times_body) ) (((S) ) (n)))) (\lambda m : (nat) . (((plus) ) (m)) ((((times) ) (n)) (m))) := \lambda n : (nat) . ((((equal_leibniz) (((nat) ) -> (nat) )) (((times_body) ) (((S) ) (n)))) (\lambda m : (nat) . (((plus) ) (m)) ((((times) ) (n)) (m)))) ((axiom_times_body_S) (n)).
definition sym_eq_times_body_S : \forall (n:(nat) ). (((leibniz) (((nat) ) -> (nat) )) (\lambda m : (nat) . (((plus) ) (m)) ((((times) ) (n)) (m)))) (((times_body) ) (((S) ) (n))) := \lambda n : (nat) . ((((sym_leibniz) (((nat) ) -> (nat) )) (((times_body) ) (((S) ) (n)))) (\lambda m : (nat) . (((plus) ) (m)) ((((times) ) (n)) (m)))) ((eq_times_body_S) (n)).
axiom minus : ((nat) ) -> ((nat) ) -> (nat) .
axiom minus_body : ((nat) ) -> ((nat) ) -> (nat) .
axiom axiom_minus : \forall (n:(nat) ). (((equal) (((nat) ) -> (nat) )) (((minus) ) (n))) ((((filter_nat_type) (((nat) ) -> (nat) )) ((minus_body) )) (n)).
definition eq_minus : \forall (n:(nat) ). (((leibniz) (((nat) ) -> (nat) )) (((minus) ) (n))) ((((filter_nat_type) (((nat) ) -> (nat) )) ((minus_body) )) (n)) := \lambda n : (nat) . ((((equal_leibniz) (((nat) ) -> (nat) )) (((minus) ) (n))) ((((filter_nat_type) (((nat) ) -> (nat) )) ((minus_body) )) (n))) ((axiom_minus) (n)).
definition sym_eq_minus : \forall (n:(nat) ). (((leibniz) (((nat) ) -> (nat) )) ((((filter_nat_type) (((nat) ) -> (nat) )) ((minus_body) )) (n))) (((minus) ) (n)) := \lambda n : (nat) . ((((sym_leibniz) (((nat) ) -> (nat) )) (((minus) ) (n))) ((((filter_nat_type) (((nat) ) -> (nat) )) ((minus_body) )) (n))) ((eq_minus) (n)).
axiom axiom_minus_body_O : (((equal) (((nat) ) -> (nat) )) (((minus_body) ) ((O) ))) (\lambda m : (nat) . (O) ).
definition eq_minus_body_O : (((leibniz) (((nat) ) -> (nat) )) (((minus_body) ) ((O) ))) (\lambda m : (nat) . (O) ) := ((((equal_leibniz) (((nat) ) -> (nat) )) (((minus_body) ) ((O) ))) (\lambda m : (nat) . (O) )) (axiom_minus_body_O).
definition sym_eq_minus_body_O : (((leibniz) (((nat) ) -> (nat) )) (\lambda m : (nat) . (O) )) (((minus_body) ) ((O) )) := ((((sym_leibniz) (((nat) ) -> (nat) )) (((minus_body) ) ((O) ))) (\lambda m : (nat) . (O) )) (eq_minus_body_O).
axiom axiom_minus_body_S : \forall (n:(nat) ). (((equal) (((nat) ) -> (nat) )) (((minus_body) ) (((S) ) (n)))) (\lambda m : (nat) . ((((match_nat_type) ((nat) )) (((S) ) (n))) (\lambda q : (nat) . (((minus) ) (n)) (q))) (m)).
definition eq_minus_body_S : \forall (n:(nat) ). (((leibniz) (((nat) ) -> (nat) )) (((minus_body) ) (((S) ) (n)))) (\lambda m : (nat) . ((((match_nat_type) ((nat) )) (((S) ) (n))) (\lambda q : (nat) . (((minus) ) (n)) (q))) (m)) := \lambda n : (nat) . ((((equal_leibniz) (((nat) ) -> (nat) )) (((minus_body) ) (((S) ) (n)))) (\lambda m : (nat) . ((((match_nat_type) ((nat) )) (((S) ) (n))) (\lambda q : (nat) . (((minus) ) (n)) (q))) (m))) ((axiom_minus_body_S) (n)).
definition sym_eq_minus_body_S : \forall (n:(nat) ). (((leibniz) (((nat) ) -> (nat) )) (\lambda m : (nat) . ((((match_nat_type) ((nat) )) (((S) ) (n))) (\lambda q : (nat) . (((minus) ) (n)) (q))) (m))) (((minus_body) ) (((S) ) (n))) := \lambda n : (nat) . ((((sym_leibniz) (((nat) ) -> (nat) )) (((minus_body) ) (((S) ) (n)))) (\lambda m : (nat) . ((((match_nat_type) ((nat) )) (((S) ) (n))) (\lambda q : (nat) . (((minus) ) (n)) (q))) (m))) ((eq_minus_body_S) (n)).
definition nat_case : \forall (n:(nat) ). \forall (P:((nat) ) -> Prop). (((((eq) ((nat) )) (n)) ((O) )) -> (P) ((O) )) -> (\forall (m:(nat) ). ((((eq) ((nat) )) (n)) (((S) ) (m))) -> (P) (((S) ) (m))) -> (P) (n) := \lambda n : (nat) . \lambda P : ((nat) ) -> Prop. ((((nat_ind) (\lambda j_x_365 : (nat) . (((((eq) ((nat) )) (j_x_365)) ((O) )) -> (P) ((O) )) -> (\forall (m:(nat) ). ((((eq) ((nat) )) (j_x_365)) (((S) ) (m))) -> (P) (((S) ) (m))) -> (P) (j_x_365))) (\lambda auto : ((((eq) ((nat) )) ((O) )) ((O) )) -> (P) ((O) ). (\lambda auto' : \forall (m:(nat) ). ((((eq) ((nat) )) ((O) )) (((S) ) (m))) -> (P) (((S) ) (m)). ((auto) (((refl) ((nat) )) ((O) )))))) (\lambda x_366 : (nat) . \lambda j_x_368 : (((((eq) ((nat) )) (x_366)) ((O) )) -> (P) ((O) )) -> (\forall (m:(nat) ). ((((eq) ((nat) )) (x_366)) (((S) ) (m))) -> (P) (((S) ) (m))) -> (P) (x_366). (\lambda auto : ((((eq) ((nat) )) (((S) ) (x_366))) ((O) )) -> (P) ((O) ). (\lambda auto' : \forall (m:(nat) ). ((((eq) ((nat) )) (((S) ) (x_366))) (((S) ) (m))) -> (P) (((S) ) (m)). (((auto') (x_366)) (((refl) ((nat) )) (((S) ) (x_366)))))))) (n).
definition nat_elim2 : \forall (R:((nat) ) -> ((nat) ) -> Prop). (\forall (n:(nat) ). ((R) ((O) )) (n)) -> (\forall (n:(nat) ). ((R) (((S) ) (n))) ((O) )) -> (\forall (n:(nat) ). \forall (m:(nat) ). (((R) (n)) (m)) -> ((R) (((S) ) (n))) (((S) ) (m))) -> \forall (n:(nat) ). \forall (m:(nat) ). ((R) (n)) (m) := \lambda R : ((nat) ) -> ((nat) ) -> Prop. \lambda ROn : \forall (n:(nat) ). ((R) ((O) )) (n). (\lambda RSO : \forall (n:(nat) ). ((R) (((S) ) (n))) ((O) ). (\lambda RSS : \forall (n:(nat) ). \forall (m:(nat) ). (((R) (n)) (m)) -> ((R) (((S) ) (n))) (((S) ) (m)). (\lambda n : (nat) . ((((nat_ind) (\lambda j_x_365 : (nat) . \forall (m:(nat) ). ((R) (j_x_365)) (m))) (\lambda m : (nat) . (ROn) (m))) (\lambda n0 : (nat) . \lambda Rn0m : \forall (m:(nat) ). ((R) (n0)) (m). (\lambda m : (nat) . ((((match_nat_prop) (\lambda j__ : (nat) . ((R) (((S) ) (n0))) (j__))) ((RSO) (n0))) (\lambda auto : (nat) . (((RSS) (n0)) (auto)) ((Rn0m) (auto)))) (m)))) (n)))).
definition le_gen : \forall (P:((nat) ) -> Prop). \forall (n:(nat) ). (\forall (i:(nat) ). ((((le) ) (i)) (n)) -> (P) (i)) -> (P) (n) := \lambda P : ((nat) ) -> Prop. \lambda n : (nat) . \lambda auto : \forall (i:(nat) ). ((((le) ) (i)) (n)) -> (P) (i). (((auto) (n)) ((le_n) (n))).
definition pred_Sn : \forall (n:(nat) ). (((eq) ((nat) )) (n)) (((pred) ) (((S) ) (n))) := \lambda n : (nat) . ((((((sym_eq_match_nat_type_S) ((nat) )) ((O) )) (\lambda p : (nat) . p)) (n)) (\lambda y : (nat) . (((eq) ((nat) )) (n)) (y))) (((refl) ((nat) )) (n)).
definition injective_S : ((injective) ((nat) ) ((nat) )) ((S) ) := \lambda x : (nat) . \lambda y : (nat) . \lambda auto : (((eq) ((nat) )) (((S) ) (x))) (((S) ) (y)). (((((((rewrite_l) ((nat) )) (y)) (\lambda j__ : (nat) . (((eq) ((nat) )) (j__)) (y))) (((refl) ((nat) )) (y))) (x)) (((((((rewrite_r) ((nat) )) (((pred) ) (((S) ) (x)))) (\lambda j__ : (nat) . (((eq) ((nat) )) (y)) (j__))) (((((((rewrite_r) ((nat) )) (((S) ) (y))) (\lambda j__ : (nat) . (((eq) ((nat) )) (y)) (((pred) ) (j__)))) ((pred_Sn) (y))) (((S) ) (x))) (auto))) (x)) ((pred_Sn) (x)))).
definition S_pred : \forall (n:(nat) ). ((((lt) ) ((O) )) (n)) -> (((eq) ((nat) )) (((S) ) (((pred) ) (n)))) (n) := \lambda n : (nat) . \lambda posn : (((lt) ) ((O) )) (n). (((((((match_le_prop) (((S) ) ((O) ))) (\lambda j__ : (nat) . (((eq) ((nat) )) (((S) ) (((pred) ) (j__)))) (j__))) (((((((rewrite_l) ((nat) )) ((O) )) (\lambda j__ : (nat) . (((eq) ((nat) )) (((S) ) (j__))) (((S) ) ((O) )))) (((refl) ((nat) )) (((S) ) ((O) )))) (((pred) ) (((S) ) ((O) )))) ((pred_Sn) ((O) )))) (\lambda m : (nat) . ((((((rewrite_l) ((nat) )) (m)) (\lambda j__ : (nat) . (((eq) ((nat) )) (((S) ) (j__))) (((S) ) (m)))) (((refl) ((nat) )) (((S) ) (m)))) (((pred) ) (((S) ) (m)))) ((pred_Sn) (m)))) (n)) (posn)).
definition plus_O_n : \forall (n:(nat) ). (((eq) ((nat) )) (n)) ((((plus) ) ((O) )) (n)) := \lambda n : (nat) . (((sym_eq_plus) ((O) )) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) (n)) ((y) (n)))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((plus_body) )) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) (n)) ((y) (n)))) (((sym_eq_plus_body_O) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) (n)) ((y) (n)))) (((refl) ((nat) )) (n)))).
definition plus_n_O : \forall (n:(nat) ). (((eq) ((nat) )) (n)) ((((plus) ) (n)) ((O) )) := \lambda n : (nat) . ((((nat_ind) (\lambda j_x_365 : (nat) . (((eq) ((nat) )) (j_x_365)) ((((plus) ) (j_x_365)) ((O) )))) ((((sym_eq_plus) ((O) )) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((O) )) ((y) ((O) )))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((plus_body) )) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((O) )) ((y) ((O) )))) (((sym_eq_plus_body_O) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((O) )) ((y) ((O) )))) (((refl) ((nat) )) ((O) )))))) (\lambda x_366 : (nat) . \lambda j_x_368 : (((eq) ((nat) )) (x_366)) ((((plus) ) (x_366)) ((O) )). ((((sym_eq_plus) (((S) ) (x_366))) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) (((S) ) (x_366))) ((y) ((O) )))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((plus_body) )) (x_366)) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) (((S) ) (x_366))) ((y) ((O) )))) ((((sym_eq_plus_body_S) (x_366)) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) (((S) ) (x_366))) ((y) ((O) )))) (((((((rewrite_l) ((nat) )) (x_366)) (\lambda j__ : (nat) . (((eq) ((nat) )) (((S) ) (x_366))) (((S) ) (j__)))) (((refl) ((nat) )) (((S) ) (x_366)))) ((((plus) ) (x_366)) ((O) ))) (j_x_368))))))) (n).
definition plus_n_Sm : \forall (n:(nat) ). \forall (m:(nat) ). (((eq) ((nat) )) (((S) ) ((((plus) ) (n)) (m)))) ((((plus) ) (n)) (((S) ) (m))) := \lambda n : (nat) . ((((nat_ind) (\lambda j_x_365 : (nat) . \forall (m:(nat) ). (((eq) ((nat) )) (((S) ) ((((plus) ) (j_x_365)) (m)))) ((((plus) ) (j_x_365)) (((S) ) (m))))) (\lambda m : (nat) . (((sym_eq_plus) ((O) )) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) (((S) ) ((y) (m)))) ((((plus) ) ((O) )) (((S) ) (m))))) ((((sym_eq_plus) ((O) )) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) (((S) ) (((((filter_nat_type) (((nat) ) -> (nat) )) ((plus_body) )) ((O) )) (m)))) ((y) (((S) ) (m))))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((plus_body) )) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) (((S) ) (((((filter_nat_type) (((nat) ) -> (nat) )) ((plus_body) )) ((O) )) (m)))) ((y) (((S) ) (m))))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((plus_body) )) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) (((S) ) ((y) (m)))) ((((plus_body) ) ((O) )) (((S) ) (m))))) (((sym_eq_plus_body_O) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) (((S) ) ((y) (m)))) ((((plus_body) ) ((O) )) (((S) ) (m))))) (((sym_eq_plus_body_O) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) (((S) ) (m))) ((y) (((S) ) (m))))) (((refl) ((nat) )) (((S) ) (m)))))))))) (\lambda x_366 : (nat) . \lambda j_x_368 : \forall (m:(nat) ). (((eq) ((nat) )) (((S) ) ((((plus) ) (x_366)) (m)))) ((((plus) ) (x_366)) (((S) ) (m))). (\lambda m : (nat) . (((sym_eq_plus) (((S) ) (x_366))) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) (((S) ) ((y) (m)))) ((((plus) ) (((S) ) (x_366))) (((S) ) (m))))) ((((sym_eq_plus) (((S) ) (x_366))) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) (((S) ) (((((filter_nat_type) (((nat) ) -> (nat) )) ((plus_body) )) (((S) ) (x_366))) (m)))) ((y) (((S) ) (m))))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((plus_body) )) (x_366)) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) (((S) ) (((((filter_nat_type) (((nat) ) -> (nat) )) ((plus_body) )) (((S) ) (x_366))) (m)))) ((y) (((S) ) (m))))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((plus_body) )) (x_366)) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) (((S) ) ((y) (m)))) ((((plus_body) ) (((S) ) (x_366))) (((S) ) (m))))) ((((sym_eq_plus_body_S) (x_366)) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) (((S) ) ((y) (m)))) ((((plus_body) ) (((S) ) (x_366))) (((S) ) (m))))) ((((sym_eq_plus_body_S) (x_366)) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) (((S) ) (((S) ) ((((plus) ) (x_366)) (m))))) ((y) (((S) ) (m))))) (((((((rewrite_r) ((nat) )) ((((plus) ) (x_366)) (((S) ) (m)))) (\lambda j__ : (nat) . (((eq) ((nat) )) (((S) ) (j__))) (((S) ) ((((plus) ) (x_366)) (((S) ) (m)))))) (((((((rewrite_r) ((nat) )) ((((plus) ) (x_366)) (((S) ) (((S) ) (m))))) (\lambda j__ : (nat) . (((eq) ((nat) )) (j__)) (((S) ) ((((plus) ) (x_366)) (((S) ) (m)))))) (((((((rewrite_r) ((nat) )) ((((plus) ) (x_366)) (((S) ) (((S) ) (m))))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((((plus) ) (x_366)) (((S) ) (((S) ) (m))))) (j__))) (((refl) ((nat) )) ((((plus) ) (x_366)) (((S) ) (((S) ) (m)))))) (((S) ) ((((plus) ) (x_366)) (((S) ) (m))))) ((j_x_368) (((S) ) (m))))) (((S) ) ((((plus) ) (x_366)) (((S) ) (m))))) ((j_x_368) (((S) ) (m))))) (((S) ) ((((plus) ) (x_366)) (m)))) ((j_x_368) (m))))))))))) (n).
definition commutative_plus : ((commutative) ((nat) )) ((plus) ) := \lambda n : (nat) . ((((nat_ind) (\lambda j_x_365 : (nat) . \forall (y:(nat) ). (((eq) ((nat) )) ((((plus) ) (j_x_365)) (y))) ((((plus) ) (y)) (j_x_365)))) (\lambda y : (nat) . (((sym_eq_plus) ((O) )) (\lambda z : ((nat) ) -> (nat) . (((eq) ((nat) )) ((z) (y))) ((((plus) ) (y)) ((O) )))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((plus_body) )) (\lambda z : ((nat) ) -> (nat) . (((eq) ((nat) )) ((z) (y))) ((((plus) ) (y)) ((O) )))) (((sym_eq_plus_body_O) (\lambda z : ((nat) ) -> (nat) . (((eq) ((nat) )) ((z) (y))) ((((plus) ) (y)) ((O) )))) (((((((rewrite_l) ((nat) )) (y)) (\lambda j__ : (nat) . (((eq) ((nat) )) (y)) (j__))) (((refl) ((nat) )) (y))) ((((plus) ) (y)) ((O) ))) ((plus_n_O) (y))))))) (\lambda x_366 : (nat) . \lambda j_x_368 : \forall (y:(nat) ). (((eq) ((nat) )) ((((plus) ) (x_366)) (y))) ((((plus) ) (y)) (x_366)). (\lambda y : (nat) . (((sym_eq_plus) (((S) ) (x_366))) (\lambda z : ((nat) ) -> (nat) . (((eq) ((nat) )) ((z) (y))) ((((plus) ) (y)) (((S) ) (x_366))))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((plus_body) )) (x_366)) (\lambda z : ((nat) ) -> (nat) . (((eq) ((nat) )) ((z) (y))) ((((plus) ) (y)) (((S) ) (x_366))))) ((((sym_eq_plus_body_S) (x_366)) (\lambda z : ((nat) ) -> (nat) . (((eq) ((nat) )) ((z) (y))) ((((plus) ) (y)) (((S) ) (x_366))))) (((((((rewrite_r) ((nat) )) ((((plus) ) (x_366)) (((S) ) (y)))) (\lambda j__ : (nat) . (((eq) ((nat) )) (j__)) ((((plus) ) (y)) (((S) ) (x_366))))) (((((((rewrite_r) ((nat) )) ((((plus) ) (y)) (((S) ) (x_366)))) (\lambda j__ : (nat) . (((eq) ((nat) )) (j__)) ((((plus) ) (y)) (((S) ) (x_366))))) (((refl) ((nat) )) ((((plus) ) (y)) (((S) ) (x_366))))) ((((plus) ) (x_366)) (((S) ) (y)))) (((((((rewrite_l) ((nat) )) (((S) ) ((((plus) ) (x_366)) (y)))) (\lambda j__ : (nat) . (((eq) ((nat) )) (j__)) ((((plus) ) (y)) (((S) ) (x_366))))) (((((((rewrite_r) ((nat) )) ((((plus) ) (y)) (x_366))) (\lambda j__ : (nat) . (((eq) ((nat) )) (((S) ) (j__))) ((((plus) ) (y)) (((S) ) (x_366))))) (((plus_n_Sm) (y)) (x_366))) ((((plus) ) (x_366)) (y))) ((j_x_368) (y)))) ((((plus) ) (x_366)) (((S) ) (y)))) (((plus_n_Sm) (x_366)) (y))))) (((S) ) ((((plus) ) (x_366)) (y)))) (((plus_n_Sm) (x_366)) (y)))))))) (n).
definition associative_plus : ((associative) ((nat) )) ((plus) ) := \lambda n : (nat) . ((((nat_ind) (\lambda j_x_365 : (nat) . \forall (y:(nat) ). \forall (z:(nat) ). (((eq) ((nat) )) ((((plus) ) ((((plus) ) (j_x_365)) (y))) (z))) ((((plus) ) (j_x_365)) ((((plus) ) (y)) (z))))) (\lambda y : (nat) . \lambda z : (nat) . (((sym_eq_plus) ((O) )) (\lambda x : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((plus) ) ((((plus) ) ((O) )) (y))) (z))) ((x) ((((plus) ) (y)) (z))))) ((((sym_eq_plus) ((O) )) (\lambda x : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((plus) ) ((x) (y))) (z))) (((((filter_nat_type) (((nat) ) -> (nat) )) ((plus_body) )) ((O) )) ((((plus) ) (y)) (z))))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((plus_body) )) (\lambda x : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((plus) ) ((x) (y))) (z))) (((((filter_nat_type) (((nat) ) -> (nat) )) ((plus_body) )) ((O) )) ((((plus) ) (y)) (z))))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((plus_body) )) (\lambda x : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((plus) ) ((((plus_body) ) ((O) )) (y))) (z))) ((x) ((((plus) ) (y)) (z))))) (((sym_eq_plus_body_O) (\lambda x : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((plus) ) ((((plus_body) ) ((O) )) (y))) (z))) ((x) ((((plus) ) (y)) (z))))) (((sym_eq_plus_body_O) (\lambda x : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((plus) ) ((x) (y))) (z))) ((((plus) ) (y)) (z)))) (((refl) ((nat) )) ((((plus) ) (y)) (z)))))))))) (\lambda x_366 : (nat) . \lambda j_x_368 : \forall (y:(nat) ). \forall (z:(nat) ). (((eq) ((nat) )) ((((plus) ) ((((plus) ) (x_366)) (y))) (z))) ((((plus) ) (x_366)) ((((plus) ) (y)) (z))). (\lambda y : (nat) . \lambda z : (nat) . (((sym_eq_plus) (((S) ) (x_366))) (\lambda x : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((plus) ) ((((plus) ) (((S) ) (x_366))) (y))) (z))) ((x) ((((plus) ) (y)) (z))))) ((((sym_eq_plus) (((S) ) (x_366))) (\lambda x : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((plus) ) ((x) (y))) (z))) (((((filter_nat_type) (((nat) ) -> (nat) )) ((plus_body) )) (((S) ) (x_366))) ((((plus) ) (y)) (z))))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((plus_body) )) (x_366)) (\lambda x : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((plus) ) ((x) (y))) (z))) (((((filter_nat_type) (((nat) ) -> (nat) )) ((plus_body) )) (((S) ) (x_366))) ((((plus) ) (y)) (z))))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((plus_body) )) (x_366)) (\lambda x : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((plus) ) ((((plus_body) ) (((S) ) (x_366))) (y))) (z))) ((x) ((((plus) ) (y)) (z))))) ((((sym_eq_plus_body_S) (x_366)) (\lambda x : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((plus) ) ((((plus_body) ) (((S) ) (x_366))) (y))) (z))) ((x) ((((plus) ) (y)) (z))))) ((((sym_eq_plus_body_S) (x_366)) (\lambda x : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((plus) ) ((x) (y))) (z))) (((S) ) ((((plus) ) (x_366)) ((((plus) ) (y)) (z)))))) ((((sym_eq_plus) (((S) ) ((((plus) ) (x_366)) (y)))) (\lambda x : ((nat) ) -> (nat) . (((eq) ((nat) )) ((x) (z))) (((S) ) ((((plus) ) (x_366)) ((((plus) ) (y)) (z)))))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((plus_body) )) ((((plus) ) (x_366)) (y))) (\lambda x : ((nat) ) -> (nat) . (((eq) ((nat) )) ((x) (z))) (((S) ) ((((plus) ) (x_366)) ((((plus) ) (y)) (z)))))) ((((sym_eq_plus_body_S) ((((plus) ) (x_366)) (y))) (\lambda x : ((nat) ) -> (nat) . (((eq) ((nat) )) ((x) (z))) (((S) ) ((((plus) ) (x_366)) ((((plus) ) (y)) (z)))))) (((((((rewrite_r) ((nat) )) ((((plus) ) (x_366)) ((((plus) ) (y)) (z)))) (\lambda j__ : (nat) . (((eq) ((nat) )) (((S) ) (j__))) (((S) ) ((((plus) ) (x_366)) ((((plus) ) (y)) (z)))))) (((refl) ((nat) )) (((S) ) ((((plus) ) (x_366)) ((((plus) ) (y)) (z)))))) ((((plus) ) ((((plus) ) (x_366)) (y))) (z))) (((j_x_368) (y)) (z)))))))))))))) (n).
definition assoc_plus1 : \forall (a:(nat) ). \forall (b:(nat) ). \forall (c:(nat) ). (((eq) ((nat) )) ((((plus) ) (c)) ((((plus) ) (b)) (a)))) ((((plus) ) ((((plus) ) (b)) (c))) (a)) := \lambda a : (nat) . \lambda b : (nat) . \lambda c : (nat) . ((((((rewrite_r) ((nat) )) ((((plus) ) (a)) (b))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((((plus) ) (c)) (j__))) ((((plus) ) ((((plus) ) (b)) (c))) (a)))) (((((((rewrite_r) ((nat) )) ((((plus) ) (a)) ((((plus) ) (b)) (c)))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((((plus) ) (c)) ((((plus) ) (a)) (b)))) (j__))) (((((((rewrite_r) ((nat) )) ((((plus) ) (a)) ((((plus) ) (b)) (c)))) (\lambda j__ : (nat) . (((eq) ((nat) )) (j__)) ((((plus) ) (a)) ((((plus) ) (b)) (c))))) (((refl) ((nat) )) ((((plus) ) (a)) ((((plus) ) (b)) (c))))) ((((plus) ) (c)) ((((plus) ) (a)) (b)))) (((((((rewrite_l) ((nat) )) ((((plus) ) ((((plus) ) (a)) (b))) (c))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((((plus) ) (c)) ((((plus) ) (a)) (b)))) (j__))) (((commutative_plus) (c)) ((((plus) ) (a)) (b)))) ((((plus) ) (a)) ((((plus) ) (b)) (c)))) ((((associative_plus) (a)) (b)) (c))))) ((((plus) ) ((((plus) ) (b)) (c))) (a))) (((commutative_plus) ((((plus) ) (b)) (c))) (a)))) ((((plus) ) (b)) (a))) (((commutative_plus) (b)) (a)).
definition injective_plus_r : \forall (n:(nat) ). ((injective) ((nat) ) ((nat) )) (\lambda m : (nat) . (((plus) ) (n)) (m)) := \lambda n : (nat) . ((((nat_ind) (\lambda j_x_365 : (nat) . ((injective) ((nat) ) ((nat) )) (\lambda m : (nat) . (((plus) ) (j_x_365)) (m)))) ((((sym_eq_plus) ((O) )) (\lambda y : ((nat) ) -> (nat) . ((injective) ((nat) ) ((nat) )) (\lambda m : (nat) . (y) (m)))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((plus_body) )) (\lambda y : ((nat) ) -> (nat) . ((injective) ((nat) ) ((nat) )) (\lambda m : (nat) . (y) (m)))) (((sym_eq_plus_body_O) (\lambda y : ((nat) ) -> (nat) . ((injective) ((nat) ) ((nat) )) (\lambda m : (nat) . (y) (m)))) (\lambda x : (nat) . \lambda y : (nat) . \lambda auto : (((eq) ((nat) )) (x)) (y). (((((((rewrite_l) ((nat) )) (x)) (\lambda j__ : (nat) . (((eq) ((nat) )) (x)) (j__))) (((refl) ((nat) )) (x))) (y)) (auto))))))) (\lambda x_366 : (nat) . \lambda j_x_368 : \forall (x:(nat) ). \forall (y:(nat) ). ((((eq) ((nat) )) ((((plus) ) (x_366)) (x))) ((((plus) ) (x_366)) (y))) -> (((eq) ((nat) )) (x)) (y). ((((sym_eq_plus) (((S) ) (x_366))) (\lambda y : ((nat) ) -> (nat) . ((injective) ((nat) ) ((nat) )) (\lambda m : (nat) . (y) (m)))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((plus_body) )) (x_366)) (\lambda y : ((nat) ) -> (nat) . ((injective) ((nat) ) ((nat) )) (\lambda m : (nat) . (y) (m)))) ((((sym_eq_plus_body_S) (x_366)) (\lambda y : ((nat) ) -> (nat) . ((injective) ((nat) ) ((nat) )) (\lambda m : (nat) . (y) (m)))) (\lambda x : (nat) . \lambda y : (nat) . \lambda auto : (((eq) ((nat) )) (((S) ) ((((plus) ) (x_366)) (x)))) (((S) ) ((((plus) ) (x_366)) (y))). ((((j_x_368) (x)) (y)) ((((injective_S) ((((plus) ) (x_366)) (x))) ((((plus) ) (x_366)) (y))) (((((((rewrite_r) ((nat) )) ((((plus) ) (x_366)) (((S) ) (x)))) (\lambda j__ : (nat) . (((eq) ((nat) )) (j__)) (((S) ) ((((plus) ) (x_366)) (y))))) (((((((rewrite_r) ((nat) )) ((((plus) ) (x_366)) (((S) ) (y)))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((((plus) ) (x_366)) (((S) ) (x)))) (j__))) (((((((rewrite_l) ((nat) )) ((((plus) ) (x_366)) (((S) ) (x)))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((((plus) ) (x_366)) (((S) ) (x)))) (j__))) (((refl) ((nat) )) ((((plus) ) (x_366)) (((S) ) (x))))) ((((plus) ) (x_366)) (((S) ) (y)))) (((((((rewrite_l) ((nat) )) (((S) ) ((((plus) ) (x_366)) (y)))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((((plus) ) (x_366)) (((S) ) (x)))) (j__))) (((((((rewrite_l) ((nat) )) (((S) ) ((((plus) ) (x_366)) (x)))) (\lambda j__ : (nat) . (((eq) ((nat) )) (j__)) (((S) ) ((((plus) ) (x_366)) (y))))) (auto)) ((((plus) ) (x_366)) (((S) ) (x)))) (((plus_n_Sm) (x_366)) (x)))) ((((plus) ) (x_366)) (((S) ) (y)))) (((plus_n_Sm) (x_366)) (y))))) (((S) ) ((((plus) ) (x_366)) (y)))) (((plus_n_Sm) (x_366)) (y)))) (((S) ) ((((plus) ) (x_366)) (x)))) (((plus_n_Sm) (x_366)) (x))))))))))) (n).
definition times_Sn_m : \forall (n:(nat) ). \forall (m:(nat) ). (((eq) ((nat) )) ((((plus) ) (m)) ((((times) ) (n)) (m)))) ((((times) ) (((S) ) (n))) (m)) := \lambda n : (nat) . \lambda m : (nat) . (((sym_eq_times) (((S) ) (n))) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((plus) ) (m)) ((((times) ) (n)) (m)))) ((y) (m)))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((times_body) )) (n)) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((plus) ) (m)) ((((times) ) (n)) (m)))) ((y) (m)))) ((((sym_eq_times_body_S) (n)) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((plus) ) (m)) ((((times) ) (n)) (m)))) ((y) (m)))) (((refl) ((nat) )) ((((plus) ) (m)) ((((times) ) (n)) (m)))))).
definition times_O_n : \forall (n:(nat) ). (((eq) ((nat) )) ((O) )) ((((times) ) ((O) )) (n)) := \lambda n : (nat) . (((sym_eq_times) ((O) )) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((O) )) ((y) (n)))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((times_body) )) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((O) )) ((y) (n)))) (((sym_eq_times_body_O) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((O) )) ((y) (n)))) (((refl) ((nat) )) ((O) )))).
definition times_n_O : \forall (n:(nat) ). (((eq) ((nat) )) ((O) )) ((((times) ) (n)) ((O) )) := \lambda n : (nat) . ((((nat_ind) (\lambda j_x_365 : (nat) . (((eq) ((nat) )) ((O) )) ((((times) ) (j_x_365)) ((O) )))) (((((((rewrite_l) ((nat) )) ((O) )) (\lambda j__ : (nat) . (((eq) ((nat) )) ((O) )) (j__))) (((refl) ((nat) )) ((O) ))) ((((times) ) ((O) )) ((O) ))) ((times_O_n) ((O) )))) (\lambda x_366 : (nat) . \lambda j_x_368 : (((eq) ((nat) )) ((O) )) ((((times) ) (x_366)) ((O) )). (((((((rewrite_l) ((nat) )) ((((plus) ) ((O) )) ((((times) ) (x_366)) ((O) )))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((O) )) (j__))) (((((((rewrite_l) ((nat) )) ((O) )) (\lambda j__ : (nat) . (((eq) ((nat) )) ((O) )) ((((plus) ) ((O) )) (j__)))) (((((((rewrite_l) ((nat) )) ((O) )) (\lambda j__ : (nat) . (((eq) ((nat) )) ((O) )) (j__))) (((refl) ((nat) )) ((O) ))) ((((plus) ) ((O) )) ((O) ))) ((plus_O_n) ((O) )))) ((((times) ) (x_366)) ((O) ))) (j_x_368))) ((((times) ) (((S) ) (x_366))) ((O) ))) (((times_Sn_m) (x_366)) ((O) ))))) (n).
definition times_n_Sm : \forall (n:(nat) ). \forall (m:(nat) ). (((eq) ((nat) )) ((((plus) ) (n)) ((((times) ) (n)) (m)))) ((((times) ) (n)) (((S) ) (m))) := \lambda n : (nat) . ((((nat_ind) (\lambda j_x_365 : (nat) . \forall (m:(nat) ). (((eq) ((nat) )) ((((plus) ) (j_x_365)) ((((times) ) (j_x_365)) (m)))) ((((times) ) (j_x_365)) (((S) ) (m))))) ((((sym_eq_times) ((O) )) (\lambda y : ((nat) ) -> (nat) . \forall (m:(nat) ). (((eq) ((nat) )) ((((plus) ) ((O) )) ((((times) ) ((O) )) (m)))) ((y) (((S) ) (m))))) ((((sym_eq_times) ((O) )) (\lambda y : ((nat) ) -> (nat) . \forall (m:(nat) ). (((eq) ((nat) )) ((((plus) ) ((O) )) ((y) (m)))) (((((filter_nat_type) (((nat) ) -> (nat) )) ((times_body) )) ((O) )) (((S) ) (m))))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((times_body) )) (\lambda y : ((nat) ) -> (nat) . \forall (m:(nat) ). (((eq) ((nat) )) ((((plus) ) ((O) )) ((y) (m)))) (((((filter_nat_type) (((nat) ) -> (nat) )) ((times_body) )) ((O) )) (((S) ) (m))))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((times_body) )) (\lambda y : ((nat) ) -> (nat) . \forall (m:(nat) ). (((eq) ((nat) )) ((((plus) ) ((O) )) ((((times_body) ) ((O) )) (m)))) ((y) (((S) ) (m))))) (((sym_eq_times_body_O) (\lambda y : ((nat) ) -> (nat) . \forall (m:(nat) ). (((eq) ((nat) )) ((((plus) ) ((O) )) ((((times_body) ) ((O) )) (m)))) ((y) (((S) ) (m))))) (((sym_eq_times_body_O) (\lambda y : ((nat) ) -> (nat) . \forall (m:(nat) ). (((eq) ((nat) )) ((((plus) ) ((O) )) ((y) (m)))) ((O) ))) ((((sym_eq_plus) ((O) )) (\lambda y : ((nat) ) -> (nat) . \forall (m:(nat) ). (((eq) ((nat) )) ((y) ((O) ))) ((O) ))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((plus_body) )) (\lambda y : ((nat) ) -> (nat) . \forall (m:(nat) ). (((eq) ((nat) )) ((y) ((O) ))) ((O) ))) (((sym_eq_plus_body_O) (\lambda y : ((nat) ) -> (nat) . \forall (m:(nat) ). (((eq) ((nat) )) ((y) ((O) ))) ((O) ))) (\lambda j_m : (nat) . ((refl) ((nat) )) ((O) )))))))))))) (\lambda x_366 : (nat) . \lambda j_x_368 : \forall (m:(nat) ). (((eq) ((nat) )) ((((plus) ) (x_366)) ((((times) ) (x_366)) (m)))) ((((times) ) (x_366)) (((S) ) (m))). (\lambda m : (nat) . (((sym_eq_times) (((S) ) (x_366))) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((plus) ) (((S) ) (x_366))) ((((times) ) (((S) ) (x_366))) (m)))) ((y) (((S) ) (m))))) ((((sym_eq_times) (((S) ) (x_366))) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((plus) ) (((S) ) (x_366))) ((y) (m)))) (((((filter_nat_type) (((nat) ) -> (nat) )) ((times_body) )) (((S) ) (x_366))) (((S) ) (m))))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((times_body) )) (x_366)) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((plus) ) (((S) ) (x_366))) ((y) (m)))) (((((filter_nat_type) (((nat) ) -> (nat) )) ((times_body) )) (((S) ) (x_366))) (((S) ) (m))))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((times_body) )) (x_366)) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((plus) ) (((S) ) (x_366))) ((((times_body) ) (((S) ) (x_366))) (m)))) ((y) (((S) ) (m))))) ((((sym_eq_times_body_S) (x_366)) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((plus) ) (((S) ) (x_366))) ((((times_body) ) (((S) ) (x_366))) (m)))) ((y) (((S) ) (m))))) ((((sym_eq_times_body_S) (x_366)) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((plus) ) (((S) ) (x_366))) ((y) (m)))) ((((plus) ) (((S) ) (m))) ((((times) ) (x_366)) (((S) ) (m)))))) ((((sym_eq_plus) (((S) ) (x_366))) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((y) ((((plus) ) (m)) ((((times) ) (x_366)) (m))))) ((((plus) ) (((S) ) (m))) ((((times) ) (x_366)) (((S) ) (m)))))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((plus_body) )) (x_366)) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((y) ((((plus) ) (m)) ((((times) ) (x_366)) (m))))) ((((plus) ) (((S) ) (m))) ((((times) ) (x_366)) (((S) ) (m)))))) ((((sym_eq_plus_body_S) (x_366)) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((y) ((((plus) ) (m)) ((((times) ) (x_366)) (m))))) ((((plus) ) (((S) ) (m))) ((((times) ) (x_366)) (((S) ) (m)))))) ((((sym_eq_plus) (((S) ) (m))) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) (((S) ) ((((plus) ) (x_366)) ((((plus) ) (m)) ((((times) ) (x_366)) (m)))))) ((y) ((((times) ) (x_366)) (((S) ) (m)))))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((plus_body) )) (m)) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) (((S) ) ((((plus) ) (x_366)) ((((plus) ) (m)) ((((times) ) (x_366)) (m)))))) ((y) ((((times) ) (x_366)) (((S) ) (m)))))) ((((sym_eq_plus_body_S) (m)) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) (((S) ) ((((plus) ) (x_366)) ((((plus) ) (m)) ((((times) ) (x_366)) (m)))))) ((y) ((((times) ) (x_366)) (((S) ) (m)))))) (((((((rewrite_r) ((nat) )) ((((plus) ) (x_366)) (((S) ) ((((plus) ) (m)) ((((times) ) (x_366)) (m)))))) (\lambda j__ : (nat) . (((eq) ((nat) )) (j__)) (((S) ) ((((plus) ) (m)) ((((times) ) (x_366)) (((S) ) (m))))))) (((((((rewrite_r) ((nat) )) ((((plus) ) (m)) (((S) ) ((((times) ) (x_366)) (m))))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((((plus) ) (x_366)) (j__))) (((S) ) ((((plus) ) (m)) ((((times) ) (x_366)) (((S) ) (m))))))) (((((((rewrite_l) ((nat) )) ((((plus) ) (x_366)) ((((times) ) (x_366)) (m)))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((((plus) ) (x_366)) ((((plus) ) (m)) (((S) ) ((((times) ) (x_366)) (m)))))) (((S) ) ((((plus) ) (m)) (j__))))) (((((((rewrite_r) ((nat) )) ((((plus) ) (x_366)) ((((plus) ) (m)) ((((times) ) (x_366)) (m))))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((((plus) ) (x_366)) ((((plus) ) (m)) (((S) ) ((((times) ) (x_366)) (m)))))) (((S) ) (j__)))) (((((((rewrite_r) ((nat) )) ((((plus) ) (x_366)) (((S) ) ((((plus) ) (m)) ((((times) ) (x_366)) (m)))))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((((plus) ) (x_366)) ((((plus) ) (m)) (((S) ) ((((times) ) (x_366)) (m)))))) (j__))) (((((((rewrite_r) ((nat) )) ((((plus) ) (m)) (((S) ) ((((times) ) (x_366)) (m))))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((((plus) ) (x_366)) ((((plus) ) (m)) (((S) ) ((((times) ) (x_366)) (m)))))) ((((plus) ) (x_366)) (j__)))) (((refl) ((nat) )) ((((plus) ) (x_366)) ((((plus) ) (m)) (((S) ) ((((times) ) (x_366)) (m))))))) (((S) ) ((((plus) ) (m)) ((((times) ) (x_366)) (m))))) (((plus_n_Sm) (m)) ((((times) ) (x_366)) (m))))) (((S) ) ((((plus) ) (x_366)) ((((plus) ) (m)) ((((times) ) (x_366)) (m)))))) (((plus_n_Sm) (x_366)) ((((plus) ) (m)) ((((times) ) (x_366)) (m)))))) ((((plus) ) (m)) ((((plus) ) (x_366)) ((((times) ) (x_366)) (m))))) (((((((rewrite_l) ((nat) )) ((((plus) ) ((((plus) ) (x_366)) (m))) ((((times) ) (x_366)) (m)))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((((plus) ) (m)) ((((plus) ) (x_366)) ((((times) ) (x_366)) (m))))) (j__))) ((((assoc_plus1) ((((times) ) (x_366)) (m))) (x_366)) (m))) ((((plus) ) (x_366)) ((((plus) ) (m)) ((((times) ) (x_366)) (m))))) ((((associative_plus) (x_366)) (m)) ((((times) ) (x_366)) (m)))))) ((((times) ) (x_366)) (((S) ) (m)))) ((j_x_368) (m)))) (((S) ) ((((plus) ) (m)) ((((times) ) (x_366)) (m))))) (((plus_n_Sm) (m)) ((((times) ) (x_366)) (m))))) (((S) ) ((((plus) ) (x_366)) ((((plus) ) (m)) ((((times) ) (x_366)) (m)))))) (((plus_n_Sm) (x_366)) ((((plus) ) (m)) ((((times) ) (x_366)) (m))))))))))))))))))) (n).
definition commutative_times : ((commutative) ((nat) )) ((times) ) := \lambda n : (nat) . ((((nat_ind) (\lambda j_x_365 : (nat) . \forall (y:(nat) ). (((eq) ((nat) )) ((((times) ) (j_x_365)) (y))) ((((times) ) (y)) (j_x_365)))) ((((sym_eq_times) ((O) )) (\lambda y : ((nat) ) -> (nat) . \forall (z:(nat) ). (((eq) ((nat) )) ((y) (z))) ((((times) ) (z)) ((O) )))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((times_body) )) (\lambda y : ((nat) ) -> (nat) . \forall (z:(nat) ). (((eq) ((nat) )) ((y) (z))) ((((times) ) (z)) ((O) )))) (((sym_eq_times_body_O) (\lambda y : ((nat) ) -> (nat) . \forall (z:(nat) ). (((eq) ((nat) )) ((y) (z))) ((((times) ) (z)) ((O) )))) (\lambda y : (nat) . ((((((rewrite_l) ((nat) )) ((O) )) (\lambda j__ : (nat) . (((eq) ((nat) )) ((O) )) (j__))) (((refl) ((nat) )) ((O) ))) ((((times) ) (y)) ((O) ))) ((times_n_O) (y))))))) (\lambda x_366 : (nat) . \lambda j_x_368 : \forall (y:(nat) ). (((eq) ((nat) )) ((((times) ) (x_366)) (y))) ((((times) ) (y)) (x_366)). (\lambda y : (nat) . (((sym_eq_times) (((S) ) (x_366))) (\lambda z : ((nat) ) -> (nat) . (((eq) ((nat) )) ((z) (y))) ((((times) ) (y)) (((S) ) (x_366))))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((times_body) )) (x_366)) (\lambda z : ((nat) ) -> (nat) . (((eq) ((nat) )) ((z) (y))) ((((times) ) (y)) (((S) ) (x_366))))) ((((sym_eq_times_body_S) (x_366)) (\lambda z : ((nat) ) -> (nat) . (((eq) ((nat) )) ((z) (y))) ((((times) ) (y)) (((S) ) (x_366))))) (((((((rewrite_l) ((nat) )) ((((plus) ) (y)) ((((times) ) (y)) (x_366)))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((((plus) ) (y)) ((((times) ) (x_366)) (y)))) (j__))) (((((((rewrite_l) ((nat) )) ((((times) ) (x_366)) (y))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((((plus) ) (y)) ((((times) ) (x_366)) (y)))) ((((plus) ) (y)) (j__)))) (((refl) ((nat) )) ((((plus) ) (y)) ((((times) ) (x_366)) (y))))) ((((times) ) (y)) (x_366))) ((j_x_368) (y)))) ((((times) ) (y)) (((S) ) (x_366)))) (((times_n_Sm) (y)) (x_366)))))))) (n).
definition distributive_times_plus : (((distributive) ((nat) )) ((times) )) ((plus) ) := \lambda n : (nat) . ((((nat_ind) (\lambda j_x_365 : (nat) . \forall (y:(nat) ). \forall (z:(nat) ). (((eq) ((nat) )) ((((times) ) (j_x_365)) ((((plus) ) (y)) (z)))) ((((plus) ) ((((times) ) (j_x_365)) (y))) ((((times) ) (j_x_365)) (z))))) ((((sym_eq_times) ((O) )) (\lambda x : ((nat) ) -> (nat) . \forall (y:(nat) ). \forall (z:(nat) ). (((eq) ((nat) )) ((((times) ) ((O) )) ((((plus) ) (y)) (z)))) ((((plus) ) ((((times) ) ((O) )) (y))) ((x) (z))))) ((((sym_eq_times) ((O) )) (\lambda x : ((nat) ) -> (nat) . \forall (y:(nat) ). \forall (z:(nat) ). (((eq) ((nat) )) ((((times) ) ((O) )) ((((plus) ) (y)) (z)))) ((((plus) ) ((x) (y))) (((((filter_nat_type) (((nat) ) -> (nat) )) ((times_body) )) ((O) )) (z))))) ((((sym_eq_times) ((O) )) (\lambda x : ((nat) ) -> (nat) . \forall (y:(nat) ). \forall (z:(nat) ). (((eq) ((nat) )) ((x) ((((plus) ) (y)) (z)))) ((((plus) ) (((((filter_nat_type) (((nat) ) -> (nat) )) ((times_body) )) ((O) )) (y))) (((((filter_nat_type) (((nat) ) -> (nat) )) ((times_body) )) ((O) )) (z))))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((times_body) )) (\lambda x : ((nat) ) -> (nat) . \forall (y:(nat) ). \forall (z:(nat) ). (((eq) ((nat) )) ((x) ((((plus) ) (y)) (z)))) ((((plus) ) (((((filter_nat_type) (((nat) ) -> (nat) )) ((times_body) )) ((O) )) (y))) (((((filter_nat_type) (((nat) ) -> (nat) )) ((times_body) )) ((O) )) (z))))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((times_body) )) (\lambda x : ((nat) ) -> (nat) . \forall (y:(nat) ). \forall (z:(nat) ). (((eq) ((nat) )) ((((times_body) ) ((O) )) ((((plus) ) (y)) (z)))) ((((plus) ) ((x) (y))) (((((filter_nat_type) (((nat) ) -> (nat) )) ((times_body) )) ((O) )) (z))))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((times_body) )) (\lambda x : ((nat) ) -> (nat) . \forall (y:(nat) ). \forall (z:(nat) ). (((eq) ((nat) )) ((((times_body) ) ((O) )) ((((plus) ) (y)) (z)))) ((((plus) ) ((((times_body) ) ((O) )) (y))) ((x) (z))))) (((sym_eq_times_body_O) (\lambda x : ((nat) ) -> (nat) . \forall (y:(nat) ). \forall (z:(nat) ). (((eq) ((nat) )) ((((times_body) ) ((O) )) ((((plus) ) (y)) (z)))) ((((plus) ) ((((times_body) ) ((O) )) (y))) ((x) (z))))) (((sym_eq_times_body_O) (\lambda x : ((nat) ) -> (nat) . \forall (y:(nat) ). \forall (z:(nat) ). (((eq) ((nat) )) ((((times_body) ) ((O) )) ((((plus) ) (y)) (z)))) ((((plus) ) ((x) (y))) ((O) )))) (((sym_eq_times_body_O) (\lambda x : ((nat) ) -> (nat) . \forall (y:(nat) ). \forall (z:(nat) ). (((eq) ((nat) )) ((x) ((((plus) ) (y)) (z)))) ((((plus) ) ((O) )) ((O) )))) ((((sym_eq_plus) ((O) )) (\lambda x : ((nat) ) -> (nat) . \forall (y:(nat) ). \forall (z:(nat) ). (((eq) ((nat) )) ((O) )) ((x) ((O) )))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((plus_body) )) (\lambda x : ((nat) ) -> (nat) . \forall (y:(nat) ). \forall (z:(nat) ). (((eq) ((nat) )) ((O) )) ((x) ((O) )))) (((sym_eq_plus_body_O) (\lambda x : ((nat) ) -> (nat) . \forall (y:(nat) ). \forall (z:(nat) ). (((eq) ((nat) )) ((O) )) ((x) ((O) )))) (\lambda j_y : (nat) . \lambda j_z : (nat) . ((refl) ((nat) )) ((O) ))))))))))))))) (\lambda x_366 : (nat) . \lambda j_x_368 : \forall (y:(nat) ). \forall (z:(nat) ). (((eq) ((nat) )) ((((times) ) (x_366)) ((((plus) ) (y)) (z)))) ((((plus) ) ((((times) ) (x_366)) (y))) ((((times) ) (x_366)) (z))). (\lambda y : (nat) . \lambda z : (nat) . (((sym_eq_times) (((S) ) (x_366))) (\lambda x : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((times) ) (((S) ) (x_366))) ((((plus) ) (y)) (z)))) ((((plus) ) ((((times) ) (((S) ) (x_366))) (y))) ((x) (z))))) ((((sym_eq_times) (((S) ) (x_366))) (\lambda x : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((times) ) (((S) ) (x_366))) ((((plus) ) (y)) (z)))) ((((plus) ) ((x) (y))) (((((filter_nat_type) (((nat) ) -> (nat) )) ((times_body) )) (((S) ) (x_366))) (z))))) ((((sym_eq_times) (((S) ) (x_366))) (\lambda x : ((nat) ) -> (nat) . (((eq) ((nat) )) ((x) ((((plus) ) (y)) (z)))) ((((plus) ) (((((filter_nat_type) (((nat) ) -> (nat) )) ((times_body) )) (((S) ) (x_366))) (y))) (((((filter_nat_type) (((nat) ) -> (nat) )) ((times_body) )) (((S) ) (x_366))) (z))))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((times_body) )) (x_366)) (\lambda x : ((nat) ) -> (nat) . (((eq) ((nat) )) ((x) ((((plus) ) (y)) (z)))) ((((plus) ) (((((filter_nat_type) (((nat) ) -> (nat) )) ((times_body) )) (((S) ) (x_366))) (y))) (((((filter_nat_type) (((nat) ) -> (nat) )) ((times_body) )) (((S) ) (x_366))) (z))))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((times_body) )) (x_366)) (\lambda x : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((times_body) ) (((S) ) (x_366))) ((((plus) ) (y)) (z)))) ((((plus) ) ((x) (y))) (((((filter_nat_type) (((nat) ) -> (nat) )) ((times_body) )) (((S) ) (x_366))) (z))))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((times_body) )) (x_366)) (\lambda x : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((times_body) ) (((S) ) (x_366))) ((((plus) ) (y)) (z)))) ((((plus) ) ((((times_body) ) (((S) ) (x_366))) (y))) ((x) (z))))) ((((sym_eq_times_body_S) (x_366)) (\lambda x : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((times_body) ) (((S) ) (x_366))) ((((plus) ) (y)) (z)))) ((((plus) ) ((((times_body) ) (((S) ) (x_366))) (y))) ((x) (z))))) ((((sym_eq_times_body_S) (x_366)) (\lambda x : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((times_body) ) (((S) ) (x_366))) ((((plus) ) (y)) (z)))) ((((plus) ) ((x) (y))) ((((plus) ) (z)) ((((times) ) (x_366)) (z)))))) ((((sym_eq_times_body_S) (x_366)) (\lambda x : ((nat) ) -> (nat) . (((eq) ((nat) )) ((x) ((((plus) ) (y)) (z)))) ((((plus) ) ((((plus) ) (y)) ((((times) ) (x_366)) (y)))) ((((plus) ) (z)) ((((times) ) (x_366)) (z)))))) (((((((rewrite_r) ((nat) )) ((((plus) ) (y)) ((((plus) ) (z)) ((((times) ) (x_366)) ((((plus) ) (y)) (z)))))) (\lambda j__ : (nat) . (((eq) ((nat) )) (j__)) ((((plus) ) ((((plus) ) (y)) ((((times) ) (x_366)) (y)))) ((((plus) ) (z)) ((((times) ) (x_366)) (z)))))) (((((((rewrite_r) ((nat) )) ((((plus) ) (y)) ((((plus) ) ((((times) ) (x_366)) (y))) ((((plus) ) (z)) ((((times) ) (x_366)) (z)))))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((((plus) ) (y)) ((((plus) ) (z)) ((((times) ) (x_366)) ((((plus) ) (y)) (z)))))) (j__))) (((((((rewrite_r) ((nat) )) ((((plus) ) (z)) ((((plus) ) ((((times) ) (x_366)) (y))) ((((times) ) (x_366)) (z))))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((((plus) ) (y)) ((((plus) ) (z)) ((((times) ) (x_366)) ((((plus) ) (y)) (z)))))) ((((plus) ) (y)) (j__)))) (((((((rewrite_l) ((nat) )) ((((times) ) (x_366)) ((((plus) ) (y)) (z)))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((((plus) ) (y)) ((((plus) ) (z)) ((((times) ) (x_366)) ((((plus) ) (y)) (z)))))) ((((plus) ) (y)) ((((plus) ) (z)) (j__))))) (((refl) ((nat) )) ((((plus) ) (y)) ((((plus) ) (z)) ((((times) ) (x_366)) ((((plus) ) (y)) (z))))))) ((((plus) ) ((((times) ) (x_366)) (y))) ((((times) ) (x_366)) (z)))) (((j_x_368) (y)) (z)))) ((((plus) ) ((((times) ) (x_366)) (y))) ((((plus) ) (z)) ((((times) ) (x_366)) (z))))) (((((((rewrite_l) ((nat) )) ((((plus) ) ((((plus) ) (z)) ((((times) ) (x_366)) (y)))) ((((times) ) (x_366)) (z)))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((((plus) ) ((((times) ) (x_366)) (y))) ((((plus) ) (z)) ((((times) ) (x_366)) (z))))) (j__))) ((((assoc_plus1) ((((times) ) (x_366)) (z))) (z)) ((((times) ) (x_366)) (y)))) ((((plus) ) (z)) ((((plus) ) ((((times) ) (x_366)) (y))) ((((times) ) (x_366)) (z))))) ((((associative_plus) (z)) ((((times) ) (x_366)) (y))) ((((times) ) (x_366)) (z)))))) ((((plus) ) ((((plus) ) (y)) ((((times) ) (x_366)) (y)))) ((((plus) ) (z)) ((((times) ) (x_366)) (z))))) ((((associative_plus) (y)) ((((times) ) (x_366)) (y))) ((((plus) ) (z)) ((((times) ) (x_366)) (z)))))) ((((plus) ) ((((plus) ) (y)) (z))) ((((times) ) (x_366)) ((((plus) ) (y)) (z))))) ((((associative_plus) (y)) (z)) ((((times) ) (x_366)) ((((plus) ) (y)) (z)))))))))))))))) (n).
definition distributive_times_plus_r : \forall (a:(nat) ). \forall (b:(nat) ). \forall (c:(nat) ). (((eq) ((nat) )) ((((times) ) ((((plus) ) (b)) (c))) (a))) ((((plus) ) ((((times) ) (b)) (a))) ((((times) ) (c)) (a))) := \lambda a : (nat) . \lambda b : (nat) . \lambda c : (nat) . ((((((rewrite_r) ((nat) )) ((((times) ) (a)) ((((plus) ) (b)) (c)))) (\lambda j__ : (nat) . (((eq) ((nat) )) (j__)) ((((plus) ) ((((times) ) (b)) (a))) ((((times) ) (c)) (a))))) (((((((rewrite_r) ((nat) )) ((((times) ) (a)) (b))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((((times) ) (a)) ((((plus) ) (b)) (c)))) ((((plus) ) (j__)) ((((times) ) (c)) (a))))) (((((((rewrite_r) ((nat) )) ((((times) ) (a)) (c))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((((times) ) (a)) ((((plus) ) (b)) (c)))) ((((plus) ) ((((times) ) (a)) (b))) (j__)))) (((((((rewrite_l) ((nat) )) ((((times) ) (a)) ((((plus) ) (b)) (c)))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((((times) ) (a)) ((((plus) ) (b)) (c)))) (j__))) (((refl) ((nat) )) ((((times) ) (a)) ((((plus) ) (b)) (c))))) ((((plus) ) ((((times) ) (a)) (b))) ((((times) ) (a)) (c)))) ((((distributive_times_plus) (a)) (b)) (c)))) ((((times) ) (c)) (a))) (((commutative_times) (c)) (a)))) ((((times) ) (b)) (a))) (((commutative_times) (b)) (a)))) ((((times) ) ((((plus) ) (b)) (c))) (a))) (((commutative_times) ((((plus) ) (b)) (c))) (a)).
definition associative_times : ((associative) ((nat) )) ((times) ) := \lambda n : (nat) . ((((nat_ind) (\lambda j_x_365 : (nat) . \forall (y:(nat) ). \forall (z:(nat) ). (((eq) ((nat) )) ((((times) ) ((((times) ) (j_x_365)) (y))) (z))) ((((times) ) (j_x_365)) ((((times) ) (y)) (z))))) ((((sym_eq_times) ((O) )) (\lambda x : ((nat) ) -> (nat) . \forall (y:(nat) ). \forall (z:(nat) ). (((eq) ((nat) )) ((((times) ) ((((times) ) ((O) )) (y))) (z))) ((x) ((((times) ) (y)) (z))))) ((((sym_eq_times) ((O) )) (\lambda x : ((nat) ) -> (nat) . \forall (y:(nat) ). \forall (z:(nat) ). (((eq) ((nat) )) ((((times) ) ((x) (y))) (z))) (((((filter_nat_type) (((nat) ) -> (nat) )) ((times_body) )) ((O) )) ((((times) ) (y)) (z))))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((times_body) )) (\lambda x : ((nat) ) -> (nat) . \forall (y:(nat) ). \forall (z:(nat) ). (((eq) ((nat) )) ((((times) ) ((x) (y))) (z))) (((((filter_nat_type) (((nat) ) -> (nat) )) ((times_body) )) ((O) )) ((((times) ) (y)) (z))))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((times_body) )) (\lambda x : ((nat) ) -> (nat) . \forall (y:(nat) ). \forall (z:(nat) ). (((eq) ((nat) )) ((((times) ) ((((times_body) ) ((O) )) (y))) (z))) ((x) ((((times) ) (y)) (z))))) (((sym_eq_times_body_O) (\lambda x : ((nat) ) -> (nat) . \forall (y:(nat) ). \forall (z:(nat) ). (((eq) ((nat) )) ((((times) ) ((((times_body) ) ((O) )) (y))) (z))) ((x) ((((times) ) (y)) (z))))) (((sym_eq_times_body_O) (\lambda x : ((nat) ) -> (nat) . \forall (y:(nat) ). \forall (z:(nat) ). (((eq) ((nat) )) ((((times) ) ((x) (y))) (z))) ((O) ))) ((((sym_eq_times) ((O) )) (\lambda x : ((nat) ) -> (nat) . \forall (y:(nat) ). \forall (z:(nat) ). (((eq) ((nat) )) ((x) (z))) ((O) ))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((times_body) )) (\lambda x : ((nat) ) -> (nat) . \forall (y:(nat) ). \forall (z:(nat) ). (((eq) ((nat) )) ((x) (z))) ((O) ))) (((sym_eq_times_body_O) (\lambda x : ((nat) ) -> (nat) . \forall (y:(nat) ). \forall (z:(nat) ). (((eq) ((nat) )) ((x) (z))) ((O) ))) (\lambda j_y : (nat) . \lambda j_z : (nat) . ((refl) ((nat) )) ((O) )))))))))))) (\lambda x_366 : (nat) . \lambda j_x_368 : \forall (y:(nat) ). \forall (z:(nat) ). (((eq) ((nat) )) ((((times) ) ((((times) ) (x_366)) (y))) (z))) ((((times) ) (x_366)) ((((times) ) (y)) (z))). (\lambda y : (nat) . \lambda z : (nat) . (((sym_eq_times) (((S) ) (x_366))) (\lambda x : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((times) ) ((((times) ) (((S) ) (x_366))) (y))) (z))) ((x) ((((times) ) (y)) (z))))) ((((sym_eq_times) (((S) ) (x_366))) (\lambda x : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((times) ) ((x) (y))) (z))) (((((filter_nat_type) (((nat) ) -> (nat) )) ((times_body) )) (((S) ) (x_366))) ((((times) ) (y)) (z))))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((times_body) )) (x_366)) (\lambda x : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((times) ) ((x) (y))) (z))) (((((filter_nat_type) (((nat) ) -> (nat) )) ((times_body) )) (((S) ) (x_366))) ((((times) ) (y)) (z))))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((times_body) )) (x_366)) (\lambda x : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((times) ) ((((times_body) ) (((S) ) (x_366))) (y))) (z))) ((x) ((((times) ) (y)) (z))))) ((((sym_eq_times_body_S) (x_366)) (\lambda x : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((times) ) ((((times_body) ) (((S) ) (x_366))) (y))) (z))) ((x) ((((times) ) (y)) (z))))) ((((sym_eq_times_body_S) (x_366)) (\lambda x : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((times) ) ((x) (y))) (z))) ((((plus) ) ((((times) ) (y)) (z))) ((((times) ) (x_366)) ((((times) ) (y)) (z)))))) (((((((rewrite_r) ((nat) )) ((((plus) ) ((((times) ) (y)) (z))) ((((times) ) (x_366)) ((((times) ) (y)) (z))))) (\lambda j__ : (nat) . (((eq) ((nat) )) (j__)) ((((plus) ) ((((times) ) (y)) (z))) ((((times) ) (x_366)) ((((times) ) (y)) (z)))))) (((refl) ((nat) )) ((((plus) ) ((((times) ) (y)) (z))) ((((times) ) (x_366)) ((((times) ) (y)) (z)))))) ((((times) ) ((((plus) ) (y)) ((((times) ) (x_366)) (y)))) (z))) (((((((rewrite_l) ((nat) )) ((((times) ) ((((times) ) (x_366)) (y))) (z))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((((times) ) ((((plus) ) (y)) ((((times) ) (x_366)) (y)))) (z))) ((((plus) ) ((((times) ) (y)) (z))) (j__)))) ((((distributive_times_plus_r) (z)) (y)) ((((times) ) (x_366)) (y)))) ((((times) ) (x_366)) ((((times) ) (y)) (z)))) (((j_x_368) (y)) (z)))))))))))) (n).
definition times_times : \forall (x:(nat) ). \forall (y:(nat) ). \forall (z:(nat) ). (((eq) ((nat) )) ((((times) ) (x)) ((((times) ) (y)) (z)))) ((((times) ) (y)) ((((times) ) (x)) (z))) := \lambda x : (nat) . \lambda y : (nat) . \lambda z : (nat) . ((((((rewrite_r) ((nat) )) ((((times) ) (y)) ((((times) ) (x)) (z)))) (\lambda j__ : (nat) . (((eq) ((nat) )) (j__)) ((((times) ) (y)) ((((times) ) (x)) (z))))) (((refl) ((nat) )) ((((times) ) (y)) ((((times) ) (x)) (z))))) ((((times) ) (x)) ((((times) ) (y)) (z)))) (((((((rewrite_l) ((nat) )) ((((times) ) ((((times) ) (x)) (y))) (z))) (\lambda j__ : (nat) . (((eq) ((nat) )) (j__)) ((((times) ) (y)) ((((times) ) (x)) (z))))) (((((((rewrite_l) ((nat) )) ((((times) ) (y)) (x))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((((times) ) (j__)) (z))) ((((times) ) (y)) ((((times) ) (x)) (z))))) ((((associative_times) (y)) (x)) (z))) ((((times) ) (x)) (y))) (((commutative_times) (y)) (x)))) ((((times) ) (x)) ((((times) ) (y)) (z)))) ((((associative_times) (x)) (y)) (z))).
definition times_n_1 : \forall (n:(nat) ). (((eq) ((nat) )) (n)) ((((times) ) (n)) (((S) ) ((O) ))) := \lambda n : (nat) . ((((((rewrite_l) ((nat) )) ((((plus) ) (n)) ((((times) ) (n)) ((O) )))) (\lambda j__ : (nat) . (((eq) ((nat) )) (n)) (j__))) (((((((rewrite_l) ((nat) )) ((O) )) (\lambda j__ : (nat) . (((eq) ((nat) )) (n)) ((((plus) ) (n)) (j__)))) (((((((rewrite_l) ((nat) )) (n)) (\lambda j__ : (nat) . (((eq) ((nat) )) (n)) (j__))) (((refl) ((nat) )) (n))) ((((plus) ) (n)) ((O) ))) ((plus_n_O) (n)))) ((((times) ) (n)) ((O) ))) ((times_n_O) (n)))) ((((times) ) (n)) (((S) ) ((O) )))) (((times_n_Sm) (n)) ((O) )).
definition minus_S_S : \forall (n:(nat) ). \forall (m:(nat) ). (((eq) ((nat) )) ((((minus) ) (((S) ) (n))) (((S) ) (m)))) ((((minus) ) (n)) (m)) := \lambda n : (nat) . \lambda m : (nat) . ((((((eq_match_nat_type_S) ((nat) )) (((S) ) (n))) (\lambda q : (nat) . (((minus) ) (n)) (q))) (m)) (\lambda y : (nat) . (((eq) ((nat) )) ((((minus) ) (((S) ) (n))) (((S) ) (m)))) (y))) ((((eq_minus_body_S) (n)) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((minus) ) (((S) ) (n))) (((S) ) (m)))) ((y) (((S) ) (m))))) ((((((eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((minus_body) )) (n)) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((minus) ) (((S) ) (n))) (((S) ) (m)))) ((y) (((S) ) (m))))) ((((eq_minus) (((S) ) (n))) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((minus) ) (((S) ) (n))) (((S) ) (m)))) ((y) (((S) ) (m))))) (((refl) ((nat) )) ((((minus) ) (((S) ) (n))) (((S) ) (m))))))).
definition minus_O_n : \forall (n:(nat) ). (((eq) ((nat) )) ((O) )) ((((minus) ) ((O) )) (n)) := \lambda n : (nat) . ((((match_nat_prop) (\lambda j__ : (nat) . (((eq) ((nat) )) ((O) )) ((((minus) ) ((O) )) (j__)))) ((((sym_eq_minus) ((O) )) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((O) )) ((y) ((O) )))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((minus_body) )) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((O) )) ((y) ((O) )))) (((sym_eq_minus_body_O) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((O) )) ((y) ((O) )))) (((refl) ((nat) )) ((O) )))))) ((((sym_eq_minus) ((O) )) (\lambda y : ((nat) ) -> (nat) . \forall (n0:(nat) ). (((eq) ((nat) )) ((O) )) ((y) (((S) ) (n0))))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((minus_body) )) (\lambda y : ((nat) ) -> (nat) . \forall (n0:(nat) ). (((eq) ((nat) )) ((O) )) ((y) (((S) ) (n0))))) (((sym_eq_minus_body_O) (\lambda y : ((nat) ) -> (nat) . \forall (n0:(nat) ). (((eq) ((nat) )) ((O) )) ((y) (((S) ) (n0))))) (\lambda auto : (nat) . ((refl) ((nat) )) ((O) )))))) (n).
definition minus_n_O : \forall (n:(nat) ). (((eq) ((nat) )) (n)) ((((minus) ) (n)) ((O) )) := \lambda n : (nat) . ((((match_nat_prop) (\lambda j__ : (nat) . (((eq) ((nat) )) (j__)) ((((minus) ) (j__)) ((O) )))) (((((((rewrite_l) ((nat) )) ((O) )) (\lambda j__ : (nat) . (((eq) ((nat) )) ((O) )) (j__))) (((refl) ((nat) )) ((O) ))) ((((minus) ) ((O) )) ((O) ))) ((minus_O_n) ((O) )))) (\lambda auto : (nat) . (((sym_eq_minus) (((S) ) (auto))) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) (((S) ) (auto))) ((y) ((O) )))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((minus_body) )) (auto)) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) (((S) ) (auto))) ((y) ((O) )))) ((((sym_eq_minus_body_S) (auto)) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) (((S) ) (auto))) ((y) ((O) )))) ((((((sym_eq_match_nat_type_O) ((nat) )) (((S) ) (auto))) (\lambda q : (nat) . (((minus) ) (auto)) (q))) (\lambda y : (nat) . (((eq) ((nat) )) (((S) ) (auto))) (y))) (((refl) ((nat) )) (((S) ) (auto)))))))) (n).
definition minus_n_n : \forall (n:(nat) ). (((eq) ((nat) )) ((O) )) ((((minus) ) (n)) (n)) := \lambda n : (nat) . ((((nat_ind) (\lambda j_x_365 : (nat) . (((eq) ((nat) )) ((O) )) ((((minus) ) (j_x_365)) (j_x_365)))) (((((((rewrite_l) ((nat) )) ((O) )) (\lambda j__ : (nat) . (((eq) ((nat) )) ((O) )) (j__))) (((refl) ((nat) )) ((O) ))) ((((minus) ) ((O) )) ((O) ))) ((minus_O_n) ((O) )))) (\lambda x_366 : (nat) . \lambda j_x_368 : (((eq) ((nat) )) ((O) )) ((((minus) ) (x_366)) (x_366)). (((((((rewrite_r) ((nat) )) ((((minus) ) (x_366)) (x_366))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((O) )) (j__))) (((((((rewrite_l) ((nat) )) ((O) )) (\lambda j__ : (nat) . (((eq) ((nat) )) ((O) )) (j__))) (((refl) ((nat) )) ((O) ))) ((((minus) ) (x_366)) (x_366))) (j_x_368))) ((((minus) ) (((S) ) (x_366))) (((S) ) (x_366)))) (((minus_S_S) (x_366)) (x_366))))) (n).
definition eq_minus_S_pred : \forall (n:(nat) ). \forall (m:(nat) ). (((eq) ((nat) )) ((((minus) ) (n)) (((S) ) (m)))) (((pred) ) ((((minus) ) (n)) (m))) := ((((nat_elim2) (\lambda j__ : (nat) . \lambda j_0 : (nat) . (((eq) ((nat) )) ((((minus) ) (j__)) (((S) ) (j_0)))) (((pred) ) ((((minus) ) (j__)) (j_0))))) (\lambda j_n : (nat) . (((sym_eq_minus) ((O) )) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((minus) ) ((O) )) (((S) ) (j_n)))) (((pred) ) ((y) (j_n))))) ((((sym_eq_minus) ((O) )) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((y) (((S) ) (j_n)))) (((pred) ) (((((filter_nat_type) (((nat) ) -> (nat) )) ((minus_body) )) ((O) )) (j_n))))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((minus_body) )) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((y) (((S) ) (j_n)))) (((pred) ) (((((filter_nat_type) (((nat) ) -> (nat) )) ((minus_body) )) ((O) )) (j_n))))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((minus_body) )) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((minus_body) ) ((O) )) (((S) ) (j_n)))) (((pred) ) ((y) (j_n))))) (((sym_eq_minus_body_O) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((minus_body) ) ((O) )) (((S) ) (j_n)))) (((pred) ) ((y) (j_n))))) (((sym_eq_minus_body_O) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((y) (((S) ) (j_n)))) (((((match_nat_type) ((nat) )) ((O) )) (\lambda p : (nat) . p)) ((O) )))) ((((((sym_eq_match_nat_type_O) ((nat) )) ((O) )) (\lambda p : (nat) . p)) (\lambda y : (nat) . (((eq) ((nat) )) ((O) )) (y))) (((refl) ((nat) )) ((O) )))))))))) (\lambda n : (nat) . (((sym_eq_minus) (((S) ) (n))) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((minus) ) (((S) ) (n))) (((S) ) ((O) )))) (((pred) ) ((y) ((O) ))))) ((((sym_eq_minus) (((S) ) (n))) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((y) (((S) ) ((O) )))) (((pred) ) (((((filter_nat_type) (((nat) ) -> (nat) )) ((minus_body) )) (((S) ) (n))) ((O) ))))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((minus_body) )) (n)) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((y) (((S) ) ((O) )))) (((pred) ) (((((filter_nat_type) (((nat) ) -> (nat) )) ((minus_body) )) (((S) ) (n))) ((O) ))))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((minus_body) )) (n)) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((minus_body) ) (((S) ) (n))) (((S) ) ((O) )))) (((pred) ) ((y) ((O) ))))) ((((sym_eq_minus_body_S) (n)) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((((minus_body) ) (((S) ) (n))) (((S) ) ((O) )))) (((pred) ) ((y) ((O) ))))) ((((sym_eq_minus_body_S) (n)) (\lambda y : ((nat) ) -> (nat) . (((eq) ((nat) )) ((y) (((S) ) ((O) )))) (((pred) ) (((((match_nat_type) ((nat) )) (((S) ) (n))) (\lambda q : (nat) . (((minus) ) (n)) (q))) ((O) ))))) (((((((sym_eq_match_nat_type_S) ((nat) )) (((S) ) (n))) (\lambda q : (nat) . (((minus) ) (n)) (q))) ((O) )) (\lambda y : (nat) . (((eq) ((nat) )) (y)) (((((match_nat_type) ((nat) )) ((O) )) (\lambda p : (nat) . p)) (((((match_nat_type) ((nat) )) (((S) ) (n))) (\lambda q : (nat) . (((minus) ) (n)) (q))) ((O) ))))) ((((((sym_eq_match_nat_type_O) ((nat) )) (((S) ) (n))) (\lambda q : (nat) . (((minus) ) (n)) (q))) (\lambda y : (nat) . (((eq) ((nat) )) ((((minus) ) (n)) ((O) ))) (((((match_nat_type) ((nat) )) ((O) )) (\lambda p : (nat) . p)) (y)))) (((((((sym_eq_match_nat_type_S) ((nat) )) ((O) )) (\lambda q : (nat) . q)) (n)) (\lambda y : (nat) . (((eq) ((nat) )) ((((minus) ) (n)) ((O) ))) (y))) (((((((rewrite_l) ((nat) )) (n)) (\lambda j__ : (nat) . (((eq) ((nat) )) (j__)) (n))) (((refl) ((nat) )) (n))) ((((minus) ) (n)) ((O) ))) ((minus_n_O) (n))))))))))))) (\lambda n : (nat) . \lambda m : (nat) . (((sym_eq_minus) (((S) ) (n))) (\lambda y : ((nat) ) -> (nat) . ((((eq) ((nat) )) ((((minus) ) (n)) (((S) ) (m)))) (((pred) ) ((((minus) ) (n)) (m)))) -> (((eq) ((nat) )) ((((minus) ) (((S) ) (n))) (((S) ) (((S) ) (m))))) (((pred) ) ((y) (((S) ) (m)))))) ((((sym_eq_minus) (((S) ) (n))) (\lambda y : ((nat) ) -> (nat) . ((((eq) ((nat) )) ((((minus) ) (n)) (((S) ) (m)))) (((pred) ) ((((minus) ) (n)) (m)))) -> (((eq) ((nat) )) ((y) (((S) ) (((S) ) (m))))) (((pred) ) (((((filter_nat_type) (((nat) ) -> (nat) )) ((minus_body) )) (((S) ) (n))) (((S) ) (m)))))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((minus_body) )) (n)) (\lambda y : ((nat) ) -> (nat) . ((((eq) ((nat) )) ((((minus) ) (n)) (((S) ) (m)))) (((pred) ) ((((minus) ) (n)) (m)))) -> (((eq) ((nat) )) ((y) (((S) ) (((S) ) (m))))) (((pred) ) (((((filter_nat_type) (((nat) ) -> (nat) )) ((minus_body) )) (((S) ) (n))) (((S) ) (m)))))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((minus_body) )) (n)) (\lambda y : ((nat) ) -> (nat) . ((((eq) ((nat) )) ((((minus) ) (n)) (((S) ) (m)))) (((pred) ) ((((minus) ) (n)) (m)))) -> (((eq) ((nat) )) ((((minus_body) ) (((S) ) (n))) (((S) ) (((S) ) (m))))) (((pred) ) ((y) (((S) ) (m)))))) ((((sym_eq_minus_body_S) (n)) (\lambda y : ((nat) ) -> (nat) . ((((eq) ((nat) )) ((((minus) ) (n)) (((S) ) (m)))) (((pred) ) ((((minus) ) (n)) (m)))) -> (((eq) ((nat) )) ((((minus_body) ) (((S) ) (n))) (((S) ) (((S) ) (m))))) (((pred) ) ((y) (((S) ) (m)))))) ((((sym_eq_minus_body_S) (n)) (\lambda y : ((nat) ) -> (nat) . ((((eq) ((nat) )) ((((minus) ) (n)) (((S) ) (m)))) (((pred) ) ((((minus) ) (n)) (m)))) -> (((eq) ((nat) )) ((y) (((S) ) (((S) ) (m))))) (((pred) ) (((((match_nat_type) ((nat) )) (((S) ) (n))) (\lambda q : (nat) . (((minus) ) (n)) (q))) (((S) ) (m)))))) (((((((sym_eq_match_nat_type_S) ((nat) )) (((S) ) (n))) (\lambda q : (nat) . (((minus) ) (n)) (q))) (((S) ) (m))) (\lambda y : (nat) . ((((eq) ((nat) )) ((((minus) ) (n)) (((S) ) (m)))) (((pred) ) ((((minus) ) (n)) (m)))) -> (((eq) ((nat) )) (y)) (((((match_nat_type) ((nat) )) ((O) )) (\lambda p : (nat) . p)) (((((match_nat_type) ((nat) )) (((S) ) (n))) (\lambda q : (nat) . (((minus) ) (n)) (q))) (((S) ) (m)))))) (((((((sym_eq_match_nat_type_S) ((nat) )) (((S) ) (n))) (\lambda q : (nat) . (((minus) ) (n)) (q))) (m)) (\lambda y : (nat) . ((((eq) ((nat) )) ((((minus) ) (n)) (((S) ) (m)))) (((pred) ) ((((minus) ) (n)) (m)))) -> (((eq) ((nat) )) ((((minus) ) (n)) (((S) ) (m)))) (((((match_nat_type) ((nat) )) ((O) )) (\lambda p : (nat) . p)) (y)))) (\lambda auto : (((eq) ((nat) )) ((((minus) ) (n)) (((S) ) (m)))) (((((match_nat_type) ((nat) )) ((O) )) (\lambda p : (nat) . p)) ((((minus) ) (n)) (m))). (((((((rewrite_r) ((nat) )) (((((match_nat_type) ((nat) )) ((O) )) (\lambda p : (nat) . p)) ((((minus) ) (n)) (m)))) (\lambda j__ : (nat) . (((eq) ((nat) )) (j__)) (((((match_nat_type) ((nat) )) ((O) )) (\lambda p : (nat) . p)) ((((minus) ) (n)) (m))))) (((refl) ((nat) )) (((((match_nat_type) ((nat) )) ((O) )) (\lambda p : (nat) . p)) ((((minus) ) (n)) (m))))) ((((minus) ) (n)) (((S) ) (m)))) (auto))))))))))).
definition not_eq_S : \forall (n:(nat) ). \forall (m:(nat) ). (((Not) ) ((((eq) ((nat) )) (n)) (m))) -> ((Not) ) ((((eq) ((nat) )) (((S) ) (n))) (((S) ) (m))) := \lambda n : (nat) . \lambda m : (nat) . \lambda auto : ((Not) ) ((((eq) ((nat) )) (n)) (m)). (((((not_to_not) ((((eq) ((nat) )) (((S) ) (n))) (((S) ) (m)))) ((((eq) ((nat) )) (n)) (m))) (\lambda auto' : (((eq) ((nat) )) (((S) ) (n))) (((S) ) (m)). (((((((rewrite_l) ((nat) )) (m)) (\lambda j__ : (nat) . (((eq) ((nat) )) (j__)) (m))) (((refl) ((nat) )) (m))) (n)) (((((((rewrite_r) ((nat) )) (((pred) ) (((S) ) (n)))) (\lambda j__ : (nat) . (((eq) ((nat) )) (m)) (j__))) (((((((rewrite_r) ((nat) )) (((S) ) (m))) (\lambda j__ : (nat) . (((eq) ((nat) )) (m)) (((pred) ) (j__)))) ((pred_Sn) (m))) (((S) ) (n))) (auto'))) (n)) ((pred_Sn) (n)))))) (auto)).
definition not_eq_O_S : \forall (n:(nat) ). ((Not) ) ((((eq) ((nat) )) ((O) )) (((S) ) (n))) := \lambda n : (nat) . ((nmk) ((((eq) ((nat) )) ((O) )) (((S) ) (n)))) (\lambda eqOS : (((eq) ((nat) )) ((O) )) (((S) ) (n)). ((((((eq_match_nat_type_O) (Prop)) ((False) )) (\lambda p : (nat) . (True) )) (\lambda y : Prop. y)) (((((((eq_ind_r) ((nat) )) (((S) ) (n))) (\lambda x : (nat) . ((not_zero) ) (x))) (((((((sym_eq_match_nat_type_S) (Prop)) ((False) )) (\lambda p : (nat) . (True) )) (n)) (\lambda y : Prop. y)) (I))) ((O) )) (eqOS)))).
definition lt_to_not_zero : \forall (n:(nat) ). \forall (m:(nat) ). ((((lt) ) (n)) (m)) -> ((not_zero) ) (m) := \lambda n : (nat) . \lambda m : (nat) . \lambda Hlt : (((lt) ) (n)) (m). (((((((le_ind) (((S) ) (n))) (\lambda x_417 : (nat) . ((not_zero) ) (x_417))) (((((((sym_eq_match_nat_type_S) (Prop)) ((False) )) (\lambda p : (nat) . (True) )) (n)) (\lambda y : Prop. y)) (I))) (\lambda m0 : (nat) . \lambda j_x_419 : (((le) ) (((S) ) (n))) (m0). (\lambda j_x_421 : ((not_zero) ) (m0). (((((((sym_eq_match_nat_type_S) (Prop)) ((False) )) (\lambda p : (nat) . (True) )) (m0)) (\lambda y : Prop. y)) (I))))) (m)) (Hlt)).
definition le_S_S : \forall (n:(nat) ). \forall (m:(nat) ). ((((le) ) (n)) (m)) -> (((le) ) (((S) ) (n))) (((S) ) (m)) := \lambda n : (nat) . \lambda m : (nat) . \lambda lenm : (((le) ) (n)) (m). (((((((le_ind) (n)) (\lambda x_417 : (nat) . (((le) ) (((S) ) (n))) (((S) ) (x_417)))) ((le_n) (((S) ) (n)))) (\lambda m0 : (nat) . \lambda j_x_419 : (((le) ) (n)) (m0). (\lambda j_x_421 : (((le) ) (((S) ) (n))) (((S) ) (m0)). ((((le_S) (((S) ) (n))) (((S) ) (m0))) (j_x_421))))) (m)) (lenm)).
definition le_O_n : \forall (n:(nat) ). (((le) ) ((O) )) (n) := \lambda n : (nat) . ((((nat_ind) (((le) ) ((O) ))) ((le_n) ((O) ))) (\lambda x_366 : (nat) . \lambda j_x_368 : (((le) ) ((O) )) (x_366). ((((le_S) ((O) )) (x_366)) (j_x_368)))) (n).
definition le_n_Sn : \forall (n:(nat) ). (((le) ) (n)) (((S) ) (n)) := \lambda n : (nat) . (((le_S) (n)) (n)) ((le_n) (n)).
definition transitive_le : ((transitive) ((nat) )) ((le) ) := \lambda a : (nat) . \lambda b : (nat) . \lambda c : (nat) . \lambda leab : (((le) ) (a)) (b). (\lambda lebc : (((le) ) (b)) (c). (((((((le_ind) (b)) (\lambda x_417 : (nat) . (((le) ) (a)) (x_417))) (leab)) (\lambda m : (nat) . \lambda j_x_419 : (((le) ) (b)) (m). (\lambda j_x_421 : (((le) ) (a)) (m). ((((le_S) (a)) (m)) (j_x_421))))) (c)) (lebc))).
definition le_pred_n : \forall (n:(nat) ). (((le) ) (((pred) ) (n))) (n) := \lambda n : (nat) . ((((nat_ind) (\lambda j_x_365 : (nat) . (((le) ) (((pred) ) (j_x_365))) (j_x_365))) ((((((eq_match_nat_type_O) ((nat) )) ((O) )) (\lambda p : (nat) . p)) (\lambda y : (nat) . (((le) ) (((((match_nat_type) ((nat) )) ((O) )) (\lambda p : (nat) . p)) ((O) ))) (y))) ((le_n) (((pred) ) ((O) ))))) (\lambda x_366 : (nat) . \lambda j_x_368 : (((le) ) (((pred) ) (x_366))) (x_366). (((((((eq_match_nat_type_S) ((nat) )) ((O) )) (\lambda p : (nat) . p)) (x_366)) (\lambda y : (nat) . (((le) ) (((pred) ) (((S) ) (x_366)))) (((S) ) (y)))) ((le_n_Sn) (((pred) ) (((S) ) (x_366))))))) (n).
definition monotonic_pred : (((monotonic) ((nat) )) ((le) )) ((pred) ) := \lambda n : (nat) . \lambda m : (nat) . \lambda lenm : (((le) ) (n)) (m). (((((((le_ind) (n)) (\lambda x_417 : (nat) . (((le) ) (((pred) ) (n))) (((pred) ) (x_417)))) ((le_n) (((pred) ) (n)))) (\lambda m0 : (nat) . \lambda j_x_419 : (((le) ) (n)) (m0). (\lambda j_x_421 : (((le) ) (((pred) ) (n))) (((pred) ) (m0)). ((((((transitive_le) (((pred) ) (n))) (n)) (((pred) ) (((S) ) (m0)))) ((le_pred_n) (n))) (((((((sym_eq_match_nat_type_S) ((nat) )) ((O) )) (\lambda p : (nat) . p)) (m0)) (\lambda y : (nat) . (((le) ) (n)) (y))) (j_x_419)))))) (m)) (lenm)).
definition le_S_S_to_le : \forall (n:(nat) ). \forall (m:(nat) ). ((((le) ) (((S) ) (n))) (((S) ) (m))) -> (((le) ) (n)) (m) := \lambda n : (nat) . \lambda m : (nat) . \lambda auto : (((le) ) (((S) ) (n))) (((S) ) (m)). (((((((eq_match_nat_type_S) ((nat) )) ((O) )) (\lambda p : (nat) . p)) (m)) (\lambda y : (nat) . (((le) ) (n)) (y))) (((((((eq_match_nat_type_S) ((nat) )) ((O) )) (\lambda p : (nat) . p)) (n)) (\lambda y : (nat) . (((le) ) (y)) (((((match_nat_type) ((nat) )) ((O) )) (\lambda p : (nat) . p)) (((S) ) (m))))) ((((monotonic_pred) (((S) ) (n))) (((S) ) (m))) (auto)))).
definition monotonic_le_plus_r : \forall (n:(nat) ). (((monotonic) ((nat) )) ((le) )) (\lambda m : (nat) . (((plus) ) (n)) (m)) := \lambda n : (nat) . \lambda a : (nat) . \lambda b : (nat) . ((((nat_ind) (\lambda j_x_365 : (nat) . ((((le) ) (a)) (b)) -> (((le) ) ((((plus) ) (j_x_365)) (a))) ((((plus) ) (j_x_365)) (b)))) ((((sym_eq_plus) ((O) )) (\lambda y : ((nat) ) -> (nat) . ((((le) ) (a)) (b)) -> (((le) ) ((((plus) ) ((O) )) (a))) ((y) (b)))) ((((sym_eq_plus) ((O) )) (\lambda y : ((nat) ) -> (nat) . ((((le) ) (a)) (b)) -> (((le) ) ((y) (a))) (((((filter_nat_type) (((nat) ) -> (nat) )) ((plus_body) )) ((O) )) (b)))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((plus_body) )) (\lambda y : ((nat) ) -> (nat) . ((((le) ) (a)) (b)) -> (((le) ) ((y) (a))) (((((filter_nat_type) (((nat) ) -> (nat) )) ((plus_body) )) ((O) )) (b)))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((plus_body) )) (\lambda y : ((nat) ) -> (nat) . ((((le) ) (a)) (b)) -> (((le) ) ((((plus_body) ) ((O) )) (a))) ((y) (b)))) (((sym_eq_plus_body_O) (\lambda y : ((nat) ) -> (nat) . ((((le) ) (a)) (b)) -> (((le) ) ((((plus_body) ) ((O) )) (a))) ((y) (b)))) (((sym_eq_plus_body_O) (\lambda y : ((nat) ) -> (nat) . ((((le) ) (a)) (b)) -> (((le) ) ((y) (a))) (b))) (\lambda auto : (((le) ) (a)) (b). (auto))))))))) (\lambda m : (nat) . \lambda H : ((((le) ) (a)) (b)) -> (((le) ) ((((plus) ) (m)) (a))) ((((plus) ) (m)) (b)). (\lambda leab : (((le) ) (a)) (b). ((((sym_eq_plus) (((S) ) (m))) (\lambda y : ((nat) ) -> (nat) . (((le) ) ((((plus) ) (((S) ) (m))) (a))) ((y) (b)))) ((((sym_eq_plus) (((S) ) (m))) (\lambda y : ((nat) ) -> (nat) . (((le) ) ((y) (a))) (((((filter_nat_type) (((nat) ) -> (nat) )) ((plus_body) )) (((S) ) (m))) (b)))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((plus_body) )) (m)) (\lambda y : ((nat) ) -> (nat) . (((le) ) ((y) (a))) (((((filter_nat_type) (((nat) ) -> (nat) )) ((plus_body) )) (((S) ) (m))) (b)))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((plus_body) )) (m)) (\lambda y : ((nat) ) -> (nat) . (((le) ) ((((plus_body) ) (((S) ) (m))) (a))) ((y) (b)))) ((((sym_eq_plus_body_S) (m)) (\lambda y : ((nat) ) -> (nat) . (((le) ) ((((plus_body) ) (((S) ) (m))) (a))) ((y) (b)))) ((((sym_eq_plus_body_S) (m)) (\lambda y : ((nat) ) -> (nat) . (((le) ) ((y) (a))) (((S) ) ((((plus) ) (m)) (b))))) ((((le_S_S) ((((plus) ) (m)) (a))) ((((plus) ) (m)) (b))) ((H) (leab)))))))))))) (n).
definition monotonic_le_plus_l : \forall (m:(nat) ). (((monotonic) ((nat) )) ((le) )) (\lambda n : (nat) . (((plus) ) (n)) (m)) := \lambda m : (nat) . \lambda x : (nat) . \lambda y : (nat) . \lambda auto : (((le) ) (x)) (y). (((((eq_coerc) ((((le) ) ((((plus) ) (m)) (x))) ((((plus) ) (m)) (y)))) ((((le) ) ((((plus) ) (x)) (m))) ((((plus) ) (y)) (m)))) (((((monotonic_le_plus_r) (m)) (x)) (y)) (auto))) (((((((rewrite_r) ((nat) )) ((((plus) ) (m)) (x))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) ((((plus) ) (m)) (x))) ((((plus) ) (m)) (y)))) ((((le) ) (j__)) ((((plus) ) (y)) (m))))) (((((((rewrite_r) ((nat) )) ((((plus) ) (m)) (y))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) ((((plus) ) (m)) (x))) ((((plus) ) (m)) (y)))) ((((le) ) ((((plus) ) (m)) (x))) (j__)))) (((refl) (Prop)) ((((le) ) ((((plus) ) (m)) (x))) ((((plus) ) (m)) (y))))) ((((plus) ) (y)) (m))) (((commutative_plus) (y)) (m)))) ((((plus) ) (x)) (m))) (((commutative_plus) (x)) (m)))).
definition le_plus : \forall (n1:(nat) ). \forall (n2:(nat) ). \forall (m1:(nat) ). \forall (m2:(nat) ). ((((le) ) (n1)) (n2)) -> ((((le) ) (m1)) (m2)) -> (((le) ) ((((plus) ) (n1)) (m1))) ((((plus) ) (n2)) (m2)) := \lambda n1 : (nat) . \lambda n2 : (nat) . \lambda m1 : (nat) . \lambda m2 : (nat) . \lambda len : (((le) ) (n1)) (n2). (\lambda lem : (((le) ) (m1)) (m2). ((((((transitive_le) ((((plus) ) (n1)) (m1))) ((((plus) ) (n1)) (m2))) ((((plus) ) (n2)) (m2))) (((((monotonic_le_plus_r) (n1)) (m1)) (m2)) (lem))) (((((monotonic_le_plus_l) (m2)) (n1)) (n2)) (len)))).
definition le_plus_n : \forall (n:(nat) ). \forall (m:(nat) ). (((le) ) (m)) ((((plus) ) (n)) (m)) := \lambda n : (nat) . \lambda m : (nat) . ((((eq_coerc) ((((le) ) ((((plus) ) ((O) )) (m))) ((((plus) ) (n)) (m)))) ((((le) ) (m)) ((((plus) ) (n)) (m)))) (((((monotonic_le_plus_l) (m)) ((O) )) (n)) ((le_O_n) (n)))) (((((((rewrite_l) ((nat) )) (m)) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (j__)) ((((plus) ) (n)) (m)))) ((((le) ) (m)) ((((plus) ) (n)) (m))))) (((refl) (Prop)) ((((le) ) (m)) ((((plus) ) (n)) (m))))) ((((plus) ) ((O) )) (m))) ((plus_O_n) (m))).
definition le_plus_b : \forall (b:(nat) ). \forall (n:(nat) ). \forall (m:(nat) ). ((((le) ) ((((plus) ) (n)) (b))) (m)) -> (((le) ) (n)) (m) := \lambda b : (nat) . \lambda n : (nat) . \lambda m : (nat) . \lambda auto : (((le) ) ((((plus) ) (n)) (b))) (m). ((((((transitive_le) (n)) ((((plus) ) (n)) (b))) (m)) (((((eq_coerc) ((((le) ) (n)) ((((plus) ) (b)) (n)))) ((((le) ) (n)) ((((plus) ) (n)) (b)))) (((le_plus_n) (b)) (n))) (((((((rewrite_r) ((nat) )) ((((plus) ) (b)) (n))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (n)) ((((plus) ) (b)) (n)))) ((((le) ) (n)) (j__)))) (((refl) (Prop)) ((((le) ) (n)) ((((plus) ) (b)) (n))))) ((((plus) ) (n)) (b))) (((commutative_plus) (n)) (b))))) (auto)).
definition le_plus_n_r : \forall (n:(nat) ). \forall (m:(nat) ). (((le) ) (m)) ((((plus) ) (m)) (n)) := \lambda n : (nat) . \lambda m : (nat) . ((((eq_coerc) ((((le) ) (m)) ((((plus) ) (n)) (m)))) ((((le) ) (m)) ((((plus) ) (m)) (n)))) (((le_plus_n) (n)) (m))) (((((((rewrite_r) ((nat) )) ((((plus) ) (n)) (m))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (m)) ((((plus) ) (n)) (m)))) ((((le) ) (m)) (j__)))) (((refl) (Prop)) ((((le) ) (m)) ((((plus) ) (n)) (m))))) ((((plus) ) (m)) (n))) (((commutative_plus) (m)) (n))).
definition le_plus_to_le : \forall (a:(nat) ). \forall (n:(nat) ). \forall (m:(nat) ). ((((le) ) ((((plus) ) (a)) (n))) ((((plus) ) (a)) (m))) -> (((le) ) (n)) (m) := \lambda a : (nat) . ((((nat_ind) (\lambda j_x_365 : (nat) . \forall (n:(nat) ). \forall (m:(nat) ). ((((le) ) ((((plus) ) (j_x_365)) (n))) ((((plus) ) (j_x_365)) (m))) -> (((le) ) (n)) (m))) (\lambda n : (nat) . \lambda m : (nat) . (((sym_eq_plus) ((O) )) (\lambda y : ((nat) ) -> (nat) . ((((le) ) ((((plus) ) ((O) )) (n))) ((y) (m))) -> (((le) ) (n)) (m))) ((((sym_eq_plus) ((O) )) (\lambda y : ((nat) ) -> (nat) . ((((le) ) ((y) (n))) (((((filter_nat_type) (((nat) ) -> (nat) )) ((plus_body) )) ((O) )) (m))) -> (((le) ) (n)) (m))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((plus_body) )) (\lambda y : ((nat) ) -> (nat) . ((((le) ) ((y) (n))) (((((filter_nat_type) (((nat) ) -> (nat) )) ((plus_body) )) ((O) )) (m))) -> (((le) ) (n)) (m))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((plus_body) )) (\lambda y : ((nat) ) -> (nat) . ((((le) ) ((((plus_body) ) ((O) )) (n))) ((y) (m))) -> (((le) ) (n)) (m))) (((sym_eq_plus_body_O) (\lambda y : ((nat) ) -> (nat) . ((((le) ) ((((plus_body) ) ((O) )) (n))) ((y) (m))) -> (((le) ) (n)) (m))) (((sym_eq_plus_body_O) (\lambda y : ((nat) ) -> (nat) . ((((le) ) ((y) (n))) (m)) -> (((le) ) (n)) (m))) (\lambda auto : (((le) ) (n)) (m). (auto))))))))) (\lambda x_366 : (nat) . \lambda j_x_368 : \forall (n:(nat) ). \forall (m:(nat) ). ((((le) ) ((((plus) ) (x_366)) (n))) ((((plus) ) (x_366)) (m))) -> (((le) ) (n)) (m). (\lambda n : (nat) . \lambda m : (nat) . (((sym_eq_plus) (((S) ) (x_366))) (\lambda y : ((nat) ) -> (nat) . ((((le) ) ((((plus) ) (((S) ) (x_366))) (n))) ((y) (m))) -> (((le) ) (n)) (m))) ((((sym_eq_plus) (((S) ) (x_366))) (\lambda y : ((nat) ) -> (nat) . ((((le) ) ((y) (n))) (((((filter_nat_type) (((nat) ) -> (nat) )) ((plus_body) )) (((S) ) (x_366))) (m))) -> (((le) ) (n)) (m))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((plus_body) )) (x_366)) (\lambda y : ((nat) ) -> (nat) . ((((le) ) ((y) (n))) (((((filter_nat_type) (((nat) ) -> (nat) )) ((plus_body) )) (((S) ) (x_366))) (m))) -> (((le) ) (n)) (m))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((plus_body) )) (x_366)) (\lambda y : ((nat) ) -> (nat) . ((((le) ) ((((plus_body) ) (((S) ) (x_366))) (n))) ((y) (m))) -> (((le) ) (n)) (m))) ((((sym_eq_plus_body_S) (x_366)) (\lambda y : ((nat) ) -> (nat) . ((((le) ) ((((plus_body) ) (((S) ) (x_366))) (n))) ((y) (m))) -> (((le) ) (n)) (m))) ((((sym_eq_plus_body_S) (x_366)) (\lambda y : ((nat) ) -> (nat) . ((((le) ) ((y) (n))) (((S) ) ((((plus) ) (x_366)) (m)))) -> (((le) ) (n)) (m))) (\lambda auto : (((le) ) (((S) ) ((((plus) ) (x_366)) (n)))) (((S) ) ((((plus) ) (x_366)) (m))). (((((eq_coerc) ((((le) ) (((pred) ) (((S) ) (n)))) (((pred) ) (((S) ) (m))))) ((((le) ) (n)) (m))) ((((monotonic_pred) (((S) ) (n))) (((S) ) (m))) ((((j_x_368) (((S) ) (n))) (((S) ) (m))) (((((eq_coerc) ((((le) ) (((S) ) ((((plus) ) (x_366)) (n)))) (((S) ) ((((plus) ) (x_366)) (m))))) ((((le) ) ((((plus) ) (x_366)) (((S) ) (n)))) ((((plus) ) (x_366)) (((S) ) (m))))) (auto)) (((((((rewrite_r) ((nat) )) ((((plus) ) (x_366)) (((S) ) (n)))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (j__)) (((S) ) ((((plus) ) (x_366)) (m))))) ((((le) ) ((((plus) ) (x_366)) (((S) ) (n)))) ((((plus) ) (x_366)) (((S) ) (m)))))) (((((((rewrite_r) ((nat) )) ((((plus) ) (x_366)) (((S) ) (m)))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) ((((plus) ) (x_366)) (((S) ) (n)))) (j__))) ((((le) ) ((((plus) ) (x_366)) (((S) ) (n)))) ((((plus) ) (x_366)) (((S) ) (m)))))) (((refl) (Prop)) ((((le) ) ((((plus) ) (x_366)) (((S) ) (n)))) ((((plus) ) (x_366)) (((S) ) (m)))))) (((S) ) ((((plus) ) (x_366)) (m)))) (((plus_n_Sm) (x_366)) (m)))) (((S) ) ((((plus) ) (x_366)) (n)))) (((plus_n_Sm) (x_366)) (n))))))) (((((((rewrite_l) ((nat) )) (n)) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (j__)) (((pred) ) (((S) ) (m))))) ((((le) ) (n)) (m)))) (((((((rewrite_l) ((nat) )) (m)) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (n)) (j__))) ((((le) ) (n)) (m)))) (((refl) (Prop)) ((((le) ) (n)) (m)))) (((pred) ) (((S) ) (m)))) ((pred_Sn) (m)))) (((pred) ) (((S) ) (n)))) ((pred_Sn) (n))))))))))))) (a).
definition le_plus_to_le_r : \forall (a:(nat) ). \forall (n:(nat) ). \forall (m:(nat) ). ((((le) ) ((((plus) ) (n)) (a))) ((((plus) ) (m)) (a))) -> (((le) ) (n)) (m) := \lambda a : (nat) . \lambda n : (nat) . \lambda m : (nat) . \lambda auto : (((le) ) ((((plus) ) (n)) (a))) ((((plus) ) (m)) (a)). (((((le_plus_to_le) (a)) (n)) (m)) (((((eq_coerc) ((((le) ) ((((plus) ) (n)) (a))) ((((plus) ) (m)) (a)))) ((((le) ) ((((plus) ) (a)) (n))) ((((plus) ) (a)) (m)))) (auto)) (((((((rewrite_r) ((nat) )) ((((plus) ) (a)) (n))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (j__)) ((((plus) ) (m)) (a)))) ((((le) ) ((((plus) ) (a)) (n))) ((((plus) ) (a)) (m))))) (((((((rewrite_r) ((nat) )) ((((plus) ) (a)) (m))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) ((((plus) ) (a)) (n))) (j__))) ((((le) ) ((((plus) ) (a)) (n))) ((((plus) ) (a)) (m))))) (((refl) (Prop)) ((((le) ) ((((plus) ) (a)) (n))) ((((plus) ) (a)) (m))))) ((((plus) ) (m)) (a))) (((commutative_plus) (m)) (a)))) ((((plus) ) (n)) (a))) (((commutative_plus) (n)) (a))))).
definition monotonic_le_times_r : \forall (n:(nat) ). (((monotonic) ((nat) )) ((le) )) (\lambda m : (nat) . (((times) ) (n)) (m)) := \lambda n : (nat) . \lambda x : (nat) . \lambda y : (nat) . \lambda lexy : (((le) ) (x)) (y). (((((nat_ind) (\lambda j_x_365 : (nat) . (((le) ) ((((times) ) (j_x_365)) (x))) ((((times) ) (j_x_365)) (y)))) ((((sym_eq_times) ((O) )) (\lambda z : ((nat) ) -> (nat) . (((le) ) ((((times) ) ((O) )) (x))) ((z) (y)))) ((((sym_eq_times) ((O) )) (\lambda z : ((nat) ) -> (nat) . (((le) ) ((z) (x))) (((((filter_nat_type) (((nat) ) -> (nat) )) ((times_body) )) ((O) )) (y)))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((times_body) )) (\lambda z : ((nat) ) -> (nat) . (((le) ) ((z) (x))) (((((filter_nat_type) (((nat) ) -> (nat) )) ((times_body) )) ((O) )) (y)))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((times_body) )) (\lambda z : ((nat) ) -> (nat) . (((le) ) ((((times_body) ) ((O) )) (x))) ((z) (y)))) (((sym_eq_times_body_O) (\lambda z : ((nat) ) -> (nat) . (((le) ) ((((times_body) ) ((O) )) (x))) ((z) (y)))) (((sym_eq_times_body_O) (\lambda z : ((nat) ) -> (nat) . (((le) ) ((z) (x))) ((O) ))) ((le_O_n) ((O) ))))))))) (\lambda a : (nat) . \lambda lea : (((le) ) ((((times) ) (a)) (x))) ((((times) ) (a)) (y)). ((((sym_eq_times) (((S) ) (a))) (\lambda z : ((nat) ) -> (nat) . (((le) ) ((((times) ) (((S) ) (a))) (x))) ((z) (y)))) ((((sym_eq_times) (((S) ) (a))) (\lambda z : ((nat) ) -> (nat) . (((le) ) ((z) (x))) (((((filter_nat_type) (((nat) ) -> (nat) )) ((times_body) )) (((S) ) (a))) (y)))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((times_body) )) (a)) (\lambda z : ((nat) ) -> (nat) . (((le) ) ((z) (x))) (((((filter_nat_type) (((nat) ) -> (nat) )) ((times_body) )) (((S) ) (a))) (y)))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((times_body) )) (a)) (\lambda z : ((nat) ) -> (nat) . (((le) ) ((((times_body) ) (((S) ) (a))) (x))) ((z) (y)))) ((((sym_eq_times_body_S) (a)) (\lambda z : ((nat) ) -> (nat) . (((le) ) ((((times_body) ) (((S) ) (a))) (x))) ((z) (y)))) ((((sym_eq_times_body_S) (a)) (\lambda z : ((nat) ) -> (nat) . (((le) ) ((z) (x))) ((((plus) ) (y)) ((((times) ) (a)) (y))))) (((((((le_plus) (x)) (y)) ((((times) ) (a)) (x))) ((((times) ) (a)) (y))) (lexy)) (lea)))))))))) (n)).
definition le_times : \forall (n1:(nat) ). \forall (n2:(nat) ). \forall (m1:(nat) ). \forall (m2:(nat) ). ((((le) ) (n1)) (n2)) -> ((((le) ) (m1)) (m2)) -> (((le) ) ((((times) ) (n1)) (m1))) ((((times) ) (n2)) (m2)) := \lambda n1 : (nat) . \lambda n2 : (nat) . \lambda m1 : (nat) . \lambda m2 : (nat) . \lambda len : (((le) ) (n1)) (n2). (\lambda lem : (((le) ) (m1)) (m2). ((((((transitive_le) ((((times) ) (n1)) (m1))) ((((times) ) (n1)) (m2))) ((((times) ) (n2)) (m2))) (((((monotonic_le_times_r) (n1)) (m1)) (m2)) (lem))) (((((eq_coerc) ((((le) ) ((((times) ) (m2)) (n1))) ((((times) ) (m2)) (n2)))) ((((le) ) ((((times) ) (n1)) (m2))) ((((times) ) (n2)) (m2)))) (((((monotonic_le_times_r) (m2)) (n1)) (n2)) (len))) (((((((rewrite_r) ((nat) )) ((((times) ) (n1)) (m2))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (j__)) ((((times) ) (m2)) (n2)))) ((((le) ) ((((times) ) (n1)) (m2))) ((((times) ) (n2)) (m2))))) (((((((rewrite_r) ((nat) )) ((((times) ) (n2)) (m2))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) ((((times) ) (n1)) (m2))) (j__))) ((((le) ) ((((times) ) (n1)) (m2))) ((((times) ) (n2)) (m2))))) (((refl) (Prop)) ((((le) ) ((((times) ) (n1)) (m2))) ((((times) ) (n2)) (m2))))) ((((times) ) (m2)) (n2))) (((commutative_times) (m2)) (n2)))) ((((times) ) (m2)) (n1))) (((commutative_times) (m2)) (n1)))))).
definition le_plus_minus_m_m : \forall (n:(nat) ). \forall (m:(nat) ). (((le) ) (n)) ((((plus) ) ((((minus) ) (n)) (m))) (m)) := \lambda n : (nat) . ((((nat_ind) (\lambda j_x_365 : (nat) . \forall (m:(nat) ). (((le) ) (j_x_365)) ((((plus) ) ((((minus) ) (j_x_365)) (m))) (m)))) ((((sym_eq_minus) ((O) )) (\lambda y : ((nat) ) -> (nat) . \forall (m:(nat) ). (((le) ) ((O) )) ((((plus) ) ((y) (m))) (m)))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((minus_body) )) (\lambda y : ((nat) ) -> (nat) . \forall (m:(nat) ). (((le) ) ((O) )) ((((plus) ) ((y) (m))) (m)))) (((sym_eq_minus_body_O) (\lambda y : ((nat) ) -> (nat) . \forall (m:(nat) ). (((le) ) ((O) )) ((((plus) ) ((y) (m))) (m)))) (\lambda m : (nat) . ((le_plus_n_r) (m)) ((O) )))))) (\lambda a : (nat) . \lambda Hind : \forall (m:(nat) ). (((le) ) (a)) ((((plus) ) ((((minus) ) (a)) (m))) (m)). (\lambda m : (nat) . ((((match_nat_prop) (\lambda j__ : (nat) . (((le) ) (((S) ) (a))) ((((plus) ) ((((minus) ) (((S) ) (a))) (j__))) (j__)))) ((((sym_eq_minus) (((S) ) (a))) (\lambda y : ((nat) ) -> (nat) . (((le) ) (((S) ) (a))) ((((plus) ) ((y) ((O) ))) ((O) )))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((minus_body) )) (a)) (\lambda y : ((nat) ) -> (nat) . (((le) ) (((S) ) (a))) ((((plus) ) ((y) ((O) ))) ((O) )))) ((((sym_eq_minus_body_S) (a)) (\lambda y : ((nat) ) -> (nat) . (((le) ) (((S) ) (a))) ((((plus) ) ((y) ((O) ))) ((O) )))) ((((((sym_eq_match_nat_type_O) ((nat) )) (((S) ) (a))) (\lambda q : (nat) . (((minus) ) (a)) (q))) (\lambda y : (nat) . (((le) ) (((S) ) (a))) ((((plus) ) (y)) ((O) )))) (((le_plus_n_r) ((O) )) (((S) ) (a)))))))) (\lambda n0 : (nat) . (((sym_eq_minus) (((S) ) (a))) (\lambda y : ((nat) ) -> (nat) . (((le) ) (((S) ) (a))) ((((plus) ) ((y) (((S) ) (n0)))) (((S) ) (n0))))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((minus_body) )) (a)) (\lambda y : ((nat) ) -> (nat) . (((le) ) (((S) ) (a))) ((((plus) ) ((y) (((S) ) (n0)))) (((S) ) (n0))))) ((((sym_eq_minus_body_S) (a)) (\lambda y : ((nat) ) -> (nat) . (((le) ) (((S) ) (a))) ((((plus) ) ((y) (((S) ) (n0)))) (((S) ) (n0))))) (((((((sym_eq_match_nat_type_S) ((nat) )) (((S) ) (a))) (\lambda q : (nat) . (((minus) ) (a)) (q))) (n0)) (\lambda y : (nat) . (((le) ) (((S) ) (a))) ((((plus) ) (y)) (((S) ) (n0))))) (((((eq_coerc) ((((le) ) (((S) ) (a))) (((S) ) ((((plus) ) ((((minus) ) (a)) (n0))) (n0))))) ((((le) ) (((S) ) (a))) ((((plus) ) ((((minus) ) (a)) (n0))) (((S) ) (n0))))) ((((le_S_S) (a)) ((((plus) ) ((((minus) ) (a)) (n0))) (n0))) ((Hind) (n0)))) (((((((rewrite_r) ((nat) )) ((((plus) ) ((((minus) ) (a)) (n0))) (((S) ) (n0)))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (((S) ) (a))) (j__))) ((((le) ) (((S) ) (a))) ((((plus) ) ((((minus) ) (a)) (n0))) (((S) ) (n0)))))) (((refl) (Prop)) ((((le) ) (((S) ) (a))) ((((plus) ) ((((minus) ) (a)) (n0))) (((S) ) (n0)))))) (((S) ) ((((plus) ) ((((minus) ) (a)) (n0))) (n0)))) (((plus_n_Sm) ((((minus) ) (a)) (n0))) (n0))))))))) (m)))) (n).
definition le_plus_to_minus_r : \forall (a:(nat) ). \forall (b:(nat) ). \forall (c:(nat) ). ((((le) ) ((((plus) ) (a)) (b))) (c)) -> (((le) ) (a)) ((((minus) ) (c)) (b)) := \lambda a : (nat) . \lambda b : (nat) . \lambda c : (nat) . \lambda H : (((le) ) ((((plus) ) (a)) (b))) (c). (((((le_plus_to_le_r) (b)) (a)) ((((minus) ) (c)) (b))) ((((((transitive_le) ((((plus) ) (a)) (b))) (c)) ((((plus) ) ((((minus) ) (c)) (b))) (b))) (H)) (((le_plus_minus_m_m) (c)) (b)))).
definition lt_to_le : \forall (x:(nat) ). \forall (y:(nat) ). ((((lt) ) (x)) (y)) -> (((le) ) (x)) (y) := \lambda x : (nat) . \lambda y : (nat) . \lambda auto : (((lt) ) (x)) (y). (((((le_plus_b) (((S) ) ((O) ))) (x)) (y)) (((((eq_coerc) ((((le) ) (((S) ) (x))) (y))) ((((le) ) ((((plus) ) (x)) (((S) ) ((O) )))) (y))) (auto)) (((((((rewrite_r) ((nat) )) ((((plus) ) (x)) (((S) ) ((O) )))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (j__)) (y))) ((((le) ) ((((plus) ) (x)) (((S) ) ((O) )))) (y)))) (((refl) (Prop)) ((((le) ) ((((plus) ) (x)) (((S) ) ((O) )))) (y)))) (((S) ) (x))) (((((((rewrite_r) ((nat) )) ((((plus) ) (x)) ((O) ))) (\lambda j__ : (nat) . (((eq) ((nat) )) (((S) ) (j__))) ((((plus) ) (x)) (((S) ) ((O) ))))) (((plus_n_Sm) (x)) ((O) ))) (x)) ((plus_n_O) (x)))))).
definition transitive_lt : ((transitive) ((nat) )) ((lt) ) := \lambda a : (nat) . \lambda b : (nat) . \lambda c : (nat) . \lambda ltab : (((lt) ) (a)) (b). (\lambda ltbc : (((lt) ) (b)) (c). (((((((le_ind) (((S) ) (b))) (\lambda x_417 : (nat) . (((lt) ) (a)) (x_417))) ((((le_S) (((S) ) (a))) (b)) (ltab))) (\lambda m : (nat) . \lambda j_x_419 : (((le) ) (((S) ) (b))) (m). (\lambda j_x_421 : (((lt) ) (a)) (m). ((((le_S) (((S) ) (a))) (m)) (j_x_421))))) (c)) (ltbc))).
definition lt_to_le_to_lt : \forall (n:(nat) ). \forall (m:(nat) ). \forall (p:(nat) ). ((((lt) ) (n)) (m)) -> ((((le) ) (m)) (p)) -> (((lt) ) (n)) (p) := \lambda n : (nat) . \lambda m : (nat) . \lambda p : (nat) . \lambda H : (((lt) ) (n)) (m). (\lambda H1 : (((le) ) (m)) (p). (((((((le_ind) (m)) (\lambda x_417 : (nat) . (((lt) ) (n)) (x_417))) (H)) (\lambda m0 : (nat) . \lambda j_x_419 : (((le) ) (m)) (m0). (\lambda j_x_421 : (((lt) ) (n)) (m0). ((((((transitive_lt) (n)) (m0)) (((S) ) (m0))) (j_x_421)) (((((eq_coerc) ((((le) ) (((S) ) (m0))) ((((plus) ) ((O) )) (((S) ) (m0))))) ((((le) ) (((S) ) (m0))) (((S) ) (m0)))) (((le_plus_n) ((O) )) (((S) ) (m0)))) (((((((rewrite_l) ((nat) )) (((S) ) (m0))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (((S) ) (m0))) (j__))) ((((le) ) (((S) ) (m0))) (((S) ) (m0))))) (((refl) (Prop)) ((((le) ) (((S) ) (m0))) (((S) ) (m0))))) ((((plus) ) ((O) )) (((S) ) (m0)))) ((plus_O_n) (((S) ) (m0))))))))) (p)) (H1))).
definition le_to_lt_to_lt : \forall (n:(nat) ). \forall (m:(nat) ). \forall (p:(nat) ). ((((le) ) (n)) (m)) -> ((((lt) ) (m)) (p)) -> (((lt) ) (n)) (p) := \lambda n : (nat) . \lambda m : (nat) . \lambda p : (nat) . \lambda H : (((le) ) (n)) (m). (((((((le_ind) (n)) (\lambda x_417 : (nat) . ((((lt) ) (x_417)) (p)) -> (((lt) ) (n)) (p))) (\lambda auto : (((lt) ) (n)) (p). (auto))) (\lambda m0 : (nat) . \lambda j_x_419 : (((le) ) (n)) (m0). (\lambda j_x_421 : ((((lt) ) (m0)) (p)) -> (((lt) ) (n)) (p). (\lambda auto : (((lt) ) (((S) ) (m0))) (p). ((j_x_421) ((((((transitive_lt) (m0)) (((S) ) (m0))) (p)) (((((eq_coerc) ((((le) ) (((S) ) (m0))) ((((plus) ) ((O) )) (((S) ) (m0))))) ((((le) ) (((S) ) (m0))) (((S) ) (m0)))) (((le_plus_n) ((O) )) (((S) ) (m0)))) (((((((rewrite_l) ((nat) )) (((S) ) (m0))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (((S) ) (m0))) (j__))) ((((le) ) (((S) ) (m0))) (((S) ) (m0))))) (((refl) (Prop)) ((((le) ) (((S) ) (m0))) (((S) ) (m0))))) ((((plus) ) ((O) )) (((S) ) (m0)))) ((plus_O_n) (((S) ) (m0)))))) (auto))))))) (m)) (H)).
definition lt_S_to_lt : \forall (n:(nat) ). \forall (m:(nat) ). ((((lt) ) (((S) ) (n))) (m)) -> (((lt) ) (n)) (m) := \lambda n : (nat) . \lambda m : (nat) . \lambda auto : (((lt) ) (((S) ) (n))) (m). ((((((transitive_lt) (n)) (((S) ) (n))) (m)) (((((eq_coerc) ((((le) ) (((S) ) (n))) ((((plus) ) ((O) )) (((S) ) (n))))) ((((le) ) (((S) ) (n))) (((S) ) (n)))) (((le_plus_n) ((O) )) (((S) ) (n)))) (((((((rewrite_l) ((nat) )) (((S) ) (n))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (((S) ) (n))) (j__))) ((((le) ) (((S) ) (n))) (((S) ) (n))))) (((refl) (Prop)) ((((le) ) (((S) ) (n))) (((S) ) (n))))) ((((plus) ) ((O) )) (((S) ) (n)))) ((plus_O_n) (((S) ) (n)))))) (auto)).
definition ltn_to_ltO : \forall (n:(nat) ). \forall (m:(nat) ). ((((lt) ) (n)) (m)) -> (((lt) ) ((O) )) (m) := \lambda n : (nat) . \lambda m : (nat) . \lambda auto : (((lt) ) (n)) (m). ((((((lt_to_le_to_lt) ((O) )) (((S) ) (n))) (m)) (((((eq_coerc) ((((le) ) (((S) ) ((O) ))) ((((plus) ) (n)) (((S) ) ((O) ))))) ((((le) ) (((S) ) ((O) ))) (((S) ) (n)))) (((le_plus_n) (n)) (((S) ) ((O) )))) (((((((rewrite_l) ((nat) )) (((S) ) (n))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (((S) ) ((O) ))) (j__))) ((((le) ) (((S) ) ((O) ))) (((S) ) (n))))) (((refl) (Prop)) ((((le) ) (((S) ) ((O) ))) (((S) ) (n))))) ((((plus) ) (n)) (((S) ) ((O) )))) (((((((rewrite_r) ((nat) )) ((((plus) ) (n)) ((O) ))) (\lambda j__ : (nat) . (((eq) ((nat) )) (((S) ) (j__))) ((((plus) ) (n)) (((S) ) ((O) ))))) (((plus_n_Sm) (n)) ((O) ))) (n)) ((plus_n_O) (n)))))) (auto)).
definition lt_O_S : \forall (n:(nat) ). (((lt) ) ((O) )) (((S) ) (n)) := \lambda n : (nat) . (((ltn_to_ltO) (n)) (((S) ) (n))) (((((eq_coerc) ((((le) ) (((S) ) (n))) ((((plus) ) ((O) )) (((S) ) (n))))) ((((le) ) (((S) ) (n))) (((S) ) (n)))) (((le_plus_n) ((O) )) (((S) ) (n)))) (((((((rewrite_l) ((nat) )) (((S) ) (n))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (((S) ) (n))) (j__))) ((((le) ) (((S) ) (n))) (((S) ) (n))))) (((refl) (Prop)) ((((le) ) (((S) ) (n))) (((S) ) (n))))) ((((plus) ) ((O) )) (((S) ) (n)))) ((plus_O_n) (((S) ) (n))))).
definition monotonic_lt_plus_r : \forall (n:(nat) ). (((monotonic) ((nat) )) ((lt) )) (\lambda m : (nat) . (((plus) ) (n)) (m)) := \lambda n : (nat) . \lambda x : (nat) . \lambda y : (nat) . \lambda auto : (((lt) ) (x)) (y). (((((eq_coerc) ((((le) ) ((((plus) ) (n)) (((S) ) (x)))) ((((plus) ) (n)) (y)))) ((((le) ) (((S) ) ((((plus) ) (n)) (x)))) ((((plus) ) (n)) (y)))) (((((monotonic_le_plus_r) (n)) (((S) ) (x))) (y)) (auto))) (((((((rewrite_r) ((nat) )) ((((plus) ) (n)) (((S) ) (x)))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) ((((plus) ) (n)) (((S) ) (x)))) ((((plus) ) (n)) (y)))) ((((le) ) (j__)) ((((plus) ) (n)) (y))))) (((refl) (Prop)) ((((le) ) ((((plus) ) (n)) (((S) ) (x)))) ((((plus) ) (n)) (y))))) (((S) ) ((((plus) ) (n)) (x)))) (((plus_n_Sm) (n)) (x)))).
definition monotonic_lt_plus_l : \forall (n:(nat) ). (((monotonic) ((nat) )) ((lt) )) (\lambda m : (nat) . (((plus) ) (m)) (n)) := \lambda n : (nat) . \lambda x : (nat) . \lambda y : (nat) . \lambda auto : (((lt) ) (x)) (y). (((((eq_coerc) ((((le) ) ((((plus) ) (n)) (((S) ) (x)))) ((((plus) ) (n)) (y)))) ((((le) ) (((S) ) ((((plus) ) (x)) (n)))) ((((plus) ) (y)) (n)))) (((((monotonic_le_plus_r) (n)) (((S) ) (x))) (y)) (auto))) (((((((rewrite_r) ((nat) )) ((((plus) ) (n)) (x))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) ((((plus) ) (n)) (((S) ) (x)))) ((((plus) ) (n)) (y)))) ((((le) ) (((S) ) (j__))) ((((plus) ) (y)) (n))))) (((((((rewrite_r) ((nat) )) ((((plus) ) (n)) (((S) ) (x)))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) ((((plus) ) (n)) (((S) ) (x)))) ((((plus) ) (n)) (y)))) ((((le) ) (j__)) ((((plus) ) (y)) (n))))) (((((((rewrite_r) ((nat) )) ((((plus) ) (n)) (y))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) ((((plus) ) (n)) (((S) ) (x)))) ((((plus) ) (n)) (y)))) ((((le) ) ((((plus) ) (n)) (((S) ) (x)))) (j__)))) (((refl) (Prop)) ((((le) ) ((((plus) ) (n)) (((S) ) (x)))) ((((plus) ) (n)) (y))))) ((((plus) ) (y)) (n))) (((commutative_plus) (y)) (n)))) (((S) ) ((((plus) ) (n)) (x)))) (((plus_n_Sm) (n)) (x)))) ((((plus) ) (x)) (n))) (((commutative_plus) (x)) (n)))).
definition monotonic_lt_times_r : \forall (c:(nat) ). ((((lt) ) ((O) )) (c)) -> (((monotonic) ((nat) )) ((lt) )) (\lambda t : (nat) . (((times) ) (c)) (t)) := \lambda c : (nat) . \lambda posc : (((lt) ) ((O) )) (c). (\lambda n : (nat) . \lambda m : (nat) . \lambda ltnm : (((lt) ) (n)) (m). (((((((le_ind) (((S) ) (n))) (\lambda x_417 : (nat) . (((lt) ) ((((times) ) (c)) (n))) ((((times) ) (c)) (x_417)))) (((((eq_coerc) ((((le) ) (((S) ) ((((plus) ) ((O) )) ((((times) ) (c)) (n))))) ((((plus) ) (c)) ((((times) ) (c)) (n))))) ((((le) ) (((S) ) ((((times) ) (c)) (n)))) ((((times) ) (c)) (((S) ) (n))))) (((((monotonic_lt_plus_l) ((((times) ) (c)) (n))) ((O) )) (c)) (posc))) (((((((rewrite_r) ((nat) )) ((((plus) ) ((O) )) (((S) ) ((((times) ) (c)) (n))))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (j__)) ((((plus) ) (c)) ((((times) ) (c)) (n))))) ((((le) ) (((S) ) ((((times) ) (c)) (n)))) ((((times) ) (c)) (((S) ) (n)))))) (((((((rewrite_l) ((nat) )) ((((plus) ) (c)) ((((times) ) (c)) (n)))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) ((((plus) ) ((O) )) (((S) ) ((((times) ) (c)) (n))))) ((((plus) ) (c)) ((((times) ) (c)) (n))))) ((((le) ) (((S) ) ((((times) ) (c)) (n)))) (j__)))) (((((((rewrite_l) ((nat) )) (((S) ) ((((times) ) (c)) (n)))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (j__)) ((((plus) ) (c)) ((((times) ) (c)) (n))))) ((((le) ) (((S) ) ((((times) ) (c)) (n)))) ((((plus) ) (c)) ((((times) ) (c)) (n)))))) (((refl) (Prop)) ((((le) ) (((S) ) ((((times) ) (c)) (n)))) ((((plus) ) (c)) ((((times) ) (c)) (n)))))) ((((plus) ) ((O) )) (((S) ) ((((times) ) (c)) (n))))) ((plus_O_n) (((S) ) ((((times) ) (c)) (n)))))) ((((times) ) (c)) (((S) ) (n)))) (((times_n_Sm) (c)) (n)))) (((S) ) ((((plus) ) ((O) )) ((((times) ) (c)) (n))))) (((plus_n_Sm) ((O) )) ((((times) ) (c)) (n)))))) (\lambda a : (nat) . \lambda j__ : (((le) ) (((S) ) (n))) (a). (\lambda lt1 : (((le) ) (((S) ) ((((times) ) (c)) (n)))) ((((times) ) (c)) (a)). ((((((transitive_le) (((S) ) ((((times) ) (c)) (n)))) ((((times) ) (c)) (a))) ((((times) ) (c)) (((S) ) (a)))) (lt1)) (((((eq_coerc) ((((le) ) ((((times) ) (c)) (a))) ((((plus) ) ((((times) ) (c)) (a))) (c)))) ((((le) ) ((((times) ) (c)) (a))) ((((times) ) (c)) (((S) ) (a))))) (((le_plus_n_r) (c)) ((((times) ) (c)) (a)))) (((((((rewrite_l) ((nat) )) ((((plus) ) (c)) ((((times) ) (c)) (a)))) (\lambda j__1 : (nat) . (((eq) (Prop)) ((((le) ) ((((times) ) (c)) (a))) ((((plus) ) ((((times) ) (c)) (a))) (c)))) ((((le) ) ((((times) ) (c)) (a))) (j__1)))) (((((((rewrite_r) ((nat) )) ((((plus) ) (c)) ((((times) ) (c)) (a)))) (\lambda j__1 : (nat) . (((eq) (Prop)) ((((le) ) ((((times) ) (c)) (a))) (j__1))) ((((le) ) ((((times) ) (c)) (a))) ((((plus) ) (c)) ((((times) ) (c)) (a)))))) (((refl) (Prop)) ((((le) ) ((((times) ) (c)) (a))) ((((plus) ) (c)) ((((times) ) (c)) (a)))))) ((((plus) ) ((((times) ) (c)) (a))) (c))) (((commutative_plus) ((((times) ) (c)) (a))) (c)))) ((((times) ) (c)) (((S) ) (a)))) (((times_n_Sm) (c)) (a)))))))) (m)) (ltnm))).
definition monotonic_lt_times_l : \forall (c:(nat) ). ((((lt) ) ((O) )) (c)) -> (((monotonic) ((nat) )) ((lt) )) (\lambda t : (nat) . (((times) ) (t)) (c)) := \lambda c : (nat) . \lambda auto : (((lt) ) ((O) )) (c). (\lambda x : (nat) . \lambda y : (nat) . \lambda auto' : (((lt) ) (x)) (y). (((((eq_coerc) ((((le) ) (((S) ) ((((times) ) (c)) (x)))) ((((times) ) (c)) (y)))) ((((le) ) (((S) ) ((((times) ) (x)) (c)))) ((((times) ) (y)) (c)))) ((((((monotonic_lt_times_r) (c)) (auto)) (x)) (y)) (auto'))) (((((((rewrite_r) ((nat) )) ((((times) ) (c)) (x))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (((S) ) ((((times) ) (c)) (x)))) ((((times) ) (c)) (y)))) ((((le) ) (((S) ) (j__))) ((((times) ) (y)) (c))))) (((((((rewrite_r) ((nat) )) ((((times) ) (c)) (y))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (((S) ) ((((times) ) (c)) (x)))) ((((times) ) (c)) (y)))) ((((le) ) (((S) ) ((((times) ) (c)) (x)))) (j__)))) (((refl) (Prop)) ((((le) ) (((S) ) ((((times) ) (c)) (x)))) ((((times) ) (c)) (y))))) ((((times) ) (y)) (c))) (((commutative_times) (y)) (c)))) ((((times) ) (x)) (c))) (((commutative_times) (x)) (c))))).
definition lt_to_le_to_lt_times : \forall (n:(nat) ). \forall (m:(nat) ). \forall (p:(nat) ). \forall (q:(nat) ). ((((lt) ) (n)) (m)) -> ((((le) ) (p)) (q)) -> ((((lt) ) ((O) )) (q)) -> (((lt) ) ((((times) ) (n)) (p))) ((((times) ) (m)) (q)) := \lambda n : (nat) . \lambda m : (nat) . \lambda p : (nat) . \lambda q : (nat) . \lambda ltnm : (((lt) ) (n)) (m). (\lambda lepq : (((le) ) (p)) (q). (\lambda posq : (((lt) ) ((O) )) (q). ((((((le_to_lt_to_lt) ((((times) ) (n)) (p))) ((((times) ) (n)) (q))) ((((times) ) (m)) (q))) (((((monotonic_le_times_r) (n)) (p)) (q)) (lepq))) ((((((monotonic_lt_times_l) (q)) (posq)) (n)) (m)) (ltnm))))).
definition lt_times : \forall (n:(nat) ). \forall (m:(nat) ). \forall (p:(nat) ). \forall (q:(nat) ). ((((lt) ) (n)) (m)) -> ((((lt) ) (p)) (q)) -> (((lt) ) ((((times) ) (n)) (p))) ((((times) ) (m)) (q)) := \lambda n : (nat) . \lambda m : (nat) . \lambda p : (nat) . \lambda q : (nat) . \lambda ltnm : (((lt) ) (n)) (m). (\lambda ltpq : (((lt) ) (p)) (q). ((((((((lt_to_le_to_lt_times) (n)) (m)) (p)) (q)) (ltnm)) ((((lt_to_le) (p)) (q)) (ltpq))) ((((ltn_to_ltO) (p)) (q)) (ltpq)))).
definition lt_plus_to_minus_r : \forall (a:(nat) ). \forall (b:(nat) ). \forall (c:(nat) ). ((((lt) ) ((((plus) ) (a)) (b))) (c)) -> (((lt) ) (a)) ((((minus) ) (c)) (b)) := \lambda a : (nat) . \lambda b : (nat) . \lambda c : (nat) . \lambda H : (((lt) ) ((((plus) ) (a)) (b))) (c). (((((le_plus_to_minus_r) (((S) ) (a))) (b)) (c)) ((((sym_eq_plus) (((S) ) (a))) (\lambda y : ((nat) ) -> (nat) . (((le) ) ((y) (b))) (c))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((plus_body) )) (a)) (\lambda y : ((nat) ) -> (nat) . (((le) ) ((y) (b))) (c))) ((((sym_eq_plus_body_S) (a)) (\lambda y : ((nat) ) -> (nat) . (((le) ) ((y) (b))) (c))) (H))))).
definition lt_plus_Sn_r : \forall (a:(nat) ). \forall (x:(nat) ). \forall (n:(nat) ). (((lt) ) (a)) ((((plus) ) ((((plus) ) (a)) (x))) (((S) ) (n))) := \lambda a : (nat) . \lambda x : (nat) . \lambda n : (nat) . ((((eq_coerc) ((((le) ) (((S) ) (a))) (((S) ) ((((plus) ) ((((plus) ) (a)) (x))) (n))))) ((((le) ) (((S) ) (a))) ((((plus) ) ((((plus) ) (a)) (x))) (((S) ) (n))))) ((((le_S_S) (a)) ((((plus) ) ((((plus) ) (a)) (x))) (n))) (((((eq_coerc) ((((le) ) (a)) ((((plus) ) (a)) ((((plus) ) (x)) (n))))) ((((le) ) (a)) ((((plus) ) ((((plus) ) (a)) (x))) (n)))) (((le_plus_n_r) ((((plus) ) (x)) (n))) (a))) (((((((rewrite_r) ((nat) )) ((((plus) ) (n)) ((((plus) ) (a)) (x)))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (a)) ((((plus) ) (a)) ((((plus) ) (x)) (n))))) ((((le) ) (a)) (j__)))) (((((((rewrite_r) ((nat) )) ((((plus) ) (a)) ((((plus) ) (n)) (x)))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (a)) ((((plus) ) (a)) ((((plus) ) (x)) (n))))) ((((le) ) (a)) (j__)))) (((((((rewrite_r) ((nat) )) ((((plus) ) (x)) (n))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (a)) ((((plus) ) (a)) ((((plus) ) (x)) (n))))) ((((le) ) (a)) ((((plus) ) (a)) (j__))))) (((refl) (Prop)) ((((le) ) (a)) ((((plus) ) (a)) ((((plus) ) (x)) (n)))))) ((((plus) ) (n)) (x))) (((commutative_plus) (n)) (x)))) ((((plus) ) (n)) ((((plus) ) (a)) (x)))) (((((((rewrite_l) ((nat) )) ((((plus) ) ((((plus) ) (a)) (n))) (x))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((((plus) ) (n)) ((((plus) ) (a)) (x)))) (j__))) ((((assoc_plus1) (x)) (a)) (n))) ((((plus) ) (a)) ((((plus) ) (n)) (x)))) ((((associative_plus) (a)) (n)) (x))))) ((((plus) ) ((((plus) ) (a)) (x))) (n))) (((commutative_plus) ((((plus) ) (a)) (x))) (n)))))) (((((((rewrite_r) ((nat) )) ((((plus) ) (a)) ((((plus) ) (x)) (((S) ) (n))))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (((S) ) (a))) (((S) ) ((((plus) ) ((((plus) ) (a)) (x))) (n))))) ((((le) ) (((S) ) (a))) (j__)))) (((((((rewrite_r) ((nat) )) ((((plus) ) ((((plus) ) (a)) (x))) (((S) ) (n)))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (((S) ) (a))) (j__))) ((((le) ) (((S) ) (a))) ((((plus) ) (a)) ((((plus) ) (x)) (((S) ) (n))))))) (((((((rewrite_r) ((nat) )) ((((plus) ) (a)) ((((plus) ) (x)) (((S) ) (n))))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (((S) ) (a))) (j__))) ((((le) ) (((S) ) (a))) ((((plus) ) (a)) ((((plus) ) (x)) (((S) ) (n))))))) (((refl) (Prop)) ((((le) ) (((S) ) (a))) ((((plus) ) (a)) ((((plus) ) (x)) (((S) ) (n))))))) ((((plus) ) ((((plus) ) (a)) (x))) (((S) ) (n)))) ((((associative_plus) (a)) (x)) (((S) ) (n))))) (((S) ) ((((plus) ) ((((plus) ) (a)) (x))) (n)))) (((plus_n_Sm) ((((plus) ) (a)) (x))) (n)))) ((((plus) ) ((((plus) ) (a)) (x))) (((S) ) (n)))) ((((associative_plus) (a)) (x)) (((S) ) (n)))).
definition not_le_Sn_O : \forall (n:(nat) ). ((Not) ) ((((le) ) (((S) ) (n))) ((O) )) := \lambda n : (nat) . ((nmk) ((((le) ) (((S) ) (n))) ((O) ))) (\lambda Hlen0 : (((le) ) (((S) ) (n))) ((O) ). ((((((eq_match_nat_type_O) (Prop)) ((False) )) (\lambda p : (nat) . (True) )) (\lambda y : Prop. y)) ((((lt_to_not_zero) (n)) ((O) )) (Hlen0)))).
definition not_le_to_not_le_S_S : \forall (n:(nat) ). \forall (m:(nat) ). (((Not) ) ((((le) ) (n)) (m))) -> ((Not) ) ((((le) ) (((S) ) (n))) (((S) ) (m))) := \lambda n : (nat) . \lambda m : (nat) . \lambda auto : ((Not) ) ((((le) ) (n)) (m)). (((((not_to_not) ((((le) ) (((S) ) (n))) (((S) ) (m)))) ((((le) ) (n)) (m))) (\lambda auto' : (((le) ) (((S) ) (n))) (((S) ) (m)). (((((eq_coerc) ((((le) ) (((pred) ) (((S) ) (n)))) (((pred) ) (((S) ) (m))))) ((((le) ) (n)) (m))) ((((monotonic_pred) (((S) ) (n))) (((S) ) (m))) (auto'))) (((((((rewrite_l) ((nat) )) (n)) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (j__)) (((pred) ) (((S) ) (m))))) ((((le) ) (n)) (m)))) (((((((rewrite_l) ((nat) )) (m)) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (n)) (j__))) ((((le) ) (n)) (m)))) (((refl) (Prop)) ((((le) ) (n)) (m)))) (((pred) ) (((S) ) (m)))) ((pred_Sn) (m)))) (((pred) ) (((S) ) (n)))) ((pred_Sn) (n)))))) (auto)).
definition not_le_S_S_to_not_le : \forall (n:(nat) ). \forall (m:(nat) ). (((Not) ) ((((le) ) (((S) ) (n))) (((S) ) (m)))) -> ((Not) ) ((((le) ) (n)) (m)) := \lambda n : (nat) . \lambda m : (nat) . \lambda auto : ((Not) ) ((((le) ) (((S) ) (n))) (((S) ) (m))). (((((not_to_not) ((((le) ) (n)) (m))) ((((le) ) (((S) ) (n))) (((S) ) (m)))) (\lambda auto' : (((le) ) (n)) (m). ((((le_S_S) (n)) (m)) (auto')))) (auto)).
definition not_le_Sn_n : \forall (n:(nat) ). ((Not) ) ((((le) ) (((S) ) (n))) (n)) := \lambda n : (nat) . ((((nat_ind) (\lambda j_x_365 : (nat) . ((Not) ) ((((le) ) (((S) ) (j_x_365))) (j_x_365)))) ((not_le_Sn_O) ((O) ))) (\lambda x_366 : (nat) . \lambda j_x_368 : ((Not) ) ((((le) ) (((S) ) (x_366))) (x_366)). ((((not_le_to_not_le_S_S) (((S) ) (x_366))) (x_366)) (j_x_368)))) (n).
definition lt_to_not_le : \forall (n:(nat) ). \forall (m:(nat) ). ((((lt) ) (n)) (m)) -> ((Not) ) ((((le) ) (m)) (n)) := \lambda n : (nat) . \lambda m : (nat) . \lambda Hltnm : (((lt) ) (n)) (m). (((((((le_ind) (((S) ) (n))) (\lambda x_417 : (nat) . ((Not) ) ((((le) ) (x_417)) (n)))) ((not_le_Sn_n) (n))) (\lambda m0 : (nat) . \lambda j_x_419 : (((le) ) (((S) ) (n))) (m0). (\lambda j_x_421 : ((Not) ) ((((le) ) (m0)) (n)). (((((not_to_not) ((((le) ) (((S) ) (m0))) (n))) ((((le) ) (m0)) (n))) (\lambda auto : (((le) ) (((S) ) (m0))) (n). ((((lt_to_le) (m0)) (n)) (auto)))) (j_x_421))))) (m)) (Hltnm)).
definition not_le_to_lt : \forall (n:(nat) ). \forall (m:(nat) ). (((Not) ) ((((le) ) (n)) (m))) -> (((lt) ) (m)) (n) := ((((nat_elim2) (\lambda j__ : (nat) . \lambda j_0 : (nat) . (((Not) ) ((((le) ) (j__)) (j_0))) -> (((lt) ) (j_0)) (j__))) (\lambda n : (nat) . \lambda abs : ((Not) ) ((((le) ) ((O) )) (n)). (((falsity) ((((lt) ) (n)) ((O) ))) ((((absurd) ((((le) ) ((O) )) (n))) (((((eq_coerc) ((((le) ) ((O) )) ((((plus) ) (n)) ((O) )))) ((((le) ) ((O) )) (n))) (((le_plus_n) (n)) ((O) ))) (((((((rewrite_l) ((nat) )) (n)) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) ((O) )) (j__))) ((((le) ) ((O) )) (n)))) (((refl) (Prop)) ((((le) ) ((O) )) (n)))) ((((plus) ) (n)) ((O) ))) ((plus_n_O) (n))))) (abs))))) (\lambda n : (nat) . \lambda auto : ((Not) ) ((((le) ) (((S) ) (n))) ((O) )). ((lt_O_S) (n)))) (\lambda n : (nat) . \lambda m : (nat) . \lambda Hind : (((Not) ) ((((le) ) (n)) (m))) -> (((lt) ) (m)) (n). (\lambda HnotleSS : ((Not) ) ((((le) ) (((S) ) (n))) (((S) ) (m))). ((((le_S_S) (((S) ) (m))) (n)) ((Hind) ((((not_le_S_S_to_not_le) (n)) (m)) (HnotleSS)))))).
definition not_lt_to_le : \forall (n:(nat) ). \forall (m:(nat) ). (((Not) ) ((((lt) ) (n)) (m))) -> (((le) ) (m)) (n) := \lambda n : (nat) . \lambda m : (nat) . \lambda H : ((Not) ) ((((lt) ) (n)) (m)). ((((le_S_S_to_le) (m)) (n)) ((((not_le_to_lt) (((S) ) (n))) (m)) (((((not_to_not) ((((le) ) (((S) ) (n))) (m))) ((((lt) ) (n)) (m))) (\lambda auto : (((le) ) (((S) ) (n))) (m). (auto))) (H)))).
definition le_to_not_lt : \forall (n:(nat) ). \forall (m:(nat) ). ((((le) ) (n)) (m)) -> ((Not) ) ((((lt) ) (m)) (n)) := \lambda n : (nat) . \lambda m : (nat) . \lambda H : (((le) ) (n)) (m). ((((lt_to_not_le) (n)) (((S) ) (m))) ((((((le_to_lt_to_lt) (n)) (m)) (((S) ) (m))) (H)) (((((eq_coerc) ((((le) ) (((S) ) (m))) ((((plus) ) ((O) )) (((S) ) (m))))) ((((le) ) (((S) ) (m))) (((S) ) (m)))) (((le_plus_n) ((O) )) (((S) ) (m)))) (((((((rewrite_l) ((nat) )) (((S) ) (m))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (((S) ) (m))) (j__))) ((((le) ) (((S) ) (m))) (((S) ) (m))))) (((refl) (Prop)) ((((le) ) (((S) ) (m))) (((S) ) (m))))) ((((plus) ) ((O) )) (((S) ) (m)))) ((plus_O_n) (((S) ) (m))))))).
definition decidable_le : \forall (n:(nat) ). \forall (m:(nat) ). ((decidable) ) ((((le) ) (n)) (m)) := ((((nat_elim2) (\lambda j__ : (nat) . \lambda j_0 : (nat) . ((decidable) ) ((((le) ) (j__)) (j_0)))) (\lambda n : (nat) . (((or_introl) ((((le) ) ((O) )) (n))) (((Not) ) ((((le) ) ((O) )) (n)))) ((le_O_n) (n)))) (\lambda n : (nat) . (((or_intror) ((((le) ) (((S) ) (n))) ((O) ))) (((Not) ) ((((le) ) (((S) ) (n))) ((O) )))) ((not_le_Sn_O) (n)))) (\lambda n : (nat) . \lambda m : (nat) . \lambda j_clearme : ((decidable) ) ((((le) ) (n)) (m)). (((((((match_Or_prop) ((((le) ) (n)) (m))) (((Not) ) ((((le) ) (n)) (m)))) (((decidable) ) ((((le) ) (((S) ) (n))) (((S) ) (m))))) (\lambda auto : (((le) ) (n)) (m). ((((or_introl) ((((le) ) (((S) ) (n))) (((S) ) (m)))) (((Not) ) ((((le) ) (((S) ) (n))) (((S) ) (m))))) ((((le_S_S) (n)) (m)) (auto))))) (\lambda auto : ((Not) ) ((((le) ) (n)) (m)). ((((or_intror) ((((le) ) (((S) ) (n))) (((S) ) (m)))) (((Not) ) ((((le) ) (((S) ) (n))) (((S) ) (m))))) ((((not_le_to_not_le_S_S) (n)) (m)) (auto))))) (j_clearme))).
definition decidable_lt : \forall (n:(nat) ). \forall (m:(nat) ). ((decidable) ) ((((lt) ) (n)) (m)) := \lambda n : (nat) . \lambda m : (nat) . ((decidable_le) (((S) ) (n))) (m).
definition le_to_or_lt_eq : \forall (n:(nat) ). \forall (m:(nat) ). ((((le) ) (n)) (m)) -> (((Or) ) ((((lt) ) (n)) (m))) ((((eq) ((nat) )) (n)) (m)) := \lambda n : (nat) . \lambda m : (nat) . \lambda lenm : (((le) ) (n)) (m). (((((((le_ind) (n)) (\lambda x_417 : (nat) . (((Or) ) ((((lt) ) (n)) (x_417))) ((((eq) ((nat) )) (n)) (x_417)))) ((((RC_reflexive) ((nat) )) ((lt) )) (n))) (\lambda m0 : (nat) . \lambda j_x_419 : (((le) ) (n)) (m0). (\lambda j_x_421 : (((Or) ) ((((lt) ) (n)) (m0))) ((((eq) ((nat) )) (n)) (m0)). ((((or_introl) ((((lt) ) (n)) (((S) ) (m0)))) ((((eq) ((nat) )) (n)) (((S) ) (m0)))) ((((((le_to_lt_to_lt) (n)) (m0)) (((S) ) (m0))) (j_x_419)) (((((eq_coerc) ((((le) ) (((S) ) (m0))) ((((plus) ) ((O) )) (((S) ) (m0))))) ((((le) ) (((S) ) (m0))) (((S) ) (m0)))) (((le_plus_n) ((O) )) (((S) ) (m0)))) (((((((rewrite_l) ((nat) )) (((S) ) (m0))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (((S) ) (m0))) (j__))) ((((le) ) (((S) ) (m0))) (((S) ) (m0))))) (((refl) (Prop)) ((((le) ) (((S) ) (m0))) (((S) ) (m0))))) ((((plus) ) ((O) )) (((S) ) (m0)))) ((plus_O_n) (((S) ) (m0)))))))))) (m)) (lenm)).
definition lt_O_n_elim : \forall (n:(nat) ). ((((lt) ) ((O) )) (n)) -> \forall (P:((nat) ) -> Prop). (\forall (m:(nat) ). (P) (((S) ) (m))) -> (P) (n) := \lambda n : (nat) . ((((nat_ind) (\lambda j_x_365 : (nat) . ((((lt) ) ((O) )) (j_x_365)) -> \forall (P:((nat) ) -> Prop). (\forall (m:(nat) ). (P) (((S) ) (m))) -> (P) (j_x_365))) (\lambda abs : (((lt) ) ((O) )) ((O) ). (((falsity) (\forall (P:((nat) ) -> Prop). (\forall (m:(nat) ). (P) (((S) ) (m))) -> (P) ((O) ))) ((((absurd) ((((le) ) (((S) ) ((O) ))) ((O) ))) (abs)) ((not_le_Sn_O) ((O) )))))) (\lambda x_366 : (nat) . \lambda j_x_368 : ((((lt) ) ((O) )) (x_366)) -> \forall (P:((nat) ) -> Prop). (\forall (m:(nat) ). (P) (((S) ) (m))) -> (P) (x_366). (\lambda auto : (((lt) ) ((O) )) (((S) ) (x_366)). (\lambda P : ((nat) ) -> Prop. \lambda auto' : \forall (m:(nat) ). (P) (((S) ) (m)). ((auto') (x_366)))))) (n).
definition le_n_O_elim : \forall (n:(nat) ). ((((le) ) (n)) ((O) )) -> \forall (P:((nat) ) -> Prop). ((P) ((O) )) -> (P) (n) := \lambda n : (nat) . ((((match_nat_prop) (\lambda j__ : (nat) . ((((le) ) (j__)) ((O) )) -> \forall (P:((nat) ) -> Prop). ((P) ((O) )) -> (P) (j__))) (\lambda auto : (((le) ) ((O) )) ((O) ). (\lambda P : ((nat) ) -> Prop. \lambda auto' : (P) ((O) ). (auto')))) (\lambda a : (nat) . \lambda abs : (((le) ) (((S) ) (a))) ((O) ). (((falsity) (\forall (P:((nat) ) -> Prop). ((P) ((O) )) -> (P) (((S) ) (a)))) ((((absurd) ((((le) ) (((S) ) (a))) ((O) ))) (abs)) ((not_le_Sn_O) (a)))))) (n).
definition lt_to_not_eq : \forall (n:(nat) ). \forall (m:(nat) ). ((((lt) ) (n)) (m)) -> ((Not) ) ((((eq) ((nat) )) (n)) (m)) := \lambda n : (nat) . \lambda m : (nat) . \lambda H : (((lt) ) (n)) (m). (((((not_to_not) ((((eq) ((nat) )) (n)) (m))) ((False) )) (\lambda auto : (((eq) ((nat) )) (n)) (m). ((((absurd) ((((le) ) (((S) ) (n))) (n))) (((((eq_coerc) ((((le) ) (((S) ) (n))) (m))) ((((le) ) (((S) ) (n))) (n))) (H)) (((((((rewrite_l) ((nat) )) (n)) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (((S) ) (n))) (j__))) ((((le) ) (((S) ) (n))) (n)))) (((refl) (Prop)) ((((le) ) (((S) ) (n))) (n)))) (m)) (auto)))) ((not_le_Sn_n) (n))))) (((nmk) ((False) )) (\lambda auto : (False) . (auto)))).
definition le_n_O_to_eq : \forall (n:(nat) ). ((((le) ) (n)) ((O) )) -> (((eq) ((nat) )) ((O) )) (n) := \lambda n : (nat) . ((((match_nat_prop) (\lambda j__ : (nat) . ((((le) ) (j__)) ((O) )) -> (((eq) ((nat) )) ((O) )) (j__))) (\lambda auto : (((le) ) ((O) )) ((O) ). (((refl) ((nat) )) ((O) )))) (\lambda a : (nat) . \lambda abs : (((le) ) (((S) ) (a))) ((O) ). (((falsity) ((((eq) ((nat) )) ((O) )) (((S) ) (a)))) ((((absurd) ((((le) ) (((S) ) (a))) ((O) ))) (abs)) ((not_le_Sn_O) (a)))))) (n).
definition le_to_le_to_eq : \forall (n:(nat) ). \forall (m:(nat) ). ((((le) ) (n)) (m)) -> ((((le) ) (m)) (n)) -> (((eq) ((nat) )) (n)) (m) := ((((nat_elim2) (\lambda j__ : (nat) . \lambda j_0 : (nat) . ((((le) ) (j__)) (j_0)) -> ((((le) ) (j_0)) (j__)) -> (((eq) ((nat) )) (j__)) (j_0))) (\lambda n : (nat) . \lambda auto : (((le) ) ((O) )) (n). (\lambda auto' : (((le) ) (n)) ((O) ). (((((sym_eq) ((nat) )) (n)) ((O) )) (((((sym_eq) ((nat) )) ((O) )) (n)) (((((eq_coerc) ((((eq) ((nat) )) ((O) )) (n))) ((((eq) ((nat) )) ((O) )) (n))) (((le_n_O_to_eq) (n)) (auto'))) (((refl) (Prop)) ((((eq) ((nat) )) ((O) )) (n))))))))) (\lambda n : (nat) . \lambda auto : (((le) ) (((S) ) (n))) ((O) ). (\lambda auto' : (((le) ) ((O) )) (((S) ) (n)). (((((sym_eq) ((nat) )) ((O) )) (((S) ) (n))) (((le_n_O_to_eq) (((S) ) (n))) (auto)))))) (\lambda n : (nat) . \lambda m : (nat) . \lambda auto : ((((le) ) (n)) (m)) -> ((((le) ) (m)) (n)) -> (((eq) ((nat) )) (n)) (m). (\lambda auto' : (((le) ) (((S) ) (n))) (((S) ) (m)). (\lambda auto'' : (((le) ) (((S) ) (m))) (((S) ) (n)). (((((((eq_f) ((nat) )) ((nat) )) ((S) )) (n)) (m)) (((auto) (((((eq_coerc) ((((le) ) (((pred) ) (((S) ) (n)))) (((pred) ) (((S) ) (m))))) ((((le) ) (n)) (m))) ((((monotonic_pred) (((S) ) (n))) (((S) ) (m))) (auto'))) (((((((rewrite_l) ((nat) )) (n)) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (j__)) (((pred) ) (((S) ) (m))))) ((((le) ) (n)) (m)))) (((((((rewrite_l) ((nat) )) (m)) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (n)) (j__))) ((((le) ) (n)) (m)))) (((refl) (Prop)) ((((le) ) (n)) (m)))) (((pred) ) (((S) ) (m)))) ((pred_Sn) (m)))) (((pred) ) (((S) ) (n)))) ((pred_Sn) (n))))) (((((eq_coerc) ((((le) ) (((pred) ) (((S) ) (m)))) (((pred) ) (((S) ) (n))))) ((((le) ) (m)) (n))) ((((monotonic_pred) (((S) ) (m))) (((S) ) (n))) (auto''))) (((((((rewrite_l) ((nat) )) (m)) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (j__)) (((pred) ) (((S) ) (n))))) ((((le) ) (m)) (n)))) (((((((rewrite_l) ((nat) )) (n)) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (m)) (j__))) ((((le) ) (m)) (n)))) (((refl) (Prop)) ((((le) ) (m)) (n)))) (((pred) ) (((S) ) (n)))) ((pred_Sn) (n)))) (((pred) ) (((S) ) (m)))) ((pred_Sn) (m))))))))).
definition plus_minus : \forall (m:(nat) ). \forall (n:(nat) ). \forall (p:(nat) ). ((((le) ) (m)) (n)) -> (((eq) ((nat) )) ((((plus) ) ((((minus) ) (n)) (m))) (p))) ((((minus) ) ((((plus) ) (n)) (p))) (m)) := ((((nat_elim2) (\lambda j__ : (nat) . \lambda j_0 : (nat) . \forall (p:(nat) ). ((((le) ) (j__)) (j_0)) -> (((eq) ((nat) )) ((((plus) ) ((((minus) ) (j_0)) (j__))) (p))) ((((minus) ) ((((plus) ) (j_0)) (p))) (j__)))) (\lambda n : (nat) . \lambda p : (nat) . \lambda auto : (((le) ) ((O) )) (n). (((((((rewrite_l) ((nat) )) (n)) (\lambda j__ : (nat) . (((eq) ((nat) )) ((((plus) ) (j__)) (p))) ((((minus) ) ((((plus) ) (n)) (p))) ((O) )))) (((((((rewrite_l) ((nat) )) ((((plus) ) (n)) (p))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((((plus) ) (n)) (p))) (j__))) (((refl) ((nat) )) ((((plus) ) (n)) (p)))) ((((minus) ) ((((plus) ) (n)) (p))) ((O) ))) ((minus_n_O) ((((plus) ) (n)) (p))))) ((((minus) ) (n)) ((O) ))) ((minus_n_O) (n))))) (\lambda n : (nat) . \lambda p : (nat) . \lambda abs : (((le) ) (((S) ) (n))) ((O) ). (((falsity) ((((eq) ((nat) )) ((((plus) ) ((((minus) ) ((O) )) (((S) ) (n)))) (p))) ((((minus) ) ((((plus) ) ((O) )) (p))) (((S) ) (n))))) ((((absurd) ((((le) ) (((S) ) (n))) ((O) ))) (abs)) ((not_le_Sn_O) (n)))))) (\lambda n : (nat) . \lambda m : (nat) . (((sym_eq_minus) (((S) ) (m))) (\lambda y : ((nat) ) -> (nat) . (\forall (p:(nat) ). ((((le) ) (n)) (m)) -> (((eq) ((nat) )) ((((plus) ) ((((minus) ) (m)) (n))) (p))) ((((minus) ) ((((plus) ) (m)) (p))) (n))) -> \forall (p:(nat) ). ((((le) ) (((S) ) (n))) (((S) ) (m))) -> (((eq) ((nat) )) ((((plus) ) ((y) (((S) ) (n)))) (p))) ((((minus) ) ((((plus) ) (((S) ) (m))) (p))) (((S) ) (n))))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((minus_body) )) (m)) (\lambda y : ((nat) ) -> (nat) . (\forall (p:(nat) ). ((((le) ) (n)) (m)) -> (((eq) ((nat) )) ((((plus) ) ((((minus) ) (m)) (n))) (p))) ((((minus) ) ((((plus) ) (m)) (p))) (n))) -> \forall (p:(nat) ). ((((le) ) (((S) ) (n))) (((S) ) (m))) -> (((eq) ((nat) )) ((((plus) ) ((y) (((S) ) (n)))) (p))) ((((minus) ) ((((plus) ) (((S) ) (m))) (p))) (((S) ) (n))))) ((((sym_eq_minus_body_S) (m)) (\lambda y : ((nat) ) -> (nat) . (\forall (p:(nat) ). ((((le) ) (n)) (m)) -> (((eq) ((nat) )) ((((plus) ) ((((minus) ) (m)) (n))) (p))) ((((minus) ) ((((plus) ) (m)) (p))) (n))) -> \forall (p:(nat) ). ((((le) ) (((S) ) (n))) (((S) ) (m))) -> (((eq) ((nat) )) ((((plus) ) ((y) (((S) ) (n)))) (p))) ((((minus) ) ((((plus) ) (((S) ) (m))) (p))) (((S) ) (n))))) (\lambda auto : \forall (p:(nat) ). ((((le) ) (n)) (m)) -> (((eq) ((nat) )) ((((plus) ) ((((minus) ) (m)) (n))) (p))) ((((minus) ) ((((plus) ) (m)) (p))) (n)). (\lambda p : (nat) . ((((((sym_eq_match_nat_type_S) ((nat) )) (((S) ) (m))) (\lambda q : (nat) . (((minus) ) (m)) (q))) (n)) (\lambda y : (nat) . ((((le) ) (((S) ) (n))) (((S) ) (m))) -> (((eq) ((nat) )) ((((plus) ) (y)) (p))) ((((minus) ) ((((plus) ) (((S) ) (m))) (p))) (((S) ) (n))))) ((((sym_eq_minus) ((((plus) ) (((S) ) (m))) (p))) (\lambda y : ((nat) ) -> (nat) . ((((le) ) (((S) ) (n))) (((S) ) (m))) -> (((eq) ((nat) )) ((((plus) ) ((((minus) ) (m)) (n))) (p))) ((y) (((S) ) (n))))) ((((sym_eq_plus) (((S) ) (m))) (\lambda y : ((nat) ) -> (nat) . ((((le) ) (((S) ) (n))) (((S) ) (m))) -> (((eq) ((nat) )) ((((plus) ) ((((minus) ) (m)) (n))) (p))) (((((filter_nat_type) (((nat) ) -> (nat) )) ((minus_body) )) ((y) (p))) (((S) ) (n))))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((plus_body) )) (m)) (\lambda y : ((nat) ) -> (nat) . ((((le) ) (((S) ) (n))) (((S) ) (m))) -> (((eq) ((nat) )) ((((plus) ) ((((minus) ) (m)) (n))) (p))) (((((filter_nat_type) (((nat) ) -> (nat) )) ((minus_body) )) ((y) (p))) (((S) ) (n))))) ((((sym_eq_plus_body_S) (m)) (\lambda y : ((nat) ) -> (nat) . ((((le) ) (((S) ) (n))) (((S) ) (m))) -> (((eq) ((nat) )) ((((plus) ) ((((minus) ) (m)) (n))) (p))) (((((filter_nat_type) (((nat) ) -> (nat) )) ((minus_body) )) ((y) (p))) (((S) ) (n))))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((minus_body) )) ((((plus) ) (m)) (p))) (\lambda y : ((nat) ) -> (nat) . ((((le) ) (((S) ) (n))) (((S) ) (m))) -> (((eq) ((nat) )) ((((plus) ) ((((minus) ) (m)) (n))) (p))) ((y) (((S) ) (n))))) ((((eq_plus_body_S) (m)) (\lambda y : ((nat) ) -> (nat) . ((((le) ) (((S) ) (n))) (((S) ) (m))) -> (((eq) ((nat) )) ((((plus) ) ((((minus) ) (m)) (n))) (p))) ((((minus_body) ) ((y) (p))) (((S) ) (n))))) ((((((eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((plus_body) )) (m)) (\lambda y : ((nat) ) -> (nat) . ((((le) ) (((S) ) (n))) (((S) ) (m))) -> (((eq) ((nat) )) ((((plus) ) ((((minus) ) (m)) (n))) (p))) ((((minus_body) ) ((y) (p))) (((S) ) (n))))) ((((eq_plus) (((S) ) (m))) (\lambda y : ((nat) ) -> (nat) . ((((le) ) (((S) ) (n))) (((S) ) (m))) -> (((eq) ((nat) )) ((((plus) ) ((((minus) ) (m)) (n))) (p))) ((((minus_body) ) ((y) (p))) (((S) ) (n))))) ((((sym_eq_plus) (((S) ) (m))) (\lambda y : ((nat) ) -> (nat) . ((((le) ) (((S) ) (n))) (((S) ) (m))) -> (((eq) ((nat) )) ((((plus) ) ((((minus) ) (m)) (n))) (p))) ((((minus_body) ) ((y) (p))) (((S) ) (n))))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((plus_body) )) (m)) (\lambda y : ((nat) ) -> (nat) . ((((le) ) (((S) ) (n))) (((S) ) (m))) -> (((eq) ((nat) )) ((((plus) ) ((((minus) ) (m)) (n))) (p))) ((((minus_body) ) ((y) (p))) (((S) ) (n))))) ((((sym_eq_plus_body_S) (m)) (\lambda y : ((nat) ) -> (nat) . ((((le) ) (((S) ) (n))) (((S) ) (m))) -> (((eq) ((nat) )) ((((plus) ) ((((minus) ) (m)) (n))) (p))) ((((minus_body) ) ((y) (p))) (((S) ) (n))))) ((((sym_eq_minus_body_S) ((((plus) ) (m)) (p))) (\lambda y : ((nat) ) -> (nat) . ((((le) ) (((S) ) (n))) (((S) ) (m))) -> (((eq) ((nat) )) ((((plus) ) ((((minus) ) (m)) (n))) (p))) ((y) (((S) ) (n))))) (((((((sym_eq_match_nat_type_S) ((nat) )) (((S) ) ((((plus) ) (m)) (p)))) (\lambda q : (nat) . (((minus) ) ((((plus) ) (m)) (p))) (q))) (n)) (\lambda y : (nat) . ((((le) ) (((S) ) (n))) (((S) ) (m))) -> (((eq) ((nat) )) ((((plus) ) ((((minus) ) (m)) (n))) (p))) (y))) (\lambda auto' : (((le) ) (((S) ) (n))) (((S) ) (m)). (((auto) (p)) (((((eq_coerc) ((((le) ) (((pred) ) (((S) ) (n)))) (((pred) ) (((S) ) (m))))) ((((le) ) (n)) (m))) ((((monotonic_pred) (((S) ) (n))) (((S) ) (m))) (auto'))) (((((((rewrite_l) ((nat) )) (n)) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (j__)) (((pred) ) (((S) ) (m))))) ((((le) ) (n)) (m)))) (((((((rewrite_l) ((nat) )) (m)) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (n)) (j__))) ((((le) ) (n)) (m)))) (((refl) (Prop)) ((((le) ) (n)) (m)))) (((pred) ) (((S) ) (m)))) ((pred_Sn) (m)))) (((pred) ) (((S) ) (n)))) ((pred_Sn) (n)))))))))))))))))))))))).
definition minus_plus_m_m : \forall (n:(nat) ). \forall (m:(nat) ). (((eq) ((nat) )) (n)) ((((minus) ) ((((plus) ) (n)) (m))) (m)) := \lambda n : (nat) . \lambda m : (nat) . ((((eq_coerc) ((((eq) ((nat) )) ((((plus) ) ((((minus) ) (m)) (m))) (n))) ((((minus) ) ((((plus) ) (m)) (n))) (m)))) ((((eq) ((nat) )) (n)) ((((minus) ) ((((plus) ) (n)) (m))) (m)))) (((((plus_minus) (m)) (m)) (n)) ((le_n) (m)))) (((((((rewrite_l) ((nat) )) ((O) )) (\lambda j__ : (nat) . (((eq) (Prop)) ((((eq) ((nat) )) ((((plus) ) (j__)) (n))) ((((minus) ) ((((plus) ) (m)) (n))) (m)))) ((((eq) ((nat) )) (n)) ((((minus) ) ((((plus) ) (n)) (m))) (m))))) (((((((rewrite_l) ((nat) )) (n)) (\lambda j__ : (nat) . (((eq) (Prop)) ((((eq) ((nat) )) (j__)) ((((minus) ) ((((plus) ) (m)) (n))) (m)))) ((((eq) ((nat) )) (n)) ((((minus) ) ((((plus) ) (n)) (m))) (m))))) (((((((rewrite_r) ((nat) )) ((((plus) ) (n)) (m))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((eq) ((nat) )) (n)) ((((minus) ) (j__)) (m)))) ((((eq) ((nat) )) (n)) ((((minus) ) ((((plus) ) (n)) (m))) (m))))) (((refl) (Prop)) ((((eq) ((nat) )) (n)) ((((minus) ) ((((plus) ) (n)) (m))) (m))))) ((((plus) ) (m)) (n))) (((commutative_plus) (m)) (n)))) ((((plus) ) ((O) )) (n))) ((plus_O_n) (n)))) ((((minus) ) (m)) (m))) ((minus_n_n) (m))).
definition plus_minus_m_m : \forall (n:(nat) ). \forall (m:(nat) ). ((((le) ) (m)) (n)) -> (((eq) ((nat) )) (n)) ((((plus) ) ((((minus) ) (n)) (m))) (m)) := \lambda n : (nat) . \lambda m : (nat) . \lambda lemn : (((le) ) (m)) (n). (((((sym_eq) ((nat) )) ((((plus) ) ((((minus) ) (n)) (m))) (m))) (n)) (((((eq_coerc) ((((eq) ((nat) )) ((((plus) ) ((((minus) ) (n)) (m))) (m))) ((((minus) ) ((((plus) ) (n)) (m))) (m)))) ((((eq) ((nat) )) ((((plus) ) ((((minus) ) (n)) (m))) (m))) (n))) (((((plus_minus) (m)) (n)) (m)) (lemn))) (((((((rewrite_r) ((nat) )) ((((plus) ) (m)) ((((minus) ) (n)) (m)))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((eq) ((nat) )) ((((plus) ) ((((minus) ) (n)) (m))) (m))) ((((minus) ) ((((plus) ) (n)) (m))) (m)))) ((((eq) ((nat) )) (j__)) (n)))) (((((((rewrite_r) ((nat) )) ((((plus) ) (m)) ((((minus) ) (n)) (m)))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((eq) ((nat) )) (j__)) ((((minus) ) ((((plus) ) (n)) (m))) (m)))) ((((eq) ((nat) )) ((((plus) ) (m)) ((((minus) ) (n)) (m)))) (n)))) (((((((rewrite_l) ((nat) )) (n)) (\lambda j__ : (nat) . (((eq) (Prop)) ((((eq) ((nat) )) ((((plus) ) (m)) ((((minus) ) (n)) (m)))) (j__))) ((((eq) ((nat) )) ((((plus) ) (m)) ((((minus) ) (n)) (m)))) (n)))) (((refl) (Prop)) ((((eq) ((nat) )) ((((plus) ) (m)) ((((minus) ) (n)) (m)))) (n)))) ((((minus) ) ((((plus) ) (n)) (m))) (m))) (((minus_plus_m_m) (n)) (m)))) ((((plus) ) ((((minus) ) (n)) (m))) (m))) (((commutative_plus) ((((minus) ) (n)) (m))) (m)))) ((((plus) ) ((((minus) ) (n)) (m))) (m))) (((commutative_plus) ((((minus) ) (n)) (m))) (m))))).
definition minus_to_plus : \forall (n:(nat) ). \forall (m:(nat) ). \forall (p:(nat) ). ((((le) ) (m)) (n)) -> ((((eq) ((nat) )) ((((minus) ) (n)) (m))) (p)) -> (((eq) ((nat) )) (n)) ((((plus) ) (m)) (p)) := \lambda n : (nat) . \lambda m : (nat) . \lambda p : (nat) . \lambda lemn : (((le) ) (m)) (n). (\lambda eqp : (((eq) ((nat) )) ((((minus) ) (n)) (m))) (p). (((((eq_coerc) ((((eq) ((nat) )) (n)) ((((plus) ) ((((minus) ) (n)) (m))) (m)))) ((((eq) ((nat) )) (n)) ((((plus) ) (m)) (p)))) ((((plus_minus_m_m) (n)) (m)) (lemn))) (((((((rewrite_r) ((nat) )) ((((plus) ) (m)) ((((minus) ) (n)) (m)))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((eq) ((nat) )) (n)) (j__))) ((((eq) ((nat) )) (n)) ((((plus) ) (m)) (p))))) (((((((rewrite_r) ((nat) )) (p)) (\lambda j__ : (nat) . (((eq) (Prop)) ((((eq) ((nat) )) (n)) ((((plus) ) (m)) (j__)))) ((((eq) ((nat) )) (n)) ((((plus) ) (m)) (p))))) (((refl) (Prop)) ((((eq) ((nat) )) (n)) ((((plus) ) (m)) (p))))) ((((minus) ) (n)) (m))) (eqp))) ((((plus) ) ((((minus) ) (n)) (m))) (m))) (((commutative_plus) ((((minus) ) (n)) (m))) (m))))).
definition plus_to_minus : \forall (n:(nat) ). \forall (m:(nat) ). \forall (p:(nat) ). ((((eq) ((nat) )) (n)) ((((plus) ) (m)) (p))) -> (((eq) ((nat) )) ((((minus) ) (n)) (m))) (p) := \lambda n : (nat) . \lambda m : (nat) . \lambda p : (nat) . \lambda eqp : (((eq) ((nat) )) (n)) ((((plus) ) (m)) (p)). (((((sym_eq) ((nat) )) (p)) ((((minus) ) (n)) (m))) (((((eq_coerc) ((((eq) ((nat) )) (p)) ((((minus) ) ((((plus) ) (p)) (m))) (m)))) ((((eq) ((nat) )) (p)) ((((minus) ) (n)) (m)))) (((minus_plus_m_m) (p)) (m))) (((((((rewrite_r) ((nat) )) ((((plus) ) (m)) (p))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((eq) ((nat) )) (p)) ((((minus) ) (j__)) (m)))) ((((eq) ((nat) )) (p)) ((((minus) ) (n)) (m))))) (((((((rewrite_l) ((nat) )) (n)) (\lambda j__ : (nat) . (((eq) (Prop)) ((((eq) ((nat) )) (p)) ((((minus) ) (j__)) (m)))) ((((eq) ((nat) )) (p)) ((((minus) ) (n)) (m))))) (((refl) (Prop)) ((((eq) ((nat) )) (p)) ((((minus) ) (n)) (m))))) ((((plus) ) (m)) (p))) (eqp))) ((((plus) ) (p)) (m))) (((commutative_plus) (p)) (m))))).
definition monotonic_le_minus_l : \forall (p:(nat) ). \forall (q:(nat) ). \forall (n:(nat) ). ((((le) ) (q)) (p)) -> (((le) ) ((((minus) ) (q)) (n))) ((((minus) ) (p)) (n)) := ((((nat_elim2) (\lambda j__ : (nat) . \lambda j_0 : (nat) . \forall (n:(nat) ). ((((le) ) (j_0)) (j__)) -> (((le) ) ((((minus) ) (j_0)) (n))) ((((minus) ) (j__)) (n)))) (\lambda p : (nat) . \lambda q : (nat) . \lambda lePO : (((le) ) (p)) ((O) ). (((((le_n_O_elim) (p)) (lePO)) (\lambda j__ : (nat) . (((le) ) ((((minus) ) (j__)) (q))) ((((minus) ) ((O) )) (q)))) ((le_n) ((((minus) ) ((O) )) (q)))))) (\lambda p : (nat) . \lambda q : (nat) . (((sym_eq_minus) (((S) ) (p))) (\lambda y : ((nat) ) -> (nat) . ((((le) ) ((O) )) (((S) ) (p))) -> (((le) ) ((((minus) ) ((O) )) (q))) ((y) (q)))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((minus_body) )) (p)) (\lambda y : ((nat) ) -> (nat) . ((((le) ) ((O) )) (((S) ) (p))) -> (((le) ) ((((minus) ) ((O) )) (q))) ((y) (q)))) ((((sym_eq_minus_body_S) (p)) (\lambda y : ((nat) ) -> (nat) . ((((le) ) ((O) )) (((S) ) (p))) -> (((le) ) ((((minus) ) ((O) )) (q))) ((y) (q)))) (((eq_plus_body_O) (\lambda y : ((nat) ) -> (nat) . ((((le) ) ((O) )) (((S) ) (p))) -> (((le) ) ((((minus) ) ((O) )) (q))) ((y) (((((match_nat_type) ((nat) )) (((S) ) (p))) (\lambda q0 : (nat) . (((minus) ) (p)) (q0))) (q))))) (((((eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((plus_body) )) (\lambda y : ((nat) ) -> (nat) . ((((le) ) ((O) )) (((S) ) (p))) -> (((le) ) ((((minus) ) ((O) )) (q))) ((y) (((((match_nat_type) ((nat) )) (((S) ) (p))) (\lambda q0 : (nat) . (((minus) ) (p)) (q0))) (q))))) ((((eq_plus) ((O) )) (\lambda y : ((nat) ) -> (nat) . ((((le) ) ((O) )) (((S) ) (p))) -> (((le) ) ((((minus) ) ((O) )) (q))) ((y) (((((match_nat_type) ((nat) )) (((S) ) (p))) (\lambda q0 : (nat) . (((minus) ) (p)) (q0))) (q))))) (((eq_minus_body_O) (\lambda y : ((nat) ) -> (nat) . ((((le) ) ((O) )) (((S) ) (p))) -> (((le) ) ((((minus) ) ((O) )) (q))) ((((plus) ) ((y) (((((match_nat_type) ((nat) )) (((S) ) (p))) (\lambda q0 : (nat) . (((minus) ) (p)) (q0))) (q)))) (((((match_nat_type) ((nat) )) (((S) ) (p))) (\lambda q0 : (nat) . (((minus) ) (p)) (q0))) (q))))) (((((eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((minus_body) )) (\lambda y : ((nat) ) -> (nat) . ((((le) ) ((O) )) (((S) ) (p))) -> (((le) ) ((((minus) ) ((O) )) (q))) ((((plus) ) ((y) (((((match_nat_type) ((nat) )) (((S) ) (p))) (\lambda q0 : (nat) . (((minus) ) (p)) (q0))) (q)))) (((((match_nat_type) ((nat) )) (((S) ) (p))) (\lambda q0 : (nat) . (((minus) ) (p)) (q0))) (q))))) ((((eq_minus) ((O) )) (\lambda y : ((nat) ) -> (nat) . ((((le) ) ((O) )) (((S) ) (p))) -> (((le) ) ((((minus) ) ((O) )) (q))) ((((plus) ) ((y) (((((match_nat_type) ((nat) )) (((S) ) (p))) (\lambda q0 : (nat) . (((minus) ) (p)) (q0))) (q)))) (((((match_nat_type) ((nat) )) (((S) ) (p))) (\lambda q0 : (nat) . (((minus) ) (p)) (q0))) (q))))) (((eq_minus_body_O) (\lambda y : ((nat) ) -> (nat) . ((((le) ) ((O) )) (((S) ) (p))) -> (((le) ) ((((minus) ) ((O) )) (q))) ((((plus) ) ((((minus) ) ((y) (q))) (((((match_nat_type) ((nat) )) (((S) ) (p))) (\lambda q0 : (nat) . (((minus) ) (p)) (q0))) (q)))) (((((match_nat_type) ((nat) )) (((S) ) (p))) (\lambda q0 : (nat) . (((minus) ) (p)) (q0))) (q))))) (((((eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((minus_body) )) (\lambda y : ((nat) ) -> (nat) . ((((le) ) ((O) )) (((S) ) (p))) -> (((le) ) ((((minus) ) ((O) )) (q))) ((((plus) ) ((((minus) ) ((y) (q))) (((((match_nat_type) ((nat) )) (((S) ) (p))) (\lambda q0 : (nat) . (((minus) ) (p)) (q0))) (q)))) (((((match_nat_type) ((nat) )) (((S) ) (p))) (\lambda q0 : (nat) . (((minus) ) (p)) (q0))) (q))))) ((((eq_minus) ((O) )) (\lambda y : ((nat) ) -> (nat) . ((((le) ) ((O) )) (((S) ) (p))) -> (((le) ) ((((minus) ) ((O) )) (q))) ((((plus) ) ((((minus) ) ((y) (q))) (((((match_nat_type) ((nat) )) (((S) ) (p))) (\lambda q0 : (nat) . (((minus) ) (p)) (q0))) (q)))) (((((match_nat_type) ((nat) )) (((S) ) (p))) (\lambda q0 : (nat) . (((minus) ) (p)) (q0))) (q))))) (\lambda auto : (((le) ) ((O) )) (((S) ) (p)). (((le_plus_minus_m_m) ((((minus) ) ((O) )) (q))) (((((match_nat_type) ((nat) )) (((S) ) (p))) (\lambda q0 : (nat) . (((minus) ) (p)) (q0))) (q))))))))))))))))) (\lambda p : (nat) . \lambda q : (nat) . \lambda Hind : \forall (n0:(nat) ). ((((le) ) (q)) (p)) -> (((le) ) ((((minus) ) (q)) (n0))) ((((minus) ) (p)) (n0)). (\lambda n : (nat) . ((((match_nat_prop) (\lambda j__ : (nat) . ((((le) ) (((S) ) (q))) (((S) ) (p))) -> (((le) ) ((((minus) ) (((S) ) (q))) (j__))) ((((minus) ) (((S) ) (p))) (j__)))) ((((sym_eq_minus) (((S) ) (q))) (\lambda y : ((nat) ) -> (nat) . ((((le) ) (((S) ) (q))) (((S) ) (p))) -> (((le) ) ((y) ((O) ))) ((((minus) ) (((S) ) (p))) ((O) )))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((minus_body) )) (q)) (\lambda y : ((nat) ) -> (nat) . ((((le) ) (((S) ) (q))) (((S) ) (p))) -> (((le) ) ((y) ((O) ))) ((((minus) ) (((S) ) (p))) ((O) )))) ((((sym_eq_minus_body_S) (q)) (\lambda y : ((nat) ) -> (nat) . ((((le) ) (((S) ) (q))) (((S) ) (p))) -> (((le) ) ((y) ((O) ))) ((((minus) ) (((S) ) (p))) ((O) )))) ((((((sym_eq_match_nat_type_O) ((nat) )) (((S) ) (q))) (\lambda z : (nat) . (((minus) ) (q)) (z))) (\lambda y : (nat) . ((((le) ) (((S) ) (q))) (((S) ) (p))) -> (((le) ) (y)) ((((minus) ) (((S) ) (p))) ((O) )))) ((((sym_eq_minus) (((S) ) (p))) (\lambda y : ((nat) ) -> (nat) . ((((le) ) (((S) ) (q))) (((S) ) (p))) -> (((le) ) (((S) ) (q))) ((y) ((O) )))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((minus_body) )) (p)) (\lambda y : ((nat) ) -> (nat) . ((((le) ) (((S) ) (q))) (((S) ) (p))) -> (((le) ) (((S) ) (q))) ((y) ((O) )))) ((((sym_eq_minus_body_S) (p)) (\lambda y : ((nat) ) -> (nat) . ((((le) ) (((S) ) (q))) (((S) ) (p))) -> (((le) ) (((S) ) (q))) ((y) ((O) )))) ((((((sym_eq_match_nat_type_O) ((nat) )) (((S) ) (p))) (\lambda q0 : (nat) . (((minus) ) (p)) (q0))) (\lambda y : (nat) . ((((le) ) (((S) ) (q))) (((S) ) (p))) -> (((le) ) (((S) ) (q))) (y))) (\lambda auto : (((le) ) (((S) ) (q))) (((S) ) (p)). (auto))))))))))) ((((sym_eq_minus) (((S) ) (q))) (\lambda y : ((nat) ) -> (nat) . \forall (a:(nat) ). ((((le) ) (((S) ) (q))) (((S) ) (p))) -> (((le) ) ((y) (((S) ) (a)))) ((((minus) ) (((S) ) (p))) (((S) ) (a))))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((minus_body) )) (q)) (\lambda y : ((nat) ) -> (nat) . \forall (a:(nat) ). ((((le) ) (((S) ) (q))) (((S) ) (p))) -> (((le) ) ((y) (((S) ) (a)))) ((((minus) ) (((S) ) (p))) (((S) ) (a))))) ((((sym_eq_minus_body_S) (q)) (\lambda y : ((nat) ) -> (nat) . \forall (a:(nat) ). ((((le) ) (((S) ) (q))) (((S) ) (p))) -> (((le) ) ((y) (((S) ) (a)))) ((((minus) ) (((S) ) (p))) (((S) ) (a))))) (\lambda a : (nat) . ((((((sym_eq_match_nat_type_S) ((nat) )) (((S) ) (q))) (\lambda z : (nat) . (((minus) ) (q)) (z))) (a)) (\lambda y : (nat) . ((((le) ) (((S) ) (q))) (((S) ) (p))) -> (((le) ) (y)) ((((minus) ) (((S) ) (p))) (((S) ) (a))))) ((((sym_eq_minus) (((S) ) (p))) (\lambda y : ((nat) ) -> (nat) . ((((le) ) (((S) ) (q))) (((S) ) (p))) -> (((le) ) ((((minus) ) (q)) (a))) ((y) (((S) ) (a))))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((minus_body) )) (p)) (\lambda y : ((nat) ) -> (nat) . ((((le) ) (((S) ) (q))) (((S) ) (p))) -> (((le) ) ((((minus) ) (q)) (a))) ((y) (((S) ) (a))))) ((((sym_eq_minus_body_S) (p)) (\lambda y : ((nat) ) -> (nat) . ((((le) ) (((S) ) (q))) (((S) ) (p))) -> (((le) ) ((((minus) ) (q)) (a))) ((y) (((S) ) (a))))) (((((((sym_eq_match_nat_type_S) ((nat) )) (((S) ) (p))) (\lambda q0 : (nat) . (((minus) ) (p)) (q0))) (a)) (\lambda y : (nat) . ((((le) ) (((S) ) (q))) (((S) ) (p))) -> (((le) ) ((((minus) ) (q)) (a))) (y))) (\lambda leSS : (((le) ) (((S) ) (q))) (((S) ) (p)). (((Hind) (a)) (((((eq_coerc) ((((le) ) (((pred) ) (((S) ) (q)))) (((pred) ) (((S) ) (p))))) ((((le) ) (q)) (p))) ((((monotonic_pred) (((S) ) (q))) (((S) ) (p))) (leSS))) (((((((rewrite_l) ((nat) )) (q)) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (j__)) (((pred) ) (((S) ) (p))))) ((((le) ) (q)) (p)))) (((((((rewrite_l) ((nat) )) (p)) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (q)) (j__))) ((((le) ) (q)) (p)))) (((refl) (Prop)) ((((le) ) (q)) (p)))) (((pred) ) (((S) ) (p)))) ((pred_Sn) (p)))) (((pred) ) (((S) ) (q)))) ((pred_Sn) (q))))))))))))))) (n))).
definition le_plus_to_minus : \forall (n:(nat) ). \forall (m:(nat) ). \forall (p:(nat) ). ((((le) ) (n)) ((((plus) ) (p)) (m))) -> (((le) ) ((((minus) ) (n)) (m))) (p) := \lambda n : (nat) . \lambda m : (nat) . \lambda p : (nat) . \lambda lep : (((le) ) (n)) ((((plus) ) (p)) (m)). (((((eq_coerc) ((((le) ) ((((minus) ) (n)) (m))) ((((minus) ) ((((plus) ) (p)) (m))) (m)))) ((((le) ) ((((minus) ) (n)) (m))) (p))) (((((monotonic_le_minus_l) ((((plus) ) (p)) (m))) (n)) (m)) (lep))) (((((((rewrite_l) ((nat) )) (p)) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) ((((minus) ) (n)) (m))) (j__))) ((((le) ) ((((minus) ) (n)) (m))) (p)))) (((refl) (Prop)) ((((le) ) ((((minus) ) (n)) (m))) (p)))) ((((minus) ) ((((plus) ) (p)) (m))) (m))) (((minus_plus_m_m) (p)) (m)))).
definition monotonic_le_minus_r : \forall (p:(nat) ). \forall (q:(nat) ). \forall (n:(nat) ). ((((le) ) (q)) (p)) -> (((le) ) ((((minus) ) (n)) (p))) ((((minus) ) (n)) (q)) := \lambda p : (nat) . \lambda q : (nat) . \lambda n : (nat) . \lambda lepq : (((le) ) (q)) (p). (((((le_plus_to_minus) (n)) (p)) ((((minus) ) (n)) (q))) ((((((transitive_le) (n)) ((((plus) ) ((((minus) ) (n)) (q))) (q))) ((((plus) ) ((((minus) ) (n)) (q))) (p))) (((le_plus_minus_m_m) (n)) (q))) (((((monotonic_le_plus_r) ((((minus) ) (n)) (q))) (q)) (p)) (lepq)))).
definition minus_le : \forall (x:(nat) ). \forall (y:(nat) ). (((le) ) ((((minus) ) (x)) (y))) (x) := \lambda x : (nat) . \lambda y : (nat) . ((((eq_coerc) ((((le) ) ((((minus) ) (x)) (y))) ((((minus) ) ((((plus) ) (x)) (y))) (y)))) ((((le) ) ((((minus) ) (x)) (y))) (x))) (((((monotonic_le_minus_l) ((((plus) ) (x)) (y))) (x)) (y)) (((le_plus_n_r) (y)) (x)))) (((((((rewrite_l) ((nat) )) (x)) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) ((((minus) ) (x)) (y))) (j__))) ((((le) ) ((((minus) ) (x)) (y))) (x)))) (((refl) (Prop)) ((((le) ) ((((minus) ) (x)) (y))) (x)))) ((((minus) ) ((((plus) ) (x)) (y))) (y))) (((minus_plus_m_m) (x)) (y))).
definition not_eq_to_le_to_lt : \forall (n:(nat) ). \forall (m:(nat) ). (((Not) ) ((((eq) ((nat) )) (n)) (m))) -> ((((le) ) (n)) (m)) -> (((lt) ) (n)) (m) := \lambda n : (nat) . \lambda m : (nat) . \lambda Hneq : ((Not) ) ((((eq) ((nat) )) (n)) (m)). (\lambda Hle : (((le) ) (n)) (m). (((((((match_Or_prop) ((((lt) ) (n)) (m))) ((((eq) ((nat) )) (n)) (m))) ((((lt) ) (n)) (m))) (\lambda auto : (((lt) ) (n)) (m). (auto))) (\lambda Heq : (((eq) ((nat) )) (n)) (m). ((((not_le_to_lt) (m)) (n)) (((((not_to_not) ((((le) ) (m)) (n))) ((((eq) ((nat) )) (n)) (m))) (\lambda auto : (((le) ) (m)) (n). (((((((rewrite_l) ((nat) )) (n)) (\lambda j__ : (nat) . (((eq) ((nat) )) (n)) (j__))) (((refl) ((nat) )) (n))) (m)) (Heq)))) (Hneq))))) ((((le_to_or_lt_eq) (n)) (m)) (Hle)))).
definition eq_minus_O : \forall (n:(nat) ). \forall (m:(nat) ). ((((le) ) (n)) (m)) -> (((eq) ((nat) )) ((((minus) ) (n)) (m))) ((O) ) := \lambda n : (nat) . \lambda m : (nat) . \lambda lenm : (((le) ) (n)) (m). (((((le_n_O_elim) ((((minus) ) (n)) (m))) (((((eq_coerc) ((((le) ) ((((minus) ) (n)) (m))) ((((minus) ) (n)) (n)))) ((((le) ) ((((minus) ) (n)) (m))) ((O) ))) (((((monotonic_le_minus_r) (m)) (n)) (n)) (lenm))) (((((((rewrite_l) ((nat) )) ((O) )) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) ((((minus) ) (n)) (m))) (j__))) ((((le) ) ((((minus) ) (n)) (m))) ((O) )))) (((refl) (Prop)) ((((le) ) ((((minus) ) (n)) (m))) ((O) )))) ((((minus) ) (n)) (n))) ((minus_n_n) (n))))) (\lambda j__ : (nat) . (((eq) ((nat) )) (j__)) ((O) ))) (((refl) ((nat) )) ((O) ))).
definition distributive_times_minus : (((distributive) ((nat) )) ((times) )) ((minus) ) := \lambda a : (nat) . \lambda b : (nat) . \lambda c : (nat) . ((((((match_Or_prop) ((((lt) ) (b)) (c))) (((Not) ) ((((lt) ) (b)) (c)))) ((((eq) ((nat) )) ((((times) ) (a)) ((((minus) ) (b)) (c)))) ((((minus) ) ((((times) ) (a)) (b))) ((((times) ) (a)) (c))))) (\lambda Hbc : (((lt) ) (b)) (c). (((((((eq_ind_r) ((nat) )) ((O) )) (\lambda x : (nat) . (((eq) ((nat) )) ((((times) ) (a)) (x))) ((((minus) ) ((((times) ) (a)) (b))) ((((times) ) (a)) (c))))) (((((((eq_ind_r) ((nat) )) ((O) )) (\lambda x : (nat) . (((eq) ((nat) )) ((((times) ) (a)) ((O) ))) (x))) (((((((rewrite_l) ((nat) )) ((O) )) (\lambda j__ : (nat) . (((eq) ((nat) )) (j__)) ((O) ))) (((refl) ((nat) )) ((O) ))) ((((times) ) (a)) ((O) ))) ((times_n_O) (a)))) ((((minus) ) ((((times) ) (a)) (b))) ((((times) ) (a)) (c)))) ((((eq_minus_O) ((((times) ) (a)) (b))) ((((times) ) (a)) (c))) (((((monotonic_le_times_r) (a)) (b)) (c)) ((((lt_to_le) (b)) (c)) (Hbc)))))) ((((minus) ) (b)) (c))) ((((eq_minus_O) (b)) (c)) ((((lt_to_le) (b)) (c)) (Hbc)))))) (\lambda Hbc : ((Not) ) ((((lt) ) (b)) (c)). (((((sym_eq) ((nat) )) ((((minus) ) ((((times) ) (a)) (b))) ((((times) ) (a)) (c)))) ((((times) ) (a)) ((((minus) ) (b)) (c)))) (((((eq_coerc) ((((eq) ((nat) )) ((((minus) ) ((((times) ) (a)) (b))) ((((times) ) (a)) (c)))) ((((times) ) (a)) ((((minus) ) (b)) (c))))) ((((eq) ((nat) )) ((((minus) ) ((((times) ) (a)) (b))) ((((times) ) (a)) (c)))) ((((times) ) (a)) ((((minus) ) (b)) (c))))) (((((plus_to_minus) ((((times) ) (a)) (b))) ((((times) ) (a)) (c))) ((((times) ) (a)) ((((minus) ) (b)) (c)))) (((((((eq_ind) ((nat) )) ((((times) ) (a)) ((((plus) ) (c)) ((((minus) ) (b)) (c))))) (\lambda x_1 : (nat) . (((eq) ((nat) )) ((((times) ) (a)) (b))) (x_1))) (((((((eq_f) ((nat) )) ((nat) )) (((times) ) (a))) (b)) ((((plus) ) (c)) ((((minus) ) (b)) (c)))) (((((eq_coerc) ((((eq) ((nat) )) (b)) ((((plus) ) ((((minus) ) (b)) (c))) (c)))) ((((eq) ((nat) )) (b)) ((((plus) ) (c)) ((((minus) ) (b)) (c))))) ((((plus_minus_m_m) (b)) (c)) ((((not_lt_to_le) (b)) (c)) (Hbc)))) (((((((rewrite_r) ((nat) )) ((((plus) ) (c)) ((((minus) ) (b)) (c)))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((eq) ((nat) )) (b)) (j__))) ((((eq) ((nat) )) (b)) ((((plus) ) (c)) ((((minus) ) (b)) (c)))))) (((refl) (Prop)) ((((eq) ((nat) )) (b)) ((((plus) ) (c)) ((((minus) ) (b)) (c)))))) ((((plus) ) ((((minus) ) (b)) (c))) (c))) (((commutative_plus) ((((minus) ) (b)) (c))) (c)))))) ((((plus) ) ((((times) ) (a)) (c))) ((((times) ) (a)) ((((minus) ) (b)) (c))))) ((((distributive_times_plus) (a)) (c)) ((((minus) ) (b)) (c)))))) (((refl) (Prop)) ((((eq) ((nat) )) ((((minus) ) ((((times) ) (a)) (b))) ((((times) ) (a)) (c)))) ((((times) ) (a)) ((((minus) ) (b)) (c))))))))) (((decidable_lt) (b)) (c)).
definition minus_plus : \forall (n:(nat) ). \forall (m:(nat) ). \forall (p:(nat) ). (((eq) ((nat) )) ((((minus) ) ((((minus) ) (n)) (m))) (p))) ((((minus) ) (n)) ((((plus) ) (m)) (p))) := \lambda n : (nat) . \lambda m : (nat) . \lambda p : (nat) . ((((((match_Or_prop) ((((le) ) ((((plus) ) (m)) (p))) (n))) (((Not) ) ((((le) ) ((((plus) ) (m)) (p))) (n)))) ((((eq) ((nat) )) ((((minus) ) ((((minus) ) (n)) (m))) (p))) ((((minus) ) (n)) ((((plus) ) (m)) (p))))) (\lambda Hlt : (((le) ) ((((plus) ) (m)) (p))) (n). (((((plus_to_minus) ((((minus) ) (n)) (m))) (p)) ((((minus) ) (n)) ((((plus) ) (m)) (p)))) (((((plus_to_minus) (n)) (m)) ((((plus) ) (p)) ((((minus) ) (n)) ((((plus) ) (m)) (p))))) (((((((eq_ind) ((nat) )) ((((plus) ) ((((plus) ) (m)) (p))) ((((minus) ) (n)) ((((plus) ) (m)) (p))))) (\lambda x_1 : (nat) . (((eq) ((nat) )) (n)) (x_1))) ((((((minus_to_plus) (n)) ((((plus) ) (m)) (p))) ((((minus) ) (n)) ((((plus) ) (m)) (p)))) (Hlt)) (((refl) ((nat) )) ((((minus) ) (n)) ((((plus) ) (m)) (p)))))) ((((plus) ) (m)) ((((plus) ) (p)) ((((minus) ) (n)) ((((plus) ) (m)) (p)))))) ((((associative_plus) (m)) (p)) ((((minus) ) (n)) ((((plus) ) (m)) (p))))))))) (\lambda Hlt : ((Not) ) ((((le) ) ((((plus) ) (m)) (p))) (n)). (((((((eq_ind_r) ((nat) )) ((O) )) (\lambda x : (nat) . (((eq) ((nat) )) (x)) ((((minus) ) (n)) ((((plus) ) (m)) (p))))) (((((sym_eq) ((nat) )) ((((minus) ) (n)) ((((plus) ) (m)) (p)))) ((O) )) (((((eq_coerc) ((((eq) ((nat) )) ((((minus) ) (n)) ((((plus) ) (m)) (p)))) ((O) ))) ((((eq) ((nat) )) ((((minus) ) (n)) ((((plus) ) (m)) (p)))) ((O) ))) ((((eq_minus_O) (n)) ((((plus) ) (m)) (p))) ((((((transitive_le) (n)) (((S) ) (n))) ((((plus) ) (m)) (p))) ((le_n_Sn) (n))) ((((not_le_to_lt) ((((plus) ) (m)) (p))) (n)) (Hlt))))) (((refl) (Prop)) ((((eq) ((nat) )) ((((minus) ) (n)) ((((plus) ) (m)) (p)))) ((O) )))))) ((((minus) ) ((((minus) ) (n)) (m))) (p))) ((((eq_minus_O) ((((minus) ) (n)) (m))) (p)) (((((eq_coerc) ((((le) ) ((((minus) ) (n)) (m))) ((((minus) ) ((((plus) ) (p)) (m))) (m)))) ((((le) ) ((((minus) ) (n)) (m))) (p))) (((((monotonic_le_minus_l) ((((plus) ) (p)) (m))) (n)) (m)) (((((eq_coerc) ((((le) ) (n)) ((((plus) ) (m)) (p)))) ((((le) ) (n)) ((((plus) ) (p)) (m)))) ((((((transitive_le) (n)) (((S) ) (n))) ((((plus) ) (m)) (p))) ((le_n_Sn) (n))) ((((not_le_to_lt) ((((plus) ) (m)) (p))) (n)) (Hlt)))) (((((((rewrite_r) ((nat) )) ((((plus) ) (m)) (p))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) (n)) ((((plus) ) (m)) (p)))) ((((le) ) (n)) (j__)))) (((refl) (Prop)) ((((le) ) (n)) ((((plus) ) (m)) (p))))) ((((plus) ) (p)) (m))) (((commutative_plus) (p)) (m)))))) (((((((rewrite_l) ((nat) )) (p)) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) ((((minus) ) (n)) (m))) (j__))) ((((le) ) ((((minus) ) (n)) (m))) (p)))) (((refl) (Prop)) ((((le) ) ((((minus) ) (n)) (m))) (p)))) ((((minus) ) ((((plus) ) (p)) (m))) (m))) (((minus_plus_m_m) (p)) (m)))))))) (((decidable_le) ((((plus) ) (m)) (p))) (n)).
definition minus_minus : \forall (n:(nat) ). \forall (m:(nat) ). \forall (p:(nat) ). ((((le) ) (p)) (m)) -> ((((le) ) (m)) (n)) -> (((eq) ((nat) )) ((((plus) ) (p)) ((((minus) ) (n)) (m)))) ((((minus) ) (n)) ((((minus) ) (m)) (p))) := \lambda n : (nat) . \lambda m : (nat) . \lambda p : (nat) . \lambda lepm : (((le) ) (p)) (m). (\lambda lemn : (((le) ) (m)) (n). (((((sym_eq) ((nat) )) ((((minus) ) (n)) ((((minus) ) (m)) (p)))) ((((plus) ) (p)) ((((minus) ) (n)) (m)))) (((((plus_to_minus) (n)) ((((minus) ) (m)) (p))) ((((plus) ) (p)) ((((minus) ) (n)) (m)))) (((((((eq_ind) ((nat) )) ((((plus) ) ((((plus) ) ((((minus) ) (m)) (p))) (p))) ((((minus) ) (n)) (m)))) (\lambda x_1 : (nat) . (((eq) ((nat) )) (n)) (x_1))) (((((((eq_ind) ((nat) )) (m)) (\lambda x_1 : (nat) . (((eq) ((nat) )) (n)) ((((plus) ) (x_1)) ((((minus) ) (n)) (m))))) (((((((eq_ind) ((nat) )) ((((plus) ) ((((minus) ) (n)) (m))) (m))) (\lambda x_1 : (nat) . (((eq) ((nat) )) (n)) (x_1))) (((((((eq_ind) ((nat) )) (n)) (\lambda x_1 : (nat) . (((eq) ((nat) )) (n)) (x_1))) (((refl) ((nat) )) (n))) ((((plus) ) ((((minus) ) (n)) (m))) (m))) ((((plus_minus_m_m) (n)) (m)) (lemn)))) ((((plus) ) (m)) ((((minus) ) (n)) (m)))) (((commutative_plus) ((((minus) ) (n)) (m))) (m)))) ((((plus) ) ((((minus) ) (m)) (p))) (p))) ((((plus_minus_m_m) (m)) (p)) (lepm)))) ((((plus) ) ((((minus) ) (m)) (p))) ((((plus) ) (p)) ((((minus) ) (n)) (m))))) ((((associative_plus) ((((minus) ) (m)) (p))) (p)) ((((minus) ) (n)) (m))))))).
definition minus_minus_comm : \forall (a:(nat) ). \forall (b:(nat) ). \forall (c:(nat) ). (((eq) ((nat) )) ((((minus) ) ((((minus) ) (a)) (b))) (c))) ((((minus) ) ((((minus) ) (a)) (c))) (b)) := \lambda a : (nat) . \lambda b : (nat) . \lambda c : (nat) . ((((le_to_le_to_eq) ((((minus) ) ((((minus) ) (a)) (b))) (c))) ((((minus) ) ((((minus) ) (a)) (c))) (b))) (((((eq_coerc) ((((le) ) ((((minus) ) ((((minus) ) (a)) (b))) (c))) ((((minus) ) ((((plus) ) ((((minus) ) ((((minus) ) (a)) (c))) (b))) (c))) (c)))) ((((le) ) ((((minus) ) ((((minus) ) (a)) (b))) (c))) ((((minus) ) ((((minus) ) (a)) (c))) (b)))) (((((monotonic_le_minus_l) ((((plus) ) ((((minus) ) ((((minus) ) (a)) (c))) (b))) (c))) ((((minus) ) (a)) (b))) (c)) (((((eq_coerc) ((((le) ) ((((minus) ) (a)) (b))) ((((plus) ) ((((minus) ) ((((minus) ) (a)) (b))) (c))) (c)))) ((((le) ) ((((minus) ) (a)) (b))) ((((plus) ) ((((minus) ) ((((minus) ) (a)) (c))) (b))) (c)))) (((le_plus_minus_m_m) ((((minus) ) (a)) (b))) (c))) (((((((rewrite_r) ((nat) )) ((((minus) ) (a)) ((((plus) ) (b)) (c)))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) ((((minus) ) (a)) (b))) ((((plus) ) (j__)) (c)))) ((((le) ) ((((minus) ) (a)) (b))) ((((plus) ) ((((minus) ) ((((minus) ) (a)) (c))) (b))) (c))))) (((((((rewrite_r) ((nat) )) ((((plus) ) (c)) ((((minus) ) (a)) ((((plus) ) (b)) (c))))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) ((((minus) ) (a)) (b))) (j__))) ((((le) ) ((((minus) ) (a)) (b))) ((((plus) ) ((((minus) ) ((((minus) ) (a)) (c))) (b))) (c))))) (((((((rewrite_r) ((nat) )) ((((plus) ) (c)) ((((minus) ) ((((minus) ) (a)) (c))) (b)))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) ((((minus) ) (a)) (b))) ((((plus) ) (c)) ((((minus) ) (a)) ((((plus) ) (b)) (c)))))) ((((le) ) ((((minus) ) (a)) (b))) (j__)))) (((((((rewrite_l) ((nat) )) ((((minus) ) ((((minus) ) (a)) (c))) (b))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) ((((minus) ) (a)) (b))) ((((plus) ) (c)) (j__)))) ((((le) ) ((((minus) ) (a)) (b))) ((((plus) ) (c)) ((((minus) ) ((((minus) ) (a)) (c))) (b)))))) (((refl) (Prop)) ((((le) ) ((((minus) ) (a)) (b))) ((((plus) ) (c)) ((((minus) ) ((((minus) ) (a)) (c))) (b)))))) ((((minus) ) (a)) ((((plus) ) (b)) (c)))) (((((((rewrite_l) ((nat) )) ((((plus) ) (c)) (b))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((((minus) ) ((((minus) ) (a)) (c))) (b))) ((((minus) ) (a)) (j__)))) ((((minus_plus) (a)) (c)) (b))) ((((plus) ) (b)) (c))) (((commutative_plus) (c)) (b))))) ((((plus) ) ((((minus) ) ((((minus) ) (a)) (c))) (b))) (c))) (((commutative_plus) ((((minus) ) ((((minus) ) (a)) (c))) (b))) (c)))) ((((plus) ) ((((minus) ) (a)) ((((plus) ) (b)) (c)))) (c))) (((commutative_plus) ((((minus) ) (a)) ((((plus) ) (b)) (c)))) (c)))) ((((minus) ) ((((minus) ) (a)) (b))) (c))) ((((minus_plus) (a)) (b)) (c)))))) (((((((rewrite_l) ((nat) )) ((((minus) ) ((((minus) ) (a)) (c))) (b))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) ((((minus) ) ((((minus) ) (a)) (b))) (c))) (j__))) ((((le) ) ((((minus) ) ((((minus) ) (a)) (b))) (c))) ((((minus) ) ((((minus) ) (a)) (c))) (b))))) (((refl) (Prop)) ((((le) ) ((((minus) ) ((((minus) ) (a)) (b))) (c))) ((((minus) ) ((((minus) ) (a)) (c))) (b))))) ((((minus) ) ((((plus) ) ((((minus) ) ((((minus) ) (a)) (c))) (b))) (c))) (c))) (((minus_plus_m_m) ((((minus) ) ((((minus) ) (a)) (c))) (b))) (c))))) (((((eq_coerc) ((((le) ) ((((minus) ) ((((minus) ) (a)) (c))) (b))) ((((minus) ) ((((plus) ) ((((minus) ) ((((minus) ) (a)) (b))) (c))) (b))) (b)))) ((((le) ) ((((minus) ) ((((minus) ) (a)) (c))) (b))) ((((minus) ) ((((minus) ) (a)) (b))) (c)))) (((((monotonic_le_minus_l) ((((plus) ) ((((minus) ) ((((minus) ) (a)) (b))) (c))) (b))) ((((minus) ) (a)) (c))) (b)) (((((eq_coerc) ((((le) ) ((((minus) ) (a)) (c))) ((((plus) ) ((((minus) ) ((((minus) ) (a)) (c))) (b))) (b)))) ((((le) ) ((((minus) ) (a)) (c))) ((((plus) ) ((((minus) ) ((((minus) ) (a)) (b))) (c))) (b)))) (((le_plus_minus_m_m) ((((minus) ) (a)) (c))) (b))) (((((((rewrite_r) ((nat) )) ((((minus) ) (a)) ((((plus) ) (c)) (b)))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) ((((minus) ) (a)) (c))) ((((plus) ) (j__)) (b)))) ((((le) ) ((((minus) ) (a)) (c))) ((((plus) ) ((((minus) ) ((((minus) ) (a)) (b))) (c))) (b))))) (((((((rewrite_r) ((nat) )) ((((plus) ) (b)) ((((minus) ) (a)) ((((plus) ) (c)) (b))))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) ((((minus) ) (a)) (c))) (j__))) ((((le) ) ((((minus) ) (a)) (c))) ((((plus) ) ((((minus) ) ((((minus) ) (a)) (b))) (c))) (b))))) (((((((rewrite_r) ((nat) )) ((((plus) ) (b)) ((((minus) ) ((((minus) ) (a)) (b))) (c)))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) ((((minus) ) (a)) (c))) ((((plus) ) (b)) ((((minus) ) (a)) ((((plus) ) (c)) (b)))))) ((((le) ) ((((minus) ) (a)) (c))) (j__)))) (((((((rewrite_l) ((nat) )) ((((minus) ) ((((minus) ) (a)) (b))) (c))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) ((((minus) ) (a)) (c))) ((((plus) ) (b)) (j__)))) ((((le) ) ((((minus) ) (a)) (c))) ((((plus) ) (b)) ((((minus) ) ((((minus) ) (a)) (b))) (c)))))) (((refl) (Prop)) ((((le) ) ((((minus) ) (a)) (c))) ((((plus) ) (b)) ((((minus) ) ((((minus) ) (a)) (b))) (c)))))) ((((minus) ) (a)) ((((plus) ) (c)) (b)))) (((((((rewrite_l) ((nat) )) ((((plus) ) (b)) (c))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((((minus) ) ((((minus) ) (a)) (b))) (c))) ((((minus) ) (a)) (j__)))) ((((minus_plus) (a)) (b)) (c))) ((((plus) ) (c)) (b))) (((commutative_plus) (b)) (c))))) ((((plus) ) ((((minus) ) ((((minus) ) (a)) (b))) (c))) (b))) (((commutative_plus) ((((minus) ) ((((minus) ) (a)) (b))) (c))) (b)))) ((((plus) ) ((((minus) ) (a)) ((((plus) ) (c)) (b)))) (b))) (((commutative_plus) ((((minus) ) (a)) ((((plus) ) (c)) (b)))) (b)))) ((((minus) ) ((((minus) ) (a)) (c))) (b))) ((((minus_plus) (a)) (c)) (b)))))) (((((((rewrite_l) ((nat) )) ((((minus) ) ((((minus) ) (a)) (b))) (c))) (\lambda j__ : (nat) . (((eq) (Prop)) ((((le) ) ((((minus) ) ((((minus) ) (a)) (c))) (b))) (j__))) ((((le) ) ((((minus) ) ((((minus) ) (a)) (c))) (b))) ((((minus) ) ((((minus) ) (a)) (b))) (c))))) (((refl) (Prop)) ((((le) ) ((((minus) ) ((((minus) ) (a)) (c))) (b))) ((((minus) ) ((((minus) ) (a)) (b))) (c))))) ((((minus) ) ((((plus) ) ((((minus) ) ((((minus) ) (a)) (b))) (c))) (b))) (b))) (((minus_plus_m_m) ((((minus) ) ((((minus) ) (a)) (b))) (c))) (b)))).
definition minus_le_minus_minus_comm : \forall (b:(nat) ). \forall (c:(nat) ). \forall (a:(nat) ). ((((le) ) (c)) (b)) -> (((eq) ((nat) )) ((((minus) ) (a)) ((((minus) ) (b)) (c)))) ((((minus) ) ((((plus) ) (a)) (c))) (b)) := \lambda b : (nat) . \lambda c : (nat) . \lambda a : (nat) . \lambda H : (((le) ) (c)) (b). (((((((eq_ind_r) ((nat) )) ((((plus) ) ((((minus) ) (b)) (c))) (c))) (\lambda x : (nat) . (((eq) ((nat) )) ((((minus) ) (a)) ((((minus) ) (b)) (c)))) ((((minus) ) ((((plus) ) (a)) (c))) (x)))) (((((((rewrite_r) ((nat) )) ((((plus) ) (c)) (a))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((((minus) ) (a)) ((((minus) ) (b)) (c)))) ((((minus) ) (j__)) ((((plus) ) ((((minus) ) (b)) (c))) (c))))) (((((((rewrite_r) ((nat) )) ((((plus) ) (c)) ((((minus) ) (b)) (c)))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((((minus) ) (a)) ((((minus) ) (b)) (c)))) ((((minus) ) ((((plus) ) (c)) (a))) (j__)))) (((((((rewrite_l) ((nat) )) ((((minus) ) ((((minus) ) ((((plus) ) (c)) (a))) (c))) ((((minus) ) (b)) (c)))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((((minus) ) (a)) ((((minus) ) (b)) (c)))) (j__))) (((((((rewrite_r) ((nat) )) ((((minus) ) ((((plus) ) (c)) (a))) (c))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((((minus) ) (j__)) ((((minus) ) (b)) (c)))) ((((minus) ) ((((minus) ) ((((plus) ) (c)) (a))) (c))) ((((minus) ) (b)) (c))))) (((refl) ((nat) )) ((((minus) ) ((((minus) ) ((((plus) ) (c)) (a))) (c))) ((((minus) ) (b)) (c))))) (a)) (((((((rewrite_l) ((nat) )) ((((plus) ) (a)) (c))) (\lambda j__ : (nat) . (((eq) ((nat) )) (a)) ((((minus) ) (j__)) (c)))) (((minus_plus_m_m) (a)) (c))) ((((plus) ) (c)) (a))) (((commutative_plus) (a)) (c))))) ((((minus) ) ((((plus) ) (c)) (a))) ((((plus) ) (c)) ((((minus) ) (b)) (c))))) ((((minus_plus) ((((plus) ) (c)) (a))) (c)) ((((minus) ) (b)) (c))))) ((((plus) ) ((((minus) ) (b)) (c))) (c))) (((commutative_plus) ((((minus) ) (b)) (c))) (c)))) ((((plus) ) (a)) (c))) (((commutative_plus) (a)) (c)))) (b)) ((((plus_minus_m_m) (b)) (c)) (H))).
definition minus_plus_plus_l : \forall (x:(nat) ). \forall (y:(nat) ). \forall (h:(nat) ). (((eq) ((nat) )) ((((minus) ) ((((plus) ) (x)) (h))) ((((plus) ) (y)) (h)))) ((((minus) ) (x)) (y)) := \lambda x : (nat) . \lambda y : (nat) . \lambda h : (nat) . ((((((rewrite_l) ((nat) )) ((((minus) ) ((((minus) ) ((((plus) ) (x)) (h))) (y))) (h))) (\lambda j__ : (nat) . (((eq) ((nat) )) (j__)) ((((minus) ) (x)) (y)))) (((((((rewrite_r) ((nat) )) ((((minus) ) (x)) (y))) (\lambda j__ : (nat) . (((eq) ((nat) )) (j__)) ((((minus) ) (x)) (y)))) (((refl) ((nat) )) ((((minus) ) (x)) (y)))) ((((minus) ) ((((minus) ) ((((plus) ) (x)) (h))) (y))) (h))) (((((((rewrite_r) ((nat) )) ((((minus) ) ((((plus) ) (x)) (h))) (h))) (\lambda j__ : (nat) . (((eq) ((nat) )) ((((minus) ) ((((minus) ) ((((plus) ) (x)) (h))) (y))) (h))) ((((minus) ) (j__)) (y)))) ((((minus_minus_comm) ((((plus) ) (x)) (h))) (y)) (h))) (x)) (((minus_plus_m_m) (x)) (h))))) ((((minus) ) ((((plus) ) (x)) (h))) ((((plus) ) (y)) (h)))) ((((minus_plus) ((((plus) ) (x)) (h))) (y)) (h)).
axiom eqb : ((nat) ) -> ((nat) ) -> (bool) .
axiom eqb_body : ((nat) ) -> ((nat) ) -> (bool) .
axiom axiom_eqb : \forall (n:(nat) ). (((equal) (((nat) ) -> (bool) )) (((eqb) ) (n))) ((((filter_nat_type) (((nat) ) -> (bool) )) ((eqb_body) )) (n)).
definition eq_eqb : \forall (n:(nat) ). (((leibniz) (((nat) ) -> (bool) )) (((eqb) ) (n))) ((((filter_nat_type) (((nat) ) -> (bool) )) ((eqb_body) )) (n)) := \lambda n : (nat) . ((((equal_leibniz) (((nat) ) -> (bool) )) (((eqb) ) (n))) ((((filter_nat_type) (((nat) ) -> (bool) )) ((eqb_body) )) (n))) ((axiom_eqb) (n)).
definition sym_eq_eqb : \forall (n:(nat) ). (((leibniz) (((nat) ) -> (bool) )) ((((filter_nat_type) (((nat) ) -> (bool) )) ((eqb_body) )) (n))) (((eqb) ) (n)) := \lambda n : (nat) . ((((sym_leibniz) (((nat) ) -> (bool) )) (((eqb) ) (n))) ((((filter_nat_type) (((nat) ) -> (bool) )) ((eqb_body) )) (n))) ((eq_eqb) (n)).
axiom axiom_eqb_body_O : (((equal) (((nat) ) -> (bool) )) (((eqb_body) ) ((O) ))) (\lambda m : (nat) . ((((match_nat_type) ((bool) )) ((true) )) (\lambda q : (nat) . (false) )) (m)).
definition eq_eqb_body_O : (((leibniz) (((nat) ) -> (bool) )) (((eqb_body) ) ((O) ))) (\lambda m : (nat) . ((((match_nat_type) ((bool) )) ((true) )) (\lambda q : (nat) . (false) )) (m)) := ((((equal_leibniz) (((nat) ) -> (bool) )) (((eqb_body) ) ((O) ))) (\lambda m : (nat) . ((((match_nat_type) ((bool) )) ((true) )) (\lambda q : (nat) . (false) )) (m))) (axiom_eqb_body_O).
definition sym_eq_eqb_body_O : (((leibniz) (((nat) ) -> (bool) )) (\lambda m : (nat) . ((((match_nat_type) ((bool) )) ((true) )) (\lambda q : (nat) . (false) )) (m))) (((eqb_body) ) ((O) )) := ((((sym_leibniz) (((nat) ) -> (bool) )) (((eqb_body) ) ((O) ))) (\lambda m : (nat) . ((((match_nat_type) ((bool) )) ((true) )) (\lambda q : (nat) . (false) )) (m))) (eq_eqb_body_O).
axiom axiom_eqb_body_S : \forall (n:(nat) ). (((equal) (((nat) ) -> (bool) )) (((eqb_body) ) (((S) ) (n)))) (\lambda m : (nat) . ((((match_nat_type) ((bool) )) ((false) )) (\lambda q : (nat) . (((eqb) ) (n)) (q))) (m)).
definition eq_eqb_body_S : \forall (n:(nat) ). (((leibniz) (((nat) ) -> (bool) )) (((eqb_body) ) (((S) ) (n)))) (\lambda m : (nat) . ((((match_nat_type) ((bool) )) ((false) )) (\lambda q : (nat) . (((eqb) ) (n)) (q))) (m)) := \lambda n : (nat) . ((((equal_leibniz) (((nat) ) -> (bool) )) (((eqb_body) ) (((S) ) (n)))) (\lambda m : (nat) . ((((match_nat_type) ((bool) )) ((false) )) (\lambda q : (nat) . (((eqb) ) (n)) (q))) (m))) ((axiom_eqb_body_S) (n)).
definition sym_eq_eqb_body_S : \forall (n:(nat) ). (((leibniz) (((nat) ) -> (bool) )) (\lambda m : (nat) . ((((match_nat_type) ((bool) )) ((false) )) (\lambda q : (nat) . (((eqb) ) (n)) (q))) (m))) (((eqb_body) ) (((S) ) (n))) := \lambda n : (nat) . ((((sym_leibniz) (((nat) ) -> (bool) )) (((eqb_body) ) (((S) ) (n)))) (\lambda m : (nat) . ((((match_nat_type) ((bool) )) ((false) )) (\lambda q : (nat) . (((eqb) ) (n)) (q))) (m))) ((eq_eqb_body_S) (n)).
definition eqb_elim : \forall (n:(nat) ). \forall (m:(nat) ). \forall (P:((bool) ) -> Prop). (((((eq) ((nat) )) (n)) (m)) -> (P) ((true) )) -> ((((Not) ) ((((eq) ((nat) )) (n)) (m))) -> (P) ((false) )) -> (P) ((((eqb) ) (n)) (m)) := ((((nat_elim2) (\lambda j__ : (nat) . \lambda j_0 : (nat) . \forall (P:((bool) ) -> Prop). (((((eq) ((nat) )) (j__)) (j_0)) -> (P) ((true) )) -> ((((Not) ) ((((eq) ((nat) )) (j__)) (j_0))) -> (P) ((false) )) -> (P) ((((eqb) ) (j__)) (j_0)))) (\lambda n : (nat) . ((((match_nat_prop) (\lambda j__ : (nat) . \forall (P:((bool) ) -> Prop). (((((eq) ((nat) )) ((O) )) (j__)) -> (P) ((true) )) -> ((((Not) ) ((((eq) ((nat) )) ((O) )) (j__))) -> (P) ((false) )) -> (P) ((((eqb) ) ((O) )) (j__)))) ((((sym_eq_eqb) ((O) )) (\lambda y : ((nat) ) -> (bool) . \forall (P:((bool) ) -> Prop). (((((eq) ((nat) )) ((O) )) ((O) )) -> (P) ((true) )) -> ((((Not) ) ((((eq) ((nat) )) ((O) )) ((O) ))) -> (P) ((false) )) -> (P) ((y) ((O) )))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> (bool) )) ((eqb_body) )) (\lambda y : ((nat) ) -> (bool) . \forall (P:((bool) ) -> Prop). (((((eq) ((nat) )) ((O) )) ((O) )) -> (P) ((true) )) -> ((((Not) ) ((((eq) ((nat) )) ((O) )) ((O) ))) -> (P) ((false) )) -> (P) ((y) ((O) )))) (((sym_eq_eqb_body_O) (\lambda y : ((nat) ) -> (bool) . \forall (P:((bool) ) -> Prop). (((((eq) ((nat) )) ((O) )) ((O) )) -> (P) ((true) )) -> ((((Not) ) ((((eq) ((nat) )) ((O) )) ((O) ))) -> (P) ((false) )) -> (P) ((y) ((O) )))) ((((((sym_eq_match_nat_type_O) ((bool) )) ((true) )) (\lambda q : (nat) . (false) )) (\lambda y : (bool) . \forall (P:((bool) ) -> Prop). (((((eq) ((nat) )) ((O) )) ((O) )) -> (P) ((true) )) -> ((((Not) ) ((((eq) ((nat) )) ((O) )) ((O) ))) -> (P) ((false) )) -> (P) (y))) (\lambda P : ((bool) ) -> Prop. \lambda auto : ((((eq) ((nat) )) ((O) )) ((O) )) -> (P) ((true) ). (\lambda auto' : (((Not) ) ((((eq) ((nat) )) ((O) )) ((O) ))) -> (P) ((false) ). ((auto) (((refl) ((nat) )) ((O) )))))))))) (\lambda auto : (nat) . (((sym_eq_eqb) ((O) )) (\lambda y : ((nat) ) -> (bool) . \forall (P:((bool) ) -> Prop). (((((eq) ((nat) )) ((O) )) (((S) ) (auto))) -> (P) ((true) )) -> ((((Not) ) ((((eq) ((nat) )) ((O) )) (((S) ) (auto)))) -> (P) ((false) )) -> (P) ((y) (((S) ) (auto))))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> (bool) )) ((eqb_body) )) (\lambda y : ((nat) ) -> (bool) . \forall (P:((bool) ) -> Prop). (((((eq) ((nat) )) ((O) )) (((S) ) (auto))) -> (P) ((true) )) -> ((((Not) ) ((((eq) ((nat) )) ((O) )) (((S) ) (auto)))) -> (P) ((false) )) -> (P) ((y) (((S) ) (auto))))) (((sym_eq_eqb_body_O) (\lambda y : ((nat) ) -> (bool) . \forall (P:((bool) ) -> Prop). (((((eq) ((nat) )) ((O) )) (((S) ) (auto))) -> (P) ((true) )) -> ((((Not) ) ((((eq) ((nat) )) ((O) )) (((S) ) (auto)))) -> (P) ((false) )) -> (P) ((y) (((S) ) (auto))))) (((((((sym_eq_match_nat_type_S) ((bool) )) ((true) )) (\lambda q : (nat) . (false) )) (auto)) (\lambda y : (bool) . \forall (P:((bool) ) -> Prop). (((((eq) ((nat) )) ((O) )) (((S) ) (auto))) -> (P) ((true) )) -> ((((Not) ) ((((eq) ((nat) )) ((O) )) (((S) ) (auto)))) -> (P) ((false) )) -> (P) (y))) (\lambda P : ((bool) ) -> Prop. \lambda auto' : ((((eq) ((nat) )) ((O) )) (((S) ) (auto))) -> (P) ((true) ). (\lambda auto'' : (((Not) ) ((((eq) ((nat) )) ((O) )) (((S) ) (auto)))) -> (P) ((false) ). ((auto'') ((not_eq_O_S) (auto)))))))))) (n))) (\lambda n : (nat) . (((sym_eq_eqb) (((S) ) (n))) (\lambda y : ((nat) ) -> (bool) . \forall (P:((bool) ) -> Prop). (((((eq) ((nat) )) (((S) ) (n))) ((O) )) -> (P) ((true) )) -> ((((Not) ) ((((eq) ((nat) )) (((S) ) (n))) ((O) ))) -> (P) ((false) )) -> (P) ((y) ((O) )))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (bool) )) ((eqb_body) )) (n)) (\lambda y : ((nat) ) -> (bool) . \forall (P:((bool) ) -> Prop). (((((eq) ((nat) )) (((S) ) (n))) ((O) )) -> (P) ((true) )) -> ((((Not) ) ((((eq) ((nat) )) (((S) ) (n))) ((O) ))) -> (P) ((false) )) -> (P) ((y) ((O) )))) ((((sym_eq_eqb_body_S) (n)) (\lambda y : ((nat) ) -> (bool) . \forall (P:((bool) ) -> Prop). (((((eq) ((nat) )) (((S) ) (n))) ((O) )) -> (P) ((true) )) -> ((((Not) ) ((((eq) ((nat) )) (((S) ) (n))) ((O) ))) -> (P) ((false) )) -> (P) ((y) ((O) )))) ((((((sym_eq_match_nat_type_O) ((bool) )) ((false) )) (\lambda q : (nat) . (((eqb) ) (n)) (q))) (\lambda y : (bool) . \forall (P:((bool) ) -> Prop). (((((eq) ((nat) )) (((S) ) (n))) ((O) )) -> (P) ((true) )) -> ((((Not) ) ((((eq) ((nat) )) (((S) ) (n))) ((O) ))) -> (P) ((false) )) -> (P) (y))) (\lambda P : ((bool) ) -> Prop. \lambda auto : ((((eq) ((nat) )) (((S) ) (n))) ((O) )) -> (P) ((true) ). (\lambda auto' : (((Not) ) ((((eq) ((nat) )) (((S) ) (n))) ((O) ))) -> (P) ((false) ). ((auto') (((((sym_not_eq) ((nat) )) ((O) )) (((S) ) (n))) ((not_eq_O_S) (n))))))))))) (\lambda n : (nat) . \lambda m : (nat) . (((sym_eq_eqb) (((S) ) (n))) (\lambda y : ((nat) ) -> (bool) . (\forall (P:((bool) ) -> Prop). (((((eq) ((nat) )) (n)) (m)) -> (P) ((true) )) -> ((((Not) ) ((((eq) ((nat) )) (n)) (m))) -> (P) ((false) )) -> (P) ((((eqb) ) (n)) (m))) -> \forall (P:((bool) ) -> Prop). (((((eq) ((nat) )) (((S) ) (n))) (((S) ) (m))) -> (P) ((true) )) -> ((((Not) ) ((((eq) ((nat) )) (((S) ) (n))) (((S) ) (m)))) -> (P) ((false) )) -> (P) ((y) (((S) ) (m))))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (bool) )) ((eqb_body) )) (n)) (\lambda y : ((nat) ) -> (bool) . (\forall (P:((bool) ) -> Prop). (((((eq) ((nat) )) (n)) (m)) -> (P) ((true) )) -> ((((Not) ) ((((eq) ((nat) )) (n)) (m))) -> (P) ((false) )) -> (P) ((((eqb) ) (n)) (m))) -> \forall (P:((bool) ) -> Prop). (((((eq) ((nat) )) (((S) ) (n))) (((S) ) (m))) -> (P) ((true) )) -> ((((Not) ) ((((eq) ((nat) )) (((S) ) (n))) (((S) ) (m)))) -> (P) ((false) )) -> (P) ((y) (((S) ) (m))))) ((((sym_eq_eqb_body_S) (n)) (\lambda y : ((nat) ) -> (bool) . (\forall (P:((bool) ) -> Prop). (((((eq) ((nat) )) (n)) (m)) -> (P) ((true) )) -> ((((Not) ) ((((eq) ((nat) )) (n)) (m))) -> (P) ((false) )) -> (P) ((((eqb) ) (n)) (m))) -> \forall (P:((bool) ) -> Prop). (((((eq) ((nat) )) (((S) ) (n))) (((S) ) (m))) -> (P) ((true) )) -> ((((Not) ) ((((eq) ((nat) )) (((S) ) (n))) (((S) ) (m)))) -> (P) ((false) )) -> (P) ((y) (((S) ) (m))))) (((((((sym_eq_match_nat_type_S) ((bool) )) ((false) )) (\lambda q : (nat) . (((eqb) ) (n)) (q))) (m)) (\lambda y : (bool) . (\forall (P:((bool) ) -> Prop). (((((eq) ((nat) )) (n)) (m)) -> (P) ((true) )) -> ((((Not) ) ((((eq) ((nat) )) (n)) (m))) -> (P) ((false) )) -> (P) ((((eqb) ) (n)) (m))) -> \forall (P:((bool) ) -> Prop). (((((eq) ((nat) )) (((S) ) (n))) (((S) ) (m))) -> (P) ((true) )) -> ((((Not) ) ((((eq) ((nat) )) (((S) ) (n))) (((S) ) (m)))) -> (P) ((false) )) -> (P) (y))) (\lambda auto : \forall (P:((bool) ) -> Prop). (((((eq) ((nat) )) (n)) (m)) -> (P) ((true) )) -> ((((Not) ) ((((eq) ((nat) )) (n)) (m))) -> (P) ((false) )) -> (P) ((((eqb) ) (n)) (m)). (\lambda P : ((bool) ) -> Prop. \lambda auto' : ((((eq) ((nat) )) (((S) ) (n))) (((S) ) (m))) -> (P) ((true) ). (\lambda auto'' : (((Not) ) ((((eq) ((nat) )) (((S) ) (n))) (((S) ) (m)))) -> (P) ((false) ). ((((auto) (P)) (\lambda auto''' : (((eq) ((nat) )) (n)) (m). ((auto') (((((((rewrite_l) ((nat) )) (n)) (\lambda j__ : (nat) . (((eq) ((nat) )) (((S) ) (n))) (((S) ) (j__)))) (((refl) ((nat) )) (((S) ) (n)))) (m)) (auto'''))))) (\lambda auto''' : ((Not) ) ((((eq) ((nat) )) (n)) (m)). ((auto'') ((((not_eq_S) (n)) (m)) (auto''')))))))))))).
definition eqb_n_n : \forall (n:(nat) ). (((eq) ((bool) )) ((((eqb) ) (n)) (n))) ((true) ) := \lambda n : (nat) . ((((nat_ind) (\lambda j_x_365 : (nat) . (((eq) ((bool) )) ((((eqb) ) (j_x_365)) (j_x_365))) ((true) ))) ((((sym_eq_eqb) ((O) )) (\lambda y : ((nat) ) -> (bool) . (((eq) ((bool) )) ((y) ((O) ))) ((true) ))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> (bool) )) ((eqb_body) )) (\lambda y : ((nat) ) -> (bool) . (((eq) ((bool) )) ((y) ((O) ))) ((true) ))) (((sym_eq_eqb_body_O) (\lambda y : ((nat) ) -> (bool) . (((eq) ((bool) )) ((y) ((O) ))) ((true) ))) ((((((sym_eq_match_nat_type_O) ((bool) )) ((true) )) (\lambda q : (nat) . (false) )) (\lambda y : (bool) . (((eq) ((bool) )) (y)) ((true) ))) (((refl) ((bool) )) ((true) ))))))) (\lambda x_366 : (nat) . (((sym_eq_eqb) (((S) ) (x_366))) (\lambda y : ((nat) ) -> (bool) . ((((eq) ((bool) )) ((((eqb) ) (x_366)) (x_366))) ((true) )) -> (((eq) ((bool) )) ((y) (((S) ) (x_366)))) ((true) ))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (bool) )) ((eqb_body) )) (x_366)) (\lambda y : ((nat) ) -> (bool) . ((((eq) ((bool) )) ((((eqb) ) (x_366)) (x_366))) ((true) )) -> (((eq) ((bool) )) ((y) (((S) ) (x_366)))) ((true) ))) ((((sym_eq_eqb_body_S) (x_366)) (\lambda y : ((nat) ) -> (bool) . ((((eq) ((bool) )) ((((eqb) ) (x_366)) (x_366))) ((true) )) -> (((eq) ((bool) )) ((y) (((S) ) (x_366)))) ((true) ))) (((((((sym_eq_match_nat_type_S) ((bool) )) ((false) )) (\lambda q : (nat) . (((eqb) ) (x_366)) (q))) (x_366)) (\lambda y : (bool) . ((((eq) ((bool) )) ((((eqb) ) (x_366)) (x_366))) ((true) )) -> (((eq) ((bool) )) (y)) ((true) ))) (\lambda j_x_368 : (((eq) ((bool) )) ((((eqb) ) (x_366)) (x_366))) ((true) ). (((((((rewrite_r) ((bool) )) ((true) )) (\lambda j__ : (bool) . (((eq) ((bool) )) (j__)) ((true) ))) (((refl) ((bool) )) ((true) ))) ((((eqb) ) (x_366)) (x_366))) (j_x_368)))))))) (n).
definition eqb_true_to_eq : \forall (n:(nat) ). \forall (m:(nat) ). ((((eq) ((bool) )) ((((eqb) ) (n)) (m))) ((true) )) -> (((eq) ((nat) )) (n)) (m) := \lambda n : (nat) . \lambda m : (nat) . (((((eqb_elim) (n)) (m)) (\lambda j__ : (bool) . ((((eq) ((bool) )) (j__)) ((true) )) -> (((eq) ((nat) )) (n)) (m))) (\lambda auto : (((eq) ((nat) )) (n)) (m). (\lambda auto' : (((eq) ((bool) )) ((true) )) ((true) ). (((((((rewrite_l) ((nat) )) (n)) (\lambda j__ : (nat) . (((eq) ((nat) )) (n)) (j__))) (((refl) ((nat) )) (n))) (m)) (auto))))) (\lambda j__ : ((Not) ) ((((eq) ((nat) )) (n)) (m)). (\lambda abs : (((eq) ((bool) )) ((false) )) ((true) ). (((falsity) ((((eq) ((nat) )) (n)) (m))) ((((absurd) ((((eq) ((bool) )) ((true) )) ((false) ))) (((((((rewrite_r) ((bool) )) ((true) )) (\lambda j__1 : (bool) . (((eq) ((bool) )) ((true) )) (j__1))) (((refl) ((bool) )) ((true) ))) ((false) )) (abs))) (not_eq_true_false))))).
definition eqb_false_to_not_eq : \forall (n:(nat) ). \forall (m:(nat) ). ((((eq) ((bool) )) ((((eqb) ) (n)) (m))) ((false) )) -> ((Not) ) ((((eq) ((nat) )) (n)) (m)) := \lambda n : (nat) . \lambda m : (nat) . (((((eqb_elim) (n)) (m)) (\lambda j__ : (bool) . ((((eq) ((bool) )) (j__)) ((false) )) -> ((Not) ) ((((eq) ((nat) )) (n)) (m)))) (\lambda auto : (((eq) ((nat) )) (n)) (m). (\lambda auto' : (((eq) ((bool) )) ((true) )) ((false) ). (((((not_to_not) ((((eq) ((nat) )) (n)) (m))) ((((eq) ((bool) )) ((true) )) ((false) ))) (\lambda auto'' : (((eq) ((nat) )) (n)) (m). (((((((rewrite_l) ((bool) )) ((true) )) (\lambda j__ : (bool) . (((eq) ((bool) )) ((true) )) (j__))) (((refl) ((bool) )) ((true) ))) ((false) )) (auto')))) (not_eq_true_false))))) (\lambda auto : ((Not) ) ((((eq) ((nat) )) (n)) (m)). (\lambda auto' : (((eq) ((bool) )) ((false) )) ((false) ). (auto))).
definition eq_to_eqb_true : \forall (n:(nat) ). \forall (m:(nat) ). ((((eq) ((nat) )) (n)) (m)) -> (((eq) ((bool) )) ((((eqb) ) (n)) (m))) ((true) ) := \lambda n : (nat) . \lambda m : (nat) . \lambda auto : (((eq) ((nat) )) (n)) (m). (((((((rewrite_l) ((nat) )) (n)) (\lambda j__ : (nat) . (((eq) ((bool) )) ((((eqb) ) (n)) (j__))) ((true) ))) (((((((rewrite_r) ((bool) )) ((true) )) (\lambda j__ : (bool) . (((eq) ((bool) )) (j__)) ((true) ))) (((refl) ((bool) )) ((true) ))) ((((eqb) ) (n)) (n))) ((eqb_n_n) (n)))) (m)) (auto)).
definition not_eq_to_eqb_false : \forall (n:(nat) ). \forall (m:(nat) ). (((Not) ) ((((eq) ((nat) )) (n)) (m))) -> (((eq) ((bool) )) ((((eqb) ) (n)) (m))) ((false) ) := \lambda n : (nat) . \lambda m : (nat) . \lambda noteq : ((Not) ) ((((eq) ((nat) )) (n)) (m)). ((((((eqb_elim) (n)) (m)) (\lambda j__ : (bool) . (((eq) ((bool) )) (j__)) ((false) ))) (\lambda Heq : (((eq) ((nat) )) (n)) (m). (((falsity) ((((eq) ((bool) )) ((true) )) ((false) ))) ((((absurd) ((((eq) ((nat) )) (n)) (m))) (((((((rewrite_l) ((nat) )) (n)) (\lambda j__ : (nat) . (((eq) ((nat) )) (n)) (j__))) (((refl) ((nat) )) (n))) (m)) (Heq))) (noteq))))) (\lambda auto : ((Not) ) ((((eq) ((nat) )) (n)) (m)). (((refl) ((bool) )) ((false) )))).
axiom leb : ((nat) ) -> ((nat) ) -> (bool) .
axiom leb_body : ((nat) ) -> ((nat) ) -> (bool) .
axiom axiom_leb : \forall (n:(nat) ). (((equal) (((nat) ) -> (bool) )) (((leb) ) (n))) ((((filter_nat_type) (((nat) ) -> (bool) )) ((leb_body) )) (n)).
definition eq_leb : \forall (n:(nat) ). (((leibniz) (((nat) ) -> (bool) )) (((leb) ) (n))) ((((filter_nat_type) (((nat) ) -> (bool) )) ((leb_body) )) (n)) := \lambda n : (nat) . ((((equal_leibniz) (((nat) ) -> (bool) )) (((leb) ) (n))) ((((filter_nat_type) (((nat) ) -> (bool) )) ((leb_body) )) (n))) ((axiom_leb) (n)).
definition sym_eq_leb : \forall (n:(nat) ). (((leibniz) (((nat) ) -> (bool) )) ((((filter_nat_type) (((nat) ) -> (bool) )) ((leb_body) )) (n))) (((leb) ) (n)) := \lambda n : (nat) . ((((sym_leibniz) (((nat) ) -> (bool) )) (((leb) ) (n))) ((((filter_nat_type) (((nat) ) -> (bool) )) ((leb_body) )) (n))) ((eq_leb) (n)).
axiom axiom_leb_body_O : (((equal) (((nat) ) -> (bool) )) (((leb_body) ) ((O) ))) (\lambda m : (nat) . (true) ).
definition eq_leb_body_O : (((leibniz) (((nat) ) -> (bool) )) (((leb_body) ) ((O) ))) (\lambda m : (nat) . (true) ) := ((((equal_leibniz) (((nat) ) -> (bool) )) (((leb_body) ) ((O) ))) (\lambda m : (nat) . (true) )) (axiom_leb_body_O).
definition sym_eq_leb_body_O : (((leibniz) (((nat) ) -> (bool) )) (\lambda m : (nat) . (true) )) (((leb_body) ) ((O) )) := ((((sym_leibniz) (((nat) ) -> (bool) )) (((leb_body) ) ((O) ))) (\lambda m : (nat) . (true) )) (eq_leb_body_O).
axiom axiom_leb_body_S : \forall (n:(nat) ). (((equal) (((nat) ) -> (bool) )) (((leb_body) ) (((S) ) (n)))) (\lambda m : (nat) . ((((match_nat_type) ((bool) )) ((false) )) (\lambda q : (nat) . (((leb) ) (n)) (q))) (m)).
definition eq_leb_body_S : \forall (n:(nat) ). (((leibniz) (((nat) ) -> (bool) )) (((leb_body) ) (((S) ) (n)))) (\lambda m : (nat) . ((((match_nat_type) ((bool) )) ((false) )) (\lambda q : (nat) . (((leb) ) (n)) (q))) (m)) := \lambda n : (nat) . ((((equal_leibniz) (((nat) ) -> (bool) )) (((leb_body) ) (((S) ) (n)))) (\lambda m : (nat) . ((((match_nat_type) ((bool) )) ((false) )) (\lambda q : (nat) . (((leb) ) (n)) (q))) (m))) ((axiom_leb_body_S) (n)).
definition sym_eq_leb_body_S : \forall (n:(nat) ). (((leibniz) (((nat) ) -> (bool) )) (\lambda m : (nat) . ((((match_nat_type) ((bool) )) ((false) )) (\lambda q : (nat) . (((leb) ) (n)) (q))) (m))) (((leb_body) ) (((S) ) (n))) := \lambda n : (nat) . ((((sym_leibniz) (((nat) ) -> (bool) )) (((leb_body) ) (((S) ) (n)))) (\lambda m : (nat) . ((((match_nat_type) ((bool) )) ((false) )) (\lambda q : (nat) . (((leb) ) (n)) (q))) (m))) ((eq_leb_body_S) (n)).
definition leb_elim : \forall (n:(nat) ). \forall (m:(nat) ). \forall (P:((bool) ) -> Prop). (((((le) ) (n)) (m)) -> (P) ((true) )) -> ((((Not) ) ((((le) ) (n)) (m))) -> (P) ((false) )) -> (P) ((((leb) ) (n)) (m)) := ((((nat_elim2) (\lambda j__ : (nat) . \lambda j_0 : (nat) . \forall (P:((bool) ) -> Prop). (((((le) ) (j__)) (j_0)) -> (P) ((true) )) -> ((((Not) ) ((((le) ) (j__)) (j_0))) -> (P) ((false) )) -> (P) ((((leb) ) (j__)) (j_0)))) (\lambda n : (nat) . (((sym_eq_leb) ((O) )) (\lambda y : ((nat) ) -> (bool) . \forall (P:((bool) ) -> Prop). (((((le) ) ((O) )) (n)) -> (P) ((true) )) -> ((((Not) ) ((((le) ) ((O) )) (n))) -> (P) ((false) )) -> (P) ((y) (n)))) (((((sym_eq_filter_nat_type_O) (((nat) ) -> (bool) )) ((leb_body) )) (\lambda y : ((nat) ) -> (bool) . \forall (P:((bool) ) -> Prop). (((((le) ) ((O) )) (n)) -> (P) ((true) )) -> ((((Not) ) ((((le) ) ((O) )) (n))) -> (P) ((false) )) -> (P) ((y) (n)))) (((sym_eq_leb_body_O) (\lambda y : ((nat) ) -> (bool) . \forall (P:((bool) ) -> Prop). (((((le) ) ((O) )) (n)) -> (P) ((true) )) -> ((((Not) ) ((((le) ) ((O) )) (n))) -> (P) ((false) )) -> (P) ((y) (n)))) (\lambda P : ((bool) ) -> Prop. \lambda auto : ((((le) ) ((O) )) (n)) -> (P) ((true) ). (\lambda auto' : (((Not) ) ((((le) ) ((O) )) (n))) -> (P) ((false) ). ((auto) ((le_O_n) (n))))))))) (\lambda n : (nat) . (((sym_eq_leb) (((S) ) (n))) (\lambda y : ((nat) ) -> (bool) . \forall (P:((bool) ) -> Prop). (((((le) ) (((S) ) (n))) ((O) )) -> (P) ((true) )) -> ((((Not) ) ((((le) ) (((S) ) (n))) ((O) ))) -> (P) ((false) )) -> (P) ((y) ((O) )))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (bool) )) ((leb_body) )) (n)) (\lambda y : ((nat) ) -> (bool) . \forall (P:((bool) ) -> Prop). (((((le) ) (((S) ) (n))) ((O) )) -> (P) ((true) )) -> ((((Not) ) ((((le) ) (((S) ) (n))) ((O) ))) -> (P) ((false) )) -> (P) ((y) ((O) )))) ((((sym_eq_leb_body_S) (n)) (\lambda y : ((nat) ) -> (bool) . \forall (P:((bool) ) -> Prop). (((((le) ) (((S) ) (n))) ((O) )) -> (P) ((true) )) -> ((((Not) ) ((((le) ) (((S) ) (n))) ((O) ))) -> (P) ((false) )) -> (P) ((y) ((O) )))) ((((((sym_eq_match_nat_type_O) ((bool) )) ((false) )) (\lambda q : (nat) . (((leb) ) (n)) (q))) (\lambda y : (bool) . \forall (P:((bool) ) -> Prop). (((((le) ) (((S) ) (n))) ((O) )) -> (P) ((true) )) -> ((((Not) ) ((((le) ) (((S) ) (n))) ((O) ))) -> (P) ((false) )) -> (P) (y))) (\lambda P : ((bool) ) -> Prop. \lambda auto : ((((le) ) (((S) ) (n))) ((O) )) -> (P) ((true) ). (\lambda auto' : (((Not) ) ((((le) ) (((S) ) (n))) ((O) ))) -> (P) ((false) ). ((auto') ((not_le_Sn_O) (n)))))))))) (\lambda n : (nat) . \lambda m : (nat) . (((sym_eq_leb) (((S) ) (n))) (\lambda y : ((nat) ) -> (bool) . (\forall (P:((bool) ) -> Prop). (((((le) ) (n)) (m)) -> (P) ((true) )) -> ((((Not) ) ((((le) ) (n)) (m))) -> (P) ((false) )) -> (P) ((((leb) ) (n)) (m))) -> \forall (P:((bool) ) -> Prop). (((((le) ) (((S) ) (n))) (((S) ) (m))) -> (P) ((true) )) -> ((((Not) ) ((((le) ) (((S) ) (n))) (((S) ) (m)))) -> (P) ((false) )) -> (P) ((y) (((S) ) (m))))) ((((((sym_eq_filter_nat_type_S) (((nat) ) -> (bool) )) ((leb_body) )) (n)) (\lambda y : ((nat) ) -> (bool) . (\forall (P:((bool) ) -> Prop). (((((le) ) (n)) (m)) -> (P) ((true) )) -> ((((Not) ) ((((le) ) (n)) (m))) -> (P) ((false) )) -> (P) ((((leb) ) (n)) (m))) -> \forall (P:((bool) ) -> Prop). (((((le) ) (((S) ) (n))) (((S) ) (m))) -> (P) ((true) )) -> ((((Not) ) ((((le) ) (((S) ) (n))) (((S) ) (m)))) -> (P) ((false) )) -> (P) ((y) (((S) ) (m))))) ((((sym_eq_leb_body_S) (n)) (\lambda y : ((nat) ) -> (bool) . (\forall (P:((bool) ) -> Prop). (((((le) ) (n)) (m)) -> (P) ((true) )) -> ((((Not) ) ((((le) ) (n)) (m))) -> (P) ((false) )) -> (P) ((((leb) ) (n)) (m))) -> \forall (P:((bool) ) -> Prop). (((((le) ) (((S) ) (n))) (((S) ) (m))) -> (P) ((true) )) -> ((((Not) ) ((((le) ) (((S) ) (n))) (((S) ) (m)))) -> (P) ((false) )) -> (P) ((y) (((S) ) (m))))) (((((((sym_eq_match_nat_type_S) ((bool) )) ((false) )) (\lambda q : (nat) . (((leb) ) (n)) (q))) (m)) (\lambda y : (bool) . (\forall (P:((bool) ) -> Prop). (((((le) ) (n)) (m)) -> (P) ((true) )) -> ((((Not) ) ((((le) ) (n)) (m))) -> (P) ((false) )) -> (P) ((((leb) ) (n)) (m))) -> \forall (P:((bool) ) -> Prop). (((((le) ) (((S) ) (n))) (((S) ) (m))) -> (P) ((true) )) -> ((((Not) ) ((((le) ) (((S) ) (n))) (((S) ) (m)))) -> (P) ((false) )) -> (P) (y))) (\lambda Hind : \forall (P:((bool) ) -> Prop). (((((le) ) (n)) (m)) -> (P) ((true) )) -> ((((Not) ) ((((le) ) (n)) (m))) -> (P) ((false) )) -> (P) ((((leb) ) (n)) (m)). (\lambda P : ((bool) ) -> Prop. \lambda Pt : ((((le) ) (((S) ) (n))) (((S) ) (m))) -> (P) ((true) ). (\lambda Pf : (((Not) ) ((((le) ) (((S) ) (n))) (((S) ) (m)))) -> (P) ((false) ). ((((Hind) (P)) (\lambda lenm : (((le) ) (n)) (m). ((Pt) ((((le_S_S) (n)) (m)) (lenm))))) (\lambda nlenm : ((Not) ) ((((le) ) (n)) (m)). ((Pf) ((((not_le_to_not_le_S_S) (n)) (m)) (nlenm)))))))))))).
definition leb_true_to_le : \forall (n:(nat) ). \forall (m:(nat) ). ((((eq) ((bool) )) ((((leb) ) (n)) (m))) ((true) )) -> (((le) ) (n)) (m) := \lambda n : (nat) . \lambda m : (nat) . (((((leb_elim) (n)) (m)) (\lambda j__ : (bool) . ((((eq) ((bool) )) (j__)) ((true) )) -> (((le) ) (n)) (m))) (\lambda auto : (((le) ) (n)) (m). (\lambda auto' : (((eq) ((bool) )) ((true) )) ((true) ). (auto)))) (\lambda j__ : ((Not) ) ((((le) ) (n)) (m)). (\lambda abs : (((eq) ((bool) )) ((false) )) ((true) ). (((falsity) ((((le) ) (n)) (m))) ((((absurd) ((((eq) ((bool) )) ((true) )) ((false) ))) (((((((rewrite_r) ((bool) )) ((true) )) (\lambda j__1 : (bool) . (((eq) ((bool) )) ((true) )) (j__1))) (((refl) ((bool) )) ((true) ))) ((false) )) (abs))) (not_eq_true_false))))).
definition le_to_leb_true : \forall (n:(nat) ). \forall (m:(nat) ). ((((le) ) (n)) (m)) -> (((eq) ((bool) )) ((((leb) ) (n)) (m))) ((true) ) := \lambda n : (nat) . \lambda m : (nat) . (((((leb_elim) (n)) (m)) (\lambda j__ : (bool) . ((((le) ) (n)) (m)) -> (((eq) ((bool) )) (j__)) ((true) ))) (\lambda auto : (((le) ) (n)) (m). (\lambda auto' : (((le) ) (n)) (m). (((refl) ((bool) )) ((true) ))))) (\lambda H : ((Not) ) ((((le) ) (n)) (m)). (\lambda H1 : (((le) ) (n)) (m). (((falsity) ((((eq) ((bool) )) ((false) )) ((true) ))) ((((absurd) ((((le) ) (n)) (m))) (H1)) (H))))).
definition not_le_to_leb_false : \forall (n:(nat) ). \forall (m:(nat) ). (((Not) ) ((((le) ) (n)) (m))) -> (((eq) ((bool) )) ((((leb) ) (n)) (m))) ((false) ) := \lambda n : (nat) . \lambda m : (nat) . (((((leb_elim) (n)) (m)) (\lambda j__ : (bool) . (((Not) ) ((((le) ) (n)) (m))) -> (((eq) ((bool) )) (j__)) ((false) ))) (\lambda H : (((le) ) (n)) (m). (\lambda H1 : ((Not) ) ((((le) ) (n)) (m)). (((falsity) ((((eq) ((bool) )) ((true) )) ((false) ))) ((((absurd) ((((le) ) (n)) (m))) (H)) (H1)))))) (\lambda auto : ((Not) ) ((((le) ) (n)) (m)). (\lambda auto' : ((Not) ) ((((le) ) (n)) (m)). (((refl) ((bool) )) ((false) )))).

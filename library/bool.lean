import .connectives
import .leibniz
import .logic
import .relations
axiom bool.bool : Type.
constant bool.true : (bool.bool) .
constant bool.false : (bool.bool) .
axiom bool.match_bool_prop : forall (return:((bool.bool) ) -> Prop) , ((return) ((bool.true) )) -> ((return) ((bool.false) )) -> forall (z:(bool.bool) ) , (return) (z).
constant bool.match_bool_type : forall (return : Type) , (return) -> (return) -> ((bool.bool) ) -> return.
axiom bool.axiom_match_bool_type_true : forall (return : Type) , forall (case_true:return) , forall (case_false:return) , (((connectives.equal) (return)) (((((bool.match_bool_type) (return)) (case_true)) (case_false)) ((bool.true) ))) (case_true).
theorem bool.eq_match_bool_type_true : forall (return : Type) , forall (case_true:return) , forall (case_false:return) , (((leibniz.leibniz) (return)) (((((bool.match_bool_type) (return)) (case_true)) (case_false)) ((bool.true) ))) (case_true) := fun (return : Type) , fun (case_true : return) , fun (case_false : return) , ((((@connectives.equal_leibniz) (return)) (((((bool.match_bool_type) (return)) (case_true)) (case_false)) ((bool.true) ))) (case_true)) ((((@bool.axiom_match_bool_type_true) (return)) (case_true)) (case_false)).
axiom bool.axiom_match_bool_type_false : forall (return : Type) , forall (case_true:return) , forall (case_false:return) , (((connectives.equal) (return)) (((((bool.match_bool_type) (return)) (case_true)) (case_false)) ((bool.false) ))) (case_false).
theorem bool.eq_match_bool_type_false : forall (return : Type) , forall (case_true:return) , forall (case_false:return) , (((leibniz.leibniz) (return)) (((((bool.match_bool_type) (return)) (case_true)) (case_false)) ((bool.false) ))) (case_false) := fun (return : Type) , fun (case_true : return) , fun (case_false : return) , ((((@connectives.equal_leibniz) (return)) (((((bool.match_bool_type) (return)) (case_true)) (case_false)) ((bool.false) ))) (case_false)) ((((@bool.axiom_match_bool_type_false) (return)) (case_true)) (case_false)).
theorem bool.sym_eq_match_bool_type_true : forall (return : Type) , forall (case_true:return) , forall (case_false:return) , (((leibniz.leibniz) (return)) (case_true)) (((((bool.match_bool_type) (return)) (case_true)) (case_false)) ((bool.true) )) := fun (return : Type) , fun (case_true : return) , fun (case_false : return) , ((((@leibniz.sym_leibniz) (return)) (((((bool.match_bool_type) (return)) (case_true)) (case_false)) ((bool.true) ))) (case_true)) ((((@bool.eq_match_bool_type_true) (return)) (case_true)) (case_false)).
theorem bool.sym_eq_match_bool_type_false : forall (return : Type) , forall (case_true:return) , forall (case_false:return) , (((leibniz.leibniz) (return)) (case_false)) (((((bool.match_bool_type) (return)) (case_true)) (case_false)) ((bool.false) )) := fun (return : Type) , fun (case_true : return) , fun (case_false : return) , ((((@leibniz.sym_leibniz) (return)) (((((bool.match_bool_type) (return)) (case_true)) (case_false)) ((bool.false) ))) (case_false)) ((((@bool.eq_match_bool_type_false) (return)) (case_true)) (case_false)).
theorem bool.bool_discr : forall (x:(bool.bool) ) , forall (y:(bool.bool) ) , ((((logic.eq_) ((bool.bool) )) (x)) (y)) -> ((((bool.match_bool_type) (Prop)) (((((bool.match_bool_type) (Prop)) (forall (P:Prop) , (P) -> P)) (forall (P:Prop) , P)) (y))) (((((bool.match_bool_type) (Prop)) (forall (P:Prop) , P)) (forall (P:Prop) , (P) -> P)) (y))) (x) := fun (x : (bool.bool) ) , fun (y : (bool.bool) ) , fun (Deq : (((logic.eq_) ((bool.bool) )) (x)) (y)) , (((((((@logic.eq_ind) ((bool.bool) )) (x)) (fun (x_13 : (bool.bool) ) , ((((bool.match_bool_type) (Prop)) (((((bool.match_bool_type) (Prop)) (forall (P:Prop) , (P) -> P)) (forall (P:Prop) , P)) (x_13))) (((((bool.match_bool_type) (Prop)) (forall (P:Prop) , P)) (forall (P:Prop) , (P) -> P)) (x_13))) (x))) (((((@bool.match_bool_prop) (fun (__ : (bool.bool) ) , ((((bool.match_bool_type) (Prop)) (((((bool.match_bool_type) (Prop)) (forall (P:Prop) , (P) -> P)) (forall (P:Prop) , P)) (__))) (((((bool.match_bool_type) (Prop)) (forall (P:Prop) , P)) (forall (P:Prop) , (P) -> P)) (__))) (__))) ((((((@bool.sym_eq_match_bool_type_true) (Prop)) (((((bool.match_bool_type) (Prop)) (forall (P:Prop) , (P) -> P)) (forall (P:Prop) , P)) ((bool.true) ))) (((((bool.match_bool_type) (Prop)) (forall (P:Prop) , P)) (forall (P:Prop) , (P) -> P)) ((bool.true) ))) (fun (x0 : Prop) , x0)) ((((((@bool.sym_eq_match_bool_type_true) (Prop)) (forall (P:Prop) , (P) -> P)) (forall (P:Prop) , P)) (fun (x0 : Prop) , x0)) (fun (P : Prop) , fun (DH : P) , (DH))))) ((((((@bool.sym_eq_match_bool_type_false) (Prop)) (((((bool.match_bool_type) (Prop)) (forall (P:Prop) , (P) -> P)) (forall (P:Prop) , P)) ((bool.false) ))) (((((bool.match_bool_type) (Prop)) (forall (P:Prop) , P)) (forall (P:Prop) , (P) -> P)) ((bool.false) ))) (fun (x0 : Prop) , x0)) ((((((@bool.sym_eq_match_bool_type_false) (Prop)) (forall (P:Prop) , P)) (forall (P:Prop) , (P) -> P)) (fun (x0 : Prop) , x0)) (fun (P : Prop) , fun (DH : P) , (DH))))) (x))) (y)) (Deq)).
theorem bool.not_eq_true_false : ((connectives.Not) ) ((((logic.eq_) ((bool.bool) )) ((bool.true) )) ((bool.false) )) := ((@connectives.nmk) ((((logic.eq_) ((bool.bool) )) ((bool.true) )) ((bool.false) ))) (fun (Heq : (((logic.eq_) ((bool.bool) )) ((bool.true) )) ((bool.false) )) , (((((((@bool.eq_match_bool_type_false) (Prop)) (forall (P:Prop) , (P) -> P)) (forall (P:Prop) , P)) (fun (x : Prop) , x)) ((((((@bool.eq_match_bool_type_true) (Prop)) (((((bool.match_bool_type) (Prop)) (forall (P:Prop) , (P) -> P)) (forall (P:Prop) , P)) ((bool.false) ))) (((((bool.match_bool_type) (Prop)) (forall (P:Prop) , P)) (forall (P:Prop) , (P) -> P)) ((bool.false) ))) (fun (x : Prop) , x)) ((((@bool.bool_discr) ((bool.true) )) ((bool.false) )) (Heq)))) ((connectives.False) ))).
noncomputable def bool.notb : ((bool.bool) ) -> (bool.bool)  := fun (b : (bool.bool) ) , ((((bool.match_bool_type) ((bool.bool) )) ((bool.false) )) ((bool.true) )) (b).
noncomputable def bool.andb : ((bool.bool) ) -> ((bool.bool) ) -> (bool.bool)  := fun (b1 : (bool.bool) ) , fun (b2 : (bool.bool) ) , ((((bool.match_bool_type) ((bool.bool) )) (b2)) ((bool.false) )) (b1).
theorem bool.andb_true_l : forall (b1:(bool.bool) ) , forall (b2:(bool.bool) ) , ((((logic.eq_) ((bool.bool) )) ((((bool.andb) ) (b1)) (b2))) ((bool.true) )) -> (((logic.eq_) ((bool.bool) )) (b1)) ((bool.true) ) := fun (b1 : (bool.bool) ) , ((((@bool.match_bool_prop) (fun (__ : (bool.bool) ) , forall (b2:(bool.bool) ) , ((((logic.eq_) ((bool.bool) )) ((((bool.andb) ) (__)) (b2))) ((bool.true) )) -> (((logic.eq_) ((bool.bool) )) (__)) ((bool.true) ))) (fun (b2 : (bool.bool) ) , (((((@bool.sym_eq_match_bool_type_true) ((bool.bool) )) (b2)) ((bool.false) )) (fun (x : (bool.bool) ) , ((((logic.eq_) ((bool.bool) )) (x)) ((bool.true) )) -> (((logic.eq_) ((bool.bool) )) ((bool.true) )) ((bool.true) ))) (fun (auto : (((logic.eq_) ((bool.bool) )) (b2)) ((bool.true) )) , (((((((@logic.rewrite_l) ((bool.bool) )) (b2)) (fun (__ : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) (__)) ((bool.true) ))) (((((((@logic.rewrite_l) ((bool.bool) )) (b2)) (fun (__ : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) (b2)) (__))) (((@logic.refl_) ((bool.bool) )) (b2))) ((bool.true) )) (auto))) ((bool.true) )) (auto))))) (fun (_b2 : (bool.bool) ) , (((((@bool.sym_eq_match_bool_type_false) ((bool.bool) )) (_b2)) ((bool.false) )) (fun (x : (bool.bool) ) , ((((logic.eq_) ((bool.bool) )) (x)) ((bool.true) )) -> (((logic.eq_) ((bool.bool) )) ((bool.false) )) ((bool.true) ))) (fun (auto : (((logic.eq_) ((bool.bool) )) ((bool.false) )) ((bool.true) )) , (((((((@logic.rewrite_r) ((bool.bool) )) ((bool.true) )) (fun (__ : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) (__)) ((bool.true) ))) (((@logic.refl_) ((bool.bool) )) ((bool.true) ))) ((bool.false) )) (auto))))) (b1).
theorem bool.andb_true_r : forall (b1:(bool.bool) ) , forall (b2:(bool.bool) ) , ((((logic.eq_) ((bool.bool) )) ((((bool.andb) ) (b1)) (b2))) ((bool.true) )) -> (((logic.eq_) ((bool.bool) )) (b2)) ((bool.true) ) := fun (b1 : (bool.bool) ) , fun (b2 : (bool.bool) ) , ((((@bool.match_bool_prop) (fun (__ : (bool.bool) ) , ((((logic.eq_) ((bool.bool) )) ((((bool.andb) ) (__)) (b2))) ((bool.true) )) -> (((logic.eq_) ((bool.bool) )) (b2)) ((bool.true) ))) ((((((@bool.sym_eq_match_bool_type_true) ((bool.bool) )) (b2)) ((bool.false) )) (fun (x : (bool.bool) ) , ((((logic.eq_) ((bool.bool) )) (x)) ((bool.true) )) -> (((logic.eq_) ((bool.bool) )) (b2)) ((bool.true) ))) (fun (auto : (((logic.eq_) ((bool.bool) )) (b2)) ((bool.true) )) , (((((((@logic.rewrite_l) ((bool.bool) )) (b2)) (fun (__ : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) (b2)) (__))) (((@logic.refl_) ((bool.bool) )) (b2))) ((bool.true) )) (auto))))) ((((((@bool.sym_eq_match_bool_type_false) ((bool.bool) )) (b2)) ((bool.false) )) (fun (x : (bool.bool) ) , ((((logic.eq_) ((bool.bool) )) (x)) ((bool.true) )) -> (((logic.eq_) ((bool.bool) )) (b2)) ((bool.true) ))) (((((@bool.match_bool_prop) (fun (__ : (bool.bool) ) , ((((logic.eq_) ((bool.bool) )) ((bool.false) )) ((bool.true) )) -> (((logic.eq_) ((bool.bool) )) (__)) ((bool.true) ))) (fun (auto : (((logic.eq_) ((bool.bool) )) ((bool.false) )) ((bool.true) )) , (((@logic.refl_) ((bool.bool) )) ((bool.true) )))) (fun (auto : (((logic.eq_) ((bool.bool) )) ((bool.false) )) ((bool.true) )) , (((((((@logic.rewrite_r) ((bool.bool) )) ((bool.true) )) (fun (__ : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) (__)) ((bool.true) ))) (((@logic.refl_) ((bool.bool) )) ((bool.true) ))) ((bool.false) )) (auto)))) (b2)))) (b1).
theorem bool.true_or_false : forall (b:(bool.bool) ) , (((connectives.Or) ) ((((logic.eq_) ((bool.bool) )) (b)) ((bool.true) ))) ((((logic.eq_) ((bool.bool) )) (b)) ((bool.false) )) := fun (b : (bool.bool) ) , ((((@bool.match_bool_prop) (fun (__ : (bool.bool) ) , (((connectives.Or) ) ((((logic.eq_) ((bool.bool) )) (__)) ((bool.true) ))) ((((logic.eq_) ((bool.bool) )) (__)) ((bool.false) )))) ((((@connectives.or_introl) ((((logic.eq_) ((bool.bool) )) ((bool.true) )) ((bool.true) ))) ((((logic.eq_) ((bool.bool) )) ((bool.true) )) ((bool.false) ))) (((@logic.refl_) ((bool.bool) )) ((bool.true) )))) ((((@relations.RC_reflexive) ((bool.bool) )) (fun (__ : (bool.bool) ) , fun (_0 : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) ((bool.false) )) ((bool.true) ))) ((bool.false) ))) (b).

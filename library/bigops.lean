import .bool
import .connectives
import .div_mod
import .leibniz
import .logic
import .nat
def bigops.sameF_upto : forall (A : Type) , ((nat.nat) ) -> (((nat.nat) ) -> A) -> (((nat.nat) ) -> A) -> Prop := fun (A : Type) , fun (k : (nat.nat) ) , fun (f : ((nat.nat) ) -> A) , fun (g : ((nat.nat) ) -> A) , forall (i:(nat.nat) ) , ((((nat.lt_) ) (i)) (k)) -> (((logic.eq_) (A)) ((f) (i))) ((g) (i)).
def bigops.sameF_p : forall (A : Type) , ((nat.nat) ) -> (((nat.nat) ) -> (bool.bool) ) -> (((nat.nat) ) -> A) -> (((nat.nat) ) -> A) -> Prop := fun (A : Type) , fun (k : (nat.nat) ) , fun (p : ((nat.nat) ) -> (bool.bool) ) , fun (f : ((nat.nat) ) -> A) , fun (g : ((nat.nat) ) -> A) , forall (i:(nat.nat) ) , ((((nat.lt_) ) (i)) (k)) -> ((((logic.eq_) ((bool.bool) )) ((p) (i))) ((bool.true) )) -> (((logic.eq_) (A)) ((f) (i))) ((g) (i)).
theorem bigops.sameF_upto_le : forall (A : Type) , forall (f:((nat.nat) ) -> A) , forall (g:((nat.nat) ) -> A) , forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , ((((nat.le_) ) (n)) (m)) -> (((((bigops.sameF_upto) (A)) (m)) (f)) (g)) -> ((((bigops.sameF_upto) (A)) (n)) (f)) (g) := fun (A : Type) , fun (f : ((nat.nat) ) -> A) , fun (g : ((nat.nat) ) -> A) , fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , fun (lenm : (((nat.le_) ) (n)) (m)) , (fun (samef : ((((bigops.sameF_upto) (A)) (m)) (f)) (g)) , (fun (i : (nat.nat) ) , fun (ltin : (((nat.lt_) ) (i)) (n)) , (((samef) (i)) ((((((@nat.lt_to_le_to_lt) (i)) (n)) (m)) (ltin)) (lenm))))).
theorem bigops.sameF_p_le : forall (A : Type) , forall (p:((nat.nat) ) -> (bool.bool) ) , forall (f:((nat.nat) ) -> A) , forall (g:((nat.nat) ) -> A) , forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , ((((nat.le_) ) (n)) (m)) -> ((((((bigops.sameF_p) (A)) (m)) (p)) (f)) (g)) -> (((((bigops.sameF_p) (A)) (n)) (p)) (f)) (g) := fun (A : Type) , fun (p : ((nat.nat) ) -> (bool.bool) ) , fun (f : ((nat.nat) ) -> A) , fun (g : ((nat.nat) ) -> A) , fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , fun (lenm : (((nat.le_) ) (n)) (m)) , (fun (samef : (((((bigops.sameF_p) (A)) (m)) (p)) (f)) (g)) , (fun (i : (nat.nat) ) , fun (ltin : (((nat.lt_) ) (i)) (n)) , (fun (pi : (((logic.eq_) ((bool.bool) )) ((p) (i))) ((bool.true) )) , ((((samef) (i)) ((((((@nat.lt_to_le_to_lt) (i)) (n)) (m)) (ltin)) (lenm))) (((((((@logic.rewrite_r) ((bool.bool) )) ((bool.true) )) (fun (__ : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) (__)) ((bool.true) ))) (((@logic.refl_) ((bool.bool) )) ((bool.true) ))) ((p) (i))) (pi)))))).
constant bigops.bigop : forall (H : Type) , ((nat.nat) ) -> (((nat.nat) ) -> (bool.bool) ) -> (H) -> ((H) -> (H) -> H) -> (((nat.nat) ) -> H) -> H.
constant bigops.bigop_body : forall (H : Type) , ((nat.nat) ) -> (((nat.nat) ) -> (bool.bool) ) -> (H) -> ((H) -> (H) -> H) -> (((nat.nat) ) -> H) -> H.
axiom bigops.axiom_bigop_O : forall (H : Type) , (((connectives.equal) ((((nat.nat) ) -> (bool.bool) ) -> (H) -> ((H) -> (H) -> H) -> (((nat.nat) ) -> H) -> H)) (((bigops.bigop) (H)) ((nat.O) ))) (((bigops.bigop_body) (H)) ((nat.O) )).
theorem bigops.eq_bigop_O : forall (H : Type) , (((leibniz.leibniz) ((((nat.nat) ) -> (bool.bool) ) -> (H) -> ((H) -> (H) -> H) -> (((nat.nat) ) -> H) -> H)) (((bigops.bigop) (H)) ((nat.O) ))) (((bigops.bigop_body) (H)) ((nat.O) )) := fun (H : Type) , ((((@connectives.equal_leibniz) ((((nat.nat) ) -> (bool.bool) ) -> (H) -> ((H) -> (H) -> H) -> (((nat.nat) ) -> H) -> H)) (((bigops.bigop) (H)) ((nat.O) ))) (((bigops.bigop_body) (H)) ((nat.O) ))) ((@bigops.axiom_bigop_O) (H)).
theorem bigops.sym_eq_bigop_O : forall (H : Type) , (((leibniz.leibniz) ((((nat.nat) ) -> (bool.bool) ) -> (H) -> ((H) -> (H) -> H) -> (((nat.nat) ) -> H) -> H)) (((bigops.bigop_body) (H)) ((nat.O) ))) (((bigops.bigop) (H)) ((nat.O) )) := fun (H : Type) , ((((@leibniz.sym_leibniz) ((((nat.nat) ) -> (bool.bool) ) -> (H) -> ((H) -> (H) -> H) -> (((nat.nat) ) -> H) -> H)) (((bigops.bigop) (H)) ((nat.O) ))) (((bigops.bigop_body) (H)) ((nat.O) ))) ((@bigops.eq_bigop_O) (H)).
axiom bigops.axiom_bigop_S : forall (H : Type) , forall (n:(nat.nat) ) , (((connectives.equal) ((((nat.nat) ) -> (bool.bool) ) -> (H) -> ((H) -> (H) -> H) -> (((nat.nat) ) -> H) -> H)) (((bigops.bigop) (H)) (((nat.S) ) (n)))) (((bigops.bigop_body) (H)) (((nat.S) ) (n))).
theorem bigops.eq_bigop_S : forall (H : Type) , forall (n:(nat.nat) ) , (((leibniz.leibniz) ((((nat.nat) ) -> (bool.bool) ) -> (H) -> ((H) -> (H) -> H) -> (((nat.nat) ) -> H) -> H)) (((bigops.bigop) (H)) (((nat.S) ) (n)))) (((bigops.bigop_body) (H)) (((nat.S) ) (n))) := fun (H : Type) , fun (n : (nat.nat) ) , ((((@connectives.equal_leibniz) ((((nat.nat) ) -> (bool.bool) ) -> (H) -> ((H) -> (H) -> H) -> (((nat.nat) ) -> H) -> H)) (((bigops.bigop) (H)) (((nat.S) ) (n)))) (((bigops.bigop_body) (H)) (((nat.S) ) (n)))) (((@bigops.axiom_bigop_S) (H)) (n)).
theorem bigops.sym_eq_bigop_S : forall (H : Type) , forall (n:(nat.nat) ) , (((leibniz.leibniz) ((((nat.nat) ) -> (bool.bool) ) -> (H) -> ((H) -> (H) -> H) -> (((nat.nat) ) -> H) -> H)) (((bigops.bigop_body) (H)) (((nat.S) ) (n)))) (((bigops.bigop) (H)) (((nat.S) ) (n))) := fun (H : Type) , fun (n : (nat.nat) ) , ((((@leibniz.sym_leibniz) ((((nat.nat) ) -> (bool.bool) ) -> (H) -> ((H) -> (H) -> H) -> (((nat.nat) ) -> H) -> H)) (((bigops.bigop) (H)) (((nat.S) ) (n)))) (((bigops.bigop_body) (H)) (((nat.S) ) (n)))) (((@bigops.eq_bigop_S) (H)) (n)).
axiom bigops.axiom_bigop_body_O : forall (H : Type) , (((connectives.equal) ((((nat.nat) ) -> (bool.bool) ) -> (H) -> ((H) -> (H) -> H) -> (((nat.nat) ) -> H) -> H)) (((bigops.bigop_body) (H)) ((nat.O) ))) (fun (p : ((nat.nat) ) -> (bool.bool) ) , fun (nil : H) , fun (op : (H) -> (H) -> H) , fun (f : ((nat.nat) ) -> H) , nil).
theorem bigops.eq_bigop_body_O : forall (H : Type) , (((leibniz.leibniz) ((((nat.nat) ) -> (bool.bool) ) -> (H) -> ((H) -> (H) -> H) -> (((nat.nat) ) -> H) -> H)) (((bigops.bigop_body) (H)) ((nat.O) ))) (fun (p : ((nat.nat) ) -> (bool.bool) ) , fun (nil : H) , fun (op : (H) -> (H) -> H) , fun (f : ((nat.nat) ) -> H) , nil) := fun (H : Type) , ((((@connectives.equal_leibniz) ((((nat.nat) ) -> (bool.bool) ) -> (H) -> ((H) -> (H) -> H) -> (((nat.nat) ) -> H) -> H)) (((bigops.bigop_body) (H)) ((nat.O) ))) (fun (p : ((nat.nat) ) -> (bool.bool) ) , fun (nil : H) , fun (op : (H) -> (H) -> H) , fun (f : ((nat.nat) ) -> H) , nil)) ((@bigops.axiom_bigop_body_O) (H)).
theorem bigops.sym_eq_bigop_body_O : forall (H : Type) , (((leibniz.leibniz) ((((nat.nat) ) -> (bool.bool) ) -> (H) -> ((H) -> (H) -> H) -> (((nat.nat) ) -> H) -> H)) (fun (p : ((nat.nat) ) -> (bool.bool) ) , fun (nil : H) , fun (op : (H) -> (H) -> H) , fun (f : ((nat.nat) ) -> H) , nil)) (((bigops.bigop_body) (H)) ((nat.O) )) := fun (H : Type) , ((((@leibniz.sym_leibniz) ((((nat.nat) ) -> (bool.bool) ) -> (H) -> ((H) -> (H) -> H) -> (((nat.nat) ) -> H) -> H)) (((bigops.bigop_body) (H)) ((nat.O) ))) (fun (p : ((nat.nat) ) -> (bool.bool) ) , fun (nil : H) , fun (op : (H) -> (H) -> H) , fun (f : ((nat.nat) ) -> H) , nil)) ((@bigops.eq_bigop_body_O) (H)).
axiom bigops.axiom_bigop_body_S : forall (H : Type) , forall (n:(nat.nat) ) , (((connectives.equal) ((((nat.nat) ) -> (bool.bool) ) -> (H) -> ((H) -> (H) -> H) -> (((nat.nat) ) -> H) -> H)) (((bigops.bigop_body) (H)) (((nat.S) ) (n)))) (fun (p : ((nat.nat) ) -> (bool.bool) ) , fun (nil : H) , fun (op : (H) -> (H) -> H) , fun (f : ((nat.nat) ) -> H) , ((((bool.match_bool_type) (H)) (((op) ((f) (n))) (((((((bigops.bigop) (H)) (n)) (p)) (nil)) (op)) (f)))) (((((((bigops.bigop) (H)) (n)) (p)) (nil)) (op)) (f))) ((p) (n))).
theorem bigops.eq_bigop_body_S : forall (H : Type) , forall (n:(nat.nat) ) , (((leibniz.leibniz) ((((nat.nat) ) -> (bool.bool) ) -> (H) -> ((H) -> (H) -> H) -> (((nat.nat) ) -> H) -> H)) (((bigops.bigop_body) (H)) (((nat.S) ) (n)))) (fun (p : ((nat.nat) ) -> (bool.bool) ) , fun (nil : H) , fun (op : (H) -> (H) -> H) , fun (f : ((nat.nat) ) -> H) , ((((bool.match_bool_type) (H)) (((op) ((f) (n))) (((((((bigops.bigop) (H)) (n)) (p)) (nil)) (op)) (f)))) (((((((bigops.bigop) (H)) (n)) (p)) (nil)) (op)) (f))) ((p) (n))) := fun (H : Type) , fun (n : (nat.nat) ) , ((((@connectives.equal_leibniz) ((((nat.nat) ) -> (bool.bool) ) -> (H) -> ((H) -> (H) -> H) -> (((nat.nat) ) -> H) -> H)) (((bigops.bigop_body) (H)) (((nat.S) ) (n)))) (fun (p : ((nat.nat) ) -> (bool.bool) ) , fun (nil : H) , fun (op : (H) -> (H) -> H) , fun (f : ((nat.nat) ) -> H) , ((((bool.match_bool_type) (H)) (((op) ((f) (n))) (((((((bigops.bigop) (H)) (n)) (p)) (nil)) (op)) (f)))) (((((((bigops.bigop) (H)) (n)) (p)) (nil)) (op)) (f))) ((p) (n)))) (((@bigops.axiom_bigop_body_S) (H)) (n)).
theorem bigops.sym_eq_bigop_body_S : forall (H : Type) , forall (n:(nat.nat) ) , (((leibniz.leibniz) ((((nat.nat) ) -> (bool.bool) ) -> (H) -> ((H) -> (H) -> H) -> (((nat.nat) ) -> H) -> H)) (fun (p : ((nat.nat) ) -> (bool.bool) ) , fun (nil : H) , fun (op : (H) -> (H) -> H) , fun (f : ((nat.nat) ) -> H) , ((((bool.match_bool_type) (H)) (((op) ((f) (n))) (((((((bigops.bigop) (H)) (n)) (p)) (nil)) (op)) (f)))) (((((((bigops.bigop) (H)) (n)) (p)) (nil)) (op)) (f))) ((p) (n)))) (((bigops.bigop_body) (H)) (((nat.S) ) (n))) := fun (H : Type) , fun (n : (nat.nat) ) , ((((@leibniz.sym_leibniz) ((((nat.nat) ) -> (bool.bool) ) -> (H) -> ((H) -> (H) -> H) -> (((nat.nat) ) -> H) -> H)) (((bigops.bigop_body) (H)) (((nat.S) ) (n)))) (fun (p : ((nat.nat) ) -> (bool.bool) ) , fun (nil : H) , fun (op : (H) -> (H) -> H) , fun (f : ((nat.nat) ) -> H) , ((((bool.match_bool_type) (H)) (((op) ((f) (n))) (((((((bigops.bigop) (H)) (n)) (p)) (nil)) (op)) (f)))) (((((((bigops.bigop) (H)) (n)) (p)) (nil)) (op)) (f))) ((p) (n)))) (((@bigops.eq_bigop_body_S) (H)) (n)).
theorem bigops.bigop_Strue : forall (B : Type) , forall (k:(nat.nat) ) , forall (p:((nat.nat) ) -> (bool.bool) ) , forall (nil:B) , forall (op:(B) -> (B) -> B) , forall (f:((nat.nat) ) -> B) , ((((logic.eq_) ((bool.bool) )) ((p) (k))) ((bool.true) )) -> (((logic.eq_) (B)) (((((((bigops.bigop) (B)) (((nat.S) ) (k))) (fun (i : (nat.nat) ) , (p) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i)))) (((op) ((f) (k))) (((((((bigops.bigop) (B)) (k)) (fun (i : (nat.nat) ) , (p) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i)))) := fun (B : Type) , fun (k : (nat.nat) ) , fun (p : ((nat.nat) ) -> (bool.bool) ) , fun (nil : B) , fun (op : (B) -> (B) -> B) , fun (f : ((nat.nat) ) -> B) , ((((@bigops.sym_eq_bigop_S) (B)) (k)) (fun (y : (((nat.nat) ) -> (bool.bool) ) -> (B) -> ((B) -> (B) -> B) -> (((nat.nat) ) -> B) -> B) , ((((logic.eq_) ((bool.bool) )) ((p) (k))) ((bool.true) )) -> (((logic.eq_) (B)) (((((y) (fun (i : (nat.nat) ) , (p) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i)))) (((op) ((f) (k))) (((((((bigops.bigop) (B)) (k)) (fun (i : (nat.nat) ) , (p) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i)))))) (((((@bigops.sym_eq_bigop_body_S) (B)) (k)) (fun (y : (((nat.nat) ) -> (bool.bool) ) -> (B) -> ((B) -> (B) -> B) -> (((nat.nat) ) -> B) -> B) , ((((logic.eq_) ((bool.bool) )) ((p) (k))) ((bool.true) )) -> (((logic.eq_) (B)) (((((y) (fun (i : (nat.nat) ) , (p) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i)))) (((op) ((f) (k))) (((((((bigops.bigop) (B)) (k)) (fun (i : (nat.nat) ) , (p) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i)))))) (fun (H : (((logic.eq_) ((bool.bool) )) ((p) (k))) ((bool.true) )) , (((((((@logic.eq_ind_r) ((bool.bool) )) ((bool.true) )) (fun (x : (bool.bool) ) , (((logic.eq_) (B)) (((((bool.match_bool_type) (B)) (((op) ((f) (k))) (((((((bigops.bigop) (B)) (k)) (fun (i : (nat.nat) ) , (p) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i))))) (((((((bigops.bigop) (B)) (k)) (fun (i : (nat.nat) ) , (p) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i)))) (x))) (((op) ((f) (k))) (((((((bigops.bigop) (B)) (k)) (fun (i : (nat.nat) ) , (p) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i)))))) ((((((@bool.eq_match_bool_type_true) (B)) (((op) ((f) (k))) (((((((bigops.bigop) (B)) (k)) (fun (i : (nat.nat) ) , (p) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i))))) (((((((bigops.bigop) (B)) (k)) (fun (i : (nat.nat) ) , (p) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i)))) (fun (y : B) , (((logic.eq_) (B)) (((((bool.match_bool_type) (B)) (((op) ((f) (k))) (((((((bigops.bigop) (B)) (k)) (fun (i : (nat.nat) ) , (p) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i))))) (((((((bigops.bigop) (B)) (k)) (fun (i : (nat.nat) ) , (p) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i)))) ((bool.true) ))) (y))) (((@logic.refl_) (B)) (((((bool.match_bool_type) (B)) (((op) ((f) (k))) (((((((bigops.bigop) (B)) (k)) (fun (i : (nat.nat) ) , (p) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i))))) (((((((bigops.bigop) (B)) (k)) (fun (i : (nat.nat) ) , (p) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i)))) ((bool.true) ))))) ((p) (k))) (H)))).
theorem bigops.bigop_Sfalse : forall (B : Type) , forall (k:(nat.nat) ) , forall (p:((nat.nat) ) -> (bool.bool) ) , forall (nil:B) , forall (op:(B) -> (B) -> B) , forall (f:((nat.nat) ) -> B) , ((((logic.eq_) ((bool.bool) )) ((p) (k))) ((bool.false) )) -> (((logic.eq_) (B)) (((((((bigops.bigop) (B)) (((nat.S) ) (k))) (fun (i : (nat.nat) ) , (p) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i)))) (((((((bigops.bigop) (B)) (k)) (fun (i : (nat.nat) ) , (p) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i))) := fun (B : Type) , fun (k : (nat.nat) ) , fun (p : ((nat.nat) ) -> (bool.bool) ) , fun (nil : B) , fun (op : (B) -> (B) -> B) , fun (f : ((nat.nat) ) -> B) , ((((@bigops.sym_eq_bigop_S) (B)) (k)) (fun (y : (((nat.nat) ) -> (bool.bool) ) -> (B) -> ((B) -> (B) -> B) -> (((nat.nat) ) -> B) -> B) , ((((logic.eq_) ((bool.bool) )) ((p) (k))) ((bool.false) )) -> (((logic.eq_) (B)) (((((y) (fun (i : (nat.nat) ) , (p) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i)))) (((((((bigops.bigop) (B)) (k)) (fun (i : (nat.nat) ) , (p) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i))))) (((((@bigops.sym_eq_bigop_body_S) (B)) (k)) (fun (y : (((nat.nat) ) -> (bool.bool) ) -> (B) -> ((B) -> (B) -> B) -> (((nat.nat) ) -> B) -> B) , ((((logic.eq_) ((bool.bool) )) ((p) (k))) ((bool.false) )) -> (((logic.eq_) (B)) (((((y) (fun (i : (nat.nat) ) , (p) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i)))) (((((((bigops.bigop) (B)) (k)) (fun (i : (nat.nat) ) , (p) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i))))) (fun (H : (((logic.eq_) ((bool.bool) )) ((p) (k))) ((bool.false) )) , (((((((@logic.eq_ind_r) ((bool.bool) )) ((bool.false) )) (fun (x : (bool.bool) ) , (((logic.eq_) (B)) (((((bool.match_bool_type) (B)) (((op) ((f) (k))) (((((((bigops.bigop) (B)) (k)) (fun (i : (nat.nat) ) , (p) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i))))) (((((((bigops.bigop) (B)) (k)) (fun (i : (nat.nat) ) , (p) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i)))) (x))) (((((((bigops.bigop) (B)) (k)) (fun (i : (nat.nat) ) , (p) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i))))) ((((((@bool.eq_match_bool_type_false) (B)) (((op) ((f) (k))) (((((((bigops.bigop) (B)) (k)) (fun (i : (nat.nat) ) , (p) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i))))) (((((((bigops.bigop) (B)) (k)) (fun (i : (nat.nat) ) , (p) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i)))) (fun (y : B) , (((logic.eq_) (B)) (((((bool.match_bool_type) (B)) (((op) ((f) (k))) (((((((bigops.bigop) (B)) (k)) (fun (i : (nat.nat) ) , (p) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i))))) (((((((bigops.bigop) (B)) (k)) (fun (i : (nat.nat) ) , (p) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i)))) ((bool.false) ))) (y))) (((@logic.refl_) (B)) (((((bool.match_bool_type) (B)) (((op) ((f) (k))) (((((((bigops.bigop) (B)) (k)) (fun (i : (nat.nat) ) , (p) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i))))) (((((((bigops.bigop) (B)) (k)) (fun (i : (nat.nat) ) , (p) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i)))) ((bool.false) ))))) ((p) (k))) (H)))).
theorem bigops.same_bigop : forall (B : Type) , forall (k:(nat.nat) ) , forall (p1:((nat.nat) ) -> (bool.bool) ) , forall (p2:((nat.nat) ) -> (bool.bool) ) , forall (nil:B) , forall (op:(B) -> (B) -> B) , forall (f:((nat.nat) ) -> B) , forall (g:((nat.nat) ) -> B) , (((((bigops.sameF_upto) ((bool.bool) )) (k)) (p1)) (p2)) -> ((((((bigops.sameF_p) (B)) (k)) (p1)) (f)) (g)) -> (((logic.eq_) (B)) (((((((bigops.bigop) (B)) (k)) (fun (i : (nat.nat) ) , (p1) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i)))) (((((((bigops.bigop) (B)) (k)) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i))) := fun (B : Type) , fun (k : (nat.nat) ) , fun (p1 : ((nat.nat) ) -> (bool.bool) ) , fun (p2 : ((nat.nat) ) -> (bool.bool) ) , fun (nil : B) , fun (op : (B) -> (B) -> B) , fun (f : ((nat.nat) ) -> B) , fun (g : ((nat.nat) ) -> B) , ((((@nat.nat_ind) (fun (_x_365 : (nat.nat) ) , (((((bigops.sameF_upto) ((bool.bool) )) (_x_365)) (p1)) (p2)) -> ((((((bigops.sameF_p) (B)) (_x_365)) (p1)) (f)) (g)) -> (((logic.eq_) (B)) (((((((bigops.bigop) (B)) (_x_365)) (fun (i : (nat.nat) ) , (p1) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i)))) (((((((bigops.bigop) (B)) (_x_365)) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i))))) ((((@bigops.sym_eq_bigop_O) (B)) (fun (y : (((nat.nat) ) -> (bool.bool) ) -> (B) -> ((B) -> (B) -> B) -> (((nat.nat) ) -> B) -> B) , (((((bigops.sameF_upto) ((bool.bool) )) ((nat.O) )) (p1)) (p2)) -> ((((((bigops.sameF_p) (B)) ((nat.O) )) (p1)) (f)) (g)) -> (((logic.eq_) (B)) (((((((bigops.bigop) (B)) ((nat.O) )) (fun (i : (nat.nat) ) , (p1) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i)))) (((((y) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i))))) ((((@bigops.sym_eq_bigop_body_O) (B)) (fun (y : (((nat.nat) ) -> (bool.bool) ) -> (B) -> ((B) -> (B) -> B) -> (((nat.nat) ) -> B) -> B) , (((((bigops.sameF_upto) ((bool.bool) )) ((nat.O) )) (p1)) (p2)) -> ((((((bigops.sameF_p) (B)) ((nat.O) )) (p1)) (f)) (g)) -> (((logic.eq_) (B)) (((((((bigops.bigop) (B)) ((nat.O) )) (fun (i : (nat.nat) ) , (p1) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i)))) (((((y) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i))))) ((((@bigops.eq_bigop_body_O) (B)) (fun (y : (((nat.nat) ) -> (bool.bool) ) -> (B) -> ((B) -> (B) -> B) -> (((nat.nat) ) -> B) -> B) , (((((bigops.sameF_upto) ((bool.bool) )) ((nat.O) )) (p1)) (p2)) -> ((((((bigops.sameF_p) (B)) ((nat.O) )) (p1)) (f)) (g)) -> (((logic.eq_) (B)) (((((((bigops.bigop) (B)) ((nat.O) )) (fun (i : (nat.nat) ) , (p1) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i)))) (((((y) (fun (i : (nat.nat) ) , (p1) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i))))) ((((@bigops.eq_bigop_O) (B)) (fun (y : (((nat.nat) ) -> (bool.bool) ) -> (B) -> ((B) -> (B) -> B) -> (((nat.nat) ) -> B) -> B) , (((((bigops.sameF_upto) ((bool.bool) )) ((nat.O) )) (p1)) (p2)) -> ((((((bigops.sameF_p) (B)) ((nat.O) )) (p1)) (f)) (g)) -> (((logic.eq_) (B)) (((((((bigops.bigop) (B)) ((nat.O) )) (fun (i : (nat.nat) ) , (p1) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i)))) (((((y) (fun (i : (nat.nat) ) , (p1) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i))))) (fun (auto : ((((bigops.sameF_upto) ((bool.bool) )) ((nat.O) )) (p1)) (p2)) , (fun (auto' : (((((bigops.sameF_p) (B)) ((nat.O) )) (p1)) (f)) (g)) , (((@logic.refl_) (B)) (((((((bigops.bigop) (B)) ((nat.O) )) (fun (i : (nat.nat) ) , (p1) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i))))))))))) (fun (n : (nat.nat) ) , ((((@bigops.sym_eq_bigop_S) (B)) (n)) (fun (y : (((nat.nat) ) -> (bool.bool) ) -> (B) -> ((B) -> (B) -> B) -> (((nat.nat) ) -> B) -> B) , ((((((bigops.sameF_upto) ((bool.bool) )) (n)) (p1)) (p2)) -> ((((((bigops.sameF_p) (B)) (n)) (p1)) (f)) (g)) -> (((logic.eq_) (B)) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (p1) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i)))) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i)))) -> (((((bigops.sameF_upto) ((bool.bool) )) (((nat.S) ) (n))) (p1)) (p2)) -> ((((((bigops.sameF_p) (B)) (((nat.S) ) (n))) (p1)) (f)) (g)) -> (((logic.eq_) (B)) (((((((bigops.bigop) (B)) (((nat.S) ) (n))) (fun (i : (nat.nat) ) , (p1) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i)))) (((((y) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i))))) (((((@bigops.sym_eq_bigop_S) (B)) (n)) (fun (y : (((nat.nat) ) -> (bool.bool) ) -> (B) -> ((B) -> (B) -> B) -> (((nat.nat) ) -> B) -> B) , ((((((bigops.sameF_upto) ((bool.bool) )) (n)) (p1)) (p2)) -> ((((((bigops.sameF_p) (B)) (n)) (p1)) (f)) (g)) -> (((logic.eq_) (B)) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (p1) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i)))) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i)))) -> (((((bigops.sameF_upto) ((bool.bool) )) (((nat.S) ) (n))) (p1)) (p2)) -> ((((((bigops.sameF_p) (B)) (((nat.S) ) (n))) (p1)) (f)) (g)) -> (((logic.eq_) (B)) (((((y) (fun (i : (nat.nat) ) , (p1) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i)))) (((((((bigops.bigop_body) (B)) (((nat.S) ) (n))) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i))))) (((((@bigops.sym_eq_bigop_body_S) (B)) (n)) (fun (y : (((nat.nat) ) -> (bool.bool) ) -> (B) -> ((B) -> (B) -> B) -> (((nat.nat) ) -> B) -> B) , ((((((bigops.sameF_upto) ((bool.bool) )) (n)) (p1)) (p2)) -> ((((((bigops.sameF_p) (B)) (n)) (p1)) (f)) (g)) -> (((logic.eq_) (B)) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (p1) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i)))) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i)))) -> (((((bigops.sameF_upto) ((bool.bool) )) (((nat.S) ) (n))) (p1)) (p2)) -> ((((((bigops.sameF_p) (B)) (((nat.S) ) (n))) (p1)) (f)) (g)) -> (((logic.eq_) (B)) (((((y) (fun (i : (nat.nat) ) , (p1) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i)))) (((((((bigops.bigop_body) (B)) (((nat.S) ) (n))) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i))))) (((((@bigops.sym_eq_bigop_body_S) (B)) (n)) (fun (y : (((nat.nat) ) -> (bool.bool) ) -> (B) -> ((B) -> (B) -> B) -> (((nat.nat) ) -> B) -> B) , ((((((bigops.sameF_upto) ((bool.bool) )) (n)) (p1)) (p2)) -> ((((((bigops.sameF_p) (B)) (n)) (p1)) (f)) (g)) -> (((logic.eq_) (B)) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (p1) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i)))) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i)))) -> (((((bigops.sameF_upto) ((bool.bool) )) (((nat.S) ) (n))) (p1)) (p2)) -> ((((((bigops.sameF_p) (B)) (((nat.S) ) (n))) (p1)) (f)) (g)) -> (((logic.eq_) (B)) (((((fun (p : ((nat.nat) ) -> (bool.bool) ) , fun (nil0 : B) , fun (op0 : (B) -> (B) -> B) , fun (f0 : ((nat.nat) ) -> B) , ((((bool.match_bool_type) (B)) (((op0) ((f0) (n))) (((((((bigops.bigop) (B)) (n)) (p)) (nil0)) (op0)) (f0)))) (((((((bigops.bigop) (B)) (n)) (p)) (nil0)) (op0)) (f0))) ((p) (n))) (fun (i : (nat.nat) ) , (p1) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i)))) (((((y) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i))))) (fun (Hind : (((((bigops.sameF_upto) ((bool.bool) )) (n)) (p1)) (p2)) -> ((((((bigops.sameF_p) (B)) (n)) (p1)) (f)) (g)) -> (((logic.eq_) (B)) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (p1) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i)))) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i)))) , (fun (samep : ((((bigops.sameF_upto) ((bool.bool) )) (((nat.S) ) (n))) (p1)) (p2)) , (fun (samef : (((((bigops.sameF_p) (B)) (((nat.S) ) (n))) (p1)) (f)) (g)) , (((((((@logic.eq_ind_r) (B)) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i)))) (fun (x : B) , (((logic.eq_) (B)) (((((bool.match_bool_type) (B)) (((op) ((f) (n))) (x))) (x)) ((p1) (n)))) (((((bool.match_bool_type) (B)) (((op) ((g) (n))) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i))))) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i)))) ((p2) (n))))) (((((((@logic.eq_ind) ((bool.bool) )) ((p1) (n))) (fun (x_1 : (bool.bool) ) , (((logic.eq_) (B)) (((((bool.match_bool_type) (B)) (((op) ((f) (n))) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i))))) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i)))) ((p1) (n)))) (((((bool.match_bool_type) (B)) (((op) ((g) (n))) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i))))) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i)))) (x_1)))) (((((((@connectives.match_Or_prop) ((((logic.eq_) ((bool.bool) )) ((p1) (n))) ((bool.true) ))) ((((logic.eq_) ((bool.bool) )) ((p1) (n))) ((bool.false) ))) ((((logic.eq_) (B)) (((((bool.match_bool_type) (B)) (((op) ((f) (n))) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i))))) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i)))) ((p1) (n)))) (((((bool.match_bool_type) (B)) (((op) ((g) (n))) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i))))) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i)))) ((p1) (n))))) (fun (H1 : (((logic.eq_) ((bool.bool) )) ((p1) (n))) ((bool.true) )) , (((((((@logic.eq_ind_r) ((bool.bool) )) ((bool.true) )) (fun (x : (bool.bool) ) , (((logic.eq_) (B)) (((((bool.match_bool_type) (B)) (((op) ((f) (n))) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i))))) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i)))) (x))) (((((bool.match_bool_type) (B)) (((op) ((g) (n))) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i))))) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i)))) (x)))) ((((((@bool.sym_eq_match_bool_type_true) (B)) (((op) ((f) (n))) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i))))) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i)))) (fun (y : B) , (((logic.eq_) (B)) (y)) (((((bool.match_bool_type) (B)) (((op) ((g) (n))) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i))))) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i)))) ((bool.true) )))) ((((((@bool.sym_eq_match_bool_type_true) (B)) (((op) ((g) (n))) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i))))) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i)))) (fun (y : B) , (((logic.eq_) (B)) (((op) ((f) (n))) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i))))) (y))) (((((((@logic.eq_ind) (B)) ((f) (n))) (fun (x_1 : B) , (((logic.eq_) (B)) (((op) ((f) (n))) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i))))) (((op) (x_1)) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i)))))) (((@logic.refl_) (B)) (((op) ((f) (n))) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i)))))) ((g) (n))) ((((samef) (n)) ((@nat.le_n) (((nat.S) ) (n)))) (H1)))))) ((p1) (n))) (H1)))) (fun (H1 : (((logic.eq_) ((bool.bool) )) ((p1) (n))) ((bool.false) )) , (((((((@logic.eq_ind_r) ((bool.bool) )) ((bool.false) )) (fun (x : (bool.bool) ) , (((logic.eq_) (B)) (((((bool.match_bool_type) (B)) (((op) ((f) (n))) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i))))) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i)))) (x))) (((((bool.match_bool_type) (B)) (((op) ((g) (n))) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i))))) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i)))) (x)))) ((((((@bool.sym_eq_match_bool_type_false) (B)) (((op) ((f) (n))) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i))))) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i)))) (fun (y : B) , (((logic.eq_) (B)) (y)) (((((bool.match_bool_type) (B)) (((op) ((g) (n))) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i))))) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i)))) ((bool.false) )))) ((((((@bool.sym_eq_match_bool_type_false) (B)) (((op) ((g) (n))) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i))))) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i)))) (fun (y : B) , (((logic.eq_) (B)) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i)))) (y))) (((@logic.refl_) (B)) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (p2) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (g) (i))))))) ((p1) (n))) (H1)))) ((@bool.true_or_false) ((p1) (n))))) ((p2) (n))) (((samep) (n)) ((@nat.le_n) (((nat.S) ) (n)))))) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (p1) (i))) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i)))) (((Hind) ((((((((@bigops.sameF_upto_le) ((bool.bool) )) (p1)) (p2)) (n)) (((nat.S) ) (n))) (((((@logic.eq_coerc) ((((nat.le_) ) (((nat.pred_) ) (((nat.S) ) (n)))) (((nat.S) ) (n)))) ((((nat.le_) ) (n)) (((nat.S) ) (n)))) ((@nat.le_pred_n) (((nat.S) ) (n)))) (((((((@logic.rewrite_l) ((nat.nat) )) (n)) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) (__)) (((nat.S) ) (n)))) ((((nat.le_) ) (n)) (((nat.S) ) (n))))) (((@logic.refl_) (Prop)) ((((nat.le_) ) (n)) (((nat.S) ) (n))))) (((nat.pred_) ) (((nat.S) ) (n)))) ((@nat.pred_Sn) (n))))) (samep))) (((((((((@bigops.sameF_p_le) (B)) (p1)) (f)) (g)) (n)) (((nat.S) ) (n))) (((((@logic.eq_coerc) ((((nat.le_) ) (((nat.pred_) ) (((nat.S) ) (n)))) (((nat.S) ) (n)))) ((((nat.le_) ) (n)) (((nat.S) ) (n)))) ((@nat.le_pred_n) (((nat.S) ) (n)))) (((((((@logic.rewrite_l) ((nat.nat) )) (n)) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) (__)) (((nat.S) ) (n)))) ((((nat.le_) ) (n)) (((nat.S) ) (n))))) (((@logic.refl_) (Prop)) ((((nat.le_) ) (n)) (((nat.S) ) (n))))) (((nat.pred_) ) (((nat.S) ) (n)))) ((@nat.pred_Sn) (n))))) (samef)))))))))))) (k).
theorem bigops.bigop_false : forall (B : Type) , forall (n:(nat.nat) ) , forall (nil:B) , forall (op:(B) -> (B) -> B) , forall (f:((nat.nat) ) -> B) , (((logic.eq_) (B)) (((((((bigops.bigop) (B)) (n)) (fun (i : (nat.nat) ) , (bool.false) )) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i)))) (nil) := fun (B : Type) , fun (n : (nat.nat) ) , fun (nil : B) , fun (op : (B) -> (B) -> B) , fun (f : ((nat.nat) ) -> B) , ((((@nat.nat_ind) (fun (_x_365 : (nat.nat) ) , (((logic.eq_) (B)) (((((((bigops.bigop) (B)) (_x_365)) (fun (i : (nat.nat) ) , (bool.false) )) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i)))) (nil))) ((((@bigops.eq_bigop_body_O) (B)) (fun (y : (((nat.nat) ) -> (bool.bool) ) -> (B) -> ((B) -> (B) -> B) -> (((nat.nat) ) -> B) -> B) , (((logic.eq_) (B)) (((((((bigops.bigop) (B)) ((nat.O) )) (fun (i : (nat.nat) ) , (bool.false) )) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i)))) (((((y) (fun (i : (nat.nat) ) , (bool.false) )) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i))))) ((((@bigops.eq_bigop_O) (B)) (fun (y : (((nat.nat) ) -> (bool.bool) ) -> (B) -> ((B) -> (B) -> B) -> (((nat.nat) ) -> B) -> B) , (((logic.eq_) (B)) (((((((bigops.bigop) (B)) ((nat.O) )) (fun (i : (nat.nat) ) , (bool.false) )) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i)))) (((((y) (fun (i : (nat.nat) ) , (bool.false) )) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i))))) (((@logic.refl_) (B)) (((((((bigops.bigop) (B)) ((nat.O) )) (fun (i : (nat.nat) ) , (bool.false) )) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i))))))) (fun (n1 : (nat.nat) ) , fun (Hind : (((logic.eq_) (B)) (((((((bigops.bigop) (B)) (n1)) (fun (i : (nat.nat) ) , (bool.false) )) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i)))) (nil)) , (((((((@logic.eq_ind_r) (B)) (((((((bigops.bigop) (B)) (n1)) (fun (i : (nat.nat) ) , (bool.false) )) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i)))) (fun (x : B) , (((logic.eq_) (B)) (x)) (nil))) (((((((@logic.rewrite_r) (B)) (nil)) (fun (__ : B) , (((logic.eq_) (B)) (__)) (nil))) (((@logic.refl_) (B)) (nil))) (((((((bigops.bigop) (B)) (n1)) (fun (i : (nat.nat) ) , (bool.false) )) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i)))) (Hind))) (((((((bigops.bigop) (B)) (((nat.S) ) (n1))) (fun (i : (nat.nat) ) , (bool.false) )) (nil)) (op)) (fun (i : (nat.nat) ) , (f) (i)))) ((((((((@bigops.bigop_Sfalse) (B)) (n1)) (fun (__ : (nat.nat) ) , (bool.false) )) (nil)) (op)) (f)) (((@logic.refl_) ((bool.bool) )) ((bool.false) )))))) (n).
constant bigops.Aop : forall (A : Type) , (A) -> Prop.
axiom bigops.mk_Aop : forall (A : Type) , forall (nil:A) , forall (op:(A) -> (A) -> A) , (forall (a:A) , (((logic.eq_) (A)) (((op) (nil)) (a))) (a)) -> (forall (a:A) , (((logic.eq_) (A)) (((op) (a)) (nil))) (a)) -> (forall (a:A) , forall (b:A) , forall (c:A) , (((logic.eq_) (A)) (((op) (a)) (((op) (b)) (c)))) (((op) (((op) (a)) (b))) (c))) -> ((bigops.Aop) (A)) (nil).
theorem bigops.assoc : forall (a:(nat.nat) ) , forall (b:(nat.nat) ) , forall (c:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) (a)) ((((nat.times) ) (b)) (c)))) ((((nat.times) ) ((((nat.times) ) (a)) (b))) (c)) := fun (a : (nat.nat) ) , fun (b : (nat.nat) ) , fun (c : (nat.nat) ) , ((((@logic.sym_eq) ((nat.nat) )) ((((nat.times) ) ((((nat.times) ) (a)) (b))) (c))) ((((nat.times) ) (a)) ((((nat.times) ) (b)) (c)))) ((((@nat.associative_times) (a)) (b)) (c)).
theorem bigops.timesA : ((bigops.Aop) ((nat.nat) )) (((nat.S) ) ((nat.O) )) := ((((((@bigops.mk_Aop) ((nat.nat) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (a : (nat.nat) ) , (((@nat.sym_eq_times) (((nat.S) ) ((nat.O) ))) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((y) (a))) (a))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) ((nat.O) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((y) (a))) (a))) ((((@nat.sym_eq_times_body_S) ((nat.O) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((y) (a))) (a))) ((((@nat.sym_eq_times) ((nat.O) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (a)) ((y) (a)))) (a))) (((((@nat.sym_eq_filter_nat_type_O) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (a)) ((y) (a)))) (a))) (((@nat.sym_eq_times_body_O) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (a)) ((y) (a)))) (a))) (((((@logic.sym_eq) ((nat.nat) )) (a)) ((((nat.plus) ) (a)) ((nat.O) ))) ((@nat.plus_n_O) (a)))))))))) (fun (n : (nat.nat) ) , ((((@logic.sym_eq) ((nat.nat) )) (n)) ((((nat.times) ) (n)) (((nat.S) ) ((nat.O) )))) ((@nat.times_n_1) (n)))) (fun (a : (nat.nat) ) , fun (b : (nat.nat) ) , fun (c : (nat.nat) ) , ((((@logic.sym_eq) ((nat.nat) )) ((((nat.times) ) ((((nat.times) ) (a)) (b))) (c))) ((((nat.times) ) (a)) ((((nat.times) ) (b)) (c)))) ((((@nat.associative_times) (a)) (b)) (c))).
theorem bigops.bigop_I_gen : forall (a:(nat.nat) ) , forall (b:(nat.nat) ) , forall (p:((nat.nat) ) -> (bool.bool) ) , forall (f:((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) (a)) (b)) -> (((logic.eq_) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) (b)) (a))) (fun (i : (nat.nat) ) , (p) ((((nat.plus) ) (i)) (a)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) ((((nat.plus) ) (i)) (a))))) (((((((bigops.bigop) ((nat.nat) )) (b)) (fun (i : (nat.nat) ) , (((bool.andb) ) ((((nat.leb) ) (a)) (i))) ((p) (i)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) (i))) := fun (a : (nat.nat) ) , fun (b : (nat.nat) ) , ((((@nat.nat_ind) (fun (_x_365 : (nat.nat) ) , forall (p:((nat.nat) ) -> (bool.bool) ) , forall (f:((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) (a)) (_x_365)) -> (((logic.eq_) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) (_x_365)) (a))) (fun (i : (nat.nat) ) , (p) ((((nat.plus) ) (i)) (a)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) ((((nat.plus) ) (i)) (a))))) (((((((bigops.bigop) ((nat.nat) )) (_x_365)) (fun (i : (nat.nat) ) , (((bool.andb) ) ((((nat.leb) ) (a)) (i))) ((p) (i)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) (i))))) (fun (p : ((nat.nat) ) -> (bool.bool) ) , fun (f : ((nat.nat) ) -> (nat.nat) ) , (((@bigops.sym_eq_bigop_O) ((nat.nat) )) (fun (y : (((nat.nat) ) -> (bool.bool) ) -> ((nat.nat) ) -> (((nat.nat) ) -> ((nat.nat) ) -> (nat.nat) ) -> (((nat.nat) ) -> (nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) (a)) ((nat.O) )) -> (((logic.eq_) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) ((nat.O) )) (a))) (fun (i : (nat.nat) ) , (p) ((((nat.plus) ) (i)) (a)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) ((((nat.plus) ) (i)) (a))))) (((((y) (fun (i : (nat.nat) ) , (((bool.andb) ) ((((nat.leb) ) (a)) (i))) ((p) (i)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) (i))))) ((((@bigops.sym_eq_bigop_body_O) ((nat.nat) )) (fun (y : (((nat.nat) ) -> (bool.bool) ) -> ((nat.nat) ) -> (((nat.nat) ) -> ((nat.nat) ) -> (nat.nat) ) -> (((nat.nat) ) -> (nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) (a)) ((nat.O) )) -> (((logic.eq_) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) ((nat.O) )) (a))) (fun (i : (nat.nat) ) , (p) ((((nat.plus) ) (i)) (a)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) ((((nat.plus) ) (i)) (a))))) (((((y) (fun (i : (nat.nat) ) , (((bool.andb) ) ((((nat.leb) ) (a)) (i))) ((p) (i)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) (i))))) ((((@bigops.eq_bigop_body_O) ((nat.nat) )) (fun (y : (((nat.nat) ) -> (bool.bool) ) -> ((nat.nat) ) -> (((nat.nat) ) -> ((nat.nat) ) -> (nat.nat) ) -> (((nat.nat) ) -> (nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) (a)) ((nat.O) )) -> (((logic.eq_) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) ((nat.O) )) (a))) (fun (i : (nat.nat) ) , (p) ((((nat.plus) ) (i)) (a)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) ((((nat.plus) ) (i)) (a))))) (((((y) (fun (i : (nat.nat) ) , (p) ((((nat.plus) ) (i)) (a)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) ((((nat.plus) ) (i)) (a)))))) ((((@bigops.eq_bigop_O) ((nat.nat) )) (fun (y : (((nat.nat) ) -> (bool.bool) ) -> ((nat.nat) ) -> (((nat.nat) ) -> ((nat.nat) ) -> (nat.nat) ) -> (((nat.nat) ) -> (nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) (a)) ((nat.O) )) -> (((logic.eq_) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) ((nat.O) )) (a))) (fun (i : (nat.nat) ) , (p) ((((nat.plus) ) (i)) (a)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) ((((nat.plus) ) (i)) (a))))) (((((y) (fun (i : (nat.nat) ) , (p) ((((nat.plus) ) (i)) (a)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) ((((nat.plus) ) (i)) (a)))))) (((@nat.eq_minus_body_O) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) (a)) ((nat.O) )) -> (((logic.eq_) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) ((nat.O) )) (a))) (fun (i : (nat.nat) ) , (p) ((((nat.plus) ) (i)) (a)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) ((((nat.plus) ) (i)) (a))))) (((((((bigops.bigop) ((nat.nat) )) ((y) (a))) (fun (i : (nat.nat) ) , (p) ((((nat.plus) ) (i)) (a)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) ((((nat.plus) ) (i)) (a)))))) (((((@nat.eq_filter_nat_type_O) (((nat.nat) ) -> (nat.nat) )) ((nat.minus_body) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) (a)) ((nat.O) )) -> (((logic.eq_) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) ((nat.O) )) (a))) (fun (i : (nat.nat) ) , (p) ((((nat.plus) ) (i)) (a)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) ((((nat.plus) ) (i)) (a))))) (((((((bigops.bigop) ((nat.nat) )) ((y) (a))) (fun (i : (nat.nat) ) , (p) ((((nat.plus) ) (i)) (a)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) ((((nat.plus) ) (i)) (a)))))) ((((@nat.eq_minus) ((nat.O) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) (a)) ((nat.O) )) -> (((logic.eq_) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) ((nat.O) )) (a))) (fun (i : (nat.nat) ) , (p) ((((nat.plus) ) (i)) (a)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) ((((nat.plus) ) (i)) (a))))) (((((((bigops.bigop) ((nat.nat) )) ((y) (a))) (fun (i : (nat.nat) ) , (p) ((((nat.plus) ) (i)) (a)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) ((((nat.plus) ) (i)) (a)))))) (fun (auto : (((nat.le_) ) (a)) ((nat.O) )) , (((@logic.refl_) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) ((nat.O) )) (a))) (fun (i : (nat.nat) ) , (p) ((((nat.plus) ) (i)) (a)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) ((((nat.plus) ) (i)) (a)))))))))))))) (fun (b0 : (nat.nat) ) , fun (Hind : forall (p:((nat.nat) ) -> (bool.bool) ) , forall (f:((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) (a)) (b0)) -> (((logic.eq_) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) (b0)) (a))) (fun (i : (nat.nat) ) , (p) ((((nat.plus) ) (i)) (a)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) ((((nat.plus) ) (i)) (a))))) (((((((bigops.bigop) ((nat.nat) )) (b0)) (fun (i : (nat.nat) ) , (((bool.andb) ) ((((nat.leb) ) (a)) (i))) ((p) (i)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) (i)))) , (fun (p : ((nat.nat) ) -> (bool.bool) ) , fun (f : ((nat.nat) ) -> (nat.nat) ) , fun (lea : (((nat.le_) ) (a)) (((nat.S) ) (b0))) , (((((((@connectives.match_Or_prop) ((((nat.lt_) ) (a)) (((nat.S) ) (b0)))) ((((logic.eq_) ((nat.nat) )) (a)) (((nat.S) ) (b0)))) ((((logic.eq_) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) (((nat.S) ) (b0))) (a))) (fun (i : (nat.nat) ) , (p) ((((nat.plus) ) (i)) (a)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) ((((nat.plus) ) (i)) (a))))) (((((((bigops.bigop) ((nat.nat) )) (((nat.S) ) (b0))) (fun (i : (nat.nat) ) , (((bool.andb) ) ((((nat.leb) ) (a)) (i))) ((p) (i)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) (i))))) (fun (Ha : (((nat.lt_) ) (a)) (((nat.S) ) (b0))) , (((((((@connectives.match_Or_prop) ((((logic.eq_) ((bool.bool) )) ((p) (b0))) ((bool.true) ))) ((((logic.eq_) ((bool.bool) )) ((p) (b0))) ((bool.false) ))) ((((logic.eq_) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) (((nat.S) ) (b0))) (a))) (fun (i : (nat.nat) ) , (p) ((((nat.plus) ) (i)) (a)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) ((((nat.plus) ) (i)) (a))))) (((((((bigops.bigop) ((nat.nat) )) (((nat.S) ) (b0))) (fun (i : (nat.nat) ) , (((bool.andb) ) ((((nat.leb) ) (a)) (i))) ((p) (i)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) (i))))) (fun (Hcase : (((logic.eq_) ((bool.bool) )) ((p) (b0))) ((bool.true) )) , (((((((@logic.eq_ind_r) ((nat.nat) )) ((((nat.times) ) ((f) (b0))) (((((((bigops.bigop) ((nat.nat) )) (b0)) (fun (i : (nat.nat) ) , (((bool.andb) ) ((((nat.leb) ) (a)) (i))) ((p) (i)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) (i))))) (fun (x : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) (((nat.S) ) (b0))) (a))) (fun (i : (nat.nat) ) , (p) ((((nat.plus) ) (i)) (a)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) ((((nat.plus) ) (i)) (a))))) (x))) (((((((@logic.eq_ind_r) ((nat.nat) )) (((nat.S) ) ((((nat.minus) ) (b0)) (a)))) (fun (x : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) (x)) (fun (i : (nat.nat) ) , (p) ((((nat.plus) ) (i)) (a)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) ((((nat.plus) ) (i)) (a))))) ((((nat.times) ) ((f) (b0))) (((((((bigops.bigop) ((nat.nat) )) (b0)) (fun (i : (nat.nat) ) , (((bool.andb) ) ((((nat.leb) ) (a)) (i))) ((p) (i)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) (i)))))) (((((((@logic.eq_ind_r) ((nat.nat) )) ((((nat.times) ) ((f) ((((nat.plus) ) ((((nat.minus) ) (b0)) (a))) (a)))) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) (b0)) (a))) (fun (i : (nat.nat) ) , (p) ((((nat.plus) ) (i)) (a)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) ((((nat.plus) ) (i)) (a)))))) (fun (x : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (x)) ((((nat.times) ) ((f) (b0))) (((((((bigops.bigop) ((nat.nat) )) (b0)) (fun (i : (nat.nat) ) , (((bool.andb) ) ((((nat.leb) ) (a)) (i))) ((p) (i)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) (i)))))) (((((((((((@logic.eq_f2) ((nat.nat) )) ((nat.nat) )) ((nat.nat) )) ((nat.times) )) ((f) ((((nat.plus) ) ((((nat.minus) ) (b0)) (a))) (a)))) ((f) (b0))) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) (b0)) (a))) (fun (i : (nat.nat) ) , (p) ((((nat.plus) ) (i)) (a)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) ((((nat.plus) ) (i)) (a))))) (((((((bigops.bigop) ((nat.nat) )) (b0)) (fun (i : (nat.nat) ) , (((bool.andb) ) ((((nat.leb) ) (a)) (i))) ((p) (i)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) (i)))) (((((((@logic.eq_f) ((nat.nat) )) ((nat.nat) )) (f)) ((((nat.plus) ) ((((nat.minus) ) (b0)) (a))) (a))) (b0)) (((((((@logic.eq_ind) ((nat.nat) )) (b0)) (fun (x_1 : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (x_1)) (b0))) (((@logic.refl_) ((nat.nat) )) (b0))) ((((nat.plus) ) ((((nat.minus) ) (b0)) (a))) (a))) ((((@nat.plus_minus_m_m) (b0)) (a)) ((((@nat.le_S_S_to_le) (a)) (b0)) (Ha)))))) ((((Hind) (p)) (f)) ((((@nat.le_S_S_to_le) (a)) (b0)) (Ha))))) (((((((bigops.bigop) ((nat.nat) )) (((nat.S) ) ((((nat.minus) ) (b0)) (a)))) (fun (i : (nat.nat) ) , (p) ((((nat.plus) ) (i)) (a)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) ((((nat.plus) ) (i)) (a))))) ((((((((@bigops.bigop_Strue) ((nat.nat) )) ((((nat.minus) ) (b0)) (a))) (fun (__ : (nat.nat) ) , (p) ((((nat.plus) ) (__)) (a)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (__ : (nat.nat) ) , (f) ((((nat.plus) ) (__)) (a)))) (((((((@logic.eq_ind) ((nat.nat) )) (b0)) (fun (x_1 : (nat.nat) ) , (((logic.eq_) ((bool.bool) )) ((p) (x_1))) ((bool.true) ))) (((((((@logic.rewrite_r) ((bool.bool) )) ((bool.true) )) (fun (__ : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) (__)) ((bool.true) ))) (((@logic.refl_) ((bool.bool) )) ((bool.true) ))) ((p) (b0))) (Hcase))) ((((nat.plus) ) ((((nat.minus) ) (b0)) (a))) (a))) ((((@nat.plus_minus_m_m) (b0)) (a)) ((((@nat.le_S_S_to_le) (a)) (b0)) (Ha))))))) ((((nat.minus) ) (((nat.S) ) (b0))) (a))) ((((((@nat.match_nat_prop) (fun (__ : (nat.nat) ) , ((((nat.le_) ) (__)) (b0)) -> (((logic.eq_) ((nat.nat) )) ((((nat.minus) ) (((nat.S) ) (b0))) (__))) (((nat.S) ) ((((nat.minus) ) (b0)) (__))))) (fun (auto : (((nat.le_) ) ((nat.O) )) (b0)) , (((((((@logic.rewrite_l) ((nat.nat) )) (((nat.S) ) (b0))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (__)) (((nat.S) ) ((((nat.minus) ) (b0)) ((nat.O) ))))) (((((((@logic.rewrite_l) ((nat.nat) )) (b0)) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((nat.S) ) (b0))) (((nat.S) ) (__)))) (((@logic.refl_) ((nat.nat) )) (((nat.S) ) (b0)))) ((((nat.minus) ) (b0)) ((nat.O) ))) ((@nat.minus_n_O) (b0)))) ((((nat.minus) ) (((nat.S) ) (b0))) ((nat.O) ))) ((@nat.minus_n_O) (((nat.S) ) (b0)))))) ((((@nat.sym_eq_minus) (((nat.S) ) (b0))) (fun (y : ((nat.nat) ) -> (nat.nat) ) , forall (n:(nat.nat) ) , ((((nat.le_) ) (((nat.S) ) (n))) (b0)) -> (((logic.eq_) ((nat.nat) )) ((y) (((nat.S) ) (n)))) (((nat.S) ) ((((nat.minus) ) (b0)) (((nat.S) ) (n)))))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.minus_body) )) (b0)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , forall (n:(nat.nat) ) , ((((nat.le_) ) (((nat.S) ) (n))) (b0)) -> (((logic.eq_) ((nat.nat) )) ((y) (((nat.S) ) (n)))) (((nat.S) ) ((((nat.minus) ) (b0)) (((nat.S) ) (n)))))) (fun (a1 : (nat.nat) ) , (((@nat.sym_eq_minus_body_S) (b0)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) (((nat.S) ) (a1))) (b0)) -> (((logic.eq_) ((nat.nat) )) ((y) (((nat.S) ) (a1)))) (((nat.S) ) ((((nat.minus) ) (b0)) (((nat.S) ) (a1)))))) (((((((@nat.sym_eq_match_nat_type_S) ((nat.nat) )) (((nat.S) ) (b0))) (fun (q : (nat.nat) ) , (((nat.minus) ) (b0)) (q))) (a1)) (fun (y : (nat.nat) ) , ((((nat.le_) ) (((nat.S) ) (a1))) (b0)) -> (((logic.eq_) ((nat.nat) )) (y)) (((nat.S) ) ((((nat.minus) ) (b0)) (((nat.S) ) (a1)))))) (fun (lta1 : (((nat.le_) ) (((nat.S) ) (a1))) (b0)) , (((((((@logic.eq_ind_r) ((nat.nat) )) (((nat.pred_) ) ((((nat.minus) ) (b0)) (a1)))) (fun (x : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.minus) ) (b0)) (a1))) (((nat.S) ) (x)))) (((((((@logic.eq_ind_r) ((nat.nat) )) ((((nat.minus) ) (b0)) (a1))) (fun (x : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.minus) ) (b0)) (a1))) (x))) (((@logic.refl_) ((nat.nat) )) ((((nat.minus) ) (b0)) (a1)))) (((nat.S) ) (((nat.pred_) ) ((((nat.minus) ) (b0)) (a1))))) (((@nat.S_pred) ((((nat.minus) ) (b0)) (a1))) (((((@nat.lt_plus_to_minus_r) ((nat.O) )) (a1)) (b0)) ((((@nat.sym_eq_plus) ((nat.O) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((nat.le_) ) (((nat.S) ) ((y) (a1)))) (b0))) (((((@nat.sym_eq_filter_nat_type_O) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((nat.le_) ) (((nat.S) ) ((y) (a1)))) (b0))) (((@nat.sym_eq_plus_body_O) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((nat.le_) ) (((nat.S) ) ((y) (a1)))) (b0))) (lta1)))))))) ((((nat.minus) ) (b0)) (((nat.S) ) (a1)))) (((@nat.eq_minus_S_pred) (b0)) (a1))))))))) (a)) ((((@nat.le_S_S_to_le) (a)) (b0)) (Ha))))) (((((((bigops.bigop) ((nat.nat) )) (((nat.S) ) (b0))) (fun (i : (nat.nat) ) , (((bool.andb) ) ((((nat.leb) ) (a)) (i))) ((p) (i)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) (i)))) ((((((((@bigops.bigop_Strue) ((nat.nat) )) (b0)) (fun (__ : (nat.nat) ) , (((bool.andb) ) ((((nat.leb) ) (a)) (__))) ((p) (__)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (f)) (((((((@logic.eq_ind_r) ((bool.bool) )) ((bool.true) )) (fun (x : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) ((((bool.andb) ) ((((nat.leb) ) (a)) (b0))) (x))) ((bool.true) ))) (((((((@logic.eq_ind_r) ((bool.bool) )) ((bool.true) )) (fun (x : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) ((((bool.andb) ) (x)) ((bool.true) ))) ((bool.true) ))) ((((((@bool.eq_match_bool_type_true) ((bool.bool) )) ((bool.true) )) ((bool.false) )) (fun (y : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) (((((bool.match_bool_type) ((bool.bool) )) ((bool.true) )) ((bool.false) )) ((bool.true) ))) (y))) (((@logic.refl_) ((bool.bool) )) ((((bool.andb) ) ((bool.true) )) ((bool.true) ))))) ((((nat.leb) ) (a)) (b0))) ((((@nat.le_to_leb_true) (a)) (b0)) ((((@nat.le_S_S_to_le) (a)) (b0)) (Ha))))) ((p) (b0))) (Hcase)))))) (fun (Hcase : (((logic.eq_) ((bool.bool) )) ((p) (b0))) ((bool.false) )) , (((((((@logic.eq_ind_r) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) (b0)) (fun (i : (nat.nat) ) , (((bool.andb) ) ((((nat.leb) ) (a)) (i))) ((p) (i)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) (i)))) (fun (x : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) (((nat.S) ) (b0))) (a))) (fun (i : (nat.nat) ) , (p) ((((nat.plus) ) (i)) (a)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) ((((nat.plus) ) (i)) (a))))) (x))) (((((((@logic.eq_ind_r) ((nat.nat) )) (((nat.S) ) ((((nat.minus) ) (b0)) (a)))) (fun (x : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) (x)) (fun (i : (nat.nat) ) , (p) ((((nat.plus) ) (i)) (a)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) ((((nat.plus) ) (i)) (a))))) (((((((bigops.bigop) ((nat.nat) )) (b0)) (fun (i : (nat.nat) ) , (((bool.andb) ) ((((nat.leb) ) (a)) (i))) ((p) (i)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) (i))))) (((((((@logic.eq_ind_r) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) (b0)) (a))) (fun (i : (nat.nat) ) , (p) ((((nat.plus) ) (i)) (a)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) ((((nat.plus) ) (i)) (a))))) (fun (x : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (x)) (((((((bigops.bigop) ((nat.nat) )) (b0)) (fun (i : (nat.nat) ) , (((bool.andb) ) ((((nat.leb) ) (a)) (i))) ((p) (i)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) (i))))) ((((Hind) (p)) (f)) ((((@nat.le_S_S_to_le) (a)) (b0)) (Ha)))) (((((((bigops.bigop) ((nat.nat) )) (((nat.S) ) ((((nat.minus) ) (b0)) (a)))) (fun (i : (nat.nat) ) , (p) ((((nat.plus) ) (i)) (a)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) ((((nat.plus) ) (i)) (a))))) ((((((((@bigops.bigop_Sfalse) ((nat.nat) )) ((((nat.minus) ) (b0)) (a))) (fun (__ : (nat.nat) ) , (p) ((((nat.plus) ) (__)) (a)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (__ : (nat.nat) ) , (f) ((((nat.plus) ) (__)) (a)))) (((((((@logic.eq_ind) ((nat.nat) )) (b0)) (fun (x_1 : (nat.nat) ) , (((logic.eq_) ((bool.bool) )) ((p) (x_1))) ((bool.false) ))) (((((((@logic.rewrite_r) ((bool.bool) )) ((bool.false) )) (fun (__ : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) (__)) ((bool.false) ))) (((@logic.refl_) ((bool.bool) )) ((bool.false) ))) ((p) (b0))) (Hcase))) ((((nat.plus) ) ((((nat.minus) ) (b0)) (a))) (a))) ((((@nat.plus_minus_m_m) (b0)) (a)) ((((@nat.le_S_S_to_le) (a)) (b0)) (Ha))))))) ((((nat.minus) ) (((nat.S) ) (b0))) (a))) ((((((@nat.match_nat_prop) (fun (__ : (nat.nat) ) , ((((nat.le_) ) (__)) (b0)) -> (((logic.eq_) ((nat.nat) )) ((((nat.minus) ) (((nat.S) ) (b0))) (__))) (((nat.S) ) ((((nat.minus) ) (b0)) (__))))) (fun (auto : (((nat.le_) ) ((nat.O) )) (b0)) , (((((((@logic.rewrite_l) ((nat.nat) )) (((nat.S) ) (b0))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (__)) (((nat.S) ) ((((nat.minus) ) (b0)) ((nat.O) ))))) (((((((@logic.rewrite_l) ((nat.nat) )) (b0)) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((nat.S) ) (b0))) (((nat.S) ) (__)))) (((@logic.refl_) ((nat.nat) )) (((nat.S) ) (b0)))) ((((nat.minus) ) (b0)) ((nat.O) ))) ((@nat.minus_n_O) (b0)))) ((((nat.minus) ) (((nat.S) ) (b0))) ((nat.O) ))) ((@nat.minus_n_O) (((nat.S) ) (b0)))))) ((((@nat.sym_eq_minus) (((nat.S) ) (b0))) (fun (y : ((nat.nat) ) -> (nat.nat) ) , forall (n:(nat.nat) ) , ((((nat.le_) ) (((nat.S) ) (n))) (b0)) -> (((logic.eq_) ((nat.nat) )) ((y) (((nat.S) ) (n)))) (((nat.S) ) ((((nat.minus) ) (b0)) (((nat.S) ) (n)))))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.minus_body) )) (b0)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , forall (n:(nat.nat) ) , ((((nat.le_) ) (((nat.S) ) (n))) (b0)) -> (((logic.eq_) ((nat.nat) )) ((y) (((nat.S) ) (n)))) (((nat.S) ) ((((nat.minus) ) (b0)) (((nat.S) ) (n)))))) (fun (a1 : (nat.nat) ) , (((@nat.sym_eq_minus_body_S) (b0)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) (((nat.S) ) (a1))) (b0)) -> (((logic.eq_) ((nat.nat) )) ((y) (((nat.S) ) (a1)))) (((nat.S) ) ((((nat.minus) ) (b0)) (((nat.S) ) (a1)))))) (((((((@nat.sym_eq_match_nat_type_S) ((nat.nat) )) (((nat.S) ) (b0))) (fun (q : (nat.nat) ) , (((nat.minus) ) (b0)) (q))) (a1)) (fun (y : (nat.nat) ) , ((((nat.le_) ) (((nat.S) ) (a1))) (b0)) -> (((logic.eq_) ((nat.nat) )) (y)) (((nat.S) ) ((((nat.minus) ) (b0)) (((nat.S) ) (a1)))))) (fun (lta1 : (((nat.le_) ) (((nat.S) ) (a1))) (b0)) , (((((((@logic.eq_ind_r) ((nat.nat) )) (((nat.pred_) ) ((((nat.minus) ) (b0)) (a1)))) (fun (x : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.minus) ) (b0)) (a1))) (((nat.S) ) (x)))) (((((((@logic.eq_ind_r) ((nat.nat) )) ((((nat.minus) ) (b0)) (a1))) (fun (x : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.minus) ) (b0)) (a1))) (x))) (((@logic.refl_) ((nat.nat) )) ((((nat.minus) ) (b0)) (a1)))) (((nat.S) ) (((nat.pred_) ) ((((nat.minus) ) (b0)) (a1))))) (((@nat.S_pred) ((((nat.minus) ) (b0)) (a1))) (((((@nat.lt_plus_to_minus_r) ((nat.O) )) (a1)) (b0)) ((((@nat.sym_eq_plus) ((nat.O) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((nat.le_) ) (((nat.S) ) ((y) (a1)))) (b0))) (((((@nat.sym_eq_filter_nat_type_O) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((nat.le_) ) (((nat.S) ) ((y) (a1)))) (b0))) (((@nat.sym_eq_plus_body_O) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((nat.le_) ) (((nat.S) ) ((y) (a1)))) (b0))) (lta1)))))))) ((((nat.minus) ) (b0)) (((nat.S) ) (a1)))) (((@nat.eq_minus_S_pred) (b0)) (a1))))))))) (a)) ((((@nat.le_S_S_to_le) (a)) (b0)) (Ha))))) (((((((bigops.bigop) ((nat.nat) )) (((nat.S) ) (b0))) (fun (i : (nat.nat) ) , (((bool.andb) ) ((((nat.leb) ) (a)) (i))) ((p) (i)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) (i)))) ((((((((@bigops.bigop_Sfalse) ((nat.nat) )) (b0)) (fun (__ : (nat.nat) ) , (((bool.andb) ) ((((nat.leb) ) (a)) (__))) ((p) (__)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (f)) (((((((@logic.eq_ind_r) ((bool.bool) )) ((bool.false) )) (fun (x : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) ((((bool.andb) ) ((((nat.leb) ) (a)) (b0))) (x))) ((bool.false) ))) (((((@bool.match_bool_prop) (fun (__ : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) ((((bool.andb) ) (__)) ((bool.false) ))) ((bool.false) ))) ((((((@bool.eq_match_bool_type_true) ((bool.bool) )) ((bool.false) )) ((bool.false) )) (fun (y : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) (((((bool.match_bool_type) ((bool.bool) )) ((bool.false) )) ((bool.false) )) ((bool.true) ))) (y))) (((@logic.refl_) ((bool.bool) )) ((((bool.andb) ) ((bool.true) )) ((bool.false) ))))) ((((((@bool.eq_match_bool_type_false) ((bool.bool) )) ((bool.false) )) ((bool.false) )) (fun (y : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) (((((bool.match_bool_type) ((bool.bool) )) ((bool.false) )) ((bool.false) )) ((bool.false) ))) (y))) (((@logic.refl_) ((bool.bool) )) ((((bool.andb) ) ((bool.false) )) ((bool.false) ))))) ((((nat.leb) ) (a)) (b0)))) ((p) (b0))) (Hcase)))))) ((@bool.true_or_false) ((p) (b0)))))) (fun (Ha : (((logic.eq_) ((nat.nat) )) (a)) (((nat.S) ) (b0))) , (((((((@logic.eq_ind) ((nat.nat) )) (a)) (fun (x_1 : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) (x_1)) (a))) (fun (i : (nat.nat) ) , (p) ((((nat.plus) ) (i)) (a)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) ((((nat.plus) ) (i)) (a))))) (((((((bigops.bigop) ((nat.nat) )) (x_1)) (fun (i : (nat.nat) ) , (((bool.andb) ) ((((nat.leb) ) (a)) (i))) ((p) (i)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) (i))))) (((((((@logic.eq_ind) ((nat.nat) )) ((nat.O) )) (fun (x_1 : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) (x_1)) (fun (i : (nat.nat) ) , (p) ((((nat.plus) ) (i)) (a)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) ((((nat.plus) ) (i)) (a))))) (((((((bigops.bigop) ((nat.nat) )) (a)) (fun (i : (nat.nat) ) , (((bool.andb) ) ((((nat.leb) ) (a)) (i))) ((p) (i)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) (i))))) ((((@bigops.sym_eq_bigop_O) ((nat.nat) )) (fun (y : (((nat.nat) ) -> (bool.bool) ) -> ((nat.nat) ) -> (((nat.nat) ) -> ((nat.nat) ) -> (nat.nat) ) -> (((nat.nat) ) -> (nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((((y) (fun (i : (nat.nat) ) , (p) ((((nat.plus) ) (i)) (a)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) ((((nat.plus) ) (i)) (a))))) (((((((bigops.bigop) ((nat.nat) )) (a)) (fun (i : (nat.nat) ) , (((bool.andb) ) ((((nat.leb) ) (a)) (i))) ((p) (i)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) (i))))) ((((@bigops.sym_eq_bigop_body_O) ((nat.nat) )) (fun (y : (((nat.nat) ) -> (bool.bool) ) -> ((nat.nat) ) -> (((nat.nat) ) -> ((nat.nat) ) -> (nat.nat) ) -> (((nat.nat) ) -> (nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((((y) (fun (i : (nat.nat) ) , (p) ((((nat.plus) ) (i)) (a)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) ((((nat.plus) ) (i)) (a))))) (((((((bigops.bigop) ((nat.nat) )) (a)) (fun (i : (nat.nat) ) , (((bool.andb) ) ((((nat.leb) ) (a)) (i))) ((p) (i)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) (i))))) (((((((@logic.eq_ind) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) (a)) (fun (i : (nat.nat) ) , (bool.false) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) (i)))) (fun (x_1 : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (x_1)) (((((((bigops.bigop) ((nat.nat) )) (a)) (fun (i : (nat.nat) ) , (((bool.andb) ) ((((nat.leb) ) (a)) (i))) ((p) (i)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) (i))))) (((((((((((@bigops.same_bigop) ((nat.nat) )) (a)) (fun (__ : (nat.nat) ) , (bool.false) )) (fun (__ : (nat.nat) ) , (((bool.andb) ) ((((nat.leb) ) (a)) (__))) ((p) (__)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (f)) (f)) (fun (i : (nat.nat) ) , fun (ltia : (((nat.lt_) ) (i)) (a)) , (((((((@logic.eq_ind_r) ((bool.bool) )) ((bool.false) )) (fun (x : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) ((bool.false) )) ((((bool.andb) ) (x)) ((p) (i))))) ((((((@bool.sym_eq_match_bool_type_false) ((bool.bool) )) ((p) (i))) ((bool.false) )) (fun (y : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) ((bool.false) )) (y))) (((@logic.refl_) ((bool.bool) )) ((bool.false) )))) ((((nat.leb) ) (a)) (i))) ((((@nat.not_le_to_leb_false) (a)) (i)) ((((@nat.lt_to_not_le) (i)) (a)) (ltia)))))) (fun (i : (nat.nat) ) , fun (auto : (((nat.lt_) ) (i)) (a)) , (fun (auto' : (((logic.eq_) ((bool.bool) )) ((bool.false) )) ((bool.true) )) , (((@logic.refl_) ((nat.nat) )) ((f) (i))))))) (((nat.S) ) ((nat.O) ))) ((((((@bigops.bigop_false) ((nat.nat) )) (a)) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (f)))))) ((((nat.minus) ) (a)) (a))) ((@nat.minus_n_n) (a)))) (((nat.S) ) (b0))) (Ha)))) ((((@nat.le_to_or_lt_eq) (a)) (((nat.S) ) (b0))) (lea)))))) (b).
constant bigops.ACop : forall (A : Type) , (A) -> Prop.
axiom bigops.mk_ACop : forall (A : Type) , forall (nil:A) , forall (op:(A) -> (A) -> A) , (forall (a:A) , (((logic.eq_) (A)) (((op) (nil)) (a))) (a)) -> (forall (a:A) , (((logic.eq_) (A)) (((op) (a)) (nil))) (a)) -> (forall (a:A) , forall (b:A) , forall (c:A) , (((logic.eq_) (A)) (((op) (a)) (((op) (b)) (c)))) (((op) (((op) (a)) (b))) (c))) -> (forall (a:A) , forall (b:A) , (((logic.eq_) (A)) (((op) (a)) (b))) (((op) (b)) (a))) -> ((bigops.ACop) (A)) (nil).
theorem bigops.timesAC : ((bigops.ACop) ((nat.nat) )) (((nat.S) ) ((nat.O) )) := (((((((@bigops.mk_ACop) ((nat.nat) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (a : (nat.nat) ) , (((@nat.sym_eq_times) (((nat.S) ) ((nat.O) ))) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((y) (a))) (a))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) ((nat.O) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((y) (a))) (a))) ((((@nat.sym_eq_times_body_S) ((nat.O) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((y) (a))) (a))) ((((@nat.sym_eq_times) ((nat.O) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (a)) ((y) (a)))) (a))) (((((@nat.sym_eq_filter_nat_type_O) (((nat.nat) ) -> (nat.nat) )) ((nat.times_body) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (a)) ((y) (a)))) (a))) (((@nat.sym_eq_times_body_O) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.plus) ) (a)) ((y) (a)))) (a))) (((((@logic.sym_eq) ((nat.nat) )) (a)) ((((nat.plus) ) (a)) ((nat.O) ))) ((@nat.plus_n_O) (a)))))))))) (fun (n : (nat.nat) ) , ((((@logic.sym_eq) ((nat.nat) )) (n)) ((((nat.times) ) (n)) (((nat.S) ) ((nat.O) )))) ((@nat.times_n_1) (n)))) (fun (a : (nat.nat) ) , fun (b : (nat.nat) ) , fun (c : (nat.nat) ) , ((((@logic.sym_eq) ((nat.nat) )) ((((nat.times) ) ((((nat.times) ) (a)) (b))) (c))) ((((nat.times) ) (a)) ((((nat.times) ) (b)) (c)))) ((((@nat.associative_times) (a)) (b)) (c)))) (@nat.commutative_times).
theorem bigops.bigop_diff : forall (p:((nat.nat) ) -> (bool.bool) ) , forall (f:((nat.nat) ) -> (nat.nat) ) , forall (i:(nat.nat) ) , forall (n:(nat.nat) ) , ((((nat.lt_) ) (i)) (n)) -> ((((logic.eq_) ((bool.bool) )) ((p) (i))) ((bool.true) )) -> (((logic.eq_) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) (n)) (fun (x : (nat.nat) ) , (p) (x))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (x : (nat.nat) ) , (f) (x)))) ((((nat.times) ) ((f) (i))) (((((((bigops.bigop) ((nat.nat) )) (n)) (fun (x : (nat.nat) ) , (((bool.andb) ) (((bool.notb) ) ((((nat.eqb) ) (i)) (x)))) ((p) (x)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (x : (nat.nat) ) , (f) (x)))) := fun (p : ((nat.nat) ) -> (bool.bool) ) , fun (f : ((nat.nat) ) -> (nat.nat) ) , fun (i : (nat.nat) ) , fun (n : (nat.nat) ) , ((((@nat.nat_ind) (fun (_x_365 : (nat.nat) ) , ((((nat.lt_) ) (i)) (_x_365)) -> ((((logic.eq_) ((bool.bool) )) ((p) (i))) ((bool.true) )) -> (((logic.eq_) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) (_x_365)) (fun (x : (nat.nat) ) , (p) (x))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (x : (nat.nat) ) , (f) (x)))) ((((nat.times) ) ((f) (i))) (((((((bigops.bigop) ((nat.nat) )) (_x_365)) (fun (x : (nat.nat) ) , (((bool.andb) ) (((bool.notb) ) ((((nat.eqb) ) (i)) (x)))) ((p) (x)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (x : (nat.nat) ) , (f) (x)))))) (fun (ltO : (((nat.lt_) ) (i)) ((nat.O) )) , (((@connectives.falsity) (((((logic.eq_) ((bool.bool) )) ((p) (i))) ((bool.true) )) -> (((logic.eq_) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) ((nat.O) )) (fun (x : (nat.nat) ) , (p) (x))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (x : (nat.nat) ) , (f) (x)))) ((((nat.times) ) ((f) (i))) (((((((bigops.bigop) ((nat.nat) )) ((nat.O) )) (fun (x : (nat.nat) ) , (((bool.andb) ) (((bool.notb) ) ((((nat.eqb) ) (i)) (x)))) ((p) (x)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (x : (nat.nat) ) , (f) (x)))))) ((((@logic.absurd) ((((nat.le_) ) (((nat.S) ) (i))) ((nat.O) ))) (ltO)) ((@nat.not_le_Sn_O) (i)))))) (fun (n0 : (nat.nat) ) , fun (Hind : ((((nat.lt_) ) (i)) (n0)) -> ((((logic.eq_) ((bool.bool) )) ((p) (i))) ((bool.true) )) -> (((logic.eq_) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) (n0)) (fun (x : (nat.nat) ) , (p) (x))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (x : (nat.nat) ) , (f) (x)))) ((((nat.times) ) ((f) (i))) (((((((bigops.bigop) ((nat.nat) )) (n0)) (fun (x : (nat.nat) ) , (((bool.andb) ) (((bool.notb) ) ((((nat.eqb) ) (i)) (x)))) ((p) (x)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (x : (nat.nat) ) , (f) (x))))) , (fun (lein : (((nat.lt_) ) (i)) (((nat.S) ) (n0))) , (fun (pi : (((logic.eq_) ((bool.bool) )) ((p) (i))) ((bool.true) )) , (((((((@connectives.match_Or_prop) ((((nat.lt_) ) (i)) (n0))) ((((logic.eq_) ((nat.nat) )) (i)) (n0))) ((((logic.eq_) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) (((nat.S) ) (n0))) (fun (x : (nat.nat) ) , (p) (x))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (x : (nat.nat) ) , (f) (x)))) ((((nat.times) ) ((f) (i))) (((((((bigops.bigop) ((nat.nat) )) (((nat.S) ) (n0))) (fun (x : (nat.nat) ) , (((bool.andb) ) (((bool.notb) ) ((((nat.eqb) ) (i)) (x)))) ((p) (x)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (x : (nat.nat) ) , (f) (x)))))) (fun (Hi : (((nat.lt_) ) (i)) (n0)) , (((((((@connectives.match_Or_prop) ((((logic.eq_) ((bool.bool) )) ((p) (n0))) ((bool.true) ))) ((((logic.eq_) ((bool.bool) )) ((p) (n0))) ((bool.false) ))) ((((logic.eq_) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) (((nat.S) ) (n0))) (fun (x : (nat.nat) ) , (p) (x))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (x : (nat.nat) ) , (f) (x)))) ((((nat.times) ) ((f) (i))) (((((((bigops.bigop) ((nat.nat) )) (((nat.S) ) (n0))) (fun (x : (nat.nat) ) , (((bool.andb) ) (((bool.notb) ) ((((nat.eqb) ) (i)) (x)))) ((p) (x)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (x : (nat.nat) ) , (f) (x)))))) (fun (pn : (((logic.eq_) ((bool.bool) )) ((p) (n0))) ((bool.true) )) , (((((((@logic.eq_ind_r) ((nat.nat) )) ((((nat.times) ) ((f) (n0))) (((((((bigops.bigop) ((nat.nat) )) (n0)) (fun (i0 : (nat.nat) ) , (p) (i0))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f) (i0))))) (fun (x : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (x)) ((((nat.times) ) ((f) (i))) (((((((bigops.bigop) ((nat.nat) )) (((nat.S) ) (n0))) (fun (x0 : (nat.nat) ) , (((bool.andb) ) (((bool.notb) ) ((((nat.eqb) ) (i)) (x0)))) ((p) (x0)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (x0 : (nat.nat) ) , (f) (x0)))))) (((((((@logic.eq_ind_r) ((nat.nat) )) ((((nat.times) ) ((f) (n0))) (((((((bigops.bigop) ((nat.nat) )) (n0)) (fun (i0 : (nat.nat) ) , (((bool.andb) ) (((bool.notb) ) ((((nat.eqb) ) (i)) (i0)))) ((p) (i0)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f) (i0))))) (fun (x : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) ((f) (n0))) (((((((bigops.bigop) ((nat.nat) )) (n0)) (fun (i0 : (nat.nat) ) , (p) (i0))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f) (i0))))) ((((nat.times) ) ((f) (i))) (x)))) (((((((@logic.eq_ind_r) ((nat.nat) )) ((((nat.times) ) ((((nat.times) ) ((f) (i))) ((f) (n0)))) (((((((bigops.bigop) ((nat.nat) )) (n0)) (fun (i0 : (nat.nat) ) , ((((bool.match_bool_type) ((bool.bool) )) ((p) (i0))) ((bool.false) )) (((((bool.match_bool_type) ((bool.bool) )) ((bool.false) )) ((bool.true) )) ((((nat.eqb) ) (i)) (i0))))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f) (i0))))) (fun (x : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) ((f) (n0))) (((((((bigops.bigop) ((nat.nat) )) (n0)) (fun (i0 : (nat.nat) ) , (p) (i0))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f) (i0))))) (x))) (((((((@logic.eq_ind_r) ((nat.nat) )) ((((nat.times) ) ((f) (n0))) ((f) (i)))) (fun (x : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) ((f) (n0))) (((((((bigops.bigop) ((nat.nat) )) (n0)) (fun (i0 : (nat.nat) ) , (p) (i0))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f) (i0))))) ((((nat.times) ) (x)) (((((((bigops.bigop) ((nat.nat) )) (n0)) (fun (i0 : (nat.nat) ) , ((((bool.match_bool_type) ((bool.bool) )) ((p) (i0))) ((bool.false) )) (((((bool.match_bool_type) ((bool.bool) )) ((bool.false) )) ((bool.true) )) ((((nat.eqb) ) (i)) (i0))))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f) (i0)))))) (((((((@logic.eq_ind) ((nat.nat) )) ((((nat.times) ) ((f) (n0))) ((((nat.times) ) ((f) (i))) (((((((bigops.bigop) ((nat.nat) )) (n0)) (fun (i0 : (nat.nat) ) , ((((bool.match_bool_type) ((bool.bool) )) ((p) (i0))) ((bool.false) )) (((((bool.match_bool_type) ((bool.bool) )) ((bool.false) )) ((bool.true) )) ((((nat.eqb) ) (i)) (i0))))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f) (i0)))))) (fun (x_1 : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) ((f) (n0))) (((((((bigops.bigop) ((nat.nat) )) (n0)) (fun (i0 : (nat.nat) ) , (p) (i0))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f) (i0))))) (x_1))) (((((((@logic.eq_ind_r) ((nat.nat) )) ((((nat.times) ) ((f) (i))) (((((((bigops.bigop) ((nat.nat) )) (n0)) (fun (x : (nat.nat) ) , (((bool.andb) ) (((bool.notb) ) ((((nat.eqb) ) (i)) (x)))) ((p) (x)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (x : (nat.nat) ) , (f) (x))))) (fun (x : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) ((f) (n0))) (x))) ((((nat.times) ) ((f) (n0))) ((((nat.times) ) ((f) (i))) (((((((bigops.bigop) ((nat.nat) )) (n0)) (fun (i0 : (nat.nat) ) , ((((bool.match_bool_type) ((bool.bool) )) ((p) (i0))) ((bool.false) )) (((((bool.match_bool_type) ((bool.bool) )) ((bool.false) )) ((bool.true) )) ((((nat.eqb) ) (i)) (i0))))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f) (i0))))))) (((@logic.refl_) ((nat.nat) )) ((((nat.times) ) ((f) (n0))) ((((nat.times) ) ((f) (i))) (((((((bigops.bigop) ((nat.nat) )) (n0)) (fun (x : (nat.nat) ) , (((bool.andb) ) (((bool.notb) ) ((((nat.eqb) ) (i)) (x)))) ((p) (x)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (x : (nat.nat) ) , (f) (x))))))) (((((((bigops.bigop) ((nat.nat) )) (n0)) (fun (x : (nat.nat) ) , (p) (x))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (x : (nat.nat) ) , (f) (x)))) (((Hind) (Hi)) (((((((@logic.rewrite_r) ((bool.bool) )) ((bool.true) )) (fun (__ : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) (__)) ((bool.true) ))) (((@logic.refl_) ((bool.bool) )) ((bool.true) ))) ((p) (i))) (pi))))) ((((nat.times) ) ((((nat.times) ) ((f) (n0))) ((f) (i)))) (((((((bigops.bigop) ((nat.nat) )) (n0)) (fun (i0 : (nat.nat) ) , ((((bool.match_bool_type) ((bool.bool) )) ((p) (i0))) ((bool.false) )) (((((bool.match_bool_type) ((bool.bool) )) ((bool.false) )) ((bool.true) )) ((((nat.eqb) ) (i)) (i0))))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f) (i0))))) ((((@bigops.assoc) ((f) (n0))) ((f) (i))) (((((((bigops.bigop) ((nat.nat) )) (n0)) (fun (i0 : (nat.nat) ) , ((((bool.match_bool_type) ((bool.bool) )) ((p) (i0))) ((bool.false) )) (((((bool.match_bool_type) ((bool.bool) )) ((bool.false) )) ((bool.true) )) ((((nat.eqb) ) (i)) (i0))))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f) (i0)))))) ((((nat.times) ) ((f) (i))) ((f) (n0)))) (((@nat.commutative_times) ((f) (i))) ((f) (n0))))) ((((nat.times) ) ((f) (i))) ((((nat.times) ) ((f) (n0))) (((((((bigops.bigop) ((nat.nat) )) (n0)) (fun (i0 : (nat.nat) ) , ((((bool.match_bool_type) ((bool.bool) )) ((p) (i0))) ((bool.false) )) (((((bool.match_bool_type) ((bool.bool) )) ((bool.false) )) ((bool.true) )) ((((nat.eqb) ) (i)) (i0))))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f) (i0)))))) ((((@bigops.assoc) ((f) (i))) ((f) (n0))) (((((((bigops.bigop) ((nat.nat) )) (n0)) (fun (i0 : (nat.nat) ) , ((((bool.match_bool_type) ((bool.bool) )) ((p) (i0))) ((bool.false) )) (((((bool.match_bool_type) ((bool.bool) )) ((bool.false) )) ((bool.true) )) ((((nat.eqb) ) (i)) (i0))))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f) (i0)))))) (((((((bigops.bigop) ((nat.nat) )) (((nat.S) ) (n0))) (fun (i0 : (nat.nat) ) , (((bool.andb) ) (((bool.notb) ) ((((nat.eqb) ) (i)) (i0)))) ((p) (i0)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f) (i0)))) ((((((((@bigops.bigop_Strue) ((nat.nat) )) (n0)) (fun (__ : (nat.nat) ) , (((bool.andb) ) (((bool.notb) ) ((((nat.eqb) ) (i)) (__)))) ((p) (__)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (f)) (((((((@logic.rewrite_r) ((bool.bool) )) ((bool.true) )) (fun (__ : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) ((((bool.andb) ) (((bool.notb) ) ((((nat.eqb) ) (i)) (n0)))) (__))) ((bool.true) ))) (((((((@logic.rewrite_r) ((bool.bool) )) ((bool.true) )) (fun (__ : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) (__)) ((bool.true) ))) (((@logic.refl_) ((bool.bool) )) ((bool.true) ))) ((((bool.andb) ) (((bool.notb) ) ((((nat.eqb) ) (i)) (n0)))) ((bool.true) ))) (((((((@logic.rewrite_l) ((bool.bool) )) ((p) (n0))) (fun (__ : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) ((((bool.andb) ) (((bool.notb) ) ((((nat.eqb) ) (i)) (n0)))) ((bool.true) ))) (__))) (((((((@logic.rewrite_l) ((bool.bool) )) ((p) (n0))) (fun (__ : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) ((((bool.andb) ) (((bool.notb) ) ((((nat.eqb) ) (i)) (n0)))) (__))) ((p) (n0)))) (((((((@logic.eq_ind_r) ((bool.bool) )) ((bool.false) )) (fun (x : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) ((((bool.andb) ) (((bool.notb) ) (x))) ((p) (n0)))) ((p) (n0)))) ((((((@bool.sym_eq_match_bool_type_false) ((bool.bool) )) ((bool.false) )) ((bool.true) )) (fun (y : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) (((((bool.match_bool_type) ((bool.bool) )) ((p) (n0))) ((bool.false) )) (y))) ((p) (n0)))) ((((((@bool.eq_match_bool_type_true) ((bool.bool) )) ((p) (n0))) ((bool.false) )) (fun (y : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) (((((bool.match_bool_type) ((bool.bool) )) ((p) (n0))) ((bool.false) )) ((bool.true) ))) (y))) ((((((@bool.eq_match_bool_type_false) ((bool.bool) )) ((bool.false) )) ((bool.true) )) (fun (y : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) (((((bool.match_bool_type) ((bool.bool) )) ((p) (n0))) ((bool.false) )) ((bool.true) ))) (((((bool.match_bool_type) ((bool.bool) )) ((p) (n0))) ((bool.false) )) (y)))) ((((((@bool.eq_match_bool_type_false) ((bool.bool) )) ((bool.false) )) ((bool.true) )) (fun (y : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) (((((bool.match_bool_type) ((bool.bool) )) ((p) (n0))) ((bool.false) )) (y))) (((((bool.match_bool_type) ((bool.bool) )) ((p) (n0))) ((bool.false) )) (((((bool.match_bool_type) ((bool.bool) )) ((bool.false) )) ((bool.true) )) ((bool.false) ))))) (((@logic.refl_) ((bool.bool) )) ((((bool.andb) ) (((bool.notb) ) ((bool.false) ))) ((p) (n0))))))))) ((((nat.eqb) ) (i)) (n0))) ((((@nat.not_eq_to_eqb_false) (i)) (n0)) ((((@nat.lt_to_not_eq) (i)) (n0)) (Hi))))) ((bool.true) )) (pn))) ((bool.true) )) (pn)))) ((p) (n0))) (pn))))) (((((((bigops.bigop) ((nat.nat) )) (((nat.S) ) (n0))) (fun (i0 : (nat.nat) ) , (p) (i0))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f) (i0)))) ((((((((@bigops.bigop_Strue) ((nat.nat) )) (n0)) (p)) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (f)) (((((((@logic.rewrite_r) ((bool.bool) )) ((bool.true) )) (fun (__ : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) (__)) ((bool.true) ))) (((@logic.refl_) ((bool.bool) )) ((bool.true) ))) ((p) (n0))) (pn)))))) (fun (pn : (((logic.eq_) ((bool.bool) )) ((p) (n0))) ((bool.false) )) , (((((((@logic.eq_ind_r) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) (n0)) (fun (i0 : (nat.nat) ) , (p) (i0))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f) (i0)))) (fun (x : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (x)) ((((nat.times) ) ((f) (i))) (((((((bigops.bigop) ((nat.nat) )) (((nat.S) ) (n0))) (fun (x0 : (nat.nat) ) , (((bool.andb) ) (((bool.notb) ) ((((nat.eqb) ) (i)) (x0)))) ((p) (x0)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (x0 : (nat.nat) ) , (f) (x0)))))) (((((((@logic.eq_ind_r) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) (n0)) (fun (i0 : (nat.nat) ) , (((bool.andb) ) (((bool.notb) ) ((((nat.eqb) ) (i)) (i0)))) ((p) (i0)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f) (i0)))) (fun (x : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) (n0)) (fun (i0 : (nat.nat) ) , (p) (i0))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f) (i0)))) ((((nat.times) ) ((f) (i))) (x)))) (((((((@logic.eq_ind_r) ((nat.nat) )) ((((nat.times) ) ((f) (i))) (((((((bigops.bigop) ((nat.nat) )) (n0)) (fun (x : (nat.nat) ) , (((bool.andb) ) (((bool.notb) ) ((((nat.eqb) ) (i)) (x)))) ((p) (x)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (x : (nat.nat) ) , (f) (x))))) (fun (x : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (x)) ((((nat.times) ) ((f) (i))) (((((((bigops.bigop) ((nat.nat) )) (n0)) (fun (i0 : (nat.nat) ) , (((bool.andb) ) (((bool.notb) ) ((((nat.eqb) ) (i)) (i0)))) ((p) (i0)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f) (i0)))))) (((@logic.refl_) ((nat.nat) )) ((((nat.times) ) ((f) (i))) (((((((bigops.bigop) ((nat.nat) )) (n0)) (fun (x : (nat.nat) ) , (((bool.andb) ) (((bool.notb) ) ((((nat.eqb) ) (i)) (x)))) ((p) (x)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (x : (nat.nat) ) , (f) (x)))))) (((((((bigops.bigop) ((nat.nat) )) (n0)) (fun (x : (nat.nat) ) , (p) (x))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (x : (nat.nat) ) , (f) (x)))) (((Hind) (Hi)) (((((((@logic.rewrite_r) ((bool.bool) )) ((bool.true) )) (fun (__ : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) (__)) ((bool.true) ))) (((@logic.refl_) ((bool.bool) )) ((bool.true) ))) ((p) (i))) (pi))))) (((((((bigops.bigop) ((nat.nat) )) (((nat.S) ) (n0))) (fun (i0 : (nat.nat) ) , (((bool.andb) ) (((bool.notb) ) ((((nat.eqb) ) (i)) (i0)))) ((p) (i0)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f) (i0)))) ((((((((@bigops.bigop_Sfalse) ((nat.nat) )) (n0)) (fun (__ : (nat.nat) ) , (((bool.andb) ) (((bool.notb) ) ((((nat.eqb) ) (i)) (__)))) ((p) (__)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (f)) (((((((@logic.rewrite_r) ((bool.bool) )) ((bool.false) )) (fun (__ : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) ((((bool.andb) ) (((bool.notb) ) ((((nat.eqb) ) (i)) (n0)))) (__))) ((bool.false) ))) (((((((@logic.rewrite_r) ((bool.bool) )) ((bool.false) )) (fun (__ : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) (__)) ((bool.false) ))) (((@logic.refl_) ((bool.bool) )) ((bool.false) ))) ((((bool.andb) ) (((bool.notb) ) ((((nat.eqb) ) (i)) (n0)))) ((bool.false) ))) (((((((@logic.rewrite_l) ((bool.bool) )) ((p) (n0))) (fun (__ : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) ((((bool.andb) ) (((bool.notb) ) ((((nat.eqb) ) (i)) (n0)))) ((bool.false) ))) (__))) (((((((@logic.rewrite_l) ((bool.bool) )) ((p) (n0))) (fun (__ : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) ((((bool.andb) ) (((bool.notb) ) ((((nat.eqb) ) (i)) (n0)))) (__))) ((p) (n0)))) (((((((@logic.eq_ind_r) ((bool.bool) )) ((bool.false) )) (fun (x : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) ((((bool.andb) ) (((bool.notb) ) (x))) ((p) (n0)))) ((p) (n0)))) ((((((@bool.sym_eq_match_bool_type_false) ((bool.bool) )) ((bool.false) )) ((bool.true) )) (fun (y : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) (((((bool.match_bool_type) ((bool.bool) )) ((p) (n0))) ((bool.false) )) (y))) ((p) (n0)))) ((((((@bool.eq_match_bool_type_true) ((bool.bool) )) ((p) (n0))) ((bool.false) )) (fun (y : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) (((((bool.match_bool_type) ((bool.bool) )) ((p) (n0))) ((bool.false) )) ((bool.true) ))) (y))) ((((((@bool.eq_match_bool_type_false) ((bool.bool) )) ((bool.false) )) ((bool.true) )) (fun (y : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) (((((bool.match_bool_type) ((bool.bool) )) ((p) (n0))) ((bool.false) )) ((bool.true) ))) (((((bool.match_bool_type) ((bool.bool) )) ((p) (n0))) ((bool.false) )) (y)))) ((((((@bool.eq_match_bool_type_false) ((bool.bool) )) ((bool.false) )) ((bool.true) )) (fun (y : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) (((((bool.match_bool_type) ((bool.bool) )) ((p) (n0))) ((bool.false) )) (y))) (((((bool.match_bool_type) ((bool.bool) )) ((p) (n0))) ((bool.false) )) (((((bool.match_bool_type) ((bool.bool) )) ((bool.false) )) ((bool.true) )) ((bool.false) ))))) (((@logic.refl_) ((bool.bool) )) ((((bool.andb) ) (((bool.notb) ) ((bool.false) ))) ((p) (n0))))))))) ((((nat.eqb) ) (i)) (n0))) ((((@nat.not_eq_to_eqb_false) (i)) (n0)) ((((@nat.lt_to_not_eq) (i)) (n0)) (Hi))))) ((bool.false) )) (pn))) ((bool.false) )) (pn)))) ((p) (n0))) (pn))))) (((((((bigops.bigop) ((nat.nat) )) (((nat.S) ) (n0))) (fun (i0 : (nat.nat) ) , (p) (i0))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f) (i0)))) ((((((((@bigops.bigop_Sfalse) ((nat.nat) )) (n0)) (p)) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (f)) (((((((@logic.rewrite_r) ((bool.bool) )) ((bool.false) )) (fun (__ : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) (__)) ((bool.false) ))) (((@logic.refl_) ((bool.bool) )) ((bool.false) ))) ((p) (n0))) (pn)))))) ((@bool.true_or_false) ((p) (n0)))))) (fun (Hi : (((logic.eq_) ((nat.nat) )) (i)) (n0)) , (((((((@logic.eq_ind) ((nat.nat) )) (i)) (fun (x_1 : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) (((nat.S) ) (x_1))) (fun (x : (nat.nat) ) , (p) (x))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (x : (nat.nat) ) , (f) (x)))) ((((nat.times) ) ((f) (i))) (((((((bigops.bigop) ((nat.nat) )) (((nat.S) ) (x_1))) (fun (x : (nat.nat) ) , (((bool.andb) ) (((bool.notb) ) ((((nat.eqb) ) (i)) (x)))) ((p) (x)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (x : (nat.nat) ) , (f) (x)))))) (((((((@logic.eq_ind_r) ((nat.nat) )) ((((nat.times) ) ((f) (i))) (((((((bigops.bigop) ((nat.nat) )) (i)) (fun (i0 : (nat.nat) ) , (p) (i0))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f) (i0))))) (fun (x : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (x)) ((((nat.times) ) ((f) (i))) (((((((bigops.bigop) ((nat.nat) )) (((nat.S) ) (i))) (fun (x0 : (nat.nat) ) , (((bool.andb) ) (((bool.notb) ) ((((nat.eqb) ) (i)) (x0)))) ((p) (x0)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (x0 : (nat.nat) ) , (f) (x0)))))) (((((((@logic.eq_f) ((nat.nat) )) ((nat.nat) )) (((nat.times) ) ((f) (i)))) (((((((bigops.bigop) ((nat.nat) )) (i)) (fun (i0 : (nat.nat) ) , (p) (i0))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f) (i0)))) (((((((bigops.bigop) ((nat.nat) )) (((nat.S) ) (i))) (fun (x : (nat.nat) ) , (((bool.andb) ) (((bool.notb) ) ((((nat.eqb) ) (i)) (x)))) ((p) (x)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (x : (nat.nat) ) , (f) (x)))) (((((((@logic.eq_ind_r) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) (i)) (fun (i0 : (nat.nat) ) , (((bool.andb) ) (((bool.notb) ) ((((nat.eqb) ) (i)) (i0)))) ((p) (i0)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f) (i0)))) (fun (x : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) (i)) (fun (i0 : (nat.nat) ) , (p) (i0))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f) (i0)))) (x))) (((((((((((@bigops.same_bigop) ((nat.nat) )) (i)) (p)) (fun (__ : (nat.nat) ) , (((bool.andb) ) (((bool.notb) ) ((((nat.eqb) ) (i)) (__)))) ((p) (__)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (f)) (f)) (fun (k : (nat.nat) ) , fun (ltki : (((nat.lt_) ) (k)) (i)) , (((((((@logic.eq_ind_r) ((bool.bool) )) ((bool.false) )) (fun (x : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) ((p) (k))) ((((bool.andb) ) (((bool.notb) ) (x))) ((p) (k))))) ((((((@bool.sym_eq_match_bool_type_false) ((bool.bool) )) ((bool.false) )) ((bool.true) )) (fun (y : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) ((p) (k))) (((((bool.match_bool_type) ((bool.bool) )) ((p) (k))) ((bool.false) )) (y)))) ((((((@bool.sym_eq_match_bool_type_true) ((bool.bool) )) ((p) (k))) ((bool.false) )) (fun (y : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) ((p) (k))) (y))) (((@logic.refl_) ((bool.bool) )) ((p) (k)))))) ((((nat.eqb) ) (i)) (k))) ((((@nat.not_eq_to_eqb_false) (i)) (k)) (((((@logic.not_to_not) ((((logic.eq_) ((nat.nat) )) (i)) (k))) ((((nat.le_) ) (((nat.S) ) (i))) (i))) (fun (auto : (((logic.eq_) ((nat.nat) )) (i)) (k)) , (((((@logic.eq_coerc) ((((nat.le_) ) (((nat.S) ) (k))) (i))) ((((nat.le_) ) (((nat.S) ) (i))) (i))) (ltki)) (((((((@logic.rewrite_l) ((nat.nat) )) (i)) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) (((nat.S) ) (__))) (i))) ((((nat.le_) ) (((nat.S) ) (i))) (i)))) (((@logic.refl_) (Prop)) ((((nat.le_) ) (((nat.S) ) (i))) (i)))) (k)) (auto))))) ((@nat.not_le_Sn_n) (i))))))) (fun (i0 : (nat.nat) ) , fun (auto : (((nat.lt_) ) (i0)) (i)) , (fun (auto' : (((logic.eq_) ((bool.bool) )) ((p) (i0))) ((bool.true) )) , (((@logic.refl_) ((nat.nat) )) ((f) (i0))))))) (((((((bigops.bigop) ((nat.nat) )) (((nat.S) ) (i))) (fun (i0 : (nat.nat) ) , (((bool.andb) ) (((bool.notb) ) ((((nat.eqb) ) (i)) (i0)))) ((p) (i0)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f) (i0)))) ((((((((@bigops.bigop_Sfalse) ((nat.nat) )) (i)) (fun (__ : (nat.nat) ) , (((bool.andb) ) (((bool.notb) ) ((((nat.eqb) ) (i)) (__)))) ((p) (__)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (f)) (((((((@logic.eq_ind_r) ((bool.bool) )) ((bool.true) )) (fun (x : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) ((((bool.andb) ) (((bool.notb) ) (x))) ((p) (i)))) ((bool.false) ))) ((((((@bool.eq_match_bool_type_false) ((bool.bool) )) ((p) (i))) ((bool.false) )) (fun (y : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) (((((bool.match_bool_type) ((bool.bool) )) ((p) (i))) ((bool.false) )) (((((bool.match_bool_type) ((bool.bool) )) ((bool.false) )) ((bool.true) )) ((bool.true) )))) (y))) ((((((@bool.eq_match_bool_type_true) ((bool.bool) )) ((bool.false) )) ((bool.true) )) (fun (y : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) (((((bool.match_bool_type) ((bool.bool) )) ((p) (i))) ((bool.false) )) (((((bool.match_bool_type) ((bool.bool) )) ((bool.false) )) ((bool.true) )) ((bool.true) )))) (((((bool.match_bool_type) ((bool.bool) )) ((p) (i))) ((bool.false) )) (y)))) (((@logic.refl_) ((bool.bool) )) ((((bool.andb) ) (((bool.notb) ) ((bool.true) ))) ((p) (i))))))) ((((nat.eqb) ) (i)) (i))) ((((@nat.eq_to_eqb_true) (i)) (i)) (((@logic.refl_) ((nat.nat) )) (i)))))))) (((((((bigops.bigop) ((nat.nat) )) (((nat.S) ) (i))) (fun (i0 : (nat.nat) ) , (p) (i0))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f) (i0)))) ((((((((@bigops.bigop_Strue) ((nat.nat) )) (i)) (p)) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (f)) (((((((@logic.rewrite_r) ((bool.bool) )) ((bool.true) )) (fun (__ : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) (__)) ((bool.true) ))) (((@logic.refl_) ((bool.bool) )) ((bool.true) ))) ((p) (i))) (pi))))) (n0)) (Hi)))) ((((@nat.le_to_or_lt_eq) (i)) (n0)) ((((@nat.le_S_S_to_le) (i)) (n0)) (lein)))))))) (n).
def bigops.sub_hk : (((nat.nat) ) -> (nat.nat) ) -> (((nat.nat) ) -> (nat.nat) ) -> ((nat.nat) ) -> ((nat.nat) ) -> (((nat.nat) ) -> (bool.bool) ) -> (((nat.nat) ) -> (bool.bool) ) -> (((nat.nat) ) -> (nat.nat) ) -> (((nat.nat) ) -> (nat.nat) ) -> Prop := fun (h : ((nat.nat) ) -> (nat.nat) ) , fun (k : ((nat.nat) ) -> (nat.nat) ) , fun (n1 : (nat.nat) ) , fun (n2 : (nat.nat) ) , fun (p1 : ((nat.nat) ) -> (bool.bool) ) , fun (p2 : ((nat.nat) ) -> (bool.bool) ) , fun (f1 : ((nat.nat) ) -> (nat.nat) ) , fun (f2 : ((nat.nat) ) -> (nat.nat) ) , forall (i:(nat.nat) ) , ((((nat.lt_) ) (i)) (n1)) -> ((((logic.eq_) ((bool.bool) )) ((p1) (i))) ((bool.true) )) -> (((connectives.And) ) ((((connectives.And) ) ((((nat.lt_) ) ((h) (i))) (n2))) ((((logic.eq_) ((bool.bool) )) ((p2) ((h) (i)))) ((bool.true) )))) ((((logic.eq_) ((nat.nat) )) ((k) ((h) (i)))) (i)).
def bigops.iso : ((nat.nat) ) -> ((nat.nat) ) -> (((nat.nat) ) -> (bool.bool) ) -> (((nat.nat) ) -> (bool.bool) ) -> (((nat.nat) ) -> (nat.nat) ) -> (((nat.nat) ) -> (nat.nat) ) -> Prop := fun (n1 : (nat.nat) ) , fun (n2 : (nat.nat) ) , fun (p1 : ((nat.nat) ) -> (bool.bool) ) , fun (p2 : ((nat.nat) ) -> (bool.bool) ) , fun (f1 : ((nat.nat) ) -> (nat.nat) ) , fun (f2 : ((nat.nat) ) -> (nat.nat) ) , ((connectives.ex) (((nat.nat) ) -> (nat.nat) )) (fun (h : ((nat.nat) ) -> (nat.nat) ) , ((connectives.ex) (((nat.nat) ) -> (nat.nat) )) (fun (k : ((nat.nat) ) -> (nat.nat) ) , (((connectives.And) ) ((((connectives.And) ) (forall (i:(nat.nat) ) , ((((nat.lt_) ) (i)) (n1)) -> ((((logic.eq_) ((bool.bool) )) ((p1) (i))) ((bool.true) )) -> (((logic.eq_) ((nat.nat) )) ((f1) (i))) ((f2) ((h) (i))))) ((((((((((bigops.sub_hk) ) (h)) (k)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)))) ((((((((((bigops.sub_hk) ) (k)) (h)) (n2)) (n1)) (p2)) (p1)) (f2)) (f1)))).
theorem bigops.sub_hkO : forall (h:((nat.nat) ) -> (nat.nat) ) , forall (k:((nat.nat) ) -> (nat.nat) ) , forall (n1:(nat.nat) ) , forall (n2:(nat.nat) ) , forall (p1:((nat.nat) ) -> (bool.bool) ) , forall (p2:((nat.nat) ) -> (bool.bool) ) , forall (f1:((nat.nat) ) -> (nat.nat) ) , forall (f2:((nat.nat) ) -> (nat.nat) ) , ((((logic.eq_) ((nat.nat) )) (n1)) ((nat.O) )) -> (((((((((bigops.sub_hk) ) (h)) (k)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2) := fun (h : ((nat.nat) ) -> (nat.nat) ) , fun (k : ((nat.nat) ) -> (nat.nat) ) , fun (n1 : (nat.nat) ) , fun (n2 : (nat.nat) ) , fun (p1 : ((nat.nat) ) -> (bool.bool) ) , fun (p2 : ((nat.nat) ) -> (bool.bool) ) , fun (f1 : ((nat.nat) ) -> (nat.nat) ) , fun (f2 : ((nat.nat) ) -> (nat.nat) ) , fun (up0 : (((logic.eq_) ((nat.nat) )) (n1)) ((nat.O) )) , (fun (i : (nat.nat) ) , fun (lti : (((nat.lt_) ) (i)) (n1)) , (((((((@logic.eq_ind_r) ((nat.nat) )) ((nat.O) )) (fun (x : (nat.nat) ) , ((((logic.eq_) ((bool.bool) )) ((p1) (i))) ((bool.true) )) -> (((connectives.And) ) ((((connectives.And) ) ((((nat.lt_) ) ((h) (i))) (n2))) ((((logic.eq_) ((bool.bool) )) ((p2) ((h) (i)))) ((bool.true) )))) ((((logic.eq_) ((nat.nat) )) ((k) ((h) (i)))) (i)))) (((@connectives.falsity) (((((logic.eq_) ((bool.bool) )) ((p1) (i))) ((bool.true) )) -> (((connectives.And) ) ((((connectives.And) ) ((((nat.lt_) ) ((h) (i))) (n2))) ((((logic.eq_) ((bool.bool) )) ((p2) ((h) (i)))) ((bool.true) )))) ((((logic.eq_) ((nat.nat) )) ((k) ((h) (i)))) (i)))) ((((@logic.absurd) ((((nat.le_) ) (((nat.S) ) (i))) ((nat.O) ))) (((((@logic.eq_coerc) ((((nat.le_) ) (((nat.S) ) (i))) (n1))) ((((nat.le_) ) (((nat.S) ) (i))) ((nat.O) ))) (lti)) (((((((@logic.rewrite_r) ((nat.nat) )) ((nat.O) )) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) (((nat.S) ) (i))) (__))) ((((nat.le_) ) (((nat.S) ) (i))) ((nat.O) )))) (((@logic.refl_) (Prop)) ((((nat.le_) ) (((nat.S) ) (i))) ((nat.O) )))) (n1)) (up0)))) ((@nat.not_le_Sn_O) (i))))) (n1)) (up0))).
theorem bigops.sub0_to_false : forall (h:((nat.nat) ) -> (nat.nat) ) , forall (k:((nat.nat) ) -> (nat.nat) ) , forall (n1:(nat.nat) ) , forall (n2:(nat.nat) ) , forall (p1:((nat.nat) ) -> (bool.bool) ) , forall (p2:((nat.nat) ) -> (bool.bool) ) , forall (f1:((nat.nat) ) -> (nat.nat) ) , forall (f2:((nat.nat) ) -> (nat.nat) ) , ((((logic.eq_) ((nat.nat) )) (n1)) ((nat.O) )) -> ((((((((((bigops.sub_hk) ) (h)) (k)) (n2)) (n1)) (p2)) (p1)) (f2)) (f1)) -> forall (i:(nat.nat) ) , ((((nat.lt_) ) (i)) (n2)) -> (((logic.eq_) ((bool.bool) )) ((p2) (i))) ((bool.false) ) := fun (h : ((nat.nat) ) -> (nat.nat) ) , fun (k : ((nat.nat) ) -> (nat.nat) ) , fun (n1 : (nat.nat) ) , fun (n2 : (nat.nat) ) , fun (p1 : ((nat.nat) ) -> (bool.bool) ) , fun (p2 : ((nat.nat) ) -> (bool.bool) ) , fun (f1 : ((nat.nat) ) -> (nat.nat) ) , fun (f2 : ((nat.nat) ) -> (nat.nat) ) , fun (up0 : (((logic.eq_) ((nat.nat) )) (n1)) ((nat.O) )) , (fun (sub : (((((((((bigops.sub_hk) ) (h)) (k)) (n2)) (n1)) (p2)) (p1)) (f2)) (f1)) , (fun (i : (nat.nat) ) , fun (lti : (((nat.lt_) ) (i)) (n2)) , (((((((@connectives.match_Or_prop) ((((logic.eq_) ((bool.bool) )) ((p2) (i))) ((bool.true) ))) ((((logic.eq_) ((bool.bool) )) ((p2) (i))) ((bool.false) ))) ((((logic.eq_) ((bool.bool) )) ((p2) (i))) ((bool.false) ))) (fun (ptrue : (((logic.eq_) ((bool.bool) )) ((p2) (i))) ((bool.true) )) , ((((((@connectives.match_And_prop) ((((connectives.And) ) ((((nat.lt_) ) ((h) (i))) (n1))) ((((logic.eq_) ((bool.bool) )) ((p1) ((h) (i)))) ((bool.true) )))) ((((logic.eq_) ((nat.nat) )) ((k) ((h) (i)))) (i))) ((((logic.eq_) ((bool.bool) )) ((p2) (i))) ((bool.false) ))) (fun (_clearme : (((connectives.And) ) ((((nat.lt_) ) ((h) (i))) (n1))) ((((logic.eq_) ((bool.bool) )) ((p1) ((h) (i)))) ((bool.true) ))) , ((((((@connectives.match_And_prop) ((((nat.lt_) ) ((h) (i))) (n1))) ((((logic.eq_) ((bool.bool) )) ((p1) ((h) (i)))) ((bool.true) ))) (((((logic.eq_) ((nat.nat) )) ((k) ((h) (i)))) (i)) -> (((logic.eq_) ((bool.bool) )) ((p2) (i))) ((bool.false) ))) (fun (hi : (((nat.lt_) ) ((h) (i))) (n1)) , (((@connectives.falsity) (((((logic.eq_) ((bool.bool) )) ((p1) ((h) (i)))) ((bool.true) )) -> ((((logic.eq_) ((nat.nat) )) ((k) ((h) (i)))) (i)) -> (((logic.eq_) ((bool.bool) )) ((p2) (i))) ((bool.false) ))) ((((@logic.absurd) ((((nat.le_) ) (((nat.S) ) ((h) (i)))) ((nat.O) ))) (((((@logic.eq_coerc) ((((nat.le_) ) (((nat.S) ) ((h) (i)))) (n1))) ((((nat.le_) ) (((nat.S) ) ((h) (i)))) ((nat.O) ))) (hi)) (((((((@logic.rewrite_r) ((nat.nat) )) ((nat.O) )) (fun (__ : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.le_) ) (((nat.S) ) ((h) (i)))) (__))) ((((nat.le_) ) (((nat.S) ) ((h) (i)))) ((nat.O) )))) (((@logic.refl_) (Prop)) ((((nat.le_) ) (((nat.S) ) ((h) (i)))) ((nat.O) )))) (n1)) (up0)))) ((@nat.not_le_Sn_O) ((h) (i))))))) (_clearme)))) ((((sub) (i)) (lti)) (ptrue))))) (fun (auto : (((logic.eq_) ((bool.bool) )) ((p2) (i))) ((bool.false) )) , (((((((@logic.rewrite_r) ((bool.bool) )) ((bool.false) )) (fun (__ : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) (__)) ((bool.false) ))) (((@logic.refl_) ((bool.bool) )) ((bool.false) ))) ((p2) (i))) (auto)))) ((@bool.true_or_false) ((p2) (i)))))).
theorem bigops.sub_lt : forall (e:((nat.nat) ) -> (nat.nat) ) , forall (p:((nat.nat) ) -> (bool.bool) ) , forall (n:(nat.nat) ) , forall (m:(nat.nat) ) , ((((nat.le_) ) (n)) (m)) -> (((((((((bigops.sub_hk) ) (fun (x : (nat.nat) ) , x)) (fun (x : (nat.nat) ) , x)) (n)) (m)) (p)) (p)) (e)) (e) := fun (e : ((nat.nat) ) -> (nat.nat) ) , fun (f : ((nat.nat) ) -> (bool.bool) ) , fun (n : (nat.nat) ) , fun (m : (nat.nat) ) , fun (lenm : (((nat.le_) ) (n)) (m)) , (fun (i : (nat.nat) ) , fun (lti : (((nat.lt_) ) (i)) (n)) , (fun (fi : (((logic.eq_) ((bool.bool) )) ((f) (i))) ((bool.true) )) , (((((@connectives.conj) ((((connectives.And) ) ((((nat.lt_) ) (i)) (m))) ((((logic.eq_) ((bool.bool) )) ((f) (i))) ((bool.true) )))) ((((logic.eq_) ((nat.nat) )) (i)) (i))) (((((@connectives.conj) ((((nat.lt_) ) (i)) (m))) ((((logic.eq_) ((bool.bool) )) ((f) (i))) ((bool.true) ))) ((((((@nat.lt_to_le_to_lt) (i)) (n)) (m)) (lti)) (lenm))) (((((((@logic.rewrite_r) ((bool.bool) )) ((bool.true) )) (fun (__ : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) (__)) ((bool.true) ))) (((@logic.refl_) ((bool.bool) )) ((bool.true) ))) ((f) (i))) (fi)))) (((@logic.refl_) ((nat.nat) )) (i))))).
theorem bigops.transitive_sub : forall (h1:((nat.nat) ) -> (nat.nat) ) , forall (k1:((nat.nat) ) -> (nat.nat) ) , forall (h2:((nat.nat) ) -> (nat.nat) ) , forall (k2:((nat.nat) ) -> (nat.nat) ) , forall (n1:(nat.nat) ) , forall (n2:(nat.nat) ) , forall (n3:(nat.nat) ) , forall (p1:((nat.nat) ) -> (bool.bool) ) , forall (p2:((nat.nat) ) -> (bool.bool) ) , forall (p3:((nat.nat) ) -> (bool.bool) ) , forall (f1:((nat.nat) ) -> (nat.nat) ) , forall (f2:((nat.nat) ) -> (nat.nat) ) , forall (f3:((nat.nat) ) -> (nat.nat) ) , ((((((((((bigops.sub_hk) ) (h1)) (k1)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)) -> ((((((((((bigops.sub_hk) ) (h2)) (k2)) (n2)) (n3)) (p2)) (p3)) (f2)) (f3)) -> (((((((((bigops.sub_hk) ) (fun (x : (nat.nat) ) , (h2) ((h1) (x)))) (fun (x : (nat.nat) ) , (k1) ((k2) (x)))) (n1)) (n3)) (p1)) (p3)) (f1)) (f3) := fun (h1 : ((nat.nat) ) -> (nat.nat) ) , fun (k1 : ((nat.nat) ) -> (nat.nat) ) , fun (h2 : ((nat.nat) ) -> (nat.nat) ) , fun (k2 : ((nat.nat) ) -> (nat.nat) ) , fun (n1 : (nat.nat) ) , fun (n2 : (nat.nat) ) , fun (n3 : (nat.nat) ) , fun (p1 : ((nat.nat) ) -> (bool.bool) ) , fun (p2 : ((nat.nat) ) -> (bool.bool) ) , fun (p3 : ((nat.nat) ) -> (bool.bool) ) , fun (f1 : ((nat.nat) ) -> (nat.nat) ) , fun (f2 : ((nat.nat) ) -> (nat.nat) ) , fun (f3 : ((nat.nat) ) -> (nat.nat) ) , fun (sub1 : (((((((((bigops.sub_hk) ) (h1)) (k1)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)) , (fun (sub2 : (((((((((bigops.sub_hk) ) (h2)) (k2)) (n2)) (n3)) (p2)) (p3)) (f2)) (f3)) , (fun (i : (nat.nat) ) , fun (lti : (((nat.lt_) ) (i)) (n1)) , (fun (fi : (((logic.eq_) ((bool.bool) )) ((p1) (i))) ((bool.true) )) , ((((((@connectives.match_And_prop) ((((connectives.And) ) ((((nat.lt_) ) ((h1) (i))) (n2))) ((((logic.eq_) ((bool.bool) )) ((p2) ((h1) (i)))) ((bool.true) )))) ((((logic.eq_) ((nat.nat) )) ((k1) ((h1) (i)))) (i))) ((((connectives.And) ) ((((connectives.And) ) ((((nat.lt_) ) ((h2) ((h1) (i)))) (n3))) ((((logic.eq_) ((bool.bool) )) ((p3) ((h2) ((h1) (i))))) ((bool.true) )))) ((((logic.eq_) ((nat.nat) )) ((k1) ((k2) ((h2) ((h1) (i)))))) (i)))) (fun (_clearme : (((connectives.And) ) ((((nat.lt_) ) ((h1) (i))) (n2))) ((((logic.eq_) ((bool.bool) )) ((p2) ((h1) (i)))) ((bool.true) ))) , ((((((@connectives.match_And_prop) ((((nat.lt_) ) ((h1) (i))) (n2))) ((((logic.eq_) ((bool.bool) )) ((p2) ((h1) (i)))) ((bool.true) ))) (((((logic.eq_) ((nat.nat) )) ((k1) ((h1) (i)))) (i)) -> (((connectives.And) ) ((((connectives.And) ) ((((nat.lt_) ) ((h2) ((h1) (i)))) (n3))) ((((logic.eq_) ((bool.bool) )) ((p3) ((h2) ((h1) (i))))) ((bool.true) )))) ((((logic.eq_) ((nat.nat) )) ((k1) ((k2) ((h2) ((h1) (i)))))) (i)))) (fun (lth1i : (((nat.lt_) ) ((h1) (i))) (n2)) , (fun (fh1i : (((logic.eq_) ((bool.bool) )) ((p2) ((h1) (i)))) ((bool.true) )) , (fun (ei : (((logic.eq_) ((nat.nat) )) ((k1) ((h1) (i)))) (i)) , ((((((@connectives.match_And_prop) ((((connectives.And) ) ((((nat.lt_) ) ((h2) ((h1) (i)))) (n3))) ((((logic.eq_) ((bool.bool) )) ((p3) ((h2) ((h1) (i))))) ((bool.true) )))) ((((logic.eq_) ((nat.nat) )) ((k2) ((h2) ((h1) (i))))) ((h1) (i)))) ((((connectives.And) ) ((((connectives.And) ) ((((nat.lt_) ) ((h2) ((h1) (i)))) (n3))) ((((logic.eq_) ((bool.bool) )) ((p3) ((h2) ((h1) (i))))) ((bool.true) )))) ((((logic.eq_) ((nat.nat) )) ((k1) ((k2) ((h2) ((h1) (i)))))) (i)))) (fun (_clearme0 : (((connectives.And) ) ((((nat.lt_) ) ((h2) ((h1) (i)))) (n3))) ((((logic.eq_) ((bool.bool) )) ((p3) ((h2) ((h1) (i))))) ((bool.true) ))) , ((((((@connectives.match_And_prop) ((((nat.lt_) ) ((h2) ((h1) (i)))) (n3))) ((((logic.eq_) ((bool.bool) )) ((p3) ((h2) ((h1) (i))))) ((bool.true) ))) (((((logic.eq_) ((nat.nat) )) ((k2) ((h2) ((h1) (i))))) ((h1) (i))) -> (((connectives.And) ) ((((connectives.And) ) ((((nat.lt_) ) ((h2) ((h1) (i)))) (n3))) ((((logic.eq_) ((bool.bool) )) ((p3) ((h2) ((h1) (i))))) ((bool.true) )))) ((((logic.eq_) ((nat.nat) )) ((k1) ((k2) ((h2) ((h1) (i)))))) (i)))) (fun (H1 : (((nat.lt_) ) ((h2) ((h1) (i)))) (n3)) , (fun (H2 : (((logic.eq_) ((bool.bool) )) ((p3) ((h2) ((h1) (i))))) ((bool.true) )) , (fun (H3 : (((logic.eq_) ((nat.nat) )) ((k2) ((h2) ((h1) (i))))) ((h1) (i))) , (((((@connectives.conj) ((((connectives.And) ) ((((nat.lt_) ) ((h2) ((h1) (i)))) (n3))) ((((logic.eq_) ((bool.bool) )) ((p3) ((h2) ((h1) (i))))) ((bool.true) )))) ((((logic.eq_) ((nat.nat) )) ((k1) ((k2) ((h2) ((h1) (i)))))) (i))) (((((@connectives.conj) ((((nat.lt_) ) ((h2) ((h1) (i)))) (n3))) ((((logic.eq_) ((bool.bool) )) ((p3) ((h2) ((h1) (i))))) ((bool.true) ))) (H1)) (((((((@logic.rewrite_r) ((bool.bool) )) ((bool.true) )) (fun (__ : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) (__)) ((bool.true) ))) (((@logic.refl_) ((bool.bool) )) ((bool.true) ))) ((p3) ((h2) ((h1) (i))))) (H2)))) (((((((@logic.rewrite_r) ((nat.nat) )) ((h1) (i))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((k1) (__))) (i))) (((((((@logic.rewrite_r) ((nat.nat) )) (i)) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (__)) (i))) (((@logic.refl_) ((nat.nat) )) (i))) ((k1) ((h1) (i)))) (ei))) ((k2) ((h2) ((h1) (i))))) (H3))))))) (_clearme0)))) ((((sub2) ((h1) (i))) (lth1i)) (fh1i))))))) (_clearme)))) ((((sub1) (i)) (lti)) (fi)))))).
theorem bigops.let_clause_10471 : forall (n1:(nat.nat) ) , forall (n2:(nat.nat) ) , forall (p1:((nat.nat) ) -> (bool.bool) ) , forall (p2:((nat.nat) ) -> (bool.bool) ) , forall (f1:((nat.nat) ) -> (nat.nat) ) , forall (f2:((nat.nat) ) -> (nat.nat) ) , ((((((((bigops.iso) ) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)) -> forall (h:((nat.nat) ) -> (nat.nat) ) , (((connectives.ex) (((nat.nat) ) -> (nat.nat) )) (fun (k : ((nat.nat) ) -> (nat.nat) ) , (((connectives.And) ) ((((connectives.And) ) (forall (i:(nat.nat) ) , ((((nat.lt_) ) (i)) (n1)) -> ((((logic.eq_) ((bool.bool) )) ((p1) (i))) ((bool.true) )) -> (((logic.eq_) ((nat.nat) )) ((f1) (i))) ((f2) ((h) (i))))) ((((((((((bigops.sub_hk) ) (h)) (k)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)))) ((((((((((bigops.sub_hk) ) (k)) (h)) (n2)) (n1)) (p2)) (p1)) (f2)) (f1)))) -> forall (k:((nat.nat) ) -> (nat.nat) ) , ((((connectives.And) ) ((((connectives.And) ) (forall (i:(nat.nat) ) , ((((nat.lt_) ) (i)) (n1)) -> ((((logic.eq_) ((bool.bool) )) ((p1) (i))) ((bool.true) )) -> (((logic.eq_) ((nat.nat) )) ((f1) (i))) ((f2) ((h) (i))))) ((((((((((bigops.sub_hk) ) (h)) (k)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)))) ((((((((((bigops.sub_hk) ) (k)) (h)) (n2)) (n1)) (p2)) (p1)) (f2)) (f1))) -> ((((connectives.And) ) (forall (i:(nat.nat) ) , ((((nat.lt_) ) (i)) (n1)) -> ((((logic.eq_) ((bool.bool) )) ((p1) (i))) ((bool.true) )) -> (((logic.eq_) ((nat.nat) )) ((f1) (i))) ((f2) ((h) (i))))) ((((((((((bigops.sub_hk) ) (h)) (k)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2))) -> (forall (i:(nat.nat) ) , ((((nat.lt_) ) (i)) (n1)) -> ((((logic.eq_) ((bool.bool) )) ((p1) (i))) ((bool.true) )) -> (((logic.eq_) ((nat.nat) )) ((f1) (i))) ((f2) ((h) (i)))) -> forall (i:(nat.nat) ) , forall (m:(nat.nat) ) , (forall (f:((nat.nat) ) -> (bool.bool) ) , ((((nat.le_) ) ((nat.O) )) (n1)) -> ((((((((((bigops.sub_hk) ) (h)) (k)) ((nat.O) )) (m)) (p1)) (f)) (f1)) (f2)) -> ((((((((((bigops.sub_hk) ) (k)) (h)) (m)) ((nat.O) )) (f)) (p1)) (f2)) (f1)) -> (((logic.eq_) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) ((nat.O) )) (fun (i0 : (nat.nat) ) , (p1) (i0))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f1) (i0)))) (((((((bigops.bigop) ((nat.nat) )) (m)) (fun (i0 : (nat.nat) ) , (f) (i0))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f2) (i0)))) -> forall (p20:((nat.nat) ) -> (bool.bool) ) , ((((nat.le_) ) ((nat.O) )) (n1)) -> ((((((((((bigops.sub_hk) ) (h)) (k)) ((nat.O) )) (((nat.S) ) (m))) (p1)) (p20)) (f1)) (f2)) -> ((((((((((bigops.sub_hk) ) (k)) (h)) (((nat.S) ) (m))) ((nat.O) )) (p20)) (p1)) (f2)) (f1)) -> forall (x2571:(nat.nat) ) , forall (x2572:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) (x2571)) ((((nat.plus) ) ((((nat.times) ) (x2572)) ((((div_mod.div) ) (x2571)) (x2572)))) ((((div_mod.mod) ) (x2571)) (x2572))) := fun (n1 : (nat.nat) ) , fun (n2 : (nat.nat) ) , fun (p1 : ((nat.nat) ) -> (bool.bool) ) , fun (p2 : ((nat.nat) ) -> (bool.bool) ) , fun (f1 : ((nat.nat) ) -> (nat.nat) ) , fun (f2 : ((nat.nat) ) -> (nat.nat) ) , fun (_clearme : (((((((bigops.iso) ) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)) , (fun (h : ((nat.nat) ) -> (nat.nat) ) , fun (_clearme0 : ((connectives.ex) (((nat.nat) ) -> (nat.nat) )) (fun (k : ((nat.nat) ) -> (nat.nat) ) , (((connectives.And) ) ((((connectives.And) ) (forall (i:(nat.nat) ) , ((((nat.lt_) ) (i)) (n1)) -> ((((logic.eq_) ((bool.bool) )) ((p1) (i))) ((bool.true) )) -> (((logic.eq_) ((nat.nat) )) ((f1) (i))) ((f2) ((h) (i))))) ((((((((((bigops.sub_hk) ) (h)) (k)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)))) ((((((((((bigops.sub_hk) ) (k)) (h)) (n2)) (n1)) (p2)) (p1)) (f2)) (f1)))) , (fun (k : ((nat.nat) ) -> (nat.nat) ) , fun (_clearme1 : (((connectives.And) ) ((((connectives.And) ) (forall (i:(nat.nat) ) , ((((nat.lt_) ) (i)) (n1)) -> ((((logic.eq_) ((bool.bool) )) ((p1) (i))) ((bool.true) )) -> (((logic.eq_) ((nat.nat) )) ((f1) (i))) ((f2) ((h) (i))))) ((((((((((bigops.sub_hk) ) (h)) (k)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)))) ((((((((((bigops.sub_hk) ) (k)) (h)) (n2)) (n1)) (p2)) (p1)) (f2)) (f1))) , (fun (_clearme2 : (((connectives.And) ) (forall (i:(nat.nat) ) , ((((nat.lt_) ) (i)) (n1)) -> ((((logic.eq_) ((bool.bool) )) ((p1) (i))) ((bool.true) )) -> (((logic.eq_) ((nat.nat) )) ((f1) (i))) ((f2) ((h) (i))))) ((((((((((bigops.sub_hk) ) (h)) (k)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2))) , (fun (same : forall (i:(nat.nat) ) , ((((nat.lt_) ) (i)) (n1)) -> ((((logic.eq_) ((bool.bool) )) ((p1) (i))) ((bool.true) )) -> (((logic.eq_) ((nat.nat) )) ((f1) (i))) ((f2) ((h) (i)))) , (fun (i : (nat.nat) ) , fun (m : (nat.nat) ) , fun (Hind : forall (f:((nat.nat) ) -> (bool.bool) ) , ((((nat.le_) ) ((nat.O) )) (n1)) -> ((((((((((bigops.sub_hk) ) (h)) (k)) ((nat.O) )) (m)) (p1)) (f)) (f1)) (f2)) -> ((((((((((bigops.sub_hk) ) (k)) (h)) (m)) ((nat.O) )) (f)) (p1)) (f2)) (f1)) -> (((logic.eq_) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) ((nat.O) )) (fun (i0 : (nat.nat) ) , (p1) (i0))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f1) (i0)))) (((((((bigops.bigop) ((nat.nat) )) (m)) (fun (i0 : (nat.nat) ) , (f) (i0))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f2) (i0)))) , (fun (p20 : ((nat.nat) ) -> (bool.bool) ) , fun (__ : (((nat.le_) ) ((nat.O) )) (n1)) , (fun (sub1 : (((((((((bigops.sub_hk) ) (h)) (k)) ((nat.O) )) (((nat.S) ) (m))) (p1)) (p20)) (f1)) (f2)) , (fun (sub2 : (((((((((bigops.sub_hk) ) (k)) (h)) (((nat.S) ) (m))) ((nat.O) )) (p20)) (p1)) (f2)) (f1)) , (fun (x2571 : (nat.nat) ) , fun (x2572 : (nat.nat) ) , ((((((@logic.rewrite_l) ((nat.nat) )) ((((nat.times) ) ((((div_mod.div) ) (x2571)) (x2572))) (x2572))) (fun (__1 : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (x2571)) ((((nat.plus) ) (__1)) ((((div_mod.mod) ) (x2571)) (x2572))))) (((@div_mod.div_mod) (x2571)) (x2572))) ((((nat.times) ) (x2572)) ((((div_mod.div) ) (x2571)) (x2572)))) (((@nat.commutative_times) ((((div_mod.div) ) (x2571)) (x2572))) (x2572))))))))))).
theorem bigops.bigop_iso : forall (n1:(nat.nat) ) , forall (n2:(nat.nat) ) , forall (p1:((nat.nat) ) -> (bool.bool) ) , forall (p2:((nat.nat) ) -> (bool.bool) ) , forall (f1:((nat.nat) ) -> (nat.nat) ) , forall (f2:((nat.nat) ) -> (nat.nat) ) , ((((((((bigops.iso) ) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)) -> (((logic.eq_) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) (n1)) (fun (i : (nat.nat) ) , (p1) (i))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f1) (i)))) (((((((bigops.bigop) ((nat.nat) )) (n2)) (fun (i : (nat.nat) ) , (p2) (i))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f2) (i))) := fun (n1 : (nat.nat) ) , fun (n2 : (nat.nat) ) , fun (p1 : ((nat.nat) ) -> (bool.bool) ) , fun (p2 : ((nat.nat) ) -> (bool.bool) ) , fun (f1 : ((nat.nat) ) -> (nat.nat) ) , fun (f2 : ((nat.nat) ) -> (nat.nat) ) , fun (_clearme : (((((((bigops.iso) ) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)) , ((((((@connectives.match_ex_prop) (((nat.nat) ) -> (nat.nat) )) (fun (h : ((nat.nat) ) -> (nat.nat) ) , ((connectives.ex) (((nat.nat) ) -> (nat.nat) )) (fun (k : ((nat.nat) ) -> (nat.nat) ) , (((connectives.And) ) ((((connectives.And) ) (forall (i:(nat.nat) ) , ((((nat.lt_) ) (i)) (n1)) -> ((((logic.eq_) ((bool.bool) )) ((p1) (i))) ((bool.true) )) -> (((logic.eq_) ((nat.nat) )) ((f1) (i))) ((f2) ((h) (i))))) ((((((((((bigops.sub_hk) ) (h)) (k)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)))) ((((((((((bigops.sub_hk) ) (k)) (h)) (n2)) (n1)) (p2)) (p1)) (f2)) (f1))))) ((((logic.eq_) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) (n1)) (fun (i : (nat.nat) ) , (p1) (i))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f1) (i)))) (((((((bigops.bigop) ((nat.nat) )) (n2)) (fun (i : (nat.nat) ) , (p2) (i))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f2) (i))))) (fun (h : ((nat.nat) ) -> (nat.nat) ) , fun (_clearme0 : ((connectives.ex) (((nat.nat) ) -> (nat.nat) )) (fun (k : ((nat.nat) ) -> (nat.nat) ) , (((connectives.And) ) ((((connectives.And) ) (forall (i:(nat.nat) ) , ((((nat.lt_) ) (i)) (n1)) -> ((((logic.eq_) ((bool.bool) )) ((p1) (i))) ((bool.true) )) -> (((logic.eq_) ((nat.nat) )) ((f1) (i))) ((f2) ((h) (i))))) ((((((((((bigops.sub_hk) ) (h)) (k)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)))) ((((((((((bigops.sub_hk) ) (k)) (h)) (n2)) (n1)) (p2)) (p1)) (f2)) (f1)))) , ((((((@connectives.match_ex_prop) (((nat.nat) ) -> (nat.nat) )) (fun (k : ((nat.nat) ) -> (nat.nat) ) , (((connectives.And) ) ((((connectives.And) ) (forall (i:(nat.nat) ) , ((((nat.lt_) ) (i)) (n1)) -> ((((logic.eq_) ((bool.bool) )) ((p1) (i))) ((bool.true) )) -> (((logic.eq_) ((nat.nat) )) ((f1) (i))) ((f2) ((h) (i))))) ((((((((((bigops.sub_hk) ) (h)) (k)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)))) ((((((((((bigops.sub_hk) ) (k)) (h)) (n2)) (n1)) (p2)) (p1)) (f2)) (f1)))) ((((logic.eq_) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) (n1)) (fun (i : (nat.nat) ) , (p1) (i))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f1) (i)))) (((((((bigops.bigop) ((nat.nat) )) (n2)) (fun (i : (nat.nat) ) , (p2) (i))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f2) (i))))) (fun (k : ((nat.nat) ) -> (nat.nat) ) , fun (_clearme1 : (((connectives.And) ) ((((connectives.And) ) (forall (i:(nat.nat) ) , ((((nat.lt_) ) (i)) (n1)) -> ((((logic.eq_) ((bool.bool) )) ((p1) (i))) ((bool.true) )) -> (((logic.eq_) ((nat.nat) )) ((f1) (i))) ((f2) ((h) (i))))) ((((((((((bigops.sub_hk) ) (h)) (k)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)))) ((((((((((bigops.sub_hk) ) (k)) (h)) (n2)) (n1)) (p2)) (p1)) (f2)) (f1))) , ((((((@connectives.match_And_prop) ((((connectives.And) ) (forall (i:(nat.nat) ) , ((((nat.lt_) ) (i)) (n1)) -> ((((logic.eq_) ((bool.bool) )) ((p1) (i))) ((bool.true) )) -> (((logic.eq_) ((nat.nat) )) ((f1) (i))) ((f2) ((h) (i))))) ((((((((((bigops.sub_hk) ) (h)) (k)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)))) ((((((((((bigops.sub_hk) ) (k)) (h)) (n2)) (n1)) (p2)) (p1)) (f2)) (f1))) ((((logic.eq_) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) (n1)) (fun (i : (nat.nat) ) , (p1) (i))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f1) (i)))) (((((((bigops.bigop) ((nat.nat) )) (n2)) (fun (i : (nat.nat) ) , (p2) (i))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f2) (i))))) (fun (_clearme2 : (((connectives.And) ) (forall (i:(nat.nat) ) , ((((nat.lt_) ) (i)) (n1)) -> ((((logic.eq_) ((bool.bool) )) ((p1) (i))) ((bool.true) )) -> (((logic.eq_) ((nat.nat) )) ((f1) (i))) ((f2) ((h) (i))))) ((((((((((bigops.sub_hk) ) (h)) (k)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2))) , ((((((@connectives.match_And_prop) (forall (i:(nat.nat) ) , ((((nat.lt_) ) (i)) (n1)) -> ((((logic.eq_) ((bool.bool) )) ((p1) (i))) ((bool.true) )) -> (((logic.eq_) ((nat.nat) )) ((f1) (i))) ((f2) ((h) (i))))) ((((((((((bigops.sub_hk) ) (h)) (k)) (n1)) (n2)) (p1)) (p2)) (f1)) (f2))) (((((((((((bigops.sub_hk) ) (k)) (h)) (n2)) (n1)) (p2)) (p1)) (f2)) (f1)) -> (((logic.eq_) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) (n1)) (fun (i : (nat.nat) ) , (p1) (i))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f1) (i)))) (((((((bigops.bigop) ((nat.nat) )) (n2)) (fun (i : (nat.nat) ) , (p2) (i))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f2) (i))))) (fun (same : forall (i:(nat.nat) ) , ((((nat.lt_) ) (i)) (n1)) -> ((((logic.eq_) ((bool.bool) )) ((p1) (i))) ((bool.true) )) -> (((logic.eq_) ((nat.nat) )) ((f1) (i))) ((f2) ((h) (i)))) , ((((@nat.le_gen) (fun (__ : (nat.nat) ) , ((((((((((bigops.sub_hk) ) (h)) (k)) (__)) (n2)) (p1)) (p2)) (f1)) (f2)) -> ((((((((((bigops.sub_hk) ) (k)) (h)) (n2)) (__)) (p2)) (p1)) (f2)) (f1)) -> (((logic.eq_) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) (__)) (fun (i : (nat.nat) ) , (p1) (i))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f1) (i)))) (((((((bigops.bigop) ((nat.nat) )) (n2)) (fun (i : (nat.nat) ) , (p2) (i))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f2) (i))))) (n1)) (fun (i : (nat.nat) ) , (((((@nat.nat_ind) (fun (_x_365 : (nat.nat) ) , forall (f:((nat.nat) ) -> (bool.bool) ) , ((((nat.le_) ) (_x_365)) (n1)) -> ((((((((((bigops.sub_hk) ) (h)) (k)) (_x_365)) (n2)) (p1)) (f)) (f1)) (f2)) -> ((((((((((bigops.sub_hk) ) (k)) (h)) (n2)) (_x_365)) (f)) (p1)) (f2)) (f1)) -> (((logic.eq_) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) (_x_365)) (fun (i0 : (nat.nat) ) , (p1) (i0))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f1) (i0)))) (((((((bigops.bigop) ((nat.nat) )) (n2)) (fun (i0 : (nat.nat) ) , (f) (i0))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f2) (i0))))) (((((@nat.nat_ind) (fun (_x_365 : (nat.nat) ) , forall (f:((nat.nat) ) -> (bool.bool) ) , ((((nat.le_) ) ((nat.O) )) (n1)) -> ((((((((((bigops.sub_hk) ) (h)) (k)) ((nat.O) )) (_x_365)) (p1)) (f)) (f1)) (f2)) -> ((((((((((bigops.sub_hk) ) (k)) (h)) (_x_365)) ((nat.O) )) (f)) (p1)) (f2)) (f1)) -> (((logic.eq_) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) ((nat.O) )) (fun (i0 : (nat.nat) ) , (p1) (i0))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f1) (i0)))) (((((((bigops.bigop) ((nat.nat) )) (_x_365)) (fun (i0 : (nat.nat) ) , (f) (i0))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f2) (i0))))) (fun (f : ((nat.nat) ) -> (bool.bool) ) , (((@bigops.sym_eq_bigop_O) ((nat.nat) )) (fun (y : (((nat.nat) ) -> (bool.bool) ) -> ((nat.nat) ) -> (((nat.nat) ) -> ((nat.nat) ) -> (nat.nat) ) -> (((nat.nat) ) -> (nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) ((nat.O) )) (n1)) -> ((((((((((bigops.sub_hk) ) (h)) (k)) ((nat.O) )) ((nat.O) )) (p1)) (f)) (f1)) (f2)) -> ((((((((((bigops.sub_hk) ) (k)) (h)) ((nat.O) )) ((nat.O) )) (f)) (p1)) (f2)) (f1)) -> (((logic.eq_) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) ((nat.O) )) (fun (iO : (nat.nat) ) , (p1) (iO))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (iO : (nat.nat) ) , (f1) (iO)))) (((((y) (fun (iO : (nat.nat) ) , (f) (iO))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (iO : (nat.nat) ) , (f2) (iO))))) ((((@bigops.sym_eq_bigop_body_O) ((nat.nat) )) (fun (y : (((nat.nat) ) -> (bool.bool) ) -> ((nat.nat) ) -> (((nat.nat) ) -> ((nat.nat) ) -> (nat.nat) ) -> (((nat.nat) ) -> (nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) ((nat.O) )) (n1)) -> ((((((((((bigops.sub_hk) ) (h)) (k)) ((nat.O) )) ((nat.O) )) (p1)) (f)) (f1)) (f2)) -> ((((((((((bigops.sub_hk) ) (k)) (h)) ((nat.O) )) ((nat.O) )) (f)) (p1)) (f2)) (f1)) -> (((logic.eq_) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) ((nat.O) )) (fun (iO : (nat.nat) ) , (p1) (iO))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (iO : (nat.nat) ) , (f1) (iO)))) (((((y) (fun (iO : (nat.nat) ) , (f) (iO))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (iO : (nat.nat) ) , (f2) (iO))))) ((((@bigops.eq_bigop_body_O) ((nat.nat) )) (fun (y : (((nat.nat) ) -> (bool.bool) ) -> ((nat.nat) ) -> (((nat.nat) ) -> ((nat.nat) ) -> (nat.nat) ) -> (((nat.nat) ) -> (nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) ((nat.O) )) (n1)) -> ((((((((((bigops.sub_hk) ) (h)) (k)) ((nat.O) )) ((nat.O) )) (p1)) (f)) (f1)) (f2)) -> ((((((((((bigops.sub_hk) ) (k)) (h)) ((nat.O) )) ((nat.O) )) (f)) (p1)) (f2)) (f1)) -> (((logic.eq_) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) ((nat.O) )) (fun (iO : (nat.nat) ) , (p1) (iO))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (iO : (nat.nat) ) , (f1) (iO)))) (((((y) (fun (iO : (nat.nat) ) , (p1) (iO))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (iO : (nat.nat) ) , (f1) (iO))))) ((((@bigops.eq_bigop_O) ((nat.nat) )) (fun (y : (((nat.nat) ) -> (bool.bool) ) -> ((nat.nat) ) -> (((nat.nat) ) -> ((nat.nat) ) -> (nat.nat) ) -> (((nat.nat) ) -> (nat.nat) ) -> (nat.nat) ) , ((((nat.le_) ) ((nat.O) )) (n1)) -> ((((((((((bigops.sub_hk) ) (h)) (k)) ((nat.O) )) ((nat.O) )) (p1)) (f)) (f1)) (f2)) -> ((((((((((bigops.sub_hk) ) (k)) (h)) ((nat.O) )) ((nat.O) )) (f)) (p1)) (f2)) (f1)) -> (((logic.eq_) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) ((nat.O) )) (fun (iO : (nat.nat) ) , (p1) (iO))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (iO : (nat.nat) ) , (f1) (iO)))) (((((y) (fun (iO : (nat.nat) ) , (p1) (iO))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (iO : (nat.nat) ) , (f1) (iO))))) (fun (auto : (((nat.le_) ) ((nat.O) )) (n1)) , (fun (auto' : (((((((((bigops.sub_hk) ) (h)) (k)) ((nat.O) )) ((nat.O) )) (p1)) (f)) (f1)) (f2)) , (fun (auto'' : (((((((((bigops.sub_hk) ) (k)) (h)) ((nat.O) )) ((nat.O) )) (f)) (p1)) (f2)) (f1)) , (((@logic.refl_) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) ((nat.O) )) (fun (i0 : (nat.nat) ) , (p1) (i0))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f1) (i0)))))))))))) (fun (m : (nat.nat) ) , fun (Hind : forall (f:((nat.nat) ) -> (bool.bool) ) , ((((nat.le_) ) ((nat.O) )) (n1)) -> ((((((((((bigops.sub_hk) ) (h)) (k)) ((nat.O) )) (m)) (p1)) (f)) (f1)) (f2)) -> ((((((((((bigops.sub_hk) ) (k)) (h)) (m)) ((nat.O) )) (f)) (p1)) (f2)) (f1)) -> (((logic.eq_) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) ((nat.O) )) (fun (i0 : (nat.nat) ) , (p1) (i0))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f1) (i0)))) (((((((bigops.bigop) ((nat.nat) )) (m)) (fun (i0 : (nat.nat) ) , (f) (i0))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f2) (i0)))) , (fun (p20 : ((nat.nat) ) -> (bool.bool) ) , fun (__ : (((nat.le_) ) ((nat.O) )) (n1)) , (fun (sub1 : (((((((((bigops.sub_hk) ) (h)) (k)) ((nat.O) )) (((nat.S) ) (m))) (p1)) (p20)) (f1)) (f2)) , (fun (sub2 : (((((((((bigops.sub_hk) ) (k)) (h)) (((nat.S) ) (m))) ((nat.O) )) (p20)) (p1)) (f2)) (f1)) , (((((((@logic.eq_ind_r) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) (m)) (fun (i0 : (nat.nat) ) , (p20) (i0))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f2) (i0)))) (fun (x : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) ((nat.O) )) (fun (i0 : (nat.nat) ) , (p1) (i0))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f1) (i0)))) (x))) (((((Hind) (p20)) ((@nat.le_O_n) (n1))) ((((((((((@bigops.sub_hkO) (h)) (k)) ((nat.O) )) (m)) (p1)) (p20)) (f1)) (f2)) (((@logic.refl_) ((nat.nat) )) ((nat.O) )))) ((((((((((((((((@bigops.transitive_sub) (fun (x : (nat.nat) ) , x)) (fun (x : (nat.nat) ) , x)) (k)) (h)) (m)) (((nat.S) ) (m))) ((nat.O) )) (p20)) (p20)) (p1)) (f2)) (f2)) (f1)) ((((((@bigops.sub_lt) (f2)) (p20)) (m)) (((nat.S) ) (m))) ((@nat.le_n_Sn) (m)))) (sub2)))) (((((((bigops.bigop) ((nat.nat) )) (((nat.S) ) (m))) (fun (i0 : (nat.nat) ) , (p20) (i0))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f2) (i0)))) ((((((((@bigops.bigop_Sfalse) ((nat.nat) )) (m)) (p20)) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (f2)) (((((((((((((@bigops.sub0_to_false) (k)) (h)) ((nat.O) )) (((nat.S) ) (m))) (p1)) (p20)) (f1)) (f2)) (((@logic.refl_) ((nat.nat) )) ((nat.O) ))) (sub2)) (m)) (((((@logic.eq_coerc) ((((nat.lt_) ) ((((div_mod.mod) ) (m)) ((nat.O) ))) ((((nat.plus) ) ((((nat.plus) ) ((((div_mod.mod) ) (m)) ((nat.O) ))) ((((nat.times) ) ((nat.O) )) ((((div_mod.div) ) (m)) ((nat.O) ))))) (((nat.S) ) ((nat.O) ))))) ((((nat.lt_) ) (m)) (((nat.S) ) (m)))) ((((@nat.lt_plus_Sn_r) ((((div_mod.mod) ) (m)) ((nat.O) ))) ((((nat.times) ) ((nat.O) )) ((((div_mod.div) ) (m)) ((nat.O) )))) ((nat.O) ))) (((((((@logic.rewrite_l) ((nat.nat) )) (m)) (fun (__1 : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.lt_) ) ((((div_mod.mod) ) (m)) ((nat.O) ))) ((((nat.plus) ) (__1)) (((nat.S) ) ((nat.O) ))))) ((((nat.lt_) ) (m)) (((nat.S) ) (m))))) (((((((@logic.rewrite_l) ((nat.nat) )) (m)) (fun (__1 : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.lt_) ) (__1)) ((((nat.plus) ) (m)) (((nat.S) ) ((nat.O) ))))) ((((nat.lt_) ) (m)) (((nat.S) ) (m))))) (((((((@logic.rewrite_l) ((nat.nat) )) (((nat.S) ) (m))) (fun (__1 : (nat.nat) ) , (((logic.eq_) (Prop)) ((((nat.lt_) ) (m)) (__1))) ((((nat.lt_) ) (m)) (((nat.S) ) (m))))) (((@logic.refl_) (Prop)) ((((nat.lt_) ) (m)) (((nat.S) ) (m))))) ((((nat.plus) ) (m)) (((nat.S) ) ((nat.O) )))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) (m)) ((nat.O) ))) (fun (__1 : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((nat.S) ) (__1))) ((((nat.plus) ) (m)) (((nat.S) ) ((nat.O) ))))) (((@nat.plus_n_Sm) (m)) ((nat.O) ))) (m)) ((@nat.plus_n_O) (m))))) ((((div_mod.mod) ) (m)) ((nat.O) ))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.plus) ) ((nat.O) )) ((((div_mod.mod) ) (m)) ((nat.O) )))) (fun (__1 : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (m)) (__1))) (((((((@logic.rewrite_l) ((nat.nat) )) ((((nat.plus) ) ((((div_mod.mod) ) (m)) ((nat.O) ))) ((nat.O) ))) (fun (__1 : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (m)) (__1))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.times) ) ((nat.O) )) ((((div_mod.div) ) (m)) ((nat.O) )))) (fun (__1 : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (m)) ((((nat.plus) ) ((((div_mod.mod) ) (m)) ((nat.O) ))) (__1)))) (((((((@logic.rewrite_l) ((nat.nat) )) ((((nat.plus) ) ((((nat.times) ) ((nat.O) )) ((((div_mod.div) ) (m)) ((nat.O) )))) ((((div_mod.mod) ) (m)) ((nat.O) )))) (fun (__1 : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (m)) (__1))) (((((((((((((((((((((((@bigops.let_clause_10471) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)) (_clearme)) (h)) (_clearme0)) (k)) (_clearme1)) (_clearme2)) (same)) (i)) (m)) (Hind)) (p20)) (__)) (sub1)) (sub2)) (m)) ((nat.O) ))) ((((nat.plus) ) ((((div_mod.mod) ) (m)) ((nat.O) ))) ((((nat.times) ) ((nat.O) )) ((((div_mod.div) ) (m)) ((nat.O) ))))) (((@nat.commutative_plus) ((((nat.times) ) ((nat.O) )) ((((div_mod.div) ) (m)) ((nat.O) )))) ((((div_mod.mod) ) (m)) ((nat.O) ))))) ((nat.O) )) ((@nat.times_O_n) ((((div_mod.div) ) (m)) ((nat.O) ))))) ((((nat.plus) ) ((nat.O) )) ((((div_mod.mod) ) (m)) ((nat.O) )))) (((@nat.commutative_plus) ((((div_mod.mod) ) (m)) ((nat.O) ))) ((nat.O) )))) ((((div_mod.mod) ) (m)) ((nat.O) ))) ((@nat.plus_O_n) ((((div_mod.mod) ) (m)) ((nat.O) )))))) ((((nat.plus) ) ((((div_mod.mod) ) (m)) ((nat.O) ))) ((((nat.times) ) ((nat.O) )) ((((div_mod.div) ) (m)) ((nat.O) ))))) (((((((@logic.rewrite_l) ((nat.nat) )) ((((nat.plus) ) ((((nat.times) ) ((nat.O) )) ((((div_mod.div) ) (m)) ((nat.O) )))) ((((div_mod.mod) ) (m)) ((nat.O) )))) (fun (__1 : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (m)) (__1))) (((((((((((((((((((((((@bigops.let_clause_10471) (n1)) (n2)) (p1)) (p2)) (f1)) (f2)) (_clearme)) (h)) (_clearme0)) (k)) (_clearme1)) (_clearme2)) (same)) (i)) (m)) (Hind)) (p20)) (__)) (sub1)) (sub2)) (m)) ((nat.O) ))) ((((nat.plus) ) ((((div_mod.mod) ) (m)) ((nat.O) ))) ((((nat.times) ) ((nat.O) )) ((((div_mod.div) ) (m)) ((nat.O) ))))) (((@nat.commutative_plus) ((((nat.times) ) ((nat.O) )) ((((div_mod.div) ) (m)) ((nat.O) )))) ((((div_mod.mod) ) (m)) ((nat.O) )))))))))))))) (n2))) (fun (n : (nat.nat) ) , fun (Hind : forall (f:((nat.nat) ) -> (bool.bool) ) , ((((nat.le_) ) (n)) (n1)) -> ((((((((((bigops.sub_hk) ) (h)) (k)) (n)) (n2)) (p1)) (f)) (f1)) (f2)) -> ((((((((((bigops.sub_hk) ) (k)) (h)) (n2)) (n)) (f)) (p1)) (f2)) (f1)) -> (((logic.eq_) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) (n)) (fun (i0 : (nat.nat) ) , (p1) (i0))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f1) (i0)))) (((((((bigops.bigop) ((nat.nat) )) (n2)) (fun (i0 : (nat.nat) ) , (f) (i0))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f2) (i0)))) , (fun (p20 : ((nat.nat) ) -> (bool.bool) ) , fun (ltn : (((nat.le_) ) (((nat.S) ) (n))) (n1)) , (fun (sub1 : (((((((((bigops.sub_hk) ) (h)) (k)) (((nat.S) ) (n))) (n2)) (p1)) (p20)) (f1)) (f2)) , (fun (sub2 : (((((((((bigops.sub_hk) ) (k)) (h)) (n2)) (((nat.S) ) (n))) (p20)) (p1)) (f2)) (f1)) , (((((((@connectives.match_Or_prop) ((((logic.eq_) ((bool.bool) )) ((p1) (n))) ((bool.true) ))) ((((logic.eq_) ((bool.bool) )) ((p1) (n))) ((bool.false) ))) ((((logic.eq_) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) (((nat.S) ) (n))) (fun (i0 : (nat.nat) ) , (p1) (i0))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f1) (i0)))) (((((((bigops.bigop) ((nat.nat) )) (n2)) (fun (i0 : (nat.nat) ) , (p20) (i0))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f2) (i0))))) (fun (p1n : (((logic.eq_) ((bool.bool) )) ((p1) (n))) ((bool.true) )) , (((((((@logic.eq_ind_r) ((nat.nat) )) ((((nat.times) ) ((f1) (n))) (((((((bigops.bigop) ((nat.nat) )) (n)) (fun (i0 : (nat.nat) ) , (p1) (i0))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f1) (i0))))) (fun (x : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (x)) (((((((bigops.bigop) ((nat.nat) )) (n2)) (fun (i0 : (nat.nat) ) , (p20) (i0))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f2) (i0))))) ((((((@connectives.match_And_prop) ((((connectives.And) ) ((((nat.lt_) ) ((h) (n))) (n2))) ((((logic.eq_) ((bool.bool) )) ((p20) ((h) (n)))) ((bool.true) )))) ((((logic.eq_) ((nat.nat) )) ((k) ((h) (n)))) (n))) ((((logic.eq_) ((nat.nat) )) ((((nat.times) ) ((f1) (n))) (((((((bigops.bigop) ((nat.nat) )) (n)) (fun (i0 : (nat.nat) ) , (p1) (i0))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f1) (i0))))) (((((((bigops.bigop) ((nat.nat) )) (n2)) (fun (i0 : (nat.nat) ) , (p20) (i0))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f2) (i0))))) (fun (_clearme3 : (((connectives.And) ) ((((nat.lt_) ) ((h) (n))) (n2))) ((((logic.eq_) ((bool.bool) )) ((p20) ((h) (n)))) ((bool.true) ))) , ((((((@connectives.match_And_prop) ((((nat.lt_) ) ((h) (n))) (n2))) ((((logic.eq_) ((bool.bool) )) ((p20) ((h) (n)))) ((bool.true) ))) (((((logic.eq_) ((nat.nat) )) ((k) ((h) (n)))) (n)) -> (((logic.eq_) ((nat.nat) )) ((((nat.times) ) ((f1) (n))) (((((((bigops.bigop) ((nat.nat) )) (n)) (fun (i0 : (nat.nat) ) , (p1) (i0))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f1) (i0))))) (((((((bigops.bigop) ((nat.nat) )) (n2)) (fun (i0 : (nat.nat) ) , (p20) (i0))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f2) (i0))))) (fun (hn : (((nat.lt_) ) ((h) (n))) (n2)) , (fun (p2hn : (((logic.eq_) ((bool.bool) )) ((p20) ((h) (n)))) ((bool.true) )) , (fun (eqn : (((logic.eq_) ((nat.nat) )) ((k) ((h) (n)))) (n)) , (((((((@logic.eq_ind_r) ((nat.nat) )) ((((nat.times) ) ((f2) ((h) (n)))) (((((((bigops.bigop) ((nat.nat) )) (n2)) (fun (x : (nat.nat) ) , (((bool.andb) ) (((bool.notb) ) ((((nat.eqb) ) ((h) (n))) (x)))) ((p20) (x)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (x : (nat.nat) ) , (f2) (x))))) (fun (x : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) ((f1) (n))) (((((((bigops.bigop) ((nat.nat) )) (n)) (fun (i0 : (nat.nat) ) , (p1) (i0))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f1) (i0))))) (x))) (((((((@logic.eq_ind_r) ((nat.nat) )) ((f2) ((h) (n)))) (fun (x : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) (x)) (((((((bigops.bigop) ((nat.nat) )) (n)) (fun (i0 : (nat.nat) ) , (p1) (i0))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f1) (i0))))) ((((nat.times) ) ((f2) ((h) (n)))) (((((((bigops.bigop) ((nat.nat) )) (n2)) (fun (x0 : (nat.nat) ) , (((bool.andb) ) (((bool.notb) ) ((((nat.eqb) ) ((h) (n))) (x0)))) ((p20) (x0)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (x0 : (nat.nat) ) , (f2) (x0)))))) (((((((@logic.eq_f) ((nat.nat) )) ((nat.nat) )) (((nat.times) ) ((f2) ((h) (n))))) (((((((bigops.bigop) ((nat.nat) )) (n)) (fun (i0 : (nat.nat) ) , (p1) (i0))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f1) (i0)))) (((((((bigops.bigop) ((nat.nat) )) (n2)) (fun (x : (nat.nat) ) , (((bool.andb) ) (((bool.notb) ) ((((nat.eqb) ) ((h) (n))) (x)))) ((p20) (x)))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (x : (nat.nat) ) , (f2) (x)))) (((((Hind) (fun (__ : (nat.nat) ) , (((bool.andb) ) (((bool.notb) ) ((((nat.eqb) ) ((h) (n))) (__)))) ((p20) (__)))) ((((@nat.lt_to_le) (n)) (n1)) (ltn))) (fun (i0 : (nat.nat) ) , fun (ltin : (((nat.lt_) ) (i0)) (n)) , (fun (p1i : (((logic.eq_) ((bool.bool) )) ((p1) (i0))) ((bool.true) )) , ((((((@connectives.match_And_prop) ((((connectives.And) ) ((((nat.lt_) ) ((h) (i0))) (n2))) ((((logic.eq_) ((bool.bool) )) ((p20) ((h) (i0)))) ((bool.true) )))) ((((logic.eq_) ((nat.nat) )) ((k) ((h) (i0)))) (i0))) ((((connectives.And) ) ((((connectives.And) ) ((((nat.lt_) ) ((h) (i0))) (n2))) ((((logic.eq_) ((bool.bool) )) ((((bool.andb) ) (((bool.notb) ) ((((nat.eqb) ) ((h) (n))) ((h) (i0))))) ((p20) ((h) (i0))))) ((bool.true) )))) ((((logic.eq_) ((nat.nat) )) ((k) ((h) (i0)))) (i0)))) (fun (_clearme4 : (((connectives.And) ) ((((nat.lt_) ) ((h) (i0))) (n2))) ((((logic.eq_) ((bool.bool) )) ((p20) ((h) (i0)))) ((bool.true) ))) , ((((((@connectives.match_And_prop) ((((nat.lt_) ) ((h) (i0))) (n2))) ((((logic.eq_) ((bool.bool) )) ((p20) ((h) (i0)))) ((bool.true) ))) (((((logic.eq_) ((nat.nat) )) ((k) ((h) (i0)))) (i0)) -> (((connectives.And) ) ((((connectives.And) ) ((((nat.lt_) ) ((h) (i0))) (n2))) ((((logic.eq_) ((bool.bool) )) ((((bool.andb) ) (((bool.notb) ) ((((nat.eqb) ) ((h) (n))) ((h) (i0))))) ((p20) ((h) (i0))))) ((bool.true) )))) ((((logic.eq_) ((nat.nat) )) ((k) ((h) (i0)))) (i0)))) (fun (h1i : (((nat.lt_) ) ((h) (i0))) (n2)) , (fun (p2h1i : (((logic.eq_) ((bool.bool) )) ((p20) ((h) (i0)))) ((bool.true) )) , (fun (eqi : (((logic.eq_) ((nat.nat) )) ((k) ((h) (i0)))) (i0)) , (((((@connectives.conj) ((((connectives.And) ) ((((nat.lt_) ) ((h) (i0))) (n2))) ((((logic.eq_) ((bool.bool) )) ((((bool.andb) ) (((bool.notb) ) ((((nat.eqb) ) ((h) (n))) ((h) (i0))))) ((p20) ((h) (i0))))) ((bool.true) )))) ((((logic.eq_) ((nat.nat) )) ((k) ((h) (i0)))) (i0))) (((((@connectives.conj) ((((nat.lt_) ) ((h) (i0))) (n2))) ((((logic.eq_) ((bool.bool) )) ((((bool.andb) ) (((bool.notb) ) ((((nat.eqb) ) ((h) (n))) ((h) (i0))))) ((p20) ((h) (i0))))) ((bool.true) ))) (h1i)) (((((((@logic.eq_ind_r) ((bool.bool) )) ((bool.false) )) (fun (x : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) ((((bool.andb) ) (((bool.notb) ) (x))) ((p20) ((h) (i0))))) ((bool.true) ))) ((((((@bool.sym_eq_match_bool_type_false) ((bool.bool) )) ((bool.false) )) ((bool.true) )) (fun (y : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) (((((bool.match_bool_type) ((bool.bool) )) ((p20) ((h) (i0)))) ((bool.false) )) (y))) ((bool.true) ))) ((((((@bool.sym_eq_match_bool_type_true) ((bool.bool) )) ((p20) ((h) (i0)))) ((bool.false) )) (fun (y : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) (y)) ((bool.true) ))) (((((((@logic.rewrite_r) ((bool.bool) )) ((bool.true) )) (fun (__ : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) (__)) ((bool.true) ))) (((@logic.refl_) ((bool.bool) )) ((bool.true) ))) ((p20) ((h) (i0)))) (p2h1i))))) ((((nat.eqb) ) ((h) (n))) ((h) (i0)))) ((((@nat.not_eq_to_eqb_false) ((h) (n))) ((h) (i0))) (((((@logic.not_to_not) ((((logic.eq_) ((nat.nat) )) ((h) (n))) ((h) (i0)))) ((((logic.eq_) ((nat.nat) )) (i0)) (n))) (fun (auto : (((logic.eq_) ((nat.nat) )) ((h) (n))) ((h) (i0))) , (((((((@logic.rewrite_r) ((nat.nat) )) (n)) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (__)) (n))) (((@logic.refl_) ((nat.nat) )) (n))) (i0)) (((((((@logic.rewrite_l) ((nat.nat) )) ((k) ((h) (n)))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (__)) (n))) (eqn)) (i0)) (((((((@logic.rewrite_r) ((nat.nat) )) ((h) (i0))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((k) (__))) (i0))) (eqi)) ((h) (n))) (auto)))))) ((((@nat.lt_to_not_eq) (i0)) (n)) (ltin))))))) (((((((@logic.rewrite_r) ((nat.nat) )) (i0)) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (__)) (i0))) (((@logic.refl_) ((nat.nat) )) (i0))) ((k) ((h) (i0)))) (eqi))))))) (_clearme4)))) ((((sub1) (i0)) ((((@nat.le_S) (((nat.S) ) (i0))) (n)) (ltin))) (p1i)))))) (fun (j : (nat.nat) ) , fun (ltj : (((nat.lt_) ) (j)) (n2)) , (fun (p2j : (((logic.eq_) ((bool.bool) )) ((((bool.andb) ) (((bool.notb) ) ((((nat.eqb) ) ((h) (n))) (j)))) ((p20) (j)))) ((bool.true) )) , ((((((@connectives.match_And_prop) ((((connectives.And) ) ((((nat.lt_) ) ((k) (j))) (((nat.S) ) (n)))) ((((logic.eq_) ((bool.bool) )) ((p1) ((k) (j)))) ((bool.true) )))) ((((logic.eq_) ((nat.nat) )) ((h) ((k) (j)))) (j))) ((((connectives.And) ) ((((connectives.And) ) ((((nat.lt_) ) ((k) (j))) (n))) ((((logic.eq_) ((bool.bool) )) ((p1) ((k) (j)))) ((bool.true) )))) ((((logic.eq_) ((nat.nat) )) ((h) ((k) (j)))) (j)))) (fun (_clearme4 : (((connectives.And) ) ((((nat.lt_) ) ((k) (j))) (((nat.S) ) (n)))) ((((logic.eq_) ((bool.bool) )) ((p1) ((k) (j)))) ((bool.true) ))) , ((((((@connectives.match_And_prop) ((((nat.lt_) ) ((k) (j))) (((nat.S) ) (n)))) ((((logic.eq_) ((bool.bool) )) ((p1) ((k) (j)))) ((bool.true) ))) (((((logic.eq_) ((nat.nat) )) ((h) ((k) (j)))) (j)) -> (((connectives.And) ) ((((connectives.And) ) ((((nat.lt_) ) ((k) (j))) (n))) ((((logic.eq_) ((bool.bool) )) ((p1) ((k) (j)))) ((bool.true) )))) ((((logic.eq_) ((nat.nat) )) ((h) ((k) (j)))) (j)))) (fun (ltkj : (((nat.lt_) ) ((k) (j))) (((nat.S) ) (n))) , (fun (p1kj : (((logic.eq_) ((bool.bool) )) ((p1) ((k) (j)))) ((bool.true) )) , (fun (eqj : (((logic.eq_) ((nat.nat) )) ((h) ((k) (j)))) (j)) , (((((@connectives.conj) ((((connectives.And) ) ((((nat.lt_) ) ((k) (j))) (n))) ((((logic.eq_) ((bool.bool) )) ((p1) ((k) (j)))) ((bool.true) )))) ((((logic.eq_) ((nat.nat) )) ((h) ((k) (j)))) (j))) (((((@connectives.conj) ((((nat.lt_) ) ((k) (j))) (n))) ((((logic.eq_) ((bool.bool) )) ((p1) ((k) (j)))) ((bool.true) ))) (((((((@connectives.match_Or_prop) ((((nat.lt_) ) ((k) (j))) (n))) ((((logic.eq_) ((nat.nat) )) ((k) (j))) (n))) ((((nat.lt_) ) ((k) (j))) (n))) (fun (auto : (((nat.lt_) ) ((k) (j))) (n)) , (auto))) (fun (eqkj : (((logic.eq_) ((nat.nat) )) ((k) (j))) (n)) , (((@connectives.falsity) ((((nat.lt_) ) ((k) (j))) (n))) (((((((@nat.eqb_elim) ((h) (n))) (j)) (fun (__ : (bool.bool) ) , ((((logic.eq_) ((bool.bool) )) ((((bool.andb) ) (((bool.notb) ) (__))) ((p20) (j)))) ((bool.true) )) -> (connectives.False) )) ((((((@bool.sym_eq_match_bool_type_true) ((bool.bool) )) ((bool.false) )) ((bool.true) )) (fun (y : (bool.bool) ) , ((((logic.eq_) ((nat.nat) )) ((h) (n))) (j)) -> ((((logic.eq_) ((bool.bool) )) (((((bool.match_bool_type) ((bool.bool) )) ((p20) (j))) ((bool.false) )) (y))) ((bool.true) )) -> (connectives.False) )) ((((((@bool.sym_eq_match_bool_type_false) ((bool.bool) )) ((p20) (j))) ((bool.false) )) (fun (y : (bool.bool) ) , ((((logic.eq_) ((nat.nat) )) ((h) (n))) (j)) -> ((((logic.eq_) ((bool.bool) )) (y)) ((bool.true) )) -> (connectives.False) )) (fun (auto : (((logic.eq_) ((nat.nat) )) ((h) (n))) (j)) , (fun (auto' : (((logic.eq_) ((bool.bool) )) ((bool.false) )) ((bool.true) )) , ((((@logic.absurd) ((((logic.eq_) ((bool.bool) )) ((bool.true) )) ((bool.false) ))) (((((((@logic.rewrite_r) ((bool.bool) )) ((bool.true) )) (fun (__ : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) ((bool.true) )) (__))) (((@logic.refl_) ((bool.bool) )) ((bool.true) ))) ((bool.false) )) (auto'))) (@bool.not_eq_true_false))))))) ((((((@bool.sym_eq_match_bool_type_false) ((bool.bool) )) ((bool.false) )) ((bool.true) )) (fun (y : (bool.bool) ) , (((connectives.Not) ) ((((logic.eq_) ((nat.nat) )) ((h) (n))) (j))) -> ((((logic.eq_) ((bool.bool) )) (((((bool.match_bool_type) ((bool.bool) )) ((p20) (j))) ((bool.false) )) (y))) ((bool.true) )) -> (connectives.False) )) ((((((@bool.sym_eq_match_bool_type_true) ((bool.bool) )) ((p20) (j))) ((bool.false) )) (fun (y : (bool.bool) ) , (((connectives.Not) ) ((((logic.eq_) ((nat.nat) )) ((h) (n))) (j))) -> ((((logic.eq_) ((bool.bool) )) (y)) ((bool.true) )) -> (connectives.False) )) (fun (auto : ((connectives.Not) ) ((((logic.eq_) ((nat.nat) )) ((h) (n))) (j))) , (fun (auto' : (((logic.eq_) ((bool.bool) )) ((p20) (j))) ((bool.true) )) , ((((@logic.absurd) ((((logic.eq_) ((nat.nat) )) ((h) (n))) (j))) (((((((@logic.rewrite_r) ((nat.nat) )) (j)) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (__)) (j))) (((@logic.refl_) ((nat.nat) )) (j))) ((h) (n))) (((((((@logic.rewrite_l) ((nat.nat) )) ((k) (j))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((h) (__))) (j))) (eqj)) (n)) (eqkj)))) (auto))))))) (p2j))))) ((((@nat.le_to_or_lt_eq) ((k) (j))) (n)) ((((@nat.le_S_S_to_le) ((k) (j))) (n)) (ltkj))))) (((((((@logic.rewrite_r) ((bool.bool) )) ((bool.true) )) (fun (__ : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) (__)) ((bool.true) ))) (((@logic.refl_) ((bool.bool) )) ((bool.true) ))) ((p1) ((k) (j)))) (p1kj)))) (((((((@logic.rewrite_r) ((nat.nat) )) (j)) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (__)) (j))) (((@logic.refl_) ((nat.nat) )) (j))) ((h) ((k) (j)))) (eqj))))))) (_clearme4)))) ((((sub2) (j)) (ltj)) ((((@bool.andb_true_r) (((bool.notb) ) ((((nat.eqb) ) ((h) (n))) (j)))) ((p20) (j))) (p2j))))))))) ((f1) (n))) ((((same) (n)) (ltn)) (((((((@logic.rewrite_r) ((bool.bool) )) ((bool.true) )) (fun (__ : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) (__)) ((bool.true) ))) (((@logic.refl_) ((bool.bool) )) ((bool.true) ))) ((p1) (n))) (p1n))))) (((((((bigops.bigop) ((nat.nat) )) (n2)) (fun (x : (nat.nat) ) , (p20) (x))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (x : (nat.nat) ) , (f2) (x)))) (((((((@bigops.bigop_diff) (p20)) (f2)) ((h) (n))) (n2)) (hn)) (((((((@logic.rewrite_r) ((bool.bool) )) ((bool.true) )) (fun (__ : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) (__)) ((bool.true) ))) (((@logic.refl_) ((bool.bool) )) ((bool.true) ))) ((p20) ((h) (n)))) (p2hn)))))))) (_clearme3)))) ((((sub1) (n)) ((@nat.le_n) (((nat.S) ) (n)))) (p1n)))) (((((((bigops.bigop) ((nat.nat) )) (((nat.S) ) (n))) (fun (i0 : (nat.nat) ) , (p1) (i0))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f1) (i0)))) ((((((((@bigops.bigop_Strue) ((nat.nat) )) (n)) (p1)) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (f1)) (((((((@logic.rewrite_r) ((bool.bool) )) ((bool.true) )) (fun (__ : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) (__)) ((bool.true) ))) (((@logic.refl_) ((bool.bool) )) ((bool.true) ))) ((p1) (n))) (p1n)))))) (fun (p1n : (((logic.eq_) ((bool.bool) )) ((p1) (n))) ((bool.false) )) , (((((((@logic.eq_ind_r) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) (n)) (fun (i0 : (nat.nat) ) , (p1) (i0))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f1) (i0)))) (fun (x : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (x)) (((((((bigops.bigop) ((nat.nat) )) (n2)) (fun (i0 : (nat.nat) ) , (p20) (i0))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f2) (i0))))) (((((Hind) (p20)) ((((@nat.lt_to_le) (n)) (n1)) (ltn))) ((((((((((((((((@bigops.transitive_sub) (fun (x : (nat.nat) ) , x)) (fun (x : (nat.nat) ) , x)) (h)) (k)) (n)) (((nat.S) ) (n))) (n2)) (p1)) (p1)) (p20)) (f1)) (f1)) (f2)) ((((((@bigops.sub_lt) (f1)) (p1)) (n)) (((nat.S) ) (n))) ((@nat.le_n_Sn) (n)))) (sub1))) (fun (i0 : (nat.nat) ) , fun (lti : (((nat.lt_) ) (i0)) (n2)) , (fun (p2i : (((logic.eq_) ((bool.bool) )) ((p20) (i0))) ((bool.true) )) , ((((((@connectives.match_And_prop) ((((connectives.And) ) ((((nat.lt_) ) ((k) (i0))) (((nat.S) ) (n)))) ((((logic.eq_) ((bool.bool) )) ((p1) ((k) (i0)))) ((bool.true) )))) ((((logic.eq_) ((nat.nat) )) ((h) ((k) (i0)))) (i0))) ((((connectives.And) ) ((((connectives.And) ) ((((nat.lt_) ) ((k) (i0))) (n))) ((((logic.eq_) ((bool.bool) )) ((p1) ((k) (i0)))) ((bool.true) )))) ((((logic.eq_) ((nat.nat) )) ((h) ((k) (i0)))) (i0)))) (fun (_clearme3 : (((connectives.And) ) ((((nat.lt_) ) ((k) (i0))) (((nat.S) ) (n)))) ((((logic.eq_) ((bool.bool) )) ((p1) ((k) (i0)))) ((bool.true) ))) , ((((((@connectives.match_And_prop) ((((nat.lt_) ) ((k) (i0))) (((nat.S) ) (n)))) ((((logic.eq_) ((bool.bool) )) ((p1) ((k) (i0)))) ((bool.true) ))) (((((logic.eq_) ((nat.nat) )) ((h) ((k) (i0)))) (i0)) -> (((connectives.And) ) ((((connectives.And) ) ((((nat.lt_) ) ((k) (i0))) (n))) ((((logic.eq_) ((bool.bool) )) ((p1) ((k) (i0)))) ((bool.true) )))) ((((logic.eq_) ((nat.nat) )) ((h) ((k) (i0)))) (i0)))) (fun (ltki : (((nat.lt_) ) ((k) (i0))) (((nat.S) ) (n))) , (fun (p1ki : (((logic.eq_) ((bool.bool) )) ((p1) ((k) (i0)))) ((bool.true) )) , (fun (eqi : (((logic.eq_) ((nat.nat) )) ((h) ((k) (i0)))) (i0)) , (((((@connectives.conj) ((((connectives.And) ) ((((nat.lt_) ) ((k) (i0))) (n))) ((((logic.eq_) ((bool.bool) )) ((p1) ((k) (i0)))) ((bool.true) )))) ((((logic.eq_) ((nat.nat) )) ((h) ((k) (i0)))) (i0))) (((((@connectives.conj) ((((nat.lt_) ) ((k) (i0))) (n))) ((((logic.eq_) ((bool.bool) )) ((p1) ((k) (i0)))) ((bool.true) ))) (((((((@connectives.match_Or_prop) ((((nat.lt_) ) ((k) (i0))) (n))) ((((logic.eq_) ((nat.nat) )) ((k) (i0))) (n))) ((((nat.lt_) ) ((k) (i0))) (n))) (fun (auto : (((nat.lt_) ) ((k) (i0))) (n)) , (auto))) (fun (eqki : (((logic.eq_) ((nat.nat) )) ((k) (i0))) (n)) , (((@connectives.falsity) ((((nat.lt_) ) ((k) (i0))) (n))) ((((@logic.absurd) ((((logic.eq_) ((bool.bool) )) ((bool.true) )) ((bool.false) ))) (((((((@logic.rewrite_l) ((bool.bool) )) ((bool.true) )) (fun (__ : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) ((bool.true) )) (__))) (((@logic.refl_) ((bool.bool) )) ((bool.true) ))) ((bool.false) )) (((((((@logic.rewrite_l) ((bool.bool) )) ((p1) (n))) (fun (__ : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) (__)) ((bool.false) ))) (p1n)) ((bool.true) )) (((((((@logic.rewrite_l) ((nat.nat) )) ((k) (i0))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((bool.bool) )) ((p1) (__))) ((bool.true) ))) (p1ki)) (n)) (eqki))))) (@bool.not_eq_true_false))))) ((((@nat.le_to_or_lt_eq) ((k) (i0))) (n)) ((((@nat.le_S_S_to_le) ((k) (i0))) (n)) (ltki))))) (((((((@logic.rewrite_r) ((bool.bool) )) ((bool.true) )) (fun (__ : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) (__)) ((bool.true) ))) (((@logic.refl_) ((bool.bool) )) ((bool.true) ))) ((p1) ((k) (i0)))) (p1ki)))) (((((((@logic.rewrite_r) ((nat.nat) )) (i0)) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (__)) (i0))) (((@logic.refl_) ((nat.nat) )) (i0))) ((h) ((k) (i0)))) (eqi))))))) (_clearme3)))) ((((sub2) (i0)) (lti)) (p2i))))))) (((((((bigops.bigop) ((nat.nat) )) (((nat.S) ) (n))) (fun (i0 : (nat.nat) ) , (p1) (i0))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i0 : (nat.nat) ) , (f1) (i0)))) ((((((((@bigops.bigop_Sfalse) ((nat.nat) )) (n)) (p1)) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (f1)) (((((((@logic.rewrite_r) ((bool.bool) )) ((bool.false) )) (fun (__ : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) (__)) ((bool.false) ))) (((@logic.refl_) ((bool.bool) )) ((bool.false) ))) ((p1) (n))) (p1n)))))) ((@bool.true_or_false) ((p1) (n))))))))) (i)) (p2))))) (_clearme2)))) (_clearme1)))) (_clearme0)))) (_clearme)).

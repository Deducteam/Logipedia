import .bigops
import .bool
import .cong
import .connectives
import .div_mod
import .exp
import .fact
import .gcd
import .logic
import .nat
import .permutation
import .primes
import .sigma_pi
theorem fermat.prime_to_not_divides_fact : forall (p:(nat.nat) ) , (((primes.prime) ) (p)) -> forall (n:(nat.nat) ) , ((((nat.lt_) ) (n)) (p)) -> ((connectives.Not) ) ((((primes.divides) ) (p)) (((fact.fact) ) (n))) := fun (p : (nat.nat) ) , fun (primep : ((primes.prime) ) (p)) , (fun (n : (nat.nat) ) , ((((@nat.nat_ind) (fun (_x_365 : (nat.nat) ) , ((((nat.lt_) ) (_x_365)) (p)) -> ((connectives.Not) ) ((((primes.divides) ) (p)) (((fact.fact) ) (_x_365))))) ((((@fact.sym_eq_fact) ((nat.O) )) (fun (y : (nat.nat) ) , ((((nat.lt_) ) ((nat.O) )) (p)) -> ((connectives.Not) ) ((((primes.divides) ) (p)) (y)))) (((((@nat.sym_eq_filter_nat_type_O) ((nat.nat) )) ((fact.fact_body) )) (fun (y : (nat.nat) ) , ((((nat.lt_) ) ((nat.O) )) (p)) -> ((connectives.Not) ) ((((primes.divides) ) (p)) (y)))) (((@fact.sym_eq_fact_body_O) (fun (y : (nat.nat) ) , ((((nat.lt_) ) ((nat.O) )) (p)) -> ((connectives.Not) ) ((((primes.divides) ) (p)) (y)))) (fun (__ : (((nat.le_) ) (((nat.S) ) ((nat.O) ))) (p)) , (((@connectives.nmk) ((((primes.divides) ) (p)) (((nat.S) ) ((nat.O) )))) (fun (divp : (((primes.divides) ) (p)) (((nat.S) ) ((nat.O) ))) , ((((@logic.absurd) ((((nat.le_) ) (p)) (((nat.S) ) ((nat.O) )))) (((((@primes.divides_to_le) (p)) (((nat.S) ) ((nat.O) ))) ((@nat.lt_O_S) ((nat.O) ))) (divp))) ((((@nat.lt_to_not_le) (((nat.S) ) ((nat.O) ))) (p)) (((@primes.prime_to_lt_SO) (p)) (primep))))))))))) (fun (n1 : (nat.nat) ) , (((@fact.sym_eq_fact) (((nat.S) ) (n1))) (fun (y : (nat.nat) ) , (((((nat.lt_) ) (n1)) (p)) -> ((connectives.Not) ) ((((primes.divides) ) (p)) (((fact.fact) ) (n1)))) -> ((((nat.lt_) ) (((nat.S) ) (n1))) (p)) -> ((connectives.Not) ) ((((primes.divides) ) (p)) (y)))) ((((((@nat.sym_eq_filter_nat_type_S) ((nat.nat) )) ((fact.fact_body) )) (n1)) (fun (y : (nat.nat) ) , (((((nat.lt_) ) (n1)) (p)) -> ((connectives.Not) ) ((((primes.divides) ) (p)) (((fact.fact) ) (n1)))) -> ((((nat.lt_) ) (((nat.S) ) (n1))) (p)) -> ((connectives.Not) ) ((((primes.divides) ) (p)) (y)))) ((((@fact.sym_eq_fact_body_S) (n1)) (fun (y : (nat.nat) ) , (((((nat.lt_) ) (n1)) (p)) -> ((connectives.Not) ) ((((primes.divides) ) (p)) (((fact.fact) ) (n1)))) -> ((((nat.lt_) ) (((nat.S) ) (n1))) (p)) -> ((connectives.Not) ) ((((primes.divides) ) (p)) (y)))) (fun (Hind : ((((nat.lt_) ) (n1)) (p)) -> ((connectives.Not) ) ((((primes.divides) ) (p)) (((fact.fact) ) (n1)))) , (fun (ltn1 : (((nat.lt_) ) (((nat.S) ) (n1))) (p)) , (((@connectives.nmk) ((((primes.divides) ) (p)) ((((nat.times) ) (((fact.fact) ) (n1))) (((nat.S) ) (n1))))) (fun (Hdiv : (((primes.divides) ) (p)) ((((nat.times) ) (((fact.fact) ) (n1))) (((nat.S) ) (n1)))) , (((((((@connectives.match_Or_prop) ((((primes.divides) ) (p)) (((fact.fact) ) (n1)))) ((((primes.divides) ) (p)) (((nat.S) ) (n1)))) ((connectives.False) )) (fun (Hdiv0 : (((primes.divides) ) (p)) (((fact.fact) ) (n1))) , ((((@logic.absurd) ((((primes.divides) ) (p)) (((fact.fact) ) (n1)))) (Hdiv0)) ((Hind) ((((@nat.lt_to_le) (((nat.S) ) (n1))) (p)) (ltn1)))))) (fun (Hdiv0 : (((primes.divides) ) (p)) (((nat.S) ) (n1))) , ((((@logic.absurd) ((((nat.le_) ) (p)) (((nat.S) ) (n1)))) (((((@primes.divides_to_le) (p)) (((nat.S) ) (n1))) ((@nat.lt_O_S) (n1))) (Hdiv0))) ((((@nat.lt_to_not_le) (((nat.S) ) (n1))) (p)) (ltn1))))) ((((((@gcd.divides_times_to_divides) (p)) (((fact.fact) ) (n1))) (((nat.S) ) (n1))) (primep)) (Hdiv))))))))))) (n)).
theorem fermat.permut_mod : forall (p:(nat.nat) ) , forall (a:(nat.nat) ) , (((primes.prime) ) (p)) -> (((connectives.Not) ) ((((primes.divides) ) (p)) (a))) -> (((permutation.permut) ) (fun (n : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (n))) (p))) (((nat.pred_) ) (p)) := fun (p : (nat.nat) ) , fun (a : (nat.nat) ) , fun (primep : ((primes.prime) ) (p)) , (fun (ndiv : ((connectives.Not) ) ((((primes.divides) ) (p)) (a))) , (((((@connectives.conj) (forall (x:(nat.nat) ) , ((((nat.le_) ) (x)) (((nat.pred_) ) (p))) -> (((nat.le_) ) ((((div_mod.mod) ) ((((nat.times) ) (a)) (x))) (p))) (((nat.pred_) ) (p)))) ((((permutation.injn) ) (fun (n : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (n))) (p))) (((nat.pred_) ) (p)))) (fun (i : (nat.nat) ) , fun (lei : (((nat.le_) ) (i)) (((nat.pred_) ) (p))) , ((((@nat.le_S_S_to_le) ((((div_mod.mod) ) ((((nat.times) ) (a)) (i))) (p))) (((nat.pred_) ) (p))) ((((((@nat.transitive_le) (((nat.S) ) ((((div_mod.mod) ) ((((nat.times) ) (a)) (i))) (p)))) (p)) (((nat.S) ) (((nat.pred_) ) (p)))) ((((@div_mod.lt_mod_m_m) ((((nat.times) ) (a)) (i))) (p)) (((@primes.prime_to_lt_O) (p)) (primep)))) (((((((@logic.eq_ind_r) ((nat.nat) )) (p)) (fun (x : (nat.nat) ) , (((nat.le_) ) (p)) (x))) ((@nat.le_n) (p))) (((nat.S) ) (((nat.pred_) ) (p)))) (((@nat.S_pred) (p)) (((@primes.prime_to_lt_O) (p)) (primep)))))))) (fun (i : (nat.nat) ) , fun (j : (nat.nat) ) , fun (lei : (((nat.le_) ) (i)) (((nat.pred_) ) (p))) , (fun (lej : (((nat.le_) ) (j)) (((nat.pred_) ) (p))) , (fun (H : (((logic.eq_) ((nat.nat) )) ((((div_mod.mod) ) ((((nat.times) ) (a)) (i))) (p))) ((((div_mod.mod) ) ((((nat.times) ) (a)) (j))) (p))) , (((((((@connectives.match_Or_prop) ((((nat.lt_) ) (i)) (j))) (((connectives.Not) ) ((((nat.lt_) ) (i)) (j)))) ((((logic.eq_) ((nat.nat) )) (i)) (j))) (fun (ltij : (((nat.lt_) ) (i)) (j)) , (((@connectives.falsity) ((((logic.eq_) ((nat.nat) )) (i)) (j))) ((((@logic.absurd) ((((nat.lt_) ) ((((nat.minus) ) (j)) (i))) (p))) (((((((@logic.eq_ind) ((nat.nat) )) (((nat.S) ) (((nat.pred_) ) (p)))) (fun (x_1 : (nat.nat) ) , (((nat.lt_) ) ((((nat.minus) ) (j)) (i))) (x_1))) ((((@nat.le_S_S) ((((nat.minus) ) (j)) (i))) (((nat.pred_) ) (p))) (((((@nat.le_plus_to_minus) (j)) (i)) (((nat.pred_) ) (p))) ((((((@nat.transitive_le) (j)) (((nat.pred_) ) (p))) ((((nat.plus) ) (((nat.pred_) ) (p))) (i))) (lej)) (((@nat.le_plus_n_r) (i)) (((nat.pred_) ) (p))))))) (p)) (((@nat.S_pred) (p)) (((@primes.prime_to_lt_O) (p)) (primep))))) ((((@nat.le_to_not_lt) (p)) ((((nat.minus) ) (j)) (i))) (((((@primes.divides_to_le) (p)) ((((nat.minus) ) (j)) (i))) (((((@nat.lt_plus_to_minus_r) ((nat.O) )) (i)) (j)) ((((@nat.sym_eq_plus) ((nat.O) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((nat.le_) ) (((nat.S) ) ((y) (i)))) (j))) (((((@nat.sym_eq_filter_nat_type_O) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((nat.le_) ) (((nat.S) ) ((y) (i)))) (j))) (((@nat.sym_eq_plus_body_O) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((nat.le_) ) (((nat.S) ) ((y) (i)))) (j))) (ltij)))))) (((((((@connectives.match_Or_prop) ((((primes.divides) ) (p)) (a))) ((((primes.divides) ) (p)) ((((nat.minus) ) (j)) (i)))) ((((primes.divides) ) (p)) ((((nat.minus) ) (j)) (i)))) (fun (Hdiv : (((primes.divides) ) (p)) (a)) , (((@connectives.falsity) ((((primes.divides) ) (p)) ((((nat.minus) ) (j)) (i)))) ((((@logic.absurd) ((((primes.divides) ) (p)) (a))) (Hdiv)) (ndiv))))) (fun (auto : (((primes.divides) ) (p)) ((((nat.minus) ) (j)) (i))) , (auto))) ((((((@gcd.divides_times_to_divides) (p)) (a)) ((((nat.minus) ) (j)) (i))) (primep)) (((((((@logic.eq_ind_r) ((nat.nat) )) ((((nat.minus) ) ((((nat.times) ) (a)) (j))) ((((nat.times) ) (a)) (i)))) (fun (x : (nat.nat) ) , (((primes.divides) ) (p)) (x))) ((((((@primes.eq_mod_to_divides) ((((nat.times) ) (a)) (j))) ((((nat.times) ) (a)) (i))) (p)) (((@primes.prime_to_lt_O) (p)) (primep))) (((((((@logic.rewrite_l) ((nat.nat) )) ((((div_mod.mod) ) ((((nat.times) ) (a)) (i))) (p))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (__)) ((((div_mod.mod) ) ((((nat.times) ) (a)) (i))) (p)))) (((@logic.refl_) ((nat.nat) )) ((((div_mod.mod) ) ((((nat.times) ) (a)) (i))) (p)))) ((((div_mod.mod) ) ((((nat.times) ) (a)) (j))) (p))) (H)))) ((((nat.times) ) (a)) ((((nat.minus) ) (j)) (i)))) ((((@nat.distributive_times_minus) (a)) (j)) (i))))))))))) (fun (Hij : ((connectives.Not) ) ((((nat.lt_) ) (i)) (j))) , (((((((@connectives.match_Or_prop) ((((nat.lt_) ) (j)) (i))) ((((logic.eq_) ((nat.nat) )) (j)) (i))) ((((logic.eq_) ((nat.nat) )) (i)) (j))) (fun (Hij0 : (((nat.lt_) ) (j)) (i)) , (((@connectives.falsity) ((((logic.eq_) ((nat.nat) )) (i)) (j))) ((((@logic.absurd) ((((nat.lt_) ) ((((nat.minus) ) (i)) (j))) (p))) (((((((@logic.eq_ind) ((nat.nat) )) (((nat.S) ) (((nat.pred_) ) (p)))) (fun (x_1 : (nat.nat) ) , (((nat.lt_) ) ((((nat.minus) ) (i)) (j))) (x_1))) ((((@nat.le_S_S) ((((nat.minus) ) (i)) (j))) (((nat.pred_) ) (p))) (((((@nat.le_plus_to_minus) (i)) (j)) (((nat.pred_) ) (p))) ((((((@nat.transitive_le) (i)) (((nat.pred_) ) (p))) ((((nat.plus) ) (((nat.pred_) ) (p))) (j))) (lei)) (((@nat.le_plus_n_r) (j)) (((nat.pred_) ) (p))))))) (p)) (((@nat.S_pred) (p)) (((@primes.prime_to_lt_O) (p)) (primep))))) ((((@nat.le_to_not_lt) (p)) ((((nat.minus) ) (i)) (j))) (((((@primes.divides_to_le) (p)) ((((nat.minus) ) (i)) (j))) (((((@nat.lt_plus_to_minus_r) ((nat.O) )) (j)) (i)) ((((@nat.sym_eq_plus) ((nat.O) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((nat.le_) ) (((nat.S) ) ((y) (j)))) (i))) (((((@nat.sym_eq_filter_nat_type_O) (((nat.nat) ) -> (nat.nat) )) ((nat.plus_body) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((nat.le_) ) (((nat.S) ) ((y) (j)))) (i))) (((@nat.sym_eq_plus_body_O) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((nat.le_) ) (((nat.S) ) ((y) (j)))) (i))) (Hij0)))))) (((((((@connectives.match_Or_prop) ((((primes.divides) ) (p)) (a))) ((((primes.divides) ) (p)) ((((nat.minus) ) (i)) (j)))) ((((primes.divides) ) (p)) ((((nat.minus) ) (i)) (j)))) (fun (Hdiv : (((primes.divides) ) (p)) (a)) , (((@connectives.falsity) ((((primes.divides) ) (p)) ((((nat.minus) ) (i)) (j)))) ((((@logic.absurd) ((((primes.divides) ) (p)) (a))) (Hdiv)) (ndiv))))) (fun (auto : (((primes.divides) ) (p)) ((((nat.minus) ) (i)) (j))) , (auto))) ((((((@gcd.divides_times_to_divides) (p)) (a)) ((((nat.minus) ) (i)) (j))) (primep)) (((((((@logic.eq_ind_r) ((nat.nat) )) ((((nat.minus) ) ((((nat.times) ) (a)) (i))) ((((nat.times) ) (a)) (j)))) (fun (x : (nat.nat) ) , (((primes.divides) ) (p)) (x))) ((((((@primes.eq_mod_to_divides) ((((nat.times) ) (a)) (i))) ((((nat.times) ) (a)) (j))) (p)) (((@primes.prime_to_lt_O) (p)) (primep))) (((((((@logic.rewrite_l) ((nat.nat) )) ((((div_mod.mod) ) ((((nat.times) ) (a)) (i))) (p))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((div_mod.mod) ) ((((nat.times) ) (a)) (i))) (p))) (__))) (((@logic.refl_) ((nat.nat) )) ((((div_mod.mod) ) ((((nat.times) ) (a)) (i))) (p)))) ((((div_mod.mod) ) ((((nat.times) ) (a)) (j))) (p))) (H)))) ((((nat.times) ) (a)) ((((nat.minus) ) (i)) (j)))) ((((@nat.distributive_times_minus) (a)) (i)) (j))))))))))) (fun (Hij0 : (((logic.eq_) ((nat.nat) )) (j)) (i)) , (((((((@logic.rewrite_r) ((nat.nat) )) (i)) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (i)) (__))) (((@logic.refl_) ((nat.nat) )) (i))) (j)) (Hij0)))) ((((@nat.le_to_or_lt_eq) (j)) (i)) ((((@nat.not_lt_to_le) (i)) (j)) (Hij)))))) (((@nat.decidable_lt_) (i)) (j)))))))).
theorem fermat.eq_fact_pi_p : forall (n:(nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((fact.fact) ) (n))) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) (((nat.S) ) (n))) (((nat.S) ) ((nat.O) )))) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.plus) ) (i)) (((nat.S) ) ((nat.O) )))) := fun (n : (nat.nat) ) , ((((@nat.nat_ind) (fun (_x_365 : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((fact.fact) ) (_x_365))) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) (((nat.S) ) (_x_365))) (((nat.S) ) ((nat.O) )))) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.plus) ) (i)) (((nat.S) ) ((nat.O) )))))) ((((@nat.sym_eq_minus) (((nat.S) ) ((nat.O) ))) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((fact.fact) ) ((nat.O) ))) (((((((bigops.bigop) ((nat.nat) )) ((y) (((nat.S) ) ((nat.O) )))) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.plus) ) (i)) (((nat.S) ) ((nat.O) )))))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.minus_body) )) ((nat.O) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((fact.fact) ) ((nat.O) ))) (((((((bigops.bigop) ((nat.nat) )) ((y) (((nat.S) ) ((nat.O) )))) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.plus) ) (i)) (((nat.S) ) ((nat.O) )))))) ((((@nat.sym_eq_minus_body_S) ((nat.O) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((fact.fact) ) ((nat.O) ))) (((((((bigops.bigop) ((nat.nat) )) ((y) (((nat.S) ) ((nat.O) )))) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.plus) ) (i)) (((nat.S) ) ((nat.O) )))))) (((((((@nat.sym_eq_match_nat_type_S) ((nat.nat) )) (((nat.S) ) ((nat.O) ))) (fun (q : (nat.nat) ) , (((nat.minus) ) ((nat.O) )) (q))) ((nat.O) )) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((fact.fact) ) ((nat.O) ))) (((((((bigops.bigop) ((nat.nat) )) (y)) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.plus) ) (i)) (((nat.S) ) ((nat.O) )))))) ((((@nat.sym_eq_minus) ((nat.O) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((fact.fact) ) ((nat.O) ))) (((((((bigops.bigop) ((nat.nat) )) ((y) ((nat.O) ))) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.plus) ) (i)) (((nat.S) ) ((nat.O) )))))) (((((@nat.sym_eq_filter_nat_type_O) (((nat.nat) ) -> (nat.nat) )) ((nat.minus_body) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((fact.fact) ) ((nat.O) ))) (((((((bigops.bigop) ((nat.nat) )) ((y) ((nat.O) ))) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.plus) ) (i)) (((nat.S) ) ((nat.O) )))))) (((@nat.sym_eq_minus_body_O) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((fact.fact) ) ((nat.O) ))) (((((((bigops.bigop) ((nat.nat) )) ((y) ((nat.O) ))) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.plus) ) (i)) (((nat.S) ) ((nat.O) )))))) ((((@bigops.sym_eq_bigop_O) ((nat.nat) )) (fun (y : (((nat.nat) ) -> (bool.bool) ) -> ((nat.nat) ) -> (((nat.nat) ) -> ((nat.nat) ) -> (nat.nat) ) -> (((nat.nat) ) -> (nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((fact.fact) ) ((nat.O) ))) (((((y) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.plus) ) (i)) (((nat.S) ) ((nat.O) )))))) ((((@bigops.sym_eq_bigop_body_O) ((nat.nat) )) (fun (y : (((nat.nat) ) -> (bool.bool) ) -> ((nat.nat) ) -> (((nat.nat) ) -> ((nat.nat) ) -> (nat.nat) ) -> (((nat.nat) ) -> (nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((fact.fact) ) ((nat.O) ))) (((((y) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.plus) ) (i)) (((nat.S) ) ((nat.O) )))))) (((@fact.eq_fact_body_O) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((fact.fact) ) ((nat.O) ))) (y))) (((((@nat.eq_filter_nat_type_O) ((nat.nat) )) ((fact.fact_body) )) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((fact.fact) ) ((nat.O) ))) (y))) ((((@fact.eq_fact) ((nat.O) )) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((fact.fact) ) ((nat.O) ))) (y))) (((@logic.refl_) ((nat.nat) )) (((fact.fact) ) ((nat.O) )))))))))))))))) (fun (n1 : (nat.nat) ) , (((@fact.sym_eq_fact) (((nat.S) ) (n1))) (fun (y : (nat.nat) ) , ((((logic.eq_) ((nat.nat) )) (((fact.fact) ) (n1))) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) (((nat.S) ) (n1))) (((nat.S) ) ((nat.O) )))) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.plus) ) (i)) (((nat.S) ) ((nat.O) ))))) -> (((logic.eq_) ((nat.nat) )) (y)) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) (((nat.S) ) (((nat.S) ) (n1)))) (((nat.S) ) ((nat.O) )))) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.plus) ) (i)) (((nat.S) ) ((nat.O) )))))) ((((((@nat.sym_eq_filter_nat_type_S) ((nat.nat) )) ((fact.fact_body) )) (n1)) (fun (y : (nat.nat) ) , ((((logic.eq_) ((nat.nat) )) (((fact.fact) ) (n1))) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) (((nat.S) ) (n1))) (((nat.S) ) ((nat.O) )))) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.plus) ) (i)) (((nat.S) ) ((nat.O) ))))) -> (((logic.eq_) ((nat.nat) )) (y)) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) (((nat.S) ) (((nat.S) ) (n1)))) (((nat.S) ) ((nat.O) )))) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.plus) ) (i)) (((nat.S) ) ((nat.O) )))))) ((((@fact.sym_eq_fact_body_S) (n1)) (fun (y : (nat.nat) ) , ((((logic.eq_) ((nat.nat) )) (((fact.fact) ) (n1))) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) (((nat.S) ) (n1))) (((nat.S) ) ((nat.O) )))) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.plus) ) (i)) (((nat.S) ) ((nat.O) ))))) -> (((logic.eq_) ((nat.nat) )) (y)) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) (((nat.S) ) (((nat.S) ) (n1)))) (((nat.S) ) ((nat.O) )))) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.plus) ) (i)) (((nat.S) ) ((nat.O) )))))) (fun (Hind : (((logic.eq_) ((nat.nat) )) (((fact.fact) ) (n1))) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) (((nat.S) ) (n1))) (((nat.S) ) ((nat.O) )))) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.plus) ) (i)) (((nat.S) ) ((nat.O) ))))) , (((((((@logic.eq_ind_r) ((nat.nat) )) ((((nat.times) ) (((nat.S) ) (n1))) (((fact.fact) ) (n1)))) (fun (x : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (x)) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) (((nat.S) ) (((nat.S) ) (n1)))) (((nat.S) ) ((nat.O) )))) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.plus) ) (i)) (((nat.S) ) ((nat.O) )))))) ((((@nat.sym_eq_minus) (((nat.S) ) (((nat.S) ) (n1)))) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) (((nat.S) ) (n1))) (((fact.fact) ) (n1)))) (((((((bigops.bigop) ((nat.nat) )) ((y) (((nat.S) ) ((nat.O) )))) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.plus) ) (i)) (((nat.S) ) ((nat.O) )))))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.minus_body) )) (((nat.S) ) (n1))) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) (((nat.S) ) (n1))) (((fact.fact) ) (n1)))) (((((((bigops.bigop) ((nat.nat) )) ((y) (((nat.S) ) ((nat.O) )))) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.plus) ) (i)) (((nat.S) ) ((nat.O) )))))) ((((@nat.sym_eq_minus_body_S) (((nat.S) ) (n1))) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) (((nat.S) ) (n1))) (((fact.fact) ) (n1)))) (((((((bigops.bigop) ((nat.nat) )) ((y) (((nat.S) ) ((nat.O) )))) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.plus) ) (i)) (((nat.S) ) ((nat.O) )))))) (((((((@nat.sym_eq_match_nat_type_S) ((nat.nat) )) (((nat.S) ) (((nat.S) ) (n1)))) (fun (q : (nat.nat) ) , (((nat.minus) ) (((nat.S) ) (n1))) (q))) ((nat.O) )) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) (((nat.S) ) (n1))) (((fact.fact) ) (n1)))) (((((((bigops.bigop) ((nat.nat) )) (y)) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.plus) ) (i)) (((nat.S) ) ((nat.O) )))))) ((((@nat.sym_eq_minus) (((nat.S) ) (n1))) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) (((nat.S) ) (n1))) (((fact.fact) ) (n1)))) (((((((bigops.bigop) ((nat.nat) )) ((y) ((nat.O) ))) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.plus) ) (i)) (((nat.S) ) ((nat.O) )))))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.minus_body) )) (n1)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) (((nat.S) ) (n1))) (((fact.fact) ) (n1)))) (((((((bigops.bigop) ((nat.nat) )) ((y) ((nat.O) ))) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.plus) ) (i)) (((nat.S) ) ((nat.O) )))))) ((((@nat.sym_eq_minus_body_S) (n1)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) (((nat.S) ) (n1))) (((fact.fact) ) (n1)))) (((((((bigops.bigop) ((nat.nat) )) ((y) ((nat.O) ))) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.plus) ) (i)) (((nat.S) ) ((nat.O) )))))) ((((((@nat.sym_eq_match_nat_type_O) ((nat.nat) )) (((nat.S) ) (n1))) (fun (q : (nat.nat) ) , (((nat.minus) ) (n1)) (q))) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) (((nat.S) ) (n1))) (((fact.fact) ) (n1)))) (((((((bigops.bigop) ((nat.nat) )) (y)) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.plus) ) (i)) (((nat.S) ) ((nat.O) )))))) (((((((@logic.eq_ind_r) ((nat.nat) )) ((((nat.times) ) ((((nat.plus) ) (n1)) (((nat.S) ) ((nat.O) )))) (((((((bigops.bigop) ((nat.nat) )) (n1)) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.plus) ) (i)) (((nat.S) ) ((nat.O) )))))) (fun (x : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) (((nat.S) ) (n1))) (((fact.fact) ) (n1)))) (x))) (((((((@logic.eq_ind) ((nat.nat) )) (((nat.S) ) ((((nat.plus) ) (n1)) ((nat.O) )))) (fun (x_1 : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) (((nat.S) ) (n1))) (((fact.fact) ) (n1)))) ((((nat.times) ) (x_1)) (((((((bigops.bigop) ((nat.nat) )) (n1)) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.plus) ) (i)) (((nat.S) ) ((nat.O) ))))))) (((((((@logic.eq_ind) ((nat.nat) )) (n1)) (fun (x_1 : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((nat.times) ) (((nat.S) ) (n1))) (((fact.fact) ) (n1)))) ((((nat.times) ) (((nat.S) ) (x_1))) (((((((bigops.bigop) ((nat.nat) )) (n1)) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.plus) ) (i)) (((nat.S) ) ((nat.O) ))))))) (((((((@logic.eq_f) ((nat.nat) )) ((nat.nat) )) (((nat.times) ) (((nat.S) ) (n1)))) (((fact.fact) ) (n1))) (((((((bigops.bigop) ((nat.nat) )) (n1)) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.plus) ) (i)) (((nat.S) ) ((nat.O) ))))) (((((((@logic.eq_ind) ((nat.nat) )) ((((nat.minus) ) (((nat.S) ) (n1))) (((nat.S) ) ((nat.O) )))) (fun (x_1 : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((fact.fact) ) (n1))) (((((((bigops.bigop) ((nat.nat) )) (x_1)) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.plus) ) (i)) (((nat.S) ) ((nat.O) )))))) (Hind)) (n1)) ((((@nat.sym_eq_minus) (((nat.S) ) (n1))) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((y) (((nat.S) ) ((nat.O) )))) (n1))) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (nat.nat) )) ((nat.minus_body) )) (n1)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((y) (((nat.S) ) ((nat.O) )))) (n1))) ((((@nat.sym_eq_minus_body_S) (n1)) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((y) (((nat.S) ) ((nat.O) )))) (n1))) (((((((@nat.sym_eq_match_nat_type_S) ((nat.nat) )) (((nat.S) ) (n1))) (fun (q : (nat.nat) ) , (((nat.minus) ) (n1)) (q))) ((nat.O) )) (fun (y : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (y)) (n1))) (((((((@logic.rewrite_l) ((nat.nat) )) (n1)) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (__)) (n1))) (((@logic.refl_) ((nat.nat) )) (n1))) ((((nat.minus) ) (n1)) ((nat.O) ))) ((@nat.minus_n_O) (n1)))))))))) ((((nat.plus) ) (n1)) ((nat.O) ))) ((@nat.plus_n_O) (n1)))) ((((nat.plus) ) (n1)) (((nat.S) ) ((nat.O) )))) (((@nat.plus_n_Sm) (n1)) ((nat.O) )))) (((((((bigops.bigop) ((nat.nat) )) (((nat.S) ) (n1))) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.plus) ) (i)) (((nat.S) ) ((nat.O) ))))) ((((((((@bigops.bigop_Strue) ((nat.nat) )) (n1)) (fun (__ : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (__ : (nat.nat) ) , (((nat.plus) ) (__)) (((nat.S) ) ((nat.O) )))) (((@logic.refl_) ((bool.bool) )) ((bool.true) ))))))))))))) ((((nat.times) ) (((fact.fact) ) (n1))) (((nat.S) ) (n1)))) (((@nat.commutative_times) (((fact.fact) ) (n1))) (((nat.S) ) (n1))))))))) (n).
theorem fermat.congruent_pi : forall (f:((nat.nat) ) -> (nat.nat) ) , forall (n:(nat.nat) ) , forall (p:(nat.nat) ) , ((((nat.lt_) ) ((nat.O) )) (p)) -> ((((cong.congruent) ) (((((((bigops.bigop) ((nat.nat) )) (n)) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) (i)))) (((((((bigops.bigop) ((nat.nat) )) (n)) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((div_mod.mod) ) ((f) (i))) (p)))) (p) := fun (f : ((nat.nat) ) -> (nat.nat) ) , fun (n : (nat.nat) ) , ((((@nat.nat_ind) (fun (_x_365 : (nat.nat) ) , forall (p:(nat.nat) ) , ((((nat.lt_) ) ((nat.O) )) (p)) -> ((((cong.congruent) ) (((((((bigops.bigop) ((nat.nat) )) (_x_365)) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) (i)))) (((((((bigops.bigop) ((nat.nat) )) (_x_365)) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((div_mod.mod) ) ((f) (i))) (p)))) (p))) (fun (p : (nat.nat) ) , (((@bigops.sym_eq_bigop_O) ((nat.nat) )) (fun (y : (((nat.nat) ) -> (bool.bool) ) -> ((nat.nat) ) -> (((nat.nat) ) -> ((nat.nat) ) -> (nat.nat) ) -> (((nat.nat) ) -> (nat.nat) ) -> (nat.nat) ) , ((((nat.lt_) ) ((nat.O) )) (p)) -> ((((cong.congruent) ) (((((((bigops.bigop) ((nat.nat) )) ((nat.O) )) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) (i)))) (((((y) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((div_mod.mod) ) ((f) (i))) (p)))) (p))) ((((@bigops.sym_eq_bigop_body_O) ((nat.nat) )) (fun (y : (((nat.nat) ) -> (bool.bool) ) -> ((nat.nat) ) -> (((nat.nat) ) -> ((nat.nat) ) -> (nat.nat) ) -> (((nat.nat) ) -> (nat.nat) ) -> (nat.nat) ) , ((((nat.lt_) ) ((nat.O) )) (p)) -> ((((cong.congruent) ) (((((((bigops.bigop) ((nat.nat) )) ((nat.O) )) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) (i)))) (((((y) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((div_mod.mod) ) ((f) (i))) (p)))) (p))) ((((@bigops.eq_bigop_body_O) ((nat.nat) )) (fun (y : (((nat.nat) ) -> (bool.bool) ) -> ((nat.nat) ) -> (((nat.nat) ) -> ((nat.nat) ) -> (nat.nat) ) -> (((nat.nat) ) -> (nat.nat) ) -> (nat.nat) ) , ((((nat.lt_) ) ((nat.O) )) (p)) -> ((((cong.congruent) ) (((((((bigops.bigop) ((nat.nat) )) ((nat.O) )) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) (i)))) (((((y) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) (i)))) (p))) ((((@bigops.eq_bigop_O) ((nat.nat) )) (fun (y : (((nat.nat) ) -> (bool.bool) ) -> ((nat.nat) ) -> (((nat.nat) ) -> ((nat.nat) ) -> (nat.nat) ) -> (((nat.nat) ) -> (nat.nat) ) -> (nat.nat) ) , ((((nat.lt_) ) ((nat.O) )) (p)) -> ((((cong.congruent) ) (((((((bigops.bigop) ((nat.nat) )) ((nat.O) )) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) (i)))) (((((y) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) (i)))) (p))) (fun (auto : (((nat.lt_) ) ((nat.O) )) (p)) , (((@cong.congruent_n_n) (((((((bigops.bigop) ((nat.nat) )) ((nat.O) )) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) (i)))) (p)))))))) (fun (n1 : (nat.nat) ) , fun (Hind : forall (p:(nat.nat) ) , ((((nat.lt_) ) ((nat.O) )) (p)) -> ((((cong.congruent) ) (((((((bigops.bigop) ((nat.nat) )) (n1)) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) (i)))) (((((((bigops.bigop) ((nat.nat) )) (n1)) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((div_mod.mod) ) ((f) (i))) (p)))) (p)) , (fun (p : (nat.nat) ) , fun (posp : (((nat.lt_) ) ((nat.O) )) (p)) , (((((((@logic.eq_ind_r) ((nat.nat) )) ((((nat.times) ) ((f) (n1))) (((((((bigops.bigop) ((nat.nat) )) (n1)) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) (i))))) (fun (x : (nat.nat) ) , ((((cong.congruent) ) (x)) (((((((bigops.bigop) ((nat.nat) )) (((nat.S) ) (n1))) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((div_mod.mod) ) ((f) (i))) (p)))) (p))) (((((@bigops.sym_eq_bigop_S) ((nat.nat) )) (n1)) (fun (y : (((nat.nat) ) -> (bool.bool) ) -> ((nat.nat) ) -> (((nat.nat) ) -> ((nat.nat) ) -> (nat.nat) ) -> (((nat.nat) ) -> (nat.nat) ) -> (nat.nat) ) , ((((cong.congruent) ) ((((nat.times) ) ((f) (n1))) (((((((bigops.bigop) ((nat.nat) )) (n1)) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) (i))))) (((((y) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((div_mod.mod) ) ((f) (i))) (p)))) (p))) (((((@bigops.sym_eq_bigop_body_S) ((nat.nat) )) (n1)) (fun (y : (((nat.nat) ) -> (bool.bool) ) -> ((nat.nat) ) -> (((nat.nat) ) -> ((nat.nat) ) -> (nat.nat) ) -> (((nat.nat) ) -> (nat.nat) ) -> (nat.nat) ) , ((((cong.congruent) ) ((((nat.times) ) ((f) (n1))) (((((((bigops.bigop) ((nat.nat) )) (n1)) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) (i))))) (((((y) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((div_mod.mod) ) ((f) (i))) (p)))) (p))) ((((((@bool.sym_eq_match_bool_type_true) ((nat.nat) )) ((((nat.times) ) ((((div_mod.mod) ) ((f) (n1))) (p))) (((((((bigops.bigop) ((nat.nat) )) (n1)) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((div_mod.mod) ) ((f) (i))) (p))))) (((((((bigops.bigop) ((nat.nat) )) (n1)) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((div_mod.mod) ) ((f) (i))) (p)))) (fun (y : (nat.nat) ) , ((((cong.congruent) ) ((((nat.times) ) ((f) (n1))) (((((((bigops.bigop) ((nat.nat) )) (n1)) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) (i))))) (y)) (p))) (((((((((@cong.congruent_times) ((f) (n1))) (((((((bigops.bigop) ((nat.nat) )) (n1)) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) (i)))) ((((div_mod.mod) ) ((f) (n1))) (p))) (((((((bigops.bigop) ((nat.nat) )) (n1)) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((div_mod.mod) ) ((f) (i))) (p)))) (p)) (posp)) ((((@cong.congruent_n_mod_n) ((f) (n1))) (p)) (posp))) (((Hind) (p)) (posp))))))) (((((((bigops.bigop) ((nat.nat) )) (((nat.S) ) (n1))) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (f) (i)))) ((((((((@bigops.bigop_Strue) ((nat.nat) )) (n1)) (fun (__ : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (f)) (((@logic.refl_) ((bool.bool) )) ((bool.true) ))))))) (n).
theorem fermat.congruent_exp_pred_SO : forall (p:(nat.nat) ) , forall (a:(nat.nat) ) , (((primes.prime) ) (p)) -> (((connectives.Not) ) ((((primes.divides) ) (p)) (a))) -> ((((cong.congruent) ) ((((exp.exp) ) (a)) (((nat.pred_) ) (p)))) (((nat.S) ) ((nat.O) ))) (p) := fun (p : (nat.nat) ) , fun (a : (nat.nat) ) , fun (primep : ((primes.prime) ) (p)) , (fun (ndiv : ((connectives.Not) ) ((((primes.divides) ) (p)) (a))) , (((((((@cong.divides_to_congruent) ((((exp.exp) ) (a)) (((nat.pred_) ) (p)))) (((nat.S) ) ((nat.O) ))) (p)) (((@primes.prime_to_lt_O) (p)) (primep))) ((((@exp.lt_O_exp) (a)) (((nat.pred_) ) (p))) ((((((@nat.match_nat_prop) (fun (__ : (nat.nat) ) , (((connectives.Not) ) ((((primes.divides) ) (p)) (__))) -> (((nat.lt_) ) ((nat.O) )) (__))) (fun (_clearme : ((connectives.Not) ) ((((primes.divides) ) (p)) ((nat.O) ))) , (((((@connectives.Not_ind) ((((primes.divides) ) (p)) ((nat.O) ))) ((((nat.lt_) ) ((nat.O) )) ((nat.O) ))) (fun (div0 : ((((primes.divides) ) (p)) ((nat.O) )) -> (connectives.False) ) , (((@connectives.falsity) ((((nat.lt_) ) ((nat.O) )) ((nat.O) ))) ((div0) (((((@primes.quotient) (p)) ((nat.O) )) ((nat.O) )) (((((((@logic.rewrite_l) ((nat.nat) )) ((nat.O) )) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((nat.O) )) (__))) (((@logic.refl_) ((nat.nat) )) ((nat.O) ))) ((((nat.times) ) (p)) ((nat.O) ))) ((@nat.times_n_O) (p)))))))) (_clearme)))) (fun (auto : (nat.nat) ) , fun (auto' : ((connectives.Not) ) ((((primes.divides) ) (p)) (((nat.S) ) (auto)))) , ((@nat.lt_O_S) (auto)))) (a)) (ndiv)))) (((((((@connectives.match_Or_prop) ((((primes.divides) ) (p)) ((((nat.minus) ) ((((exp.exp) ) (a)) (((nat.pred_) ) (p)))) (((nat.S) ) ((nat.O) ))))) ((((primes.divides) ) (p)) (((fact.fact) ) (((nat.pred_) ) (p))))) ((((primes.divides) ) (p)) ((((nat.minus) ) ((((exp.exp) ) (a)) (((nat.pred_) ) (p)))) (((nat.S) ) ((nat.O) ))))) (fun (auto : (((primes.divides) ) (p)) ((((nat.minus) ) ((((exp.exp) ) (a)) (((nat.pred_) ) (p)))) (((nat.S) ) ((nat.O) )))) , (auto))) (fun (Hdiv : (((primes.divides) ) (p)) (((fact.fact) ) (((nat.pred_) ) (p)))) , (((@connectives.falsity) ((((primes.divides) ) (p)) ((((nat.minus) ) ((((exp.exp) ) (a)) (((nat.pred_) ) (p)))) (((nat.S) ) ((nat.O) ))))) ((((@logic.absurd) ((((primes.divides) ) (p)) (((fact.fact) ) (((nat.pred_) ) (p))))) (Hdiv)) (((((@fermat.prime_to_not_divides_fact) (p)) (primep)) (((nat.pred_) ) (p))) ((((@nat.le_S_S_to_le) (((nat.S) ) (((nat.pred_) ) (p)))) (p)) (((((((@logic.eq_ind_r) ((nat.nat) )) (p)) (fun (x : (nat.nat) ) , (((nat.le_) ) (((nat.S) ) (x))) (((nat.S) ) (p)))) ((@nat.le_n) (((nat.S) ) (p)))) (((nat.S) ) (((nat.pred_) ) (p)))) (((@nat.S_pred) (p)) (((@primes.prime_to_lt_O) (p)) (primep)))))))))) ((((((@gcd.divides_times_to_divides) (p)) ((((nat.minus) ) ((((exp.exp) ) (a)) (((nat.pred_) ) (p)))) (((nat.S) ) ((nat.O) )))) (((fact.fact) ) (((nat.pred_) ) (p)))) (primep)) (((((((@logic.eq_ind_r) ((nat.nat) )) ((((nat.times) ) (((fact.fact) ) (((nat.pred_) ) (p)))) ((((nat.minus) ) ((((exp.exp) ) (a)) (((nat.pred_) ) (p)))) (((nat.S) ) ((nat.O) ))))) (fun (x : (nat.nat) ) , (((primes.divides) ) (p)) (x))) (((((((@logic.eq_ind_r) ((nat.nat) )) ((((nat.minus) ) ((((nat.times) ) (((fact.fact) ) (((nat.pred_) ) (p)))) ((((exp.exp) ) (a)) (((nat.pred_) ) (p))))) ((((nat.times) ) (((fact.fact) ) (((nat.pred_) ) (p)))) (((nat.S) ) ((nat.O) ))))) (fun (x : (nat.nat) ) , (((primes.divides) ) (p)) (x))) (((((((@logic.eq_ind) ((nat.nat) )) (((fact.fact) ) (((nat.pred_) ) (p)))) (fun (x_1 : (nat.nat) ) , (((primes.divides) ) (p)) ((((nat.minus) ) ((((nat.times) ) (((fact.fact) ) (((nat.pred_) ) (p)))) ((((exp.exp) ) (a)) (((nat.pred_) ) (p))))) (x_1)))) (((((((@logic.eq_ind_r) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) (((nat.S) ) (((nat.pred_) ) (p)))) (((nat.S) ) ((nat.O) )))) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.plus) ) (i)) (((nat.S) ) ((nat.O) ))))) (fun (x : (nat.nat) ) , (((primes.divides) ) (p)) ((((nat.minus) ) ((((nat.times) ) (x)) ((((exp.exp) ) (a)) (((nat.pred_) ) (p))))) (x)))) (((((((@logic.eq_ind_r) ((nat.nat) )) ((((nat.times) ) ((((exp.exp) ) (a)) (((nat.pred_) ) (p)))) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) (((nat.S) ) (((nat.pred_) ) (p)))) (((nat.S) ) ((nat.O) )))) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.plus) ) (i)) (((nat.S) ) ((nat.O) )))))) (fun (x : (nat.nat) ) , (((primes.divides) ) (p)) ((((nat.minus) ) (x)) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) (((nat.S) ) (((nat.pred_) ) (p)))) (((nat.S) ) ((nat.O) )))) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.plus) ) (i)) (((nat.S) ) ((nat.O) ))))))) (((((((@logic.eq_ind_r) ((nat.nat) )) ((((nat.minus) ) (((nat.S) ) (((nat.pred_) ) (p)))) (((nat.S) ) ((nat.O) )))) (fun (x : (nat.nat) ) , (((primes.divides) ) (p)) ((((nat.minus) ) ((((nat.times) ) ((((exp.exp) ) (a)) (x))) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) (((nat.S) ) (((nat.pred_) ) (p)))) (((nat.S) ) ((nat.O) )))) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.plus) ) (i)) (((nat.S) ) ((nat.O) )))))) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) (((nat.S) ) (((nat.pred_) ) (p)))) (((nat.S) ) ((nat.O) )))) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.plus) ) (i)) (((nat.S) ) ((nat.O) ))))))) (((((((@logic.eq_ind_r) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) (((nat.S) ) (((nat.pred_) ) (p)))) (((nat.S) ) ((nat.O) )))) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.times) ) (a)) ((((nat.plus) ) (i)) (((nat.S) ) ((nat.O) )))))) (fun (x : (nat.nat) ) , (((primes.divides) ) (p)) ((((nat.minus) ) (x)) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) (((nat.S) ) (((nat.pred_) ) (p)))) (((nat.S) ) ((nat.O) )))) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.plus) ) (i)) (((nat.S) ) ((nat.O) ))))))) ((((((@cong.congruent_to_divides) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) (((nat.S) ) (((nat.pred_) ) (p)))) (((nat.S) ) ((nat.O) )))) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.times) ) (a)) ((((nat.plus) ) (i)) (((nat.S) ) ((nat.O) )))))) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) (((nat.S) ) (((nat.pred_) ) (p)))) (((nat.S) ) ((nat.O) )))) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.plus) ) (i)) (((nat.S) ) ((nat.O) ))))) (p)) (((@primes.prime_to_lt_O) (p)) (primep))) (((((((@cong.transitive_congruent) (p)) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) (((nat.S) ) (((nat.pred_) ) (p)))) (((nat.S) ) ((nat.O) )))) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.times) ) (a)) ((((nat.plus) ) (i)) (((nat.S) ) ((nat.O) )))))) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) (((nat.S) ) (((nat.pred_) ) (p)))) (((nat.S) ) ((nat.O) )))) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) ((((nat.plus) ) (i)) (((nat.S) ) ((nat.O) ))))) (p)))) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) (((nat.S) ) (((nat.pred_) ) (p)))) (((nat.S) ) ((nat.O) )))) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.plus) ) (i)) (((nat.S) ) ((nat.O) ))))) (((((@fermat.congruent_pi) (fun (m : (nat.nat) ) , (((nat.times) ) (a)) ((((nat.plus) ) (m)) (((nat.S) ) ((nat.O) ))))) ((((nat.minus) ) (((nat.S) ) (((nat.pred_) ) (p)))) (((nat.S) ) ((nat.O) )))) (p)) (((@primes.prime_to_lt_O) (p)) (primep)))) (((((((@logic.eq_ind) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) (((nat.S) ) (((nat.pred_) ) (p)))) (((nat.S) ) ((nat.O) )))) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.plus) ) (i)) (((nat.S) ) ((nat.O) ))))) (fun (x_1 : (nat.nat) ) , ((((cong.congruent) ) (x_1)) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) (((nat.S) ) (((nat.pred_) ) (p)))) (((nat.S) ) ((nat.O) )))) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.plus) ) (i)) (((nat.S) ) ((nat.O) ))))) (p))) (((@cong.congruent_n_n) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) (((nat.S) ) (((nat.pred_) ) (p)))) (((nat.S) ) ((nat.O) )))) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.plus) ) (i)) (((nat.S) ) ((nat.O) ))))) (p))) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) (((nat.S) ) (((nat.pred_) ) (p)))) (((nat.S) ) ((nat.O) )))) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) ((((nat.plus) ) (i)) (((nat.S) ) ((nat.O) ))))) (p)))) (((((((@logic.eq_ind_r) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) (((nat.S) ) (((nat.pred_) ) (p)))) (fun (i : (nat.nat) ) , (((bool.andb) ) ((((nat.leb) ) (((nat.S) ) ((nat.O) ))) (i))) ((bool.true) ))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , i))) (fun (x : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (x)) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) (((nat.S) ) (((nat.pred_) ) (p)))) (((nat.S) ) ((nat.O) )))) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) ((((nat.plus) ) (i)) (((nat.S) ) ((nat.O) ))))) (p))))) (((((((@logic.eq_ind_r) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) (((nat.S) ) (((nat.pred_) ) (p)))) (fun (i : (nat.nat) ) , (((bool.andb) ) ((((nat.leb) ) (((nat.S) ) ((nat.O) ))) (i))) ((bool.true) ))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (i))) (p)))) (fun (x : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) (((nat.S) ) (((nat.pred_) ) (p)))) (fun (i : (nat.nat) ) , (((bool.andb) ) ((((nat.leb) ) (((nat.S) ) ((nat.O) ))) (i))) ((bool.true) ))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , i))) (x))) (((((@logic.sym_eq) ((nat.nat) )) (((((((bigops.bigop) ((nat.nat) )) (((nat.S) ) (((nat.pred_) ) (p)))) (fun (i : (nat.nat) ) , (((bool.andb) ) ((((nat.leb) ) (((nat.S) ) ((nat.O) ))) (i))) ((bool.true) ))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (i))) (p)))) (((((((bigops.bigop) ((nat.nat) )) (((nat.S) ) (((nat.pred_) ) (p)))) (fun (i : (nat.nat) ) , (((bool.andb) ) ((((nat.leb) ) (((nat.S) ) ((nat.O) ))) (i))) ((bool.true) ))) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , i))) ((((((((@bigops.bigop_iso) (((nat.S) ) (((nat.pred_) ) (p)))) (((nat.S) ) (((nat.pred_) ) (p)))) (fun (__ : (nat.nat) ) , (((bool.andb) ) ((((nat.leb) ) (((nat.S) ) ((nat.O) ))) (__))) ((bool.true) ))) (fun (__ : (nat.nat) ) , (((bool.andb) ) ((((nat.leb) ) (((nat.S) ) ((nat.O) ))) (__))) ((bool.true) ))) (fun (__ : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (__))) (p))) (fun (__ : (nat.nat) ) , __)) (((((@connectives.ex_intro) (((nat.nat) ) -> (nat.nat) )) (fun (x : ((nat.nat) ) -> (nat.nat) ) , ((connectives.ex) (((nat.nat) ) -> (nat.nat) )) (fun (k : ((nat.nat) ) -> (nat.nat) ) , (((connectives.And) ) ((((connectives.And) ) (forall (i:(nat.nat) ) , ((((nat.lt_) ) (i)) (((nat.S) ) (((nat.pred_) ) (p)))) -> ((((logic.eq_) ((bool.bool) )) ((((bool.andb) ) ((((nat.leb) ) (((nat.S) ) ((nat.O) ))) (i))) ((bool.true) ))) ((bool.true) )) -> (((logic.eq_) ((nat.nat) )) ((((div_mod.mod) ) ((((nat.times) ) (a)) (i))) (p))) ((x) (i)))) ((((((((((bigops.sub_hk) ) (x)) (k)) (((nat.S) ) (((nat.pred_) ) (p)))) (((nat.S) ) (((nat.pred_) ) (p)))) (fun (_0 : (nat.nat) ) , (((bool.andb) ) ((((nat.leb) ) (((nat.S) ) ((nat.O) ))) (_0))) ((bool.true) ))) (fun (_0 : (nat.nat) ) , (((bool.andb) ) ((((nat.leb) ) (((nat.S) ) ((nat.O) ))) (_0))) ((bool.true) ))) (fun (_0 : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (_0))) (p))) (fun (_0 : (nat.nat) ) , _0)))) ((((((((((bigops.sub_hk) ) (k)) (x)) (((nat.S) ) (((nat.pred_) ) (p)))) (((nat.S) ) (((nat.pred_) ) (p)))) (fun (_0 : (nat.nat) ) , (((bool.andb) ) ((((nat.leb) ) (((nat.S) ) ((nat.O) ))) (_0))) ((bool.true) ))) (fun (_0 : (nat.nat) ) , (((bool.andb) ) ((((nat.leb) ) (((nat.S) ) ((nat.O) ))) (_0))) ((bool.true) ))) (fun (_0 : (nat.nat) ) , _0)) (fun (_0 : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (_0))) (p)))))) (fun (i : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (i))) (p))) (((((@connectives.ex_intro) (((nat.nat) ) -> (nat.nat) )) (fun (y : ((nat.nat) ) -> (nat.nat) ) , (((connectives.And) ) ((((connectives.And) ) (forall (i:(nat.nat) ) , ((((nat.lt_) ) (i)) (((nat.S) ) (((nat.pred_) ) (p)))) -> ((((logic.eq_) ((bool.bool) )) ((((bool.andb) ) ((((nat.leb) ) (((nat.S) ) ((nat.O) ))) (i))) ((bool.true) ))) ((bool.true) )) -> (((logic.eq_) ((nat.nat) )) ((((div_mod.mod) ) ((((nat.times) ) (a)) (i))) (p))) ((((div_mod.mod) ) ((((nat.times) ) (a)) (i))) (p)))) ((((((((((bigops.sub_hk) ) (fun (i : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (i))) (p))) (y)) (((nat.S) ) (((nat.pred_) ) (p)))) (((nat.S) ) (((nat.pred_) ) (p)))) (fun (_0 : (nat.nat) ) , (((bool.andb) ) ((((nat.leb) ) (((nat.S) ) ((nat.O) ))) (_0))) ((bool.true) ))) (fun (_0 : (nat.nat) ) , (((bool.andb) ) ((((nat.leb) ) (((nat.S) ) ((nat.O) ))) (_0))) ((bool.true) ))) (fun (_0 : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (_0))) (p))) (fun (_0 : (nat.nat) ) , _0)))) ((((((((((bigops.sub_hk) ) (y)) (fun (i : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (i))) (p))) (((nat.S) ) (((nat.pred_) ) (p)))) (((nat.S) ) (((nat.pred_) ) (p)))) (fun (_0 : (nat.nat) ) , (((bool.andb) ) ((((nat.leb) ) (((nat.S) ) ((nat.O) ))) (_0))) ((bool.true) ))) (fun (_0 : (nat.nat) ) , (((bool.andb) ) ((((nat.leb) ) (((nat.S) ) ((nat.O) ))) (_0))) ((bool.true) ))) (fun (_0 : (nat.nat) ) , _0)) (fun (_0 : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (_0))) (p))))) ((((permutation.invert_permut) ) (((nat.pred_) ) (p))) (fun (i : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (i))) (p)))) (((((@connectives.conj) ((((connectives.And) ) (forall (i:(nat.nat) ) , ((((nat.lt_) ) (i)) (((nat.S) ) (((nat.pred_) ) (p)))) -> ((((logic.eq_) ((bool.bool) )) ((((bool.andb) ) ((((nat.leb) ) (((nat.S) ) ((nat.O) ))) (i))) ((bool.true) ))) ((bool.true) )) -> (((logic.eq_) ((nat.nat) )) ((((div_mod.mod) ) ((((nat.times) ) (a)) (i))) (p))) ((((div_mod.mod) ) ((((nat.times) ) (a)) (i))) (p)))) ((((((((((bigops.sub_hk) ) (fun (i : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (i))) (p))) ((((permutation.invert_permut) ) (((nat.pred_) ) (p))) (fun (i : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (i))) (p)))) (((nat.S) ) (((nat.pred_) ) (p)))) (((nat.S) ) (((nat.pred_) ) (p)))) (fun (_0 : (nat.nat) ) , (((bool.andb) ) ((((nat.leb) ) (((nat.S) ) ((nat.O) ))) (_0))) ((bool.true) ))) (fun (_0 : (nat.nat) ) , (((bool.andb) ) ((((nat.leb) ) (((nat.S) ) ((nat.O) ))) (_0))) ((bool.true) ))) (fun (_0 : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (_0))) (p))) (fun (_0 : (nat.nat) ) , _0)))) ((((((((((bigops.sub_hk) ) ((((permutation.invert_permut) ) (((nat.pred_) ) (p))) (fun (i : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (i))) (p)))) (fun (i : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (i))) (p))) (((nat.S) ) (((nat.pred_) ) (p)))) (((nat.S) ) (((nat.pred_) ) (p)))) (fun (_0 : (nat.nat) ) , (((bool.andb) ) ((((nat.leb) ) (((nat.S) ) ((nat.O) ))) (_0))) ((bool.true) ))) (fun (_0 : (nat.nat) ) , (((bool.andb) ) ((((nat.leb) ) (((nat.S) ) ((nat.O) ))) (_0))) ((bool.true) ))) (fun (_0 : (nat.nat) ) , _0)) (fun (_0 : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (_0))) (p)))) (((((@connectives.conj) (forall (x:(nat.nat) ) , ((((nat.lt_) ) (x)) (((nat.S) ) (((nat.pred_) ) (p)))) -> ((((logic.eq_) ((bool.bool) )) ((((bool.andb) ) ((((nat.leb) ) (((nat.S) ) ((nat.O) ))) (x))) ((bool.true) ))) ((bool.true) )) -> (((logic.eq_) ((nat.nat) )) ((((div_mod.mod) ) ((((nat.times) ) (a)) (x))) (p))) ((((div_mod.mod) ) ((((nat.times) ) (a)) (x))) (p)))) ((((((((((bigops.sub_hk) ) (fun (i : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (i))) (p))) ((((permutation.invert_permut) ) (((nat.pred_) ) (p))) (fun (i : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (i))) (p)))) (((nat.S) ) (((nat.pred_) ) (p)))) (((nat.S) ) (((nat.pred_) ) (p)))) (fun (_0 : (nat.nat) ) , (((bool.andb) ) ((((nat.leb) ) (((nat.S) ) ((nat.O) ))) (_0))) ((bool.true) ))) (fun (_0 : (nat.nat) ) , (((bool.andb) ) ((((nat.leb) ) (((nat.S) ) ((nat.O) ))) (_0))) ((bool.true) ))) (fun (_0 : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (_0))) (p))) (fun (_0 : (nat.nat) ) , _0))) (fun (i : (nat.nat) ) , fun (lti : (((nat.lt_) ) (i)) (((nat.S) ) (((nat.pred_) ) (p)))) , (fun (__ : (((logic.eq_) ((bool.bool) )) ((((bool.andb) ) ((((nat.leb) ) (((nat.S) ) ((nat.O) ))) (i))) ((bool.true) ))) ((bool.true) )) , (((@logic.refl_) ((nat.nat) )) ((((div_mod.mod) ) ((((nat.times) ) (a)) (i))) (p)))))) (fun (i : (nat.nat) ) , fun (lti : (((nat.lt_) ) (i)) (((nat.S) ) (((nat.pred_) ) (p)))) , (fun (posi : (((logic.eq_) ((bool.bool) )) ((((bool.andb) ) ((((nat.leb) ) (((nat.S) ) ((nat.O) ))) (i))) ((bool.true) ))) ((bool.true) )) , (((((@connectives.conj) ((((connectives.And) ) ((((nat.lt_) ) ((((div_mod.mod) ) ((((nat.times) ) (a)) (i))) (p))) (((nat.S) ) (((nat.pred_) ) (p))))) ((((logic.eq_) ((bool.bool) )) ((((bool.andb) ) ((((nat.leb) ) (((nat.S) ) ((nat.O) ))) ((((div_mod.mod) ) ((((nat.times) ) (a)) (i))) (p)))) ((bool.true) ))) ((bool.true) )))) ((((logic.eq_) ((nat.nat) )) (((((permutation.invert_permut) ) (((nat.pred_) ) (p))) (fun (i0 : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (i0))) (p))) ((((div_mod.mod) ) ((((nat.times) ) (a)) (i))) (p)))) (i))) (((((@connectives.conj) ((((nat.lt_) ) ((((div_mod.mod) ) ((((nat.times) ) (a)) (i))) (p))) (((nat.S) ) (((nat.pred_) ) (p))))) ((((logic.eq_) ((bool.bool) )) ((((bool.andb) ) ((((nat.leb) ) (((nat.S) ) ((nat.O) ))) ((((div_mod.mod) ) ((((nat.times) ) (a)) (i))) (p)))) ((bool.true) ))) ((bool.true) ))) (((((((@logic.eq_ind_r) ((nat.nat) )) (p)) (fun (x : (nat.nat) ) , (((nat.lt_) ) ((((div_mod.mod) ) ((((nat.times) ) (a)) (i))) (p))) (x))) ((((@div_mod.lt_mod_m_m) ((((nat.times) ) (a)) (i))) (p)) (((@primes.prime_to_lt_O) (p)) (primep)))) (((nat.S) ) (((nat.pred_) ) (p)))) (((@nat.S_pred) (p)) (((@primes.prime_to_lt_O) (p)) (primep))))) (((((((@logic.eq_ind_r) ((bool.bool) )) ((bool.true) )) (fun (x : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) ((((bool.andb) ) (x)) ((bool.true) ))) ((bool.true) ))) ((((((@bool.eq_match_bool_type_true) ((bool.bool) )) ((bool.true) )) ((bool.false) )) (fun (y : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) ((((bool.andb) ) ((bool.true) )) ((bool.true) ))) (y))) (((@logic.refl_) ((bool.bool) )) ((((bool.andb) ) ((bool.true) )) ((bool.true) ))))) ((((nat.leb) ) (((nat.S) ) ((nat.O) ))) ((((div_mod.mod) ) ((((nat.times) ) (a)) (i))) (p)))) ((((@nat.le_to_leb_true) (((nat.S) ) ((nat.O) ))) ((((div_mod.mod) ) ((((nat.times) ) (a)) (i))) (p))) (((((((@connectives.match_Or_prop) ((((nat.lt_) ) ((nat.O) )) ((((div_mod.mod) ) ((((nat.times) ) (a)) (i))) (p)))) ((((logic.eq_) ((nat.nat) )) ((nat.O) )) ((((div_mod.mod) ) ((((nat.times) ) (a)) (i))) (p)))) ((((nat.le_) ) (((nat.S) ) ((nat.O) ))) ((((div_mod.mod) ) ((((nat.times) ) (a)) (i))) (p)))) (fun (auto : (((nat.lt_) ) ((nat.O) )) ((((div_mod.mod) ) ((((nat.times) ) (a)) (i))) (p))) , (auto))) (fun (H : (((logic.eq_) ((nat.nat) )) ((nat.O) )) ((((div_mod.mod) ) ((((nat.times) ) (a)) (i))) (p))) , (((@connectives.falsity) ((((nat.le_) ) (((nat.S) ) ((nat.O) ))) ((((div_mod.mod) ) ((((nat.times) ) (a)) (i))) (p)))) ((((@logic.absurd) ((((primes.divides) ) (p)) ((((nat.times) ) (a)) (i)))) (((((@primes.mod_O_to_divides) (p)) ((((nat.times) ) (a)) (i))) (((@primes.prime_to_lt_O) (p)) (primep))) (((((@logic.sym_eq) ((nat.nat) )) ((nat.O) )) ((((div_mod.mod) ) ((((nat.times) ) (a)) (i))) (p))) (H)))) (((((@logic.not_to_not) ((((primes.divides) ) (p)) ((((nat.times) ) (a)) (i)))) ((((primes.divides) ) (p)) (a))) (fun (Hdiv : (((primes.divides) ) (p)) ((((nat.times) ) (a)) (i))) , (((((((@connectives.match_Or_prop) ((((primes.divides) ) (p)) (a))) ((((primes.divides) ) (p)) (i))) ((((primes.divides) ) (p)) (a))) (fun (auto : (((primes.divides) ) (p)) (a)) , (auto))) (fun (divpi : (((primes.divides) ) (p)) (i)) , (((@connectives.falsity) ((((primes.divides) ) (p)) (a))) ((((@logic.absurd) ((((nat.lt_) ) (i)) (((nat.S) ) (((nat.pred_) ) (p))))) (lti)) ((((@nat.le_to_not_lt) (((nat.S) ) (((nat.pred_) ) (p)))) (i)) (((((((@logic.eq_ind_r) ((nat.nat) )) (p)) (fun (x : (nat.nat) ) , (((nat.le_) ) (x)) (i))) (((((@primes.divides_to_le) (p)) (i)) ((((@nat.leb_true_to_le) (((nat.S) ) ((nat.O) ))) (i)) ((((@bool.andb_true_l) ((((nat.leb) ) (((nat.S) ) ((nat.O) ))) (i))) ((bool.true) )) (posi)))) (divpi))) (((nat.S) ) (((nat.pred_) ) (p)))) (((@nat.S_pred) (p)) (((@primes.prime_to_lt_O) (p)) (primep))))))))) ((((((@gcd.divides_times_to_divides) (p)) (a)) (i)) (primep)) (Hdiv))))) (ndiv)))))) ((((@nat.le_to_or_lt_eq) ((nat.O) )) ((((div_mod.mod) ) ((((nat.times) ) (a)) (i))) (p))) ((@nat.le_O_n) ((((div_mod.mod) ) ((((nat.times) ) (a)) (i))) (p))))))))) ((((((@permutation.invert_permut_f) (fun (i0 : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (i0))) (p))) (((nat.pred_) ) (p))) (i)) ((((@nat.le_S_S_to_le) (i)) (((nat.pred_) ) (p))) (lti))) ((((((@connectives.match_And_prop) (forall (i1:(nat.nat) ) , ((((nat.le_) ) (i1)) (((nat.pred_) ) (p))) -> (((nat.le_) ) ((((div_mod.mod) ) ((((nat.times) ) (a)) (i1))) (p))) (((nat.pred_) ) (p)))) ((((permutation.injn) ) (fun (n : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (n))) (p))) (((nat.pred_) ) (p)))) ((((permutation.injn) ) (fun (i0 : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (i0))) (p))) (((nat.pred_) ) (p)))) (fun (auto : forall (i0:(nat.nat) ) , ((((nat.le_) ) (i0)) (((nat.pred_) ) (p))) -> (((nat.le_) ) ((((div_mod.mod) ) ((((nat.times) ) (a)) (i0))) (p))) (((nat.pred_) ) (p))) , (fun (auto' : (((permutation.injn) ) (fun (n : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (n))) (p))) (((nat.pred_) ) (p))) , (auto')))) (((((@fermat.permut_mod) (p)) (a)) (primep)) (ndiv))))))))) ((((((@connectives.match_And_prop) (forall (i:(nat.nat) ) , ((((nat.le_) ) (i)) (((nat.pred_) ) (p))) -> (((nat.le_) ) (((((permutation.invert_permut) ) (((nat.pred_) ) (p))) (fun (n : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (n))) (p))) (i))) (((nat.pred_) ) (p)))) ((((permutation.injn) ) ((((permutation.invert_permut) ) (((nat.pred_) ) (p))) (fun (n : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (n))) (p)))) (((nat.pred_) ) (p)))) ((((((((((bigops.sub_hk) ) ((((permutation.invert_permut) ) (((nat.pred_) ) (p))) (fun (i : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (i))) (p)))) (fun (i : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (i))) (p))) (((nat.S) ) (((nat.pred_) ) (p)))) (((nat.S) ) (((nat.pred_) ) (p)))) (fun (_0 : (nat.nat) ) , (((bool.andb) ) ((((nat.leb) ) (((nat.S) ) ((nat.O) ))) (_0))) ((bool.true) ))) (fun (_0 : (nat.nat) ) , (((bool.andb) ) ((((nat.leb) ) (((nat.S) ) ((nat.O) ))) (_0))) ((bool.true) ))) (fun (_0 : (nat.nat) ) , _0)) (fun (_0 : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (_0))) (p)))) (fun (le_invert_permut : forall (i:(nat.nat) ) , ((((nat.le_) ) (i)) (((nat.pred_) ) (p))) -> (((nat.le_) ) (((((permutation.invert_permut) ) (((nat.pred_) ) (p))) (fun (n : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (n))) (p))) (i))) (((nat.pred_) ) (p))) , (fun (inj_inv_permut : (((permutation.injn) ) ((((permutation.invert_permut) ) (((nat.pred_) ) (p))) (fun (n : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (n))) (p)))) (((nat.pred_) ) (p))) , (fun (i : (nat.nat) ) , fun (lti : (((nat.lt_) ) (i)) (((nat.S) ) (((nat.pred_) ) (p)))) , (fun (posi : (((logic.eq_) ((bool.bool) )) ((((bool.andb) ) ((((nat.leb) ) (((nat.S) ) ((nat.O) ))) (i))) ((bool.true) ))) ((bool.true) )) , (((((@connectives.conj) ((((connectives.And) ) ((((nat.lt_) ) (((((permutation.invert_permut) ) (((nat.pred_) ) (p))) (fun (i0 : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (i0))) (p))) (i))) (((nat.S) ) (((nat.pred_) ) (p))))) ((((logic.eq_) ((bool.bool) )) ((((bool.andb) ) ((((nat.leb) ) (((nat.S) ) ((nat.O) ))) (((((permutation.invert_permut) ) (((nat.pred_) ) (p))) (fun (i0 : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (i0))) (p))) (i)))) ((bool.true) ))) ((bool.true) )))) ((((logic.eq_) ((nat.nat) )) ((((div_mod.mod) ) ((((nat.times) ) (a)) (((((permutation.invert_permut) ) (((nat.pred_) ) (p))) (fun (i0 : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (i0))) (p))) (i)))) (p))) (i))) (((((@connectives.conj) ((((nat.lt_) ) (((((permutation.invert_permut) ) (((nat.pred_) ) (p))) (fun (i0 : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (i0))) (p))) (i))) (((nat.S) ) (((nat.pred_) ) (p))))) ((((logic.eq_) ((bool.bool) )) ((((bool.andb) ) ((((nat.leb) ) (((nat.S) ) ((nat.O) ))) (((((permutation.invert_permut) ) (((nat.pred_) ) (p))) (fun (i0 : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (i0))) (p))) (i)))) ((bool.true) ))) ((bool.true) ))) ((((@nat.le_S_S) (((((permutation.invert_permut) ) (((nat.pred_) ) (p))) (fun (i0 : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (i0))) (p))) (i))) (((nat.pred_) ) (p))) (((le_invert_permut) (i)) ((((@nat.le_S_S_to_le) (i)) (((nat.pred_) ) (p))) (lti))))) (((((((@logic.eq_ind_r) ((bool.bool) )) ((bool.true) )) (fun (x : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) ((((bool.andb) ) (x)) ((bool.true) ))) ((bool.true) ))) ((((((@bool.eq_match_bool_type_true) ((bool.bool) )) ((bool.true) )) ((bool.false) )) (fun (y : (bool.bool) ) , (((logic.eq_) ((bool.bool) )) ((((bool.andb) ) ((bool.true) )) ((bool.true) ))) (y))) (((@logic.refl_) ((bool.bool) )) ((((bool.andb) ) ((bool.true) )) ((bool.true) ))))) ((((nat.leb) ) (((nat.S) ) ((nat.O) ))) (((((permutation.invert_permut) ) (((nat.pred_) ) (p))) (fun (i0 : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (i0))) (p))) (i)))) ((((@nat.le_to_leb_true) (((nat.S) ) ((nat.O) ))) (((((permutation.invert_permut) ) (((nat.pred_) ) (p))) (fun (i0 : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (i0))) (p))) (i))) (((((((@connectives.match_Or_prop) ((((nat.lt_) ) ((nat.O) )) (((((permutation.invert_permut) ) (((nat.pred_) ) (p))) (fun (i0 : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (i0))) (p))) (i)))) ((((logic.eq_) ((nat.nat) )) ((nat.O) )) (((((permutation.invert_permut) ) (((nat.pred_) ) (p))) (fun (i0 : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (i0))) (p))) (i)))) ((((nat.le_) ) (((nat.S) ) ((nat.O) ))) (((((permutation.invert_permut) ) (((nat.pred_) ) (p))) (fun (i0 : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (i0))) (p))) (i)))) (fun (auto : (((nat.lt_) ) ((nat.O) )) (((((permutation.invert_permut) ) (((nat.pred_) ) (p))) (fun (i0 : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (i0))) (p))) (i))) , (auto))) (fun (H : (((logic.eq_) ((nat.nat) )) ((nat.O) )) (((((permutation.invert_permut) ) (((nat.pred_) ) (p))) (fun (i0 : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (i0))) (p))) (i))) , (((@connectives.falsity) ((((nat.le_) ) (((nat.S) ) ((nat.O) ))) (((((permutation.invert_permut) ) (((nat.pred_) ) (p))) (fun (i0 : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (i0))) (p))) (i)))) ((((((((@logic.eq_ind_r) ((nat.nat) )) ((nat.O) )) (fun (x : (nat.nat) ) , ((((logic.eq_) ((nat.nat) )) (x)) ((((div_mod.mod) ) ((((nat.times) ) (a)) (((((permutation.invert_permut) ) (((nat.pred_) ) (p))) (fun (i0 : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (i0))) (p))) (i)))) (p))) -> (connectives.False) )) (((((((@logic.eq_ind_r) ((nat.nat) )) (i)) (fun (x : (nat.nat) ) , ((((logic.eq_) ((nat.nat) )) ((nat.O) )) (x)) -> (connectives.False) )) (fun (eq0i : (((logic.eq_) ((nat.nat) )) ((nat.O) )) (i)) , ((((((((@logic.eq_ind) ((nat.nat) )) ((nat.O) )) (fun (x_1 : (nat.nat) ) , ((((logic.eq_) ((bool.bool) )) ((((bool.andb) ) ((((nat.leb) ) (((nat.S) ) ((nat.O) ))) (x_1))) ((bool.true) ))) ((bool.true) )) -> (connectives.False) )) ((((@nat.sym_eq_leb) (((nat.S) ) ((nat.O) ))) (fun (y : ((nat.nat) ) -> (bool.bool) ) , ((((logic.eq_) ((bool.bool) )) ((((bool.andb) ) ((y) ((nat.O) ))) ((bool.true) ))) ((bool.true) )) -> (connectives.False) )) ((((((@nat.sym_eq_filter_nat_type_S) (((nat.nat) ) -> (bool.bool) )) ((nat.leb_body) )) ((nat.O) )) (fun (y : ((nat.nat) ) -> (bool.bool) ) , ((((logic.eq_) ((bool.bool) )) ((((bool.andb) ) ((y) ((nat.O) ))) ((bool.true) ))) ((bool.true) )) -> (connectives.False) )) ((((@nat.sym_eq_leb_body_S) ((nat.O) )) (fun (y : ((nat.nat) ) -> (bool.bool) ) , ((((logic.eq_) ((bool.bool) )) ((((bool.andb) ) ((y) ((nat.O) ))) ((bool.true) ))) ((bool.true) )) -> (connectives.False) )) ((((((@nat.sym_eq_match_nat_type_O) ((bool.bool) )) ((bool.false) )) (fun (q : (nat.nat) ) , (((nat.leb) ) ((nat.O) )) (q))) (fun (y : (bool.bool) ) , ((((logic.eq_) ((bool.bool) )) ((((bool.andb) ) (y)) ((bool.true) ))) ((bool.true) )) -> (connectives.False) )) ((((((@bool.sym_eq_match_bool_type_false) ((bool.bool) )) ((bool.true) )) ((bool.false) )) (fun (y : (bool.bool) ) , ((((logic.eq_) ((bool.bool) )) (y)) ((bool.true) )) -> (connectives.False) )) (fun (H0 : (((logic.eq_) ((bool.bool) )) ((bool.false) )) ((bool.true) )) , (((((((@bool.eq_match_bool_type_true) (Prop)) (forall (P:Prop) , P)) (forall (P:Prop) , (P) -> P)) (fun (y : Prop) , y)) ((((((@bool.eq_match_bool_type_false) (Prop)) (((((bool.match_bool_type) (Prop)) (forall (P:Prop) , (P) -> P)) (forall (P:Prop) , P)) ((bool.true) ))) (((((bool.match_bool_type) (Prop)) (forall (P:Prop) , P)) (forall (P:Prop) , (P) -> P)) ((bool.true) ))) (fun (y : Prop) , y)) ((((@bool.bool_discr) ((bool.false) )) ((bool.true) )) (H0)))) ((connectives.False) ))))))))) (i)) (eq0i)) (posi)))) ((((div_mod.mod) ) ((((nat.times) ) (a)) (((((permutation.invert_permut) ) (((nat.pred_) ) (p))) (fun (i0 : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (i0))) (p))) (i)))) (p))) ((((((@permutation.f_invert_permut) (fun (i0 : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (i0))) (p))) (((nat.pred_) ) (p))) (i)) ((((@nat.le_S_S_to_le) (i)) (((nat.pred_) ) (p))) (lti))) (((((@fermat.permut_mod) (p)) (a)) (primep)) (ndiv))))) ((((div_mod.mod) ) ((((nat.times) ) (a)) ((nat.O) ))) (p))) (((((((@logic.eq_ind) ((nat.nat) )) ((nat.O) )) (fun (x_1 : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((((div_mod.mod) ) (x_1)) (p))) ((nat.O) ))) (((((((@logic.rewrite_r) ((nat.nat) )) ((nat.O) )) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (__)) ((nat.O) ))) (((@logic.refl_) ((nat.nat) )) ((nat.O) ))) ((((div_mod.mod) ) ((nat.O) )) (p))) ((@div_mod.mod_O_n) (p)))) ((((nat.times) ) (a)) ((nat.O) ))) ((@nat.times_n_O) (a)))) (((((((@logic.eq_f) ((nat.nat) )) ((nat.nat) )) (fun (i0 : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (i0))) (p))) ((nat.O) )) (((((permutation.invert_permut) ) (((nat.pred_) ) (p))) (fun (i0 : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (i0))) (p))) (i))) (((((((@logic.rewrite_l) ((nat.nat) )) ((nat.O) )) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) ((nat.O) )) (__))) (((@logic.refl_) ((nat.nat) )) ((nat.O) ))) (((((permutation.invert_permut) ) (((nat.pred_) ) (p))) (fun (i0 : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (i0))) (p))) (i))) (H))))))) ((((@nat.le_to_or_lt_eq) ((nat.O) )) (((((permutation.invert_permut) ) (((nat.pred_) ) (p))) (fun (i0 : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (i0))) (p))) (i))) ((@nat.le_O_n) (((((permutation.invert_permut) ) (((nat.pred_) ) (p))) (fun (i0 : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (i0))) (p))) (i))))))))) ((((((@permutation.f_invert_permut) (fun (__ : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (__))) (p))) (((nat.pred_) ) (p))) (i)) ((((@nat.le_S_S_to_le) (i)) (((nat.pred_) ) (p))) (lti))) (((((@fermat.permut_mod) (p)) (a)) (primep)) (ndiv))))))))) ((((@permutation.permut_invert_permut) (fun (n : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (n))) (p))) (((nat.pred_) ) (p))) (((((@fermat.permut_mod) (p)) (a)) (primep)) (ndiv)))))))))) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) (((nat.S) ) (((nat.pred_) ) (p)))) (((nat.S) ) ((nat.O) )))) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) ((((nat.plus) ) (i)) (((nat.S) ) ((nat.O) ))))) (p)))) ((((((@bigops.bigop_I_gen) (((nat.S) ) ((nat.O) ))) (((nat.S) ) (((nat.pred_) ) (p)))) (fun (__ : (nat.nat) ) , (bool.true) )) (fun (__ : (nat.nat) ) , (((div_mod.mod) ) ((((nat.times) ) (a)) (__))) (p))) ((@nat.lt_O_S) (((nat.pred_) ) (p)))))) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) (((nat.S) ) (((nat.pred_) ) (p)))) (((nat.S) ) ((nat.O) )))) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.plus) ) (i)) (((nat.S) ) ((nat.O) ))))) ((((((@bigops.bigop_I_gen) (((nat.S) ) ((nat.O) ))) (((nat.S) ) (((nat.pred_) ) (p)))) (fun (__ : (nat.nat) ) , (bool.true) )) (fun (__ : (nat.nat) ) , __)) ((@nat.lt_O_S) (((nat.pred_) ) (p))))))))) ((((nat.times) ) ((((exp.exp) ) (a)) ((((nat.minus) ) (((nat.S) ) (((nat.pred_) ) (p)))) (((nat.S) ) ((nat.O) ))))) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) (((nat.S) ) (((nat.pred_) ) (p)))) (((nat.S) ) ((nat.O) )))) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.plus) ) (i)) (((nat.S) ) ((nat.O) )))))) (((((@sigma_pi.exp_pi_bc) (a)) (((nat.S) ) ((nat.O) ))) (((nat.S) ) (((nat.pred_) ) (p)))) (fun (__ : (nat.nat) ) , __)))) (((nat.pred_) ) (p))) (((((((@logic.rewrite_r) ((nat.nat) )) ((((nat.minus) ) (((nat.pred_) ) (p))) ((nat.O) ))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((nat.pred_) ) (p))) (__))) (((((((@logic.rewrite_l) ((nat.nat) )) (((nat.pred_) ) (p))) (fun (__ : (nat.nat) ) , (((logic.eq_) ((nat.nat) )) (((nat.pred_) ) (p))) (__))) (((@logic.refl_) ((nat.nat) )) (((nat.pred_) ) (p)))) ((((nat.minus) ) (((nat.pred_) ) (p))) ((nat.O) ))) ((@nat.minus_n_O) (((nat.pred_) ) (p))))) ((((nat.minus) ) (((nat.S) ) (((nat.pred_) ) (p)))) (((nat.S) ) ((nat.O) )))) (((@nat.minus_S_S) (((nat.pred_) ) (p))) ((nat.O) ))))) ((((nat.times) ) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) (((nat.S) ) (((nat.pred_) ) (p)))) (((nat.S) ) ((nat.O) )))) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.plus) ) (i)) (((nat.S) ) ((nat.O) ))))) ((((exp.exp) ) (a)) (((nat.pred_) ) (p))))) (((@nat.commutative_times) (((((((bigops.bigop) ((nat.nat) )) ((((nat.minus) ) (((nat.S) ) (((nat.pred_) ) (p)))) (((nat.S) ) ((nat.O) )))) (fun (i : (nat.nat) ) , (bool.true) )) (((nat.S) ) ((nat.O) ))) ((nat.times) )) (fun (i : (nat.nat) ) , (((nat.plus) ) (i)) (((nat.S) ) ((nat.O) ))))) ((((exp.exp) ) (a)) (((nat.pred_) ) (p)))))) (((fact.fact) ) (((nat.pred_) ) (p)))) ((@fermat.eq_fact_pi_p) (((nat.pred_) ) (p))))) ((((nat.times) ) (((fact.fact) ) (((nat.pred_) ) (p)))) (((nat.S) ) ((nat.O) )))) ((@nat.times_n_1) (((fact.fact) ) (((nat.pred_) ) (p)))))) ((((nat.times) ) (((fact.fact) ) (((nat.pred_) ) (p)))) ((((nat.minus) ) ((((exp.exp) ) (a)) (((nat.pred_) ) (p)))) (((nat.S) ) ((nat.O) ))))) ((((@nat.distributive_times_minus) (((fact.fact) ) (((nat.pred_) ) (p)))) ((((exp.exp) ) (a)) (((nat.pred_) ) (p)))) (((nat.S) ) ((nat.O) ))))) ((((nat.times) ) ((((nat.minus) ) ((((exp.exp) ) (a)) (((nat.pred_) ) (p)))) (((nat.S) ) ((nat.O) )))) (((fact.fact) ) (((nat.pred_) ) (p))))) (((@nat.commutative_times) ((((nat.minus) ) ((((exp.exp) ) (a)) (((nat.pred_) ) (p)))) (((nat.S) ) ((nat.O) )))) (((fact.fact) ) (((nat.pred_) ) (p))))))))).

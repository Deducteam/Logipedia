include "basics/pts.ma".
include "connectives.ma".
include "leibniz.ma".
include "nat.ma".
axiom exp : ((nat) ) -> ((nat) ) -> (nat) .
axiom exp_body : ((nat) ) -> ((nat) ) -> (nat) .
axiom axiom_exp : \forall (n:(nat) ). \forall (m:(nat) ). (((equal) ((nat) )) ((((exp) ) (n)) (m))) ((((filter_nat_type) ((nat) )) (((exp_body) ) (n))) (m)).
definition eq_exp : \forall (n:(nat) ). \forall (m:(nat) ). (((leibniz) ((nat) )) ((((exp) ) (n)) (m))) ((((filter_nat_type) ((nat) )) (((exp_body) ) (n))) (m)) := \lambda n : (nat) . \lambda m : (nat) . ((((equal_leibniz) ((nat) )) ((((exp) ) (n)) (m))) ((((filter_nat_type) ((nat) )) (((exp_body) ) (n))) (m))) (((axiom_exp) (n)) (m)).
definition sym_eq_exp : \forall (n:(nat) ). \forall (m:(nat) ). (((leibniz) ((nat) )) ((((filter_nat_type) ((nat) )) (((exp_body) ) (n))) (m))) ((((exp) ) (n)) (m)) := \lambda n : (nat) . \lambda m : (nat) . ((((sym_leibniz) ((nat) )) ((((exp) ) (n)) (m))) ((((filter_nat_type) ((nat) )) (((exp_body) ) (n))) (m))) (((eq_exp) (n)) (m)).
axiom axiom_exp_body_O : \forall (n:(nat) ). (((equal) ((nat) )) ((((exp_body) ) (n)) ((O) ))) (((S) ) ((O) )).
definition eq_exp_body_O : \forall (n:(nat) ). (((leibniz) ((nat) )) ((((exp_body) ) (n)) ((O) ))) (((S) ) ((O) )) := \lambda n : (nat) . ((((equal_leibniz) ((nat) )) ((((exp_body) ) (n)) ((O) ))) (((S) ) ((O) ))) ((axiom_exp_body_O) (n)).
definition sym_eq_exp_body_O : \forall (n:(nat) ). (((leibniz) ((nat) )) (((S) ) ((O) ))) ((((exp_body) ) (n)) ((O) )) := \lambda n : (nat) . ((((sym_leibniz) ((nat) )) ((((exp_body) ) (n)) ((O) ))) (((S) ) ((O) ))) ((eq_exp_body_O) (n)).
axiom axiom_exp_body_S : \forall (n:(nat) ). \forall (m:(nat) ). (((equal) ((nat) )) ((((exp_body) ) (n)) (((S) ) (m)))) ((((times) ) ((((exp) ) (n)) (m))) (n)).
definition eq_exp_body_S : \forall (n:(nat) ). \forall (m:(nat) ). (((leibniz) ((nat) )) ((((exp_body) ) (n)) (((S) ) (m)))) ((((times) ) ((((exp) ) (n)) (m))) (n)) := \lambda n : (nat) . \lambda m : (nat) . ((((equal_leibniz) ((nat) )) ((((exp_body) ) (n)) (((S) ) (m)))) ((((times) ) ((((exp) ) (n)) (m))) (n))) (((axiom_exp_body_S) (n)) (m)).
definition sym_eq_exp_body_S : \forall (n:(nat) ). \forall (m:(nat) ). (((leibniz) ((nat) )) ((((times) ) ((((exp) ) (n)) (m))) (n))) ((((exp_body) ) (n)) (((S) ) (m))) := \lambda n : (nat) . \lambda m : (nat) . ((((sym_leibniz) ((nat) )) ((((exp_body) ) (n)) (((S) ) (m)))) ((((times) ) ((((exp) ) (n)) (m))) (n))) (((eq_exp_body_S) (n)) (m)).
definition lt_O_exp : \forall (n:(nat) ). \forall (m:(nat) ). ((((lt) ) ((O) )) (n)) -> (((lt) ) ((O) )) ((((exp) ) (n)) (m)) := \lambda n : (nat) . \lambda m : (nat) . ((((nat_ind) (\lambda j_x_365 : (nat) . ((((lt) ) ((O) )) (n)) -> (((lt) ) ((O) )) ((((exp) ) (n)) (j_x_365)))) (((((sym_eq_exp) (n)) ((O) )) (\lambda y : (nat) . ((((lt) ) ((O) )) (n)) -> (((lt) ) ((O) )) (y))) (((((sym_eq_filter_nat_type_O) ((nat) )) (((exp_body) ) (n))) (\lambda y : (nat) . ((((lt) ) ((O) )) (n)) -> (((lt) ) ((O) )) (y))) ((((sym_eq_exp_body_O) (n)) (\lambda y : (nat) . ((((lt) ) ((O) )) (n)) -> (((lt) ) ((O) )) (y))) (\lambda auto : (((le) ) (((S) ) ((O) ))) (n). ((lt_O_S) ((O) ))))))) (\lambda a : (nat) . ((((sym_eq_exp) (n)) (((S) ) (a))) (\lambda y : (nat) . (((((lt) ) ((O) )) (n)) -> (((lt) ) ((O) )) ((((exp) ) (n)) (a))) -> ((((lt) ) ((O) )) (n)) -> (((lt) ) ((O) )) (y))) ((((((sym_eq_filter_nat_type_S) ((nat) )) (((exp_body) ) (n))) (a)) (\lambda y : (nat) . (((((lt) ) ((O) )) (n)) -> (((lt) ) ((O) )) ((((exp) ) (n)) (a))) -> ((((lt) ) ((O) )) (n)) -> (((lt) ) ((O) )) (y))) (((((sym_eq_exp_body_S) (n)) (a)) (\lambda y : (nat) . (((((lt) ) ((O) )) (n)) -> (((lt) ) ((O) )) ((((exp) ) (n)) (a))) -> ((((lt) ) ((O) )) (n)) -> (((lt) ) ((O) )) (y))) (\lambda Hind : ((((le) ) (((S) ) ((O) ))) (n)) -> (((le) ) (((S) ) ((O) ))) ((((exp) ) (n)) (a)). (\lambda posn : (((le) ) (((S) ) ((O) ))) (n). (((eq_times_body_O) (\lambda y : ((nat) ) -> (nat) . (((le) ) (((S) ) ((y) (((S) ) ((O) ))))) ((((times) ) ((((exp) ) (n)) (a))) (n)))) (((((eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((times_body) )) (\lambda y : ((nat) ) -> (nat) . (((le) ) (((S) ) ((y) (((S) ) ((O) ))))) ((((times) ) ((((exp) ) (n)) (a))) (n)))) ((((eq_times) ((O) )) (\lambda y : ((nat) ) -> (nat) . (((le) ) (((S) ) ((y) (((S) ) ((O) ))))) ((((times) ) ((((exp) ) (n)) (a))) (n)))) (((eq_plus_body_O) (\lambda y : ((nat) ) -> (nat) . (((le) ) (((S) ) ((y) ((((times) ) ((O) )) (((S) ) ((O) )))))) ((((times) ) ((((exp) ) (n)) (a))) (n)))) (((((eq_filter_nat_type_O) (((nat) ) -> (nat) )) ((plus_body) )) (\lambda y : ((nat) ) -> (nat) . (((le) ) (((S) ) ((y) ((((times) ) ((O) )) (((S) ) ((O) )))))) ((((times) ) ((((exp) ) (n)) (a))) (n)))) ((((eq_plus) ((O) )) (\lambda y : ((nat) ) -> (nat) . (((le) ) (((S) ) ((y) ((((times) ) ((O) )) (((S) ) ((O) )))))) ((((times) ) ((((exp) ) (n)) (a))) (n)))) ((((eq_plus_body_S) ((O) )) (\lambda y : ((nat) ) -> (nat) . (((le) ) ((y) ((((times) ) ((O) )) (((S) ) ((O) ))))) ((((times) ) ((((exp) ) (n)) (a))) (n)))) ((((((eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((plus_body) )) ((O) )) (\lambda y : ((nat) ) -> (nat) . (((le) ) ((y) ((((times) ) ((O) )) (((S) ) ((O) ))))) ((((times) ) ((((exp) ) (n)) (a))) (n)))) ((((eq_plus) (((S) ) ((O) ))) (\lambda y : ((nat) ) -> (nat) . (((le) ) ((y) ((((times) ) ((O) )) (((S) ) ((O) ))))) ((((times) ) ((((exp) ) (n)) (a))) (n)))) ((((eq_times_body_S) ((O) )) (\lambda y : ((nat) ) -> (nat) . (((le) ) ((y) (((S) ) ((O) )))) ((((times) ) ((((exp) ) (n)) (a))) (n)))) ((((((eq_filter_nat_type_S) (((nat) ) -> (nat) )) ((times_body) )) ((O) )) (\lambda y : ((nat) ) -> (nat) . (((le) ) ((y) (((S) ) ((O) )))) ((((times) ) ((((exp) ) (n)) (a))) (n)))) ((((eq_times) (((S) ) ((O) ))) (\lambda y : ((nat) ) -> (nat) . (((le) ) ((y) (((S) ) ((O) )))) ((((times) ) ((((exp) ) (n)) (a))) (n)))) (((((((le_times) (((S) ) ((O) ))) ((((exp) ) (n)) (a))) (((S) ) ((O) ))) (n)) ((Hind) (posn))) (posn)))))))))))))))))))) (m).
